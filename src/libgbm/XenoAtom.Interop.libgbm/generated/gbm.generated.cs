//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class libgbm
    {
        /// <summary>
        /// Format of the allocated buffer
        /// </summary>
        public enum gbm_bo_format : uint
        {
            /// <summary>
            /// RGB with 8 bits per channel in a 32 bit value
            /// </summary>
            GBM_BO_FORMAT_XRGB8888 = unchecked((uint)0),
            
            /// <summary>
            /// ARGB with 8 bits per channel in a 32 bit value
            /// </summary>
            GBM_BO_FORMAT_ARGB8888 = unchecked((uint)1),
        }
        
        /// <summary>
        /// RGB with 8 bits per channel in a 32 bit value
        /// </summary>
        public const libgbm.gbm_bo_format GBM_BO_FORMAT_XRGB8888 = gbm_bo_format.GBM_BO_FORMAT_XRGB8888;
        
        /// <summary>
        /// ARGB with 8 bits per channel in a 32 bit value
        /// </summary>
        public const libgbm.gbm_bo_format GBM_BO_FORMAT_ARGB8888 = gbm_bo_format.GBM_BO_FORMAT_ARGB8888;
        
        /// <summary>
        /// Flags to indicate the intended use for the buffer - these are passed into
        /// gbm_bo_create(). The caller must set the union of all the flags that are
        /// appropriate
        /// </summary>
        /// <seealso cref="and use flags are supportedUse gbm_device_is_format_supported() to check if the combination of format"/>
        [Flags]
        public enum gbm_bo_flags : uint
        {
            /// <summary>
            /// Buffer is going to be presented to the screen using an API such as KMS
            /// </summary>
            GBM_BO_USE_SCANOUT = unchecked((uint)1),
            
            /// <summary>
            /// Buffer is going to be used as cursor
            /// </summary>
            GBM_BO_USE_CURSOR = unchecked((uint)2),
            
            /// <summary>
            /// Deprecated
            /// </summary>
            GBM_BO_USE_CURSOR_64X64 = unchecked((uint)2),
            
            /// <summary>
            /// Buffer is to be used for rendering - for example it is going to be used
            /// as the storage for a color buffer
            /// </summary>
            GBM_BO_USE_RENDERING = unchecked((uint)4),
            
            /// <summary>
            /// Buffer can be used for gbm_bo_write.  This is guaranteed to work
            /// with GBM_BO_USE_CURSOR, but may not work for other combinations.
            /// </summary>
            GBM_BO_USE_WRITE = unchecked((uint)8),
            
            /// <summary>
            /// Buffer is linear, i.e. not tiled.
            /// </summary>
            GBM_BO_USE_LINEAR = unchecked((uint)16),
            
            /// <summary>
            /// Buffer is protected, i.e. encrypted and not readable by CPU or any
            /// other non-secure / non-trusted components nor by non-trusted OpenGL,
            /// OpenCL, and Vulkan applications.
            /// </summary>
            GBM_BO_USE_PROTECTED = unchecked((uint)32),
            
            /// <summary>
            /// The buffer will be used for front buffer rendering.  On some
            /// platforms this may (for example) disable framebuffer compression
            /// to avoid problems with compression flags data being out of sync
            /// with pixel data.
            /// </summary>
            GBM_BO_USE_FRONT_RENDERING = unchecked((uint)64),
            
            /// <summary>
            /// Allow the driver to select fixed-rate compression parameters.
            /// </summary>
            GBM_BO_FIXED_COMPRESSION_DEFAULT = unchecked((uint)128),
            
            /// <summary>
            /// Fixed-rate compression: at least 1bpc, less than 2bpc
            /// </summary>
            GBM_BO_FIXED_COMPRESSION_1BPC = unchecked((uint)256),
            
            /// <summary>
            /// Fixed-rate compression: at least 2bpc, less than 3bpc
            /// </summary>
            GBM_BO_FIXED_COMPRESSION_2BPC = unchecked((uint)384),
            
            /// <summary>
            /// Fixed-rate compression: at least 3bpc, less than 4bpc
            /// </summary>
            GBM_BO_FIXED_COMPRESSION_3BPC = unchecked((uint)512),
            
            /// <summary>
            /// Fixed-rate compression: at least 4bpc, less than 5bpc
            /// </summary>
            GBM_BO_FIXED_COMPRESSION_4BPC = unchecked((uint)640),
            
            /// <summary>
            /// Fixed-rate compression: at least 5bpc, less than 6bpc
            /// </summary>
            GBM_BO_FIXED_COMPRESSION_5BPC = unchecked((uint)768),
            
            /// <summary>
            /// Fixed-rate compression: at least 6bpc, less than 7bpc
            /// </summary>
            GBM_BO_FIXED_COMPRESSION_6BPC = unchecked((uint)896),
            
            /// <summary>
            /// Fixed-rate compression: at least 7bpc, less than 8bpc
            /// </summary>
            GBM_BO_FIXED_COMPRESSION_7BPC = unchecked((uint)1024),
            
            /// <summary>
            /// Fixed-rate compression: at least 8bpc, less than 9bpc
            /// </summary>
            GBM_BO_FIXED_COMPRESSION_8BPC = unchecked((uint)1152),
            
            /// <summary>
            /// Fixed-rate compression: at least 9bpc, less than 10bpc
            /// </summary>
            GBM_BO_FIXED_COMPRESSION_9BPC = unchecked((uint)1280),
            
            /// <summary>
            /// Fixed-rate compression: at least 10bpc, less than 11bpc
            /// </summary>
            GBM_BO_FIXED_COMPRESSION_10BPC = unchecked((uint)1408),
            
            /// <summary>
            /// Fixed-rate compression: at least 11bpc, less than 12bpc
            /// </summary>
            GBM_BO_FIXED_COMPRESSION_11BPC = unchecked((uint)1536),
            
            /// <summary>
            /// Fixed-rate compression: at least 12bpc, no maximum rate
            /// </summary>
            GBM_BO_FIXED_COMPRESSION_12BPC = unchecked((uint)1664),
        }
        
        /// <summary>
        /// Buffer is going to be presented to the screen using an API such as KMS
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_USE_SCANOUT = gbm_bo_flags.GBM_BO_USE_SCANOUT;
        
        /// <summary>
        /// Buffer is going to be used as cursor
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_USE_CURSOR = gbm_bo_flags.GBM_BO_USE_CURSOR;
        
        /// <summary>
        /// Deprecated
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_USE_CURSOR_64X64 = gbm_bo_flags.GBM_BO_USE_CURSOR_64X64;
        
        /// <summary>
        /// Buffer is to be used for rendering - for example it is going to be used
        /// as the storage for a color buffer
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_USE_RENDERING = gbm_bo_flags.GBM_BO_USE_RENDERING;
        
        /// <summary>
        /// Buffer can be used for gbm_bo_write.  This is guaranteed to work
        /// with GBM_BO_USE_CURSOR, but may not work for other combinations.
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_USE_WRITE = gbm_bo_flags.GBM_BO_USE_WRITE;
        
        /// <summary>
        /// Buffer is linear, i.e. not tiled.
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_USE_LINEAR = gbm_bo_flags.GBM_BO_USE_LINEAR;
        
        /// <summary>
        /// Buffer is protected, i.e. encrypted and not readable by CPU or any
        /// other non-secure / non-trusted components nor by non-trusted OpenGL,
        /// OpenCL, and Vulkan applications.
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_USE_PROTECTED = gbm_bo_flags.GBM_BO_USE_PROTECTED;
        
        /// <summary>
        /// The buffer will be used for front buffer rendering.  On some
        /// platforms this may (for example) disable framebuffer compression
        /// to avoid problems with compression flags data being out of sync
        /// with pixel data.
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_USE_FRONT_RENDERING = gbm_bo_flags.GBM_BO_USE_FRONT_RENDERING;
        
        /// <summary>
        /// Allow the driver to select fixed-rate compression parameters.
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_FIXED_COMPRESSION_DEFAULT = gbm_bo_flags.GBM_BO_FIXED_COMPRESSION_DEFAULT;
        
        /// <summary>
        /// Fixed-rate compression: at least 1bpc, less than 2bpc
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_FIXED_COMPRESSION_1BPC = gbm_bo_flags.GBM_BO_FIXED_COMPRESSION_1BPC;
        
        /// <summary>
        /// Fixed-rate compression: at least 2bpc, less than 3bpc
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_FIXED_COMPRESSION_2BPC = gbm_bo_flags.GBM_BO_FIXED_COMPRESSION_2BPC;
        
        /// <summary>
        /// Fixed-rate compression: at least 3bpc, less than 4bpc
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_FIXED_COMPRESSION_3BPC = gbm_bo_flags.GBM_BO_FIXED_COMPRESSION_3BPC;
        
        /// <summary>
        /// Fixed-rate compression: at least 4bpc, less than 5bpc
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_FIXED_COMPRESSION_4BPC = gbm_bo_flags.GBM_BO_FIXED_COMPRESSION_4BPC;
        
        /// <summary>
        /// Fixed-rate compression: at least 5bpc, less than 6bpc
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_FIXED_COMPRESSION_5BPC = gbm_bo_flags.GBM_BO_FIXED_COMPRESSION_5BPC;
        
        /// <summary>
        /// Fixed-rate compression: at least 6bpc, less than 7bpc
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_FIXED_COMPRESSION_6BPC = gbm_bo_flags.GBM_BO_FIXED_COMPRESSION_6BPC;
        
        /// <summary>
        /// Fixed-rate compression: at least 7bpc, less than 8bpc
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_FIXED_COMPRESSION_7BPC = gbm_bo_flags.GBM_BO_FIXED_COMPRESSION_7BPC;
        
        /// <summary>
        /// Fixed-rate compression: at least 8bpc, less than 9bpc
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_FIXED_COMPRESSION_8BPC = gbm_bo_flags.GBM_BO_FIXED_COMPRESSION_8BPC;
        
        /// <summary>
        /// Fixed-rate compression: at least 9bpc, less than 10bpc
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_FIXED_COMPRESSION_9BPC = gbm_bo_flags.GBM_BO_FIXED_COMPRESSION_9BPC;
        
        /// <summary>
        /// Fixed-rate compression: at least 10bpc, less than 11bpc
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_FIXED_COMPRESSION_10BPC = gbm_bo_flags.GBM_BO_FIXED_COMPRESSION_10BPC;
        
        /// <summary>
        /// Fixed-rate compression: at least 11bpc, less than 12bpc
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_FIXED_COMPRESSION_11BPC = gbm_bo_flags.GBM_BO_FIXED_COMPRESSION_11BPC;
        
        /// <summary>
        /// Fixed-rate compression: at least 12bpc, no maximum rate
        /// </summary>
        public const libgbm.gbm_bo_flags GBM_BO_FIXED_COMPRESSION_12BPC = gbm_bo_flags.GBM_BO_FIXED_COMPRESSION_12BPC;
        
        /// <summary>
        /// Flags to indicate the type of mapping for the buffer - these are
        /// passed into gbm_bo_map(). The caller must set the union of all the
        /// flags that are appropriate.
        /// </summary>
        /// <remarks>
        /// These flags are independent of the GBM_BO_USE_* creation flags. However,
        /// mapping the buffer may require copying to/from a staging buffer.See also: pipe_map_flags
        /// </remarks>
        [Flags]
        public enum gbm_bo_transfer_flags : uint
        {
            /// <summary>
            /// Buffer contents read back (or accessed directly) at transfer
            /// create time.
            /// </summary>
            GBM_BO_TRANSFER_READ = unchecked((uint)1),
            
            /// <summary>
            /// Buffer contents will be written back at unmap time
            /// (or modified as a result of being accessed directly).
            /// </summary>
            GBM_BO_TRANSFER_WRITE = unchecked((uint)2),
            
            /// <summary>
            /// Read/modify/write
            /// </summary>
            GBM_BO_TRANSFER_READ_WRITE = unchecked((uint)3),
        }
        
        /// <summary>
        /// Buffer contents read back (or accessed directly) at transfer
        /// create time.
        /// </summary>
        public const libgbm.gbm_bo_transfer_flags GBM_BO_TRANSFER_READ = gbm_bo_transfer_flags.GBM_BO_TRANSFER_READ;
        
        /// <summary>
        /// Buffer contents will be written back at unmap time
        /// (or modified as a result of being accessed directly).
        /// </summary>
        public const libgbm.gbm_bo_transfer_flags GBM_BO_TRANSFER_WRITE = gbm_bo_transfer_flags.GBM_BO_TRANSFER_WRITE;
        
        /// <summary>
        /// Read/modify/write
        /// </summary>
        public const libgbm.gbm_bo_transfer_flags GBM_BO_TRANSFER_READ_WRITE = gbm_bo_transfer_flags.GBM_BO_TRANSFER_READ_WRITE;
        
        /// <summary>
        /// Abstraction representing the handle to a buffer allocated by the
        /// manager
        /// </summary>
        [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
        public partial struct gbm_bo_handle
        {
            [FieldOffset(0)]
            public void* ptr;
            
            [FieldOffset(0)]
            public int s32;
            
            [FieldOffset(0)]
            public uint u32;
            
            [FieldOffset(0)]
            public long s64;
            
            [FieldOffset(0)]
            public ulong u64;
        }
        
        public unsafe partial struct gbm_format_name_desc
        {
            public fixed byte name[5];
        }
        
        public partial struct gbm_import_fd_data
        {
            public int fd;
            
            public uint width;
            
            public uint height;
            
            public uint stride;
            
            public uint format;
        }
        
        public unsafe partial struct gbm_import_fd_modifier_data
        {
            public uint width;
            
            public uint height;
            
            public uint format;
            
            public uint num_fds;
            
            public fixed int fds[4];
            
            public fixed int strides[4];
            
            public fixed int offsets[4];
            
            public ulong modifier;
        }
        
        /// <summary>
        /// format is big endian instead of little endian
        /// </summary>
        public const uint GBM_FORMAT_BIG_ENDIAN = 2147483648;
        
        /// <summary>
        /// [7:0] C
        /// </summary>
        public const uint GBM_FORMAT_C8 = 538982467;
        
        /// <summary>
        /// [7:0] R
        /// </summary>
        public const uint GBM_FORMAT_R8 = 538982482;
        
        /// <summary>
        /// [15:0] R little endian
        /// </summary>
        public const uint GBM_FORMAT_R16 = 540422482;
        
        /// <summary>
        /// [15:0] G:R 8:8 little endian
        /// </summary>
        public const uint GBM_FORMAT_GR88 = 943215175;
        
        /// <summary>
        /// [31:0] R:G 16:16 little endian
        /// </summary>
        public const uint GBM_FORMAT_RG1616 = 842221394;
        
        /// <summary>
        /// [31:0] G:R 16:16 little endian
        /// </summary>
        public const uint GBM_FORMAT_GR1616 = 842224199;
        
        /// <summary>
        /// [7:0] R:G:B 3:3:2
        /// </summary>
        public const uint GBM_FORMAT_RGB332 = 943867730;
        
        /// <summary>
        /// [7:0] B:G:R 2:3:3
        /// </summary>
        public const uint GBM_FORMAT_BGR233 = 944916290;
        
        /// <summary>
        /// [15:0] x:R:G:B 4:4:4:4 little endian
        /// </summary>
        public const uint GBM_FORMAT_XRGB4444 = 842093144;
        
        /// <summary>
        /// [15:0] x:B:G:R 4:4:4:4 little endian
        /// </summary>
        public const uint GBM_FORMAT_XBGR4444 = 842089048;
        
        /// <summary>
        /// [15:0] R:G:B:x 4:4:4:4 little endian
        /// </summary>
        public const uint GBM_FORMAT_RGBX4444 = 842094674;
        
        /// <summary>
        /// [15:0] B:G:R:x 4:4:4:4 little endian
        /// </summary>
        public const uint GBM_FORMAT_BGRX4444 = 842094658;
        
        /// <summary>
        /// [15:0] A:R:G:B 4:4:4:4 little endian
        /// </summary>
        public const uint GBM_FORMAT_ARGB4444 = 842093121;
        
        /// <summary>
        /// [15:0] A:B:G:R 4:4:4:4 little endian
        /// </summary>
        public const uint GBM_FORMAT_ABGR4444 = 842089025;
        
        /// <summary>
        /// [15:0] R:G:B:A 4:4:4:4 little endian
        /// </summary>
        public const uint GBM_FORMAT_RGBA4444 = 842088786;
        
        /// <summary>
        /// [15:0] B:G:R:A 4:4:4:4 little endian
        /// </summary>
        public const uint GBM_FORMAT_BGRA4444 = 842088770;
        
        /// <summary>
        /// [15:0] x:R:G:B 1:5:5:5 little endian
        /// </summary>
        public const uint GBM_FORMAT_XRGB1555 = 892424792;
        
        /// <summary>
        /// [15:0] x:B:G:R 1:5:5:5 little endian
        /// </summary>
        public const uint GBM_FORMAT_XBGR1555 = 892420696;
        
        /// <summary>
        /// [15:0] R:G:B:x 5:5:5:1 little endian
        /// </summary>
        public const uint GBM_FORMAT_RGBX5551 = 892426322;
        
        /// <summary>
        /// [15:0] B:G:R:x 5:5:5:1 little endian
        /// </summary>
        public const uint GBM_FORMAT_BGRX5551 = 892426306;
        
        /// <summary>
        /// [15:0] A:R:G:B 1:5:5:5 little endian
        /// </summary>
        public const uint GBM_FORMAT_ARGB1555 = 892424769;
        
        /// <summary>
        /// [15:0] A:B:G:R 1:5:5:5 little endian
        /// </summary>
        public const uint GBM_FORMAT_ABGR1555 = 892420673;
        
        /// <summary>
        /// [15:0] R:G:B:A 5:5:5:1 little endian
        /// </summary>
        public const uint GBM_FORMAT_RGBA5551 = 892420434;
        
        /// <summary>
        /// [15:0] B:G:R:A 5:5:5:1 little endian
        /// </summary>
        public const uint GBM_FORMAT_BGRA5551 = 892420418;
        
        /// <summary>
        /// [15:0] R:G:B 5:6:5 little endian
        /// </summary>
        public const uint GBM_FORMAT_RGB565 = 909199186;
        
        /// <summary>
        /// [15:0] B:G:R 5:6:5 little endian
        /// </summary>
        public const uint GBM_FORMAT_BGR565 = 909199170;
        
        /// <summary>
        /// [23:0] R:G:B little endian
        /// </summary>
        public const uint GBM_FORMAT_RGB888 = 875710290;
        
        /// <summary>
        /// [23:0] B:G:R little endian
        /// </summary>
        public const uint GBM_FORMAT_BGR888 = 875710274;
        
        /// <summary>
        /// [31:0] x:R:G:B 8:8:8:8 little endian
        /// </summary>
        public const uint GBM_FORMAT_XRGB8888 = 875713112;
        
        /// <summary>
        /// [31:0] x:B:G:R 8:8:8:8 little endian
        /// </summary>
        public const uint GBM_FORMAT_XBGR8888 = 875709016;
        
        /// <summary>
        /// [31:0] R:G:B:x 8:8:8:8 little endian
        /// </summary>
        public const uint GBM_FORMAT_RGBX8888 = 875714642;
        
        /// <summary>
        /// [31:0] B:G:R:x 8:8:8:8 little endian
        /// </summary>
        public const uint GBM_FORMAT_BGRX8888 = 875714626;
        
        /// <summary>
        /// [31:0] A:R:G:B 8:8:8:8 little endian
        /// </summary>
        public const uint GBM_FORMAT_ARGB8888 = 875713089;
        
        /// <summary>
        /// [31:0] A:B:G:R 8:8:8:8 little endian
        /// </summary>
        public const uint GBM_FORMAT_ABGR8888 = 875708993;
        
        /// <summary>
        /// [31:0] R:G:B:A 8:8:8:8 little endian
        /// </summary>
        public const uint GBM_FORMAT_RGBA8888 = 875708754;
        
        /// <summary>
        /// [31:0] B:G:R:A 8:8:8:8 little endian
        /// </summary>
        public const uint GBM_FORMAT_BGRA8888 = 875708738;
        
        /// <summary>
        /// [31:0] x:R:G:B 2:10:10:10 little endian
        /// </summary>
        public const uint GBM_FORMAT_XRGB2101010 = 808669784;
        
        /// <summary>
        /// [31:0] x:B:G:R 2:10:10:10 little endian
        /// </summary>
        public const uint GBM_FORMAT_XBGR2101010 = 808665688;
        
        /// <summary>
        /// [31:0] R:G:B:x 10:10:10:2 little endian
        /// </summary>
        public const uint GBM_FORMAT_RGBX1010102 = 808671314;
        
        /// <summary>
        /// [31:0] B:G:R:x 10:10:10:2 little endian
        /// </summary>
        public const uint GBM_FORMAT_BGRX1010102 = 808671298;
        
        /// <summary>
        /// [31:0] A:R:G:B 2:10:10:10 little endian
        /// </summary>
        public const uint GBM_FORMAT_ARGB2101010 = 808669761;
        
        /// <summary>
        /// [31:0] A:B:G:R 2:10:10:10 little endian
        /// </summary>
        public const uint GBM_FORMAT_ABGR2101010 = 808665665;
        
        /// <summary>
        /// [31:0] R:G:B:A 10:10:10:2 little endian
        /// </summary>
        public const uint GBM_FORMAT_RGBA1010102 = 808665426;
        
        /// <summary>
        /// [31:0] B:G:R:A 10:10:10:2 little endian
        /// </summary>
        public const uint GBM_FORMAT_BGRA1010102 = 808665410;
        
        /// <summary>
        /// [63:0] x:B:G:R 16:16:16:16 little endian
        /// </summary>
        public const uint GBM_FORMAT_XBGR16161616 = 942948952;
        
        /// <summary>
        /// [63:0] A:B:G:R 16:16:16:16 little endian
        /// </summary>
        public const uint GBM_FORMAT_ABGR16161616 = 942948929;
        
        /// <summary>
        /// [63:0] x:B:G:R 16:16:16:16 little endian
        /// </summary>
        public const uint GBM_FORMAT_XBGR16161616F = 1211384408;
        
        /// <summary>
        /// [63:0] A:B:G:R 16:16:16:16 little endian
        /// </summary>
        public const uint GBM_FORMAT_ABGR16161616F = 1211384385;
        
        /// <summary>
        /// [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little endian
        /// </summary>
        public const uint GBM_FORMAT_YUYV = 1448695129;
        
        /// <summary>
        /// [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little endian
        /// </summary>
        public const uint GBM_FORMAT_YVYU = 1431918169;
        
        /// <summary>
        /// [31:0] Y1:Cr0:Y0:Cb0 8:8:8:8 little endian
        /// </summary>
        public const uint GBM_FORMAT_UYVY = 1498831189;
        
        /// <summary>
        /// [31:0] Y1:Cb0:Y0:Cr0 8:8:8:8 little endian
        /// </summary>
        public const uint GBM_FORMAT_VYUY = 1498765654;
        
        /// <summary>
        /// [31:0] A:Y:Cb:Cr 8:8:8:8 little endian
        /// </summary>
        public const uint GBM_FORMAT_AYUV = 1448433985;
        
        /// <summary>
        /// 2x2 subsampled Cr:Cb plane
        /// </summary>
        public const uint GBM_FORMAT_NV12 = 842094158;
        
        /// <summary>
        /// 2x2 subsampled Cb:Cr plane
        /// </summary>
        public const uint GBM_FORMAT_NV21 = 825382478;
        
        /// <summary>
        /// 2x1 subsampled Cr:Cb plane
        /// </summary>
        public const uint GBM_FORMAT_NV16 = 909203022;
        
        /// <summary>
        /// 2x1 subsampled Cb:Cr plane
        /// </summary>
        public const uint GBM_FORMAT_NV61 = 825644622;
        
        /// <summary>
        /// 4x4 subsampled Cb (1) and Cr (2) planes
        /// </summary>
        public const uint GBM_FORMAT_YUV410 = 961959257;
        
        /// <summary>
        /// 4x4 subsampled Cr (1) and Cb (2) planes
        /// </summary>
        public const uint GBM_FORMAT_YVU410 = 961893977;
        
        /// <summary>
        /// 4x1 subsampled Cb (1) and Cr (2) planes
        /// </summary>
        public const uint GBM_FORMAT_YUV411 = 825316697;
        
        /// <summary>
        /// 4x1 subsampled Cr (1) and Cb (2) planes
        /// </summary>
        public const uint GBM_FORMAT_YVU411 = 825316953;
        
        /// <summary>
        /// 2x2 subsampled Cb (1) and Cr (2) planes
        /// </summary>
        public const uint GBM_FORMAT_YUV420 = 842093913;
        
        /// <summary>
        /// 2x2 subsampled Cr (1) and Cb (2) planes
        /// </summary>
        public const uint GBM_FORMAT_YVU420 = 842094169;
        
        /// <summary>
        /// 2x1 subsampled Cb (1) and Cr (2) planes
        /// </summary>
        public const uint GBM_FORMAT_YUV422 = 909202777;
        
        /// <summary>
        /// 2x1 subsampled Cr (1) and Cb (2) planes
        /// </summary>
        public const uint GBM_FORMAT_YVU422 = 909203033;
        
        /// <summary>
        /// non-subsampled Cb (1) and Cr (2) planes
        /// </summary>
        public const uint GBM_FORMAT_YUV444 = 875713881;
        
        /// <summary>
        /// non-subsampled Cr (1) and Cb (2) planes
        /// </summary>
        public const uint GBM_FORMAT_YVU444 = 875714137;
        
        public const uint GBM_BO_FIXED_COMPRESSION_MASK = 1920;
        
        public const uint GBM_BO_IMPORT_WL_BUFFER = 21761;
        
        public const uint GBM_BO_IMPORT_EGL_IMAGE = 21762;
        
        public const uint GBM_BO_IMPORT_FD = 21763;
        
        public const uint GBM_BO_IMPORT_FD_MODIFIER = 21764;
        
        public const int GBM_MAX_PLANES = 4;
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_device_get_fd")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int gbm_device_get_fd(libgbm.gbm_device gbm);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_device_get_backend_name")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* gbm_device_get_backend_name_(libgbm.gbm_device gbm);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_device_is_format_supported")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int gbm_device_is_format_supported(libgbm.gbm_device gbm, uint format, uint flags);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_device_get_format_modifier_plane_count")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int gbm_device_get_format_modifier_plane_count(libgbm.gbm_device gbm, uint format, ulong modifier);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_device_destroy")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void gbm_device_destroy(libgbm.gbm_device gbm);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_create_device")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgbm.gbm_device gbm_create_device(int fd);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_create")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgbm.gbm_bo gbm_bo_create(libgbm.gbm_device gbm, uint width, uint height, uint format, uint flags);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_create_with_modifiers")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgbm.gbm_bo gbm_bo_create_with_modifiers(libgbm.gbm_device gbm, uint width, uint height, uint format, ulong* modifiers, uint count);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_create_with_modifiers2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgbm.gbm_bo gbm_bo_create_with_modifiers2(libgbm.gbm_device gbm, uint width, uint height, uint format, ulong* modifiers, uint count, uint flags);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_import")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgbm.gbm_bo gbm_bo_import(libgbm.gbm_device gbm, uint type, void* buffer, uint flags);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_map")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void* gbm_bo_map(libgbm.gbm_bo bo, uint x, uint y, uint width, uint height, uint flags, uint* stride, void** map_data);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_unmap")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void gbm_bo_unmap(libgbm.gbm_bo bo, void* map_data);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_get_width")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint gbm_bo_get_width(libgbm.gbm_bo bo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_get_height")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint gbm_bo_get_height(libgbm.gbm_bo bo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_get_stride")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint gbm_bo_get_stride(libgbm.gbm_bo bo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_get_stride_for_plane")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint gbm_bo_get_stride_for_plane(libgbm.gbm_bo bo, int plane);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_get_format")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint gbm_bo_get_format(libgbm.gbm_bo bo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_get_bpp")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint gbm_bo_get_bpp(libgbm.gbm_bo bo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_get_offset")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint gbm_bo_get_offset(libgbm.gbm_bo bo, int plane);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_get_device")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgbm.gbm_device gbm_bo_get_device(libgbm.gbm_bo bo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_get_handle")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgbm.gbm_bo_handle gbm_bo_get_handle(libgbm.gbm_bo bo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_get_fd")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int gbm_bo_get_fd(libgbm.gbm_bo bo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_get_modifier")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial ulong gbm_bo_get_modifier(libgbm.gbm_bo bo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_get_plane_count")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int gbm_bo_get_plane_count(libgbm.gbm_bo bo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_get_handle_for_plane")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgbm.gbm_bo_handle gbm_bo_get_handle_for_plane(libgbm.gbm_bo bo, int plane);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_get_fd_for_plane")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int gbm_bo_get_fd_for_plane(libgbm.gbm_bo bo, int plane);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_write")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int gbm_bo_write(libgbm.gbm_bo bo, void* buf, nuint count);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_set_user_data")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void gbm_bo_set_user_data(libgbm.gbm_bo bo, void* data, delegate*unmanaged[Cdecl]<libgbm.gbm_bo, void*, void> destroy_user_data);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_get_user_data")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void* gbm_bo_get_user_data(libgbm.gbm_bo bo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_bo_destroy")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void gbm_bo_destroy(libgbm.gbm_bo bo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_surface_create")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgbm.gbm_surface gbm_surface_create(libgbm.gbm_device gbm, uint width, uint height, uint format, uint flags);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_surface_create_with_modifiers")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgbm.gbm_surface gbm_surface_create_with_modifiers(libgbm.gbm_device gbm, uint width, uint height, uint format, ulong* modifiers, uint count);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_surface_create_with_modifiers2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgbm.gbm_surface gbm_surface_create_with_modifiers2(libgbm.gbm_device gbm, uint width, uint height, uint format, ulong* modifiers, uint count, uint flags);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_surface_lock_front_buffer")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgbm.gbm_bo gbm_surface_lock_front_buffer(libgbm.gbm_surface surface);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_surface_release_buffer")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void gbm_surface_release_buffer(libgbm.gbm_surface surface, libgbm.gbm_bo bo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_surface_has_free_buffers")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int gbm_surface_has_free_buffers(libgbm.gbm_surface surface);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_surface_destroy")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void gbm_surface_destroy(libgbm.gbm_surface surface);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gbm_format_get_name")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* gbm_format_get_name_(uint gbm_format, libgbm.gbm_format_name_desc* desc);
    }
}
