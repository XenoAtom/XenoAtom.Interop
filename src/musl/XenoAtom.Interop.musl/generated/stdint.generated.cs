//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    public static unsafe partial class musl
    {
        public readonly partial struct int_fast8_t : IEquatable<int_fast8_t>
        {
            public int_fast8_t(sbyte value) => this.Value = value;
            
            public sbyte Value { get; }
            
            public override bool Equals(object obj) => obj is int_fast8_t other && Equals(other);
            
            public bool Equals(int_fast8_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator sbyte (musl.int_fast8_t from) => from.Value;
            
            public static implicit operator musl.int_fast8_t (sbyte from) => new musl.int_fast8_t(from);
            
            public static bool operator ==(int_fast8_t left, int_fast8_t right) => left.Equals(right);
            
            public static bool operator !=(int_fast8_t left, int_fast8_t right) => !left.Equals(right);
        }
        
        public readonly partial struct int_fast64_t : IEquatable<int_fast64_t>
        {
            public int_fast64_t(long value) => this.Value = value;
            
            public long Value { get; }
            
            public override bool Equals(object obj) => obj is int_fast64_t other && Equals(other);
            
            public bool Equals(int_fast64_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator long (musl.int_fast64_t from) => from.Value;
            
            public static implicit operator musl.int_fast64_t (long from) => new musl.int_fast64_t(from);
            
            public static bool operator ==(int_fast64_t left, int_fast64_t right) => left.Equals(right);
            
            public static bool operator !=(int_fast64_t left, int_fast64_t right) => !left.Equals(right);
        }
        
        public readonly partial struct int_least8_t : IEquatable<int_least8_t>
        {
            public int_least8_t(sbyte value) => this.Value = value;
            
            public sbyte Value { get; }
            
            public override bool Equals(object obj) => obj is int_least8_t other && Equals(other);
            
            public bool Equals(int_least8_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator sbyte (musl.int_least8_t from) => from.Value;
            
            public static implicit operator musl.int_least8_t (sbyte from) => new musl.int_least8_t(from);
            
            public static bool operator ==(int_least8_t left, int_least8_t right) => left.Equals(right);
            
            public static bool operator !=(int_least8_t left, int_least8_t right) => !left.Equals(right);
        }
        
        public readonly partial struct int_least16_t : IEquatable<int_least16_t>
        {
            public int_least16_t(short value) => this.Value = value;
            
            public short Value { get; }
            
            public override bool Equals(object obj) => obj is int_least16_t other && Equals(other);
            
            public bool Equals(int_least16_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator short (musl.int_least16_t from) => from.Value;
            
            public static implicit operator musl.int_least16_t (short from) => new musl.int_least16_t(from);
            
            public static bool operator ==(int_least16_t left, int_least16_t right) => left.Equals(right);
            
            public static bool operator !=(int_least16_t left, int_least16_t right) => !left.Equals(right);
        }
        
        public readonly partial struct int_least32_t : IEquatable<int_least32_t>
        {
            public int_least32_t(int value) => this.Value = value;
            
            public int Value { get; }
            
            public override bool Equals(object obj) => obj is int_least32_t other && Equals(other);
            
            public bool Equals(int_least32_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator int (musl.int_least32_t from) => from.Value;
            
            public static implicit operator musl.int_least32_t (int from) => new musl.int_least32_t(from);
            
            public static bool operator ==(int_least32_t left, int_least32_t right) => left.Equals(right);
            
            public static bool operator !=(int_least32_t left, int_least32_t right) => !left.Equals(right);
        }
        
        public readonly partial struct int_least64_t : IEquatable<int_least64_t>
        {
            public int_least64_t(long value) => this.Value = value;
            
            public long Value { get; }
            
            public override bool Equals(object obj) => obj is int_least64_t other && Equals(other);
            
            public bool Equals(int_least64_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator long (musl.int_least64_t from) => from.Value;
            
            public static implicit operator musl.int_least64_t (long from) => new musl.int_least64_t(from);
            
            public static bool operator ==(int_least64_t left, int_least64_t right) => left.Equals(right);
            
            public static bool operator !=(int_least64_t left, int_least64_t right) => !left.Equals(right);
        }
        
        public readonly partial struct uint_fast8_t : IEquatable<uint_fast8_t>
        {
            public uint_fast8_t(byte value) => this.Value = value;
            
            public byte Value { get; }
            
            public override bool Equals(object obj) => obj is uint_fast8_t other && Equals(other);
            
            public bool Equals(uint_fast8_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator byte (musl.uint_fast8_t from) => from.Value;
            
            public static implicit operator musl.uint_fast8_t (byte from) => new musl.uint_fast8_t(from);
            
            public static bool operator ==(uint_fast8_t left, uint_fast8_t right) => left.Equals(right);
            
            public static bool operator !=(uint_fast8_t left, uint_fast8_t right) => !left.Equals(right);
        }
        
        public readonly partial struct uint_fast64_t : IEquatable<uint_fast64_t>
        {
            public uint_fast64_t(ulong value) => this.Value = value;
            
            public ulong Value { get; }
            
            public override bool Equals(object obj) => obj is uint_fast64_t other && Equals(other);
            
            public bool Equals(uint_fast64_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ulong (musl.uint_fast64_t from) => from.Value;
            
            public static implicit operator musl.uint_fast64_t (ulong from) => new musl.uint_fast64_t(from);
            
            public static bool operator ==(uint_fast64_t left, uint_fast64_t right) => left.Equals(right);
            
            public static bool operator !=(uint_fast64_t left, uint_fast64_t right) => !left.Equals(right);
        }
        
        public readonly partial struct uint_least8_t : IEquatable<uint_least8_t>
        {
            public uint_least8_t(byte value) => this.Value = value;
            
            public byte Value { get; }
            
            public override bool Equals(object obj) => obj is uint_least8_t other && Equals(other);
            
            public bool Equals(uint_least8_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator byte (musl.uint_least8_t from) => from.Value;
            
            public static implicit operator musl.uint_least8_t (byte from) => new musl.uint_least8_t(from);
            
            public static bool operator ==(uint_least8_t left, uint_least8_t right) => left.Equals(right);
            
            public static bool operator !=(uint_least8_t left, uint_least8_t right) => !left.Equals(right);
        }
        
        public readonly partial struct uint_least16_t : IEquatable<uint_least16_t>
        {
            public uint_least16_t(ushort value) => this.Value = value;
            
            public ushort Value { get; }
            
            public override bool Equals(object obj) => obj is uint_least16_t other && Equals(other);
            
            public bool Equals(uint_least16_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ushort (musl.uint_least16_t from) => from.Value;
            
            public static implicit operator musl.uint_least16_t (ushort from) => new musl.uint_least16_t(from);
            
            public static bool operator ==(uint_least16_t left, uint_least16_t right) => left.Equals(right);
            
            public static bool operator !=(uint_least16_t left, uint_least16_t right) => !left.Equals(right);
        }
        
        public readonly partial struct uint_least32_t : IEquatable<uint_least32_t>
        {
            public uint_least32_t(uint value) => this.Value = value;
            
            public uint Value { get; }
            
            public override bool Equals(object obj) => obj is uint_least32_t other && Equals(other);
            
            public bool Equals(uint_least32_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator uint (musl.uint_least32_t from) => from.Value;
            
            public static implicit operator musl.uint_least32_t (uint from) => new musl.uint_least32_t(from);
            
            public static bool operator ==(uint_least32_t left, uint_least32_t right) => left.Equals(right);
            
            public static bool operator !=(uint_least32_t left, uint_least32_t right) => !left.Equals(right);
        }
        
        public readonly partial struct uint_least64_t : IEquatable<uint_least64_t>
        {
            public uint_least64_t(ulong value) => this.Value = value;
            
            public ulong Value { get; }
            
            public override bool Equals(object obj) => obj is uint_least64_t other && Equals(other);
            
            public bool Equals(uint_least64_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ulong (musl.uint_least64_t from) => from.Value;
            
            public static implicit operator musl.uint_least64_t (ulong from) => new musl.uint_least64_t(from);
            
            public static bool operator ==(uint_least64_t left, uint_least64_t right) => left.Equals(right);
            
            public static bool operator !=(uint_least64_t left, uint_least64_t right) => !left.Equals(right);
        }
    }
}
