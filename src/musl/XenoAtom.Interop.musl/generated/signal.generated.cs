//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class musl
    {
        public partial struct sigevent
        {
            [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
            public unsafe partial struct sigevent__union_0
            {
                public partial struct sigevent___sev_thread
                {
                    public delegate*unmanaged[Cdecl]<musl.sigval, void> sigev_notify_function;
                    
                    public musl.pthread_attr_t* sigev_notify_attributes;
                }
                
                [FieldOffset(0)]
                public fixed byte __pad[48];
                
                [FieldOffset(0)]
                public musl.pid_t sigev_notify_thread_id;
                
                [FieldOffset(0)]
                public musl.sigevent.sigevent__union_0.sigevent___sev_thread __sev_thread;
            }
            
            public musl.sigval sigev_value;
            
            public int sigev_signo;
            
            public int sigev_notify;
            
            public musl.sigevent.sigevent__union_0 __sev_fields;
        }
        
        [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
        public partial struct sigval
        {
            [FieldOffset(0)]
            public int sival_int;
            
            [FieldOffset(0)]
            public void* sival_ptr;
        }
        
        public readonly partial struct stack_t : IEquatable<musl.stack_t>
        {
            public stack_t(musl.sigaltstack_t value) => this.Value = value;
            
            public musl.sigaltstack_t Value { get; }
            
            public override bool Equals(object obj) => obj is stack_t other && Equals(other);
            
            public bool Equals(stack_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator musl.sigaltstack_t (musl.stack_t from) => from.Value;
            
            public static implicit operator musl.stack_t (musl.sigaltstack_t from) => new musl.stack_t(from);
            
            public static bool operator ==(stack_t left, stack_t right) => left.Equals(right);
            
            public static bool operator !=(stack_t left, stack_t right) => !left.Equals(right);
        }
        
        public partial struct siginfo_t
        {
            [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
            public unsafe partial struct siginfo_t__union_0
            {
                public partial struct siginfo_t___si_common
                {
                    [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
                    public partial struct siginfo_t__union_0___first
                    {
                        public partial struct siginfo_t___si_common___piduid
                        {
                            public musl.pid_t si_pid;
                            
                            public musl.uid_t si_uid;
                        }
                        
                        public partial struct siginfo_t___si_common___timer
                        {
                            public int si_timerid;
                            
                            public int si_overrun;
                        }
                        
                        [FieldOffset(0)]
                        public musl.siginfo_t.siginfo_t__union_0.siginfo_t___si_common.siginfo_t__union_0___first.siginfo_t___si_common___piduid __piduid;
                        
                        [FieldOffset(0)]
                        public musl.siginfo_t.siginfo_t__union_0.siginfo_t___si_common.siginfo_t__union_0___first.siginfo_t___si_common___timer __timer;
                    }
                    
                    [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
                    public partial struct siginfo_t__union_0___second
                    {
                        public partial struct siginfo_t___si_common___sigchld
                        {
                            public int si_status;
                            
                            public musl.clock_t si_utime;
                            
                            public musl.clock_t si_stime;
                        }
                        
                        [FieldOffset(0)]
                        public musl.sigval si_value;
                        
                        [FieldOffset(0)]
                        public musl.siginfo_t.siginfo_t__union_0.siginfo_t___si_common.siginfo_t__union_0___second.siginfo_t___si_common___sigchld __sigchld;
                    }
                    
                    public musl.siginfo_t.siginfo_t__union_0.siginfo_t___si_common.siginfo_t__union_0___first __first;
                    
                    public musl.siginfo_t.siginfo_t__union_0.siginfo_t___si_common.siginfo_t__union_0___second __second;
                }
                
                public partial struct siginfo_t___sigfault
                {
                    [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
                    public partial struct siginfo_t__union_0___first
                    {
                        public partial struct siginfo_t___sigfault___addr_bnd
                        {
                            public void* si_lower;
                            
                            public void* si_upper;
                        }
                        
                        [FieldOffset(0)]
                        public musl.siginfo_t.siginfo_t__union_0.siginfo_t___sigfault.siginfo_t__union_0___first.siginfo_t___sigfault___addr_bnd __addr_bnd;
                        
                        [FieldOffset(0)]
                        public uint si_pkey;
                    }
                    
                    public void* si_addr;
                    
                    public short si_addr_lsb;
                    
                    public musl.siginfo_t.siginfo_t__union_0.siginfo_t___sigfault.siginfo_t__union_0___first __first;
                }
                
                public partial struct siginfo_t___sigpoll
                {
                    public nint si_band;
                    
                    public int si_fd;
                }
                
                public partial struct siginfo_t___sigsys
                {
                    public void* si_call_addr;
                    
                    public int si_syscall;
                    
                    public uint si_arch;
                }
                
                [FieldOffset(0)]
                public fixed byte __pad[112];
                
                [FieldOffset(0)]
                public musl.siginfo_t.siginfo_t__union_0.siginfo_t___si_common __si_common;
                
                [FieldOffset(0)]
                public musl.siginfo_t.siginfo_t__union_0.siginfo_t___sigfault __sigfault;
                
                [FieldOffset(0)]
                public musl.siginfo_t.siginfo_t__union_0.siginfo_t___sigpoll __sigpoll;
                
                [FieldOffset(0)]
                public musl.siginfo_t.siginfo_t__union_0.siginfo_t___sigsys __sigsys;
            }
            
            public int si_signo;
            
            public int si_errno;
            
            public int si_code;
            
            public musl.siginfo_t.siginfo_t__union_0 __si_fields;
        }
        
        public partial struct sigaction_t
        {
            [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
            public partial struct sigaction_t__union_0
            {
                [FieldOffset(0)]
                public delegate*unmanaged[Cdecl]<int, void> sa_handler;
                
                [FieldOffset(0)]
                public delegate*unmanaged[Cdecl]<int, musl.siginfo_t*, void*, void> sa_sigaction;
            }
            
            public musl.sigaction_t.sigaction_t__union_0 __sa_handler;
            
            public musl.sigset_t sa_mask;
            
            public int sa_flags;
            
            public delegate*unmanaged[Cdecl]<void> sa_restorer;
        }
        
        public readonly partial struct sig_t : IEquatable<musl.sig_t>
        {
            public sig_t(delegate*unmanaged[Cdecl]<int, void> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<int, void> Value { get; }
            
            public override bool Equals(object obj) => obj is sig_t other && Equals(other);
            
            public bool Equals(sig_t other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<int, void> (musl.sig_t from) => from.Value;
            
            public static implicit operator musl.sig_t (delegate*unmanaged[Cdecl]<int, void> from) => new musl.sig_t(from);
            
            public static bool operator ==(sig_t left, sig_t right) => left.Equals(right);
            
            public static bool operator !=(sig_t left, sig_t right) => !left.Equals(right);
        }
        
        /// <summary>
        /// GNU.
        /// POSIX.1 uses the same type but without a
        /// typedef .
        /// </summary>
        public readonly partial struct sighandler_t : IEquatable<musl.sighandler_t>
        {
            public sighandler_t(delegate*unmanaged[Cdecl]<int, void> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<int, void> Value { get; }
            
            public override bool Equals(object obj) => obj is sighandler_t other && Equals(other);
            
            public bool Equals(sighandler_t other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<int, void> (musl.sighandler_t from) => from.Value;
            
            public static implicit operator musl.sighandler_t (delegate*unmanaged[Cdecl]<int, void> from) => new musl.sighandler_t(from);
            
            public static bool operator ==(sighandler_t left, sighandler_t right) => left.Equals(right);
            
            public static bool operator !=(sighandler_t left, sighandler_t right) => !left.Equals(right);
        }
        
        public readonly partial struct sig_atomic_t : IEquatable<musl.sig_atomic_t>
        {
            public sig_atomic_t(int value) => this.Value = value;
            
            public int Value { get; }
            
            public override bool Equals(object obj) => obj is sig_atomic_t other && Equals(other);
            
            public bool Equals(sig_atomic_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator int (musl.sig_atomic_t from) => from.Value;
            
            public static implicit operator musl.sig_atomic_t (int from) => new musl.sig_atomic_t(from);
            
            public static bool operator ==(sig_atomic_t left, sig_atomic_t right) => left.Equals(right);
            
            public static bool operator !=(sig_atomic_t left, sig_atomic_t right) => !left.Equals(right);
        }
        
        public const int POLL_IN = 1;
        
        public const int POLL_OUT = 2;
        
        public const int POLL_MSG = 3;
        
        public const int POLL_ERR = 4;
        
        public const int POLL_PRI = 5;
        
        public const int POLL_HUP = 6;
        
        public const int SYS_SECCOMP = 1;
        
        public const int SYS_USER_DISPATCH = 2;
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "__libc_current_sigrtmin")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int __libc_current_sigrtmin();
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "__libc_current_sigrtmax")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int __libc_current_sigrtmax();
        
        /// <summary>
        /// Send signal to a process
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kill")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kill(musl.pid_t pid, int sig);
        
        /// <summary>
        /// POSIX
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigemptyset")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigemptyset(ref musl.sigset_t set);
        
        /// <summary>
        /// POSIX
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigfillset")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigfillset(ref musl.sigset_t set);
        
        /// <summary>
        /// POSIX
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigaddset")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigaddset(ref musl.sigset_t set, int signum);
        
        /// <summary>
        /// POSIX
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigdelset")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigdelset(ref musl.sigset_t set, int signum);
        
        /// <summary>
        /// POSIX
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigismember")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigismember(ref musl.sigset_t set, int signum);
        
        /// <summary>
        /// Examine and change blocked signals
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigprocmask")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigprocmask(int how, ref musl.sigset_t set, ref musl.sigset_t oldset);
        
        /// <summary>
        /// Wait for a signal
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigsuspend")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigsuspend(ref musl.sigset_t mask);
        
        /// <summary>
        /// Examine and change a signal action
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigaction")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigaction(int signum, in musl.sigaction_t act, ref musl.sigaction_t oldact);
        
        /// <summary>
        /// Examine pending signals
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigpending")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigpending(ref musl.sigset_t set);
        
        /// <summary>
        /// Wait for a signal
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigwait")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigwait(ref musl.sigset_t set, ref int sig);
        
        /// <summary>
        /// Synchronously wait
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigwaitinfo")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigwaitinfo(ref musl.sigset_t set, ref musl.siginfo_t info);
        
        /// <summary>
        /// Synchronously wait
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigtimedwait")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigtimedwait(ref musl.sigset_t set, ref musl.siginfo_t info, in musl.timespec timeout);
        
        /// <summary>
        /// Queue a signal and data to a process
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigqueue")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigqueue(musl.pid_t pid, int sig, musl.sigval value);
        
        /// <summary>
        /// Examine and change mask of blocked signals
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "pthread_sigmask")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int pthread_sigmask(int how, ref musl.sigset_t set, ref musl.sigset_t oldset);
        
        /// <summary>
        /// Send a signal to a thread
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "pthread_kill")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int pthread_kill(musl.pthread_t thread, int sig);
        
        /// <summary>
        /// Print signal description
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "psiginfo")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void psiginfo(in musl.siginfo_t pinfo, byte* s);
        
        /// <summary>
        /// Print signal description
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "psiginfo")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void psiginfo(in musl.siginfo_t pinfo, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> s);
        
        /// <summary>
        /// Print signal description
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "psignal")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void psignal(int sig, byte* s);
        
        /// <summary>
        /// Print signal description
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "psignal")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void psignal(int sig, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> s);
        
        /// <summary>
        /// Send signal to a process group
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "killpg")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int killpg(musl.pid_t pgrp, int sig);
        
        /// <summary>
        /// Set and/or get signal stack context
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigaltstack")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigaltstack(ref musl.stack_t ss, ref musl.stack_t old_ss);
        
        /// <summary>
        /// System V signal API
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sighold")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sighold(int sig);
        
        /// <summary>
        /// System V signal API
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigignore")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigignore(int sig);
        
        /// <summary>
        /// Allow signals to interrupt system calls
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "siginterrupt")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int siginterrupt(int sig, int flag);
        
        /// <summary>
        /// Atomically release blocked signals and wait for interrupt
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigpause")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigpause(int arg0);
        
        /// <summary>
        /// System V signal API
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigrelse")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigrelse(int sig);
        
        /// <summary>
        /// System V signal API
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigset")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial delegate*unmanaged[Cdecl]<int, int, delegate*unmanaged[Cdecl]<int, void>, void> sigset(int arg0, int arg1, delegate*unmanaged[Cdecl]<int, void> arg2);
        
        /// <summary>
        /// Signal handling with BSD semantics
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "bsd_signal")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial delegate*unmanaged[Cdecl]<int, int, delegate*unmanaged[Cdecl]<int, void>, void> bsd_signal(int arg0, int arg1, delegate*unmanaged[Cdecl]<int, void> arg2);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigisemptyset")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigisemptyset(ref musl.sigset_t arg0);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigorset")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigorset(ref musl.sigset_t arg0, ref musl.sigset_t arg1, ref musl.sigset_t arg2);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sigandset")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sigandset(ref musl.sigset_t arg0, ref musl.sigset_t arg1, ref musl.sigset_t arg2);
        
        /// <summary>
        /// ANSI C signal handling
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "signal")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial delegate*unmanaged[Cdecl]<int, int, delegate*unmanaged[Cdecl]<int, void>, void> signal(int arg0, int arg1, delegate*unmanaged[Cdecl]<int, void> arg2);
        
        /// <summary>
        /// Send a signal to the caller
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "raise")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int raise(int sig);
    }
}
