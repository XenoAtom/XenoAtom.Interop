//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    public static unsafe partial class musl
    {
        public static unsafe partial class aarch64
        {
            public const int ELF_NREG = 34;
            
            public readonly partial struct elf_fpregset_t : IEquatable<elf_fpregset_t>
            {
                public elf_fpregset_t(musl.aarch64.user_fpsimd_struct value) => this.Value = value;
                
                public musl.aarch64.user_fpsimd_struct Value { get; }
                
                public override bool Equals(object obj) => obj is elf_fpregset_t other && Equals(other);
                
                public bool Equals(elf_fpregset_t other) => Value.Equals(other.Value);
                
                public override int GetHashCode() => Value.GetHashCode();
                
                public override string ToString() => Value.ToString();
                
                public static implicit operator musl.aarch64.user_fpsimd_struct (musl.aarch64.elf_fpregset_t from) => from.Value;
                
                public static implicit operator musl.aarch64.elf_fpregset_t (musl.aarch64.user_fpsimd_struct from) => new musl.aarch64.elf_fpregset_t(from);
                
                public static bool operator ==(elf_fpregset_t left, elf_fpregset_t right) => left.Equals(right);
                
                public static bool operator !=(elf_fpregset_t left, elf_fpregset_t right) => !left.Equals(right);
            }
            
            public readonly partial struct elf_greg_t : IEquatable<elf_greg_t>
            {
                public elf_greg_t(nuint value) => this.Value = value;
                
                public nuint Value { get; }
                
                public override bool Equals(object obj) => obj is elf_greg_t other && Equals(other);
                
                public bool Equals(elf_greg_t other) => Value.Equals(other.Value);
                
                public override int GetHashCode() => Value.GetHashCode();
                
                public override string ToString() => Value.ToString();
                
                public static implicit operator nuint (musl.aarch64.elf_greg_t from) => from.Value;
                
                public static implicit operator musl.aarch64.elf_greg_t (nuint from) => new musl.aarch64.elf_greg_t(from);
                
                public static bool operator ==(elf_greg_t left, elf_greg_t right) => left.Equals(right);
                
                public static bool operator !=(elf_greg_t left, elf_greg_t right) => !left.Equals(right);
            }
            
            public readonly partial struct elf_gregset_t : IEquatable<elf_gregset_t>
            {
                public elf_gregset_t(FixedArray34<nuint> value) => this.Value = value;
                
                public FixedArray34<nuint> Value { get; }
                
                public override bool Equals(object obj) => obj is elf_gregset_t other && Equals(other);
                
                public bool Equals(elf_gregset_t other) => Value.Equals(other.Value);
                
                public override int GetHashCode() => Value.GetHashCode();
                
                public override string ToString() => Value.ToString();
                
                public static implicit operator FixedArray34<nuint> (musl.aarch64.elf_gregset_t from) => from.Value;
                
                public static implicit operator musl.aarch64.elf_gregset_t (FixedArray34<nuint> from) => new musl.aarch64.elf_gregset_t(from);
                
                public static bool operator ==(elf_gregset_t left, elf_gregset_t right) => left.Equals(right);
                
                public static bool operator !=(elf_gregset_t left, elf_gregset_t right) => !left.Equals(right);
            }
            
            public partial struct user_fpsimd_struct
            {
                public FixedArray32<global::System.UInt128> vregs;
                
                public uint fpsr;
                
                public uint fpcr;
            }
            
            public unsafe partial struct user_regs_struct
            {
                public fixed ulong regs[31];
                
                public ulong sp;
                
                public ulong pc;
                
                public ulong pstate;
            }
        }
    }
}
