//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    public static unsafe partial class musl
    {
        public unsafe partial struct termios
        {
            public musl.tcflag_t c_iflag;
            
            public musl.tcflag_t c_oflag;
            
            public musl.tcflag_t c_cflag;
            
            public musl.tcflag_t c_lflag;
            
            public musl.cc_t c_line;
            
            public fixed byte c_cc[32];
            
            public musl.speed_t __c_ispeed;
            
            public musl.speed_t __c_ospeed;
        }
        
        /// <summary>
        /// Echo input characters.
        /// </summary>
        public const int ECHO = 8;
        
        /// <summary>
        /// If \fBICANON\fP is also set, the ERASE character erases the preceding
        /// input character, and WERASE erases the preceding word.
        /// </summary>
        public const int ECHOE = 16;
        
        /// <summary>
        /// If \fBICANON\fP is also set, the KILL character erases the current line.
        /// </summary>
        public const int ECHOK = 32;
        
        /// <summary>
        /// If \fBICANON\fP is also set, echo the NL character even if ECHO is not set.
        /// </summary>
        public const int ECHONL = 64;
        
        /// <summary>
        /// suspends output.
        /// </summary>
        public const int TCOOFF = 0;
        
        /// <summary>
        /// restarts suspended output.
        /// </summary>
        public const int TCOON = 1;
        
        /// <summary>
        /// transmits a STOP character, which stops the terminal device from
        /// transmitting data to the system.
        /// </summary>
        public const int TCIOFF = 2;
        
        /// <summary>
        /// transmits a START character, which starts the terminal device
        /// transmitting data to the system.
        /// 
        /// The default on open of a terminal file is that neither its input nor its
        /// output is suspended.
        /// </summary>
        public const int TCION = 3;
        
        /// <summary>
        /// flushes data received but not read.
        /// </summary>
        public const int TCIFLUSH = 0;
        
        /// <summary>
        /// flushes data written but not transmitted.
        /// </summary>
        public const int TCOFLUSH = 1;
        
        /// <summary>
        /// flushes both data received but not read, and data written but not
        /// transmitted.
        /// 
        /// tcflow ()
        /// suspends transmission or reception of data on the object referred to by
        /// fd ,
        /// depending on the value of
        /// action :
        /// </summary>
        public const int TCIOFLUSH = 2;
        
        /// <summary>
        /// the change occurs immediately.
        /// </summary>
        public const int TCSANOW = 0;
        
        /// <summary>
        /// the change occurs after all output written to
        /// fd
        /// has been transmitted.
        /// This option should be used when changing
        /// parameters that affect output.
        /// </summary>
        public const int TCSADRAIN = 1;
        
        /// <summary>
        /// the change occurs after all output written to the object referred by
        /// fd
        /// has been transmitted, and all input that has been received but not read
        /// will be discarded before the change is made.
        /// </summary>
        public const int TCSAFLUSH = 2;
        
        public const int EXTA = 14;
        
        public const int EXTB = 15;
        
        /// <summary>
        /// (not in POSIX) If \fBECHO\fP is also set,
        /// terminal special characters other than
        /// TAB, NL, START, and STOP are echoed as \fB\[ha]X\fP,
        /// where X is the character with
        /// ASCII code 0x40 greater than the special character.
        /// For example, character
        /// 0x08 (BS) is echoed as \fB\[ha]H\fP.
        /// [requires
        /// _BSD_SOURCE
        /// or
        /// _SVID_SOURCE ]
        /// </summary>
        public const int ECHOCTL = 512;
        
        /// <summary>
        /// (not in POSIX) If \fBICANON\fP and \fBECHO\fP are also set, characters
        /// are printed as they are being erased.
        /// [requires
        /// _BSD_SOURCE
        /// or
        /// _SVID_SOURCE ]
        /// </summary>
        public const int ECHOPRT = 1024;
        
        /// <summary>
        /// (not in POSIX) If \fBICANON\fP is also set, KILL is echoed by erasing
        /// each character on the line, as specified by \fBECHOE\fP and \fBECHOPRT\fP.
        /// [requires
        /// _BSD_SOURCE
        /// or
        /// _SVID_SOURCE ]
        /// </summary>
        public const int ECHOKE = 2048;
        
        /// <summary>
        /// (not in POSIX; not supported under Linux)
        /// Output is being flushed.
        /// This flag is toggled by typing
        /// the DISCARD character.
        /// [requires
        /// _BSD_SOURCE
        /// or
        /// _SVID_SOURCE ]
        /// </summary>
        public const int FLUSHO = 4096;
        
        public const int EXTPROC = 65536;
    }
}
