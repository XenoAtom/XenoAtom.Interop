//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    public static unsafe partial class musl
    {
        public static unsafe partial class aarch64
        {
            public readonly partial struct blksize_t : IEquatable<musl.aarch64.blksize_t>
            {
                public blksize_t(int value) => this.Value = value;
                
                public int Value { get; }
                
                public override bool Equals(object obj) => obj is blksize_t other && Equals(other);
                
                public bool Equals(blksize_t other) => Value.Equals(other.Value);
                
                public override int GetHashCode() => Value.GetHashCode();
                
                public override string ToString() => Value.ToString();
                
                public static implicit operator int (musl.aarch64.blksize_t from) => from.Value;
                
                public static implicit operator musl.aarch64.blksize_t (int from) => new musl.aarch64.blksize_t(from);
                
                public static bool operator ==(blksize_t left, blksize_t right) => left.Equals(right);
                
                public static bool operator !=(blksize_t left, blksize_t right) => !left.Equals(right);
            }
            
            public readonly partial struct nlink_t : IEquatable<musl.aarch64.nlink_t>
            {
                public nlink_t(uint value) => this.Value = value;
                
                public uint Value { get; }
                
                public override bool Equals(object obj) => obj is nlink_t other && Equals(other);
                
                public bool Equals(nlink_t other) => Value.Equals(other.Value);
                
                public override int GetHashCode() => Value.GetHashCode();
                
                public override string ToString() => Value.ToString();
                
                public static implicit operator uint (musl.aarch64.nlink_t from) => from.Value;
                
                public static implicit operator musl.aarch64.nlink_t (uint from) => new musl.aarch64.nlink_t(from);
                
                public static bool operator ==(nlink_t left, nlink_t right) => left.Equals(right);
                
                public static bool operator !=(nlink_t left, nlink_t right) => !left.Equals(right);
            }
        }
    }
}
