//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class musl
    {
        public readonly partial struct tcflag_t : IEquatable<tcflag_t>
        {
            public tcflag_t(uint value) => this.Value = value;
            
            public uint Value { get; }
            
            public override bool Equals(object obj) => obj is tcflag_t other && Equals(other);
            
            public bool Equals(tcflag_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator uint (musl.tcflag_t from) => from.Value;
            
            public static implicit operator musl.tcflag_t (uint from) => new musl.tcflag_t(from);
            
            public static bool operator ==(tcflag_t left, tcflag_t right) => left.Equals(right);
            
            public static bool operator !=(tcflag_t left, tcflag_t right) => !left.Equals(right);
        }
        
        public readonly partial struct cc_t : IEquatable<cc_t>
        {
            public cc_t(byte value) => this.Value = value;
            
            public byte Value { get; }
            
            public override bool Equals(object obj) => obj is cc_t other && Equals(other);
            
            public bool Equals(cc_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator byte (musl.cc_t from) => from.Value;
            
            public static implicit operator musl.cc_t (byte from) => new musl.cc_t(from);
            
            public static bool operator ==(cc_t left, cc_t right) => left.Equals(right);
            
            public static bool operator !=(cc_t left, cc_t right) => !left.Equals(right);
        }
        
        public readonly partial struct speed_t : IEquatable<speed_t>
        {
            public speed_t(uint value) => this.Value = value;
            
            public uint Value { get; }
            
            public override bool Equals(object obj) => obj is speed_t other && Equals(other);
            
            public bool Equals(speed_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator uint (musl.speed_t from) => from.Value;
            
            public static implicit operator musl.speed_t (uint from) => new musl.speed_t(from);
            
            public static bool operator ==(speed_t left, speed_t right) => left.Equals(right);
            
            public static bool operator !=(speed_t left, speed_t right) => !left.Equals(right);
        }
        
        public const int NCCS = 32;
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "cfgetospeed")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.speed_t cfgetospeed(in musl.termios termios_p);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "cfgetispeed")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.speed_t cfgetispeed(in musl.termios termios_p);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "cfsetospeed")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int cfsetospeed(ref musl.termios termios_p, musl.speed_t speed);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "cfsetispeed")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int cfsetispeed(ref musl.termios termios_p, musl.speed_t speed);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "tcgetattr")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int tcgetattr(int fd, ref musl.termios termios_p);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "tcsetattr")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int tcsetattr(int fd, int optional_actions, in musl.termios termios_p);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "tcgetwinsize")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int tcgetwinsize(int arg0, ref musl.winsize arg1);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "tcsetwinsize")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int tcsetwinsize(int arg0, in musl.winsize arg1);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "tcsendbreak")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int tcsendbreak(int fd, int duration);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "tcdrain")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int tcdrain(int fd);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "tcflush")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int tcflush(int fd, int queue_selector);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "tcflow")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int tcflow(int fd, int action);
        
        /// <summary>
        /// Get session ID
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "tcgetsid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.pid_t tcgetsid(int fd);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "cfmakeraw")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void cfmakeraw(ref musl.termios termios_p);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "cfsetspeed")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int cfsetspeed(ref musl.termios termios_p, musl.speed_t speed);
    }
}
