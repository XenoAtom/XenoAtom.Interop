//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class musl
    {
        /// <summary>
        /// system is unusable
        /// </summary>
        public const int LOG_EMERG = 0;
        
        /// <summary>
        /// action must be taken immediately
        /// </summary>
        public const int LOG_ALERT = 1;
        
        /// <summary>
        /// critical conditions
        /// </summary>
        public const int LOG_CRIT = 2;
        
        /// <summary>
        /// error conditions
        /// </summary>
        public const int LOG_ERR = 3;
        
        /// <summary>
        /// warning conditions
        /// </summary>
        public const int LOG_WARNING = 4;
        
        /// <summary>
        /// normal, but significant, condition
        /// </summary>
        public const int LOG_NOTICE = 5;
        
        /// <summary>
        /// informational message
        /// </summary>
        public const int LOG_INFO = 6;
        
        /// <summary>
        /// debug-level message
        /// 
        /// The function
        /// setlogmask (3)
        /// can be used to restrict logging to specified levels only.
        /// </summary>
        public const int LOG_DEBUG = 7;
        
        public const int LOG_PRIMASK = 7;
        
        /// <summary>
        /// kernel messages (these can't be generated from user processes)
        /// LOG_KERN has the value 0; if used as a facility, zero translates to:
        /// "use the default facility".
        /// </summary>
        public const int LOG_KERN = 0;
        
        public const int LOG_USER = 8;
        
        /// <summary>
        /// mail subsystem
        /// </summary>
        public const int LOG_MAIL = 16;
        
        /// <summary>
        /// system daemons without separate facility value
        /// </summary>
        public const int LOG_DAEMON = 24;
        
        /// <summary>
        /// security/authorization messages
        /// </summary>
        public const int LOG_AUTH = 32;
        
        /// <summary>
        /// messages generated internally by
        /// syslogd (8)
        /// </summary>
        public const int LOG_SYSLOG = 40;
        
        /// <summary>
        /// line printer subsystem
        /// </summary>
        public const int LOG_LPR = 48;
        
        /// <summary>
        /// USENET news subsystem
        /// </summary>
        public const int LOG_NEWS = 56;
        
        /// <summary>
        /// UUCP subsystem
        /// </summary>
        public const int LOG_UUCP = 64;
        
        /// <summary>
        /// clock daemon
        /// ( cron " and " at )
        /// </summary>
        public const int LOG_CRON = 72;
        
        /// <summary>
        /// security/authorization messages (private)
        /// </summary>
        public const int LOG_AUTHPRIV = 80;
        
        /// <summary>
        /// ftp daemon
        /// </summary>
        public const int LOG_FTP = 88;
        
        public const int LOG_LOCAL0 = 128;
        
        public const int LOG_LOCAL1 = 136;
        
        public const int LOG_LOCAL2 = 144;
        
        public const int LOG_LOCAL3 = 152;
        
        public const int LOG_LOCAL4 = 160;
        
        public const int LOG_LOCAL5 = 168;
        
        public const int LOG_LOCAL6 = 176;
        
        public const int LOG_LOCAL7 = 184;
        
        public const int LOG_NFACILITIES = 24;
        
        public const int LOG_FACMASK = 1016;
        
        /// <summary>
        /// Include the caller's PID with each message.
        /// </summary>
        public const int LOG_PID = 1;
        
        /// <summary>
        /// Write directly to the system console if there is an error while sending to
        /// the system logger.
        /// </summary>
        public const int LOG_CONS = 2;
        
        /// <summary>
        /// The converse of
        /// LOG_NDELAY ;
        /// opening of the connection is delayed until
        /// syslog ()
        /// is called.
        /// (This is the default, and need not be specified.)
        /// </summary>
        public const int LOG_ODELAY = 4;
        
        /// <summary>
        /// Open the connection immediately (normally, the connection is opened when
        /// the first message is logged).
        /// This may be useful, for example, if a subsequent
        /// chroot (2)
        /// would make the pathname used internally by the logging facility unreachable.
        /// </summary>
        public const int LOG_NDELAY = 8;
        
        /// <summary>
        /// Don't wait for child processes that may have been created while logging
        /// the message.
        /// (The GNU C library does not create a child process, so this
        /// option has no effect on Linux.)
        /// </summary>
        public const int LOG_NOWAIT = 16;
        
        /// <summary>
        /// (Not in POSIX.1-2001 or POSIX.1-2008.)
        /// Also log the message to
        /// stderr .
        /// </summary>
        public const int LOG_PERROR = 32;
        
        /// <summary>
        /// Send messages to the system logger
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "closelog")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void closelog();
        
        /// <summary>
        /// Send messages to the system logger
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "openlog")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void openlog(byte* ident, int option, int facility);
        
        /// <summary>
        /// Send messages to the system logger
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "openlog")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void openlog([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> ident, int option, int facility);
        
        /// <summary>
        /// Set log priority mask
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "setlogmask")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int setlogmask(int mask);
        
        /// <summary>
        /// Send messages to the system logger
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "syslog")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void syslog(int priority, byte* format);
        
        /// <summary>
        /// Send messages to the system logger
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "syslog")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void syslog(int priority, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> format);
    }
}
