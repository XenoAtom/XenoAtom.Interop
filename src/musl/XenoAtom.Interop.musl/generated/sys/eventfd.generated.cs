//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class musl
    {
        public readonly partial struct eventfd_t : IEquatable<eventfd_t>
        {
            public eventfd_t(ulong value) => this.Value = value;
            
            public ulong Value { get; }
            
            public override bool Equals(object obj) => obj is eventfd_t other && Equals(other);
            
            public bool Equals(eventfd_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ulong (musl.eventfd_t from) => from.Value;
            
            public static implicit operator musl.eventfd_t (ulong from) => new musl.eventfd_t(from);
            
            public static bool operator ==(eventfd_t left, eventfd_t right) => left.Equals(right);
            
            public static bool operator !=(eventfd_t left, eventfd_t right) => !left.Equals(right);
        }
        
        public const int EFD_SEMAPHORE = 1;
        
        public const int EFD_CLOEXEC = 524288;
        
        public const int EFD_NONBLOCK = 2048;
        
        /// <summary>
        /// Create a file descriptor for event notification
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "eventfd")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int eventfd(uint initval, int flags);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "eventfd_read")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int eventfd_read(int fd, ref musl.eventfd_t value);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "eventfd_write")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int eventfd_write(int fd, musl.eventfd_t value);
    }
}
