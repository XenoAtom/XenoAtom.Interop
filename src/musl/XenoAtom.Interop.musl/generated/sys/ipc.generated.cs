//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class musl
    {
        /// <summary>
        /// Create a new segment.
        /// If this flag is not used, then
        /// shmget ()
        /// will find the segment associated with \fIkey\fP and check to see if
        /// the user has permission to access the segment.
        /// </summary>
        public const int IPC_CREAT = 512;
        
        /// <summary>
        /// This flag is used with
        /// IPC_CREAT
        /// to ensure that this call creates the segment.
        /// If the segment already exists, the call fails.
        /// </summary>
        public const int IPC_EXCL = 1024;
        
        /// <summary>
        /// Return immediately if no message of the requested type is in the queue.
        /// The system call fails with
        /// errno
        /// set to
        /// ENOMSG .
        /// </summary>
        public const int IPC_NOWAIT = 2048;
        
        /// <summary>
        /// Immediately remove the message queue,
        /// awakening all waiting reader and writer processes (with an error
        /// return and
        /// errno
        /// set to
        /// EIDRM ).
        /// The calling process must have appropriate privileges
        /// or its effective user ID must be either that of the creator or owner
        /// of the message queue.
        /// The third argument to
        /// msgctl ()
        /// is ignored in this case.
        /// </summary>
        public const int IPC_RMID = 0;
        
        /// <summary>
        /// Write the values of some members of the
        /// msqid_ds
        /// structure pointed to by
        /// buf
        /// to the kernel data structure associated with this message queue,
        /// updating also its
        /// msg_ctime
        /// member.
        /// 
        /// The following members of the structure are updated:
        /// msg_qbytes ,
        /// msg_perm.uid ,
        /// msg_perm.gid ,
        /// and (the least significant 9 bits of)
        /// msg_perm.mode .
        /// 
        /// The effective UID of the calling process must match the owner
        /// ( msg_perm.uid )
        /// or creator
        /// ( msg_perm.cuid )
        /// of the message queue, or the caller must be privileged.
        /// Appropriate privilege (Linux: the
        /// CAP_SYS_RESOURCE
        /// capability) is required to raise the
        /// msg_qbytes
        /// value beyond the system parameter
        /// MSGMNB .
        /// </summary>
        public const int IPC_SET = 1;
        
        /// <summary>
        /// the index of the highest used entry in the
        /// kernel's internal array recording information about all
        /// semaphore sets.
        /// (This information can be used with repeated
        /// SEM_STAT
        /// or
        /// SEM_STAT_ANY
        /// operations to obtain information about all semaphore sets on the system.)
        /// </summary>
        public const int IPC_INFO = 3;
        
        public const int IPC_PRIVATE = 0;
        
        /// <summary>
        /// Convert a pathname and a project identifier to a System V IPC key
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "ftok")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.key_t ftok(byte* pathname, int proj_id);
        
        /// <summary>
        /// Convert a pathname and a project identifier to a System V IPC key
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "ftok")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.key_t ftok([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pathname, int proj_id);
    }
}
