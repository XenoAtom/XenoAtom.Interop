//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class musl
    {
        public unsafe partial struct statvfs_t
        {
            public nuint f_bsize;
            
            public nuint f_frsize;
            
            public musl.fsblkcnt_t f_blocks;
            
            public musl.fsblkcnt_t f_bfree;
            
            public musl.fsblkcnt_t f_bavail;
            
            public musl.fsfilcnt_t f_files;
            
            public musl.fsfilcnt_t f_ffree;
            
            public musl.fsfilcnt_t f_favail;
            
            public nuint f_fsid;
            
            public nuint f_flag;
            
            public nuint f_namemax;
            
            public uint f_type;
            
            public fixed int __reserved[5];
        }
        
        /// <summary>
        /// This filesystem is mounted read-only.
        /// </summary>
        public const int ST_RDONLY = 1;
        
        /// <summary>
        /// The set-user-ID and set-group-ID bits are ignored by
        /// exec (3)
        /// for executable files on this filesystem
        /// </summary>
        public const int ST_NOSUID = 2;
        
        /// <summary>
        /// Disallow access to device special files on this filesystem.
        /// </summary>
        public const int ST_NODEV = 4;
        
        /// <summary>
        /// Execution of programs is disallowed on this filesystem.
        /// </summary>
        public const int ST_NOEXEC = 8;
        
        /// <summary>
        /// Writes are synched to the filesystem immediately (see the description of
        /// O_SYNC
        /// in
        /// open (2)).
        /// </summary>
        public const int ST_SYNCHRONOUS = 16;
        
        /// <summary>
        /// Mandatory locking is permitted on the filesystem (see
        /// fcntl (2)).
        /// </summary>
        public const int ST_MANDLOCK = 64;
        
        public const int ST_WRITE = 128;
        
        public const int ST_APPEND = 256;
        
        public const int ST_IMMUTABLE = 512;
        
        /// <summary>
        /// Do not update access times; see
        /// mount (2).
        /// </summary>
        public const int ST_NOATIME = 1024;
        
        /// <summary>
        /// Do not update directory access times; see
        /// mount (2).
        /// </summary>
        public const int ST_NODIRATIME = 2048;
        
        /// <summary>
        /// Update atime relative to mtime/ctime; see
        /// mount (2).
        /// </summary>
        public const int ST_RELATIME = 4096;
        
        /// <summary>
        /// Get filesystem statistics
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "statvfs")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int statvfs(byte* path, ref musl.statvfs_t buf);
        
        /// <summary>
        /// Get filesystem statistics
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "statvfs")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int statvfs([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path, ref musl.statvfs_t buf);
        
        /// <summary>
        /// Get filesystem statistics
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "fstatvfs")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int fstatvfs(int fd, ref musl.statvfs_t buf);
    }
}
