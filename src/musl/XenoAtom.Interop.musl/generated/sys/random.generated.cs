//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class musl
    {
        /// <summary>
        /// By default, when reading from the
        /// random
        /// source,
        /// getrandom ()
        /// blocks if no random bytes are available,
        /// and when reading from the
        /// urandom
        /// source, it blocks if the entropy pool has not yet been initialized.
        /// If the
        /// GRND_NONBLOCK
        /// flag is set, then
        /// getrandom ()
        /// does not block in these cases, but instead immediately returns \-1 with
        /// errno
        /// set to
        /// EAGAIN .
        /// </summary>
        public const int GRND_NONBLOCK = 1;
        
        /// <summary>
        /// If this bit is set, then random bytes are drawn from the
        /// random
        /// source
        /// (i.e., the same source as the
        /// /dev/random
        /// device)
        /// instead of the
        /// urandom
        /// source.
        /// The
        /// random
        /// source is limited based on the entropy that can be obtained from environmental
        /// noise.
        /// If the number of available bytes in the
        /// random
        /// source is less than requested in
        /// buflen ,
        /// the call returns just the available random bytes.
        /// If no random bytes are available, the behavior depends on the presence of
        /// GRND_NONBLOCK
        /// in the
        /// flags
        /// argument.
        /// </summary>
        public const int GRND_RANDOM = 2;
        
        public const int GRND_INSECURE = 4;
        
        /// <summary>
        /// Obtain a series of random bytes
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getrandom")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint getrandom(void* buf, nuint buflen, uint flags);
    }
}
