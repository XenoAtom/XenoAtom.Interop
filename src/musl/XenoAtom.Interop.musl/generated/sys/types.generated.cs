//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
namespace XenoAtom.Interop
{
    public static unsafe partial class musl
    {
        public readonly partial struct caddr_t : IEquatable<musl.caddr_t>
        {
            public caddr_t(byte* value) => this.Value = value;
            
            public byte* Value { get; }
            
            public override bool Equals(object obj) => obj is caddr_t other && Equals(other);
            
            public bool Equals(caddr_t other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator byte* (musl.caddr_t from) => from.Value;
            
            public static implicit operator musl.caddr_t (byte* from) => new musl.caddr_t(from);
            
            public static bool operator ==(caddr_t left, caddr_t right) => left.Equals(right);
            
            public static bool operator !=(caddr_t left, caddr_t right) => !left.Equals(right);
        }
        
        public readonly partial struct quad_t : IEquatable<musl.quad_t>
        {
            public quad_t(long value) => this.Value = value;
            
            public long Value { get; }
            
            public override bool Equals(object obj) => obj is quad_t other && Equals(other);
            
            public bool Equals(quad_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator long (musl.quad_t from) => from.Value;
            
            public static implicit operator musl.quad_t (long from) => new musl.quad_t(from);
            
            public static bool operator ==(quad_t left, quad_t right) => left.Equals(right);
            
            public static bool operator !=(quad_t left, quad_t right) => !left.Equals(right);
        }
        
        public readonly partial struct u_quad_t : IEquatable<musl.u_quad_t>
        {
            public u_quad_t(ulong value) => this.Value = value;
            
            public ulong Value { get; }
            
            public override bool Equals(object obj) => obj is u_quad_t other && Equals(other);
            
            public bool Equals(u_quad_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ulong (musl.u_quad_t from) => from.Value;
            
            public static implicit operator musl.u_quad_t (ulong from) => new musl.u_quad_t(from);
            
            public static bool operator ==(u_quad_t left, u_quad_t right) => left.Equals(right);
            
            public static bool operator !=(u_quad_t left, u_quad_t right) => !left.Equals(right);
        }
    }
}
