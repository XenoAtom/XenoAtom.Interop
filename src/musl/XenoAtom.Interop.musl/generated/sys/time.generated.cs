//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class musl
    {
        public partial struct itimerval
        {
            public musl.timeval it_interval;
            
            public musl.timeval it_value;
        }
        
        public partial struct timezone
        {
            public int tz_minuteswest;
            
            public int tz_dsttime;
        }
        
        /// <summary>
        /// This timer counts down in real (i.e., wall clock) time.
        /// At each expiration, a
        /// SIGALRM
        /// signal is generated.
        /// </summary>
        public const int ITIMER_REAL = 0;
        
        /// <summary>
        /// This timer counts down against the user-mode CPU time consumed by the process.
        /// (The measurement includes CPU time consumed by all threads in the process.)
        /// At each expiration, a
        /// SIGVTALRM
        /// signal is generated.
        /// </summary>
        public const int ITIMER_VIRTUAL = 1;
        
        /// <summary>
        /// This timer counts down against the total (i.e., both user and system)
        /// CPU time consumed by the process.
        /// (The measurement includes CPU time consumed by all threads in the process.)
        /// At each expiration, a
        /// SIGPROF
        /// signal is generated.
        /// 
        /// In conjunction with
        /// ITIMER_VIRTUAL ,
        /// this timer can be used to profile user and system CPU time
        /// consumed by the process.
        /// 
        /// A process has only one of each of the three types of timers.
        /// 
        /// Timer values are defined by the following structures:
        /// 
        /// +4n
        /// 
        /// struct itimerval {
        ///     struct timeval it_interval; /* Interval for periodic timer */
        ///     struct timeval it_value;    /* Time until next expiration */
        /// };
        /// \&amp;
        /// struct timeval {
        ///     time_t      tv_sec;         /* seconds */
        ///     suseconds_t tv_usec;        /* microseconds */
        /// };
        /// </summary>
        public const int ITIMER_PROF = 2;
        
        /// <summary>
        /// Get / set time
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gettimeofday")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int gettimeofday(ref musl.timeval tv, void* tz);
        
        /// <summary>
        /// Get or set value of an interval timer
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getitimer")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int getitimer(int which, ref musl.itimerval curr_value);
        
        /// <summary>
        /// Get or set value of an interval timer
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "setitimer")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int setitimer(int which, in musl.itimerval new_value, ref musl.itimerval old_value);
        
        /// <summary>
        /// Change file last access and modification times
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "utimes")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int utimes(byte* filename, FixedArray2<musl.timeval> times);
        
        /// <summary>
        /// Change file last access and modification times
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "utimes")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int utimes([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> filename, FixedArray2<musl.timeval> times);
        
        /// <summary>
        /// Change file timestamps
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "futimes")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int futimes(int fd, FixedArray2<musl.timeval> tv);
        
        /// <summary>
        /// Change timestamps of a file relative to a \
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "futimesat")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int futimesat(int dirfd, byte* pathname, FixedArray2<musl.timeval> times);
        
        /// <summary>
        /// Change timestamps of a file relative to a \
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "futimesat")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int futimesat(int dirfd, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pathname, FixedArray2<musl.timeval> times);
        
        /// <summary>
        /// Change file timestamps
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "lutimes")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int lutimes(byte* filename, FixedArray2<musl.timeval> tv);
        
        /// <summary>
        /// Change file timestamps
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "lutimes")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int lutimes([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> filename, FixedArray2<musl.timeval> tv);
        
        /// <summary>
        /// Get / set time
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "settimeofday")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int settimeofday(in musl.timeval tv, in musl.timezone tz);
        
        /// <summary>
        /// Correct the time to synchronize the system clock
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "adjtime")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int adjtime(in musl.timeval delta, ref musl.timeval olddelta);
    }
}
