//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class musl
    {
        /// <summary>
        /// POSIX.1-2001.
        /// </summary>
        public unsafe partial struct fd_set
        {
            public fixed int fds_bits[32];
        }
        
        public readonly partial struct fd_mask : IEquatable<musl.fd_mask>
        {
            public fd_mask(nuint value) => this.Value = value;
            
            public nuint Value { get; }
            
            public override bool Equals(object obj) => obj is fd_mask other && Equals(other);
            
            public bool Equals(fd_mask other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator nuint (musl.fd_mask from) => from.Value;
            
            public static implicit operator musl.fd_mask (nuint from) => new musl.fd_mask(from);
            
            public static bool operator ==(fd_mask left, fd_mask right) => left.Equals(right);
            
            public static bool operator !=(fd_mask left, fd_mask right) => !left.Equals(right);
        }
        
        public const int FD_SETSIZE = 1024;
        
        /// <summary>
        /// Synchronous I/O multiplexing
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "select")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int select(int nfds, ref musl.fd_set readfds, ref musl.fd_set writefds, ref musl.fd_set exceptfds, ref musl.timeval timeout);
        
        /// <summary>
        /// Synchronous I/O multiplexing
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "pselect")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int pselect(int nfds, ref musl.fd_set readfds, ref musl.fd_set writefds, ref musl.fd_set exceptfds, in musl.timespec timeout, ref musl.sigset_t sigmask);
    }
}
