//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    public static unsafe partial class musl
    {
        public partial struct consolefontdesc
        {
            /// <summary>
            /// characters in font (256 or 512)
            /// </summary>
            public ushort charcount;
            
            /// <summary>
            /// scan lines per character (1-32)
            /// </summary>
            public ushort charheight;
            
            /// <summary>
            /// font data in expanded form
            /// </summary>
            public byte* chardata;
        }
        
        public partial struct unipair
        {
            public ushort unicode;
            
            public ushort fontpos;
        }
        
        public partial struct unimapdesc
        {
            public ushort entry_ct;
            
            public musl.unipair* entries;
        }
        
        public partial struct unimapinit
        {
            /// <summary>
            /// 0 if no opinion
            /// </summary>
            public ushort advised_hashsize;
            
            /// <summary>
            /// 0 if no opinion
            /// </summary>
            public ushort advised_hashstep;
            
            /// <summary>
            /// 0 if no opinion
            /// </summary>
            public ushort advised_hashlevel;
        }
        
        public partial struct kbentry
        {
            public byte kb_table;
            
            public byte kb_index;
            
            public ushort kb_value;
        }
        
        public unsafe partial struct kbsentry
        {
            public byte kb_func;
            
            public fixed byte kb_string[512];
        }
        
        public partial struct kbdiacr
        {
            public byte diacr;
            
            public byte @base;
            
            public byte result;
        }
        
        public partial struct kbdiacrs
        {
            /// <summary>
            /// number of entries in following array
            /// </summary>
            public uint kb_cnt;
            
            /// <summary>
            /// MAX_DIACR from keyboard.h
            /// </summary>
            public FixedArray256<musl.kbdiacr> kbdiacr;
        }
        
        public partial struct kbdiacruc
        {
            public uint diacr;
            
            public uint @base;
            
            public uint result;
        }
        
        public partial struct kbdiacrsuc
        {
            /// <summary>
            /// number of entries in following array
            /// </summary>
            public uint kb_cnt;
            
            /// <summary>
            /// MAX_DIACR from keyboard.h
            /// </summary>
            public FixedArray256<musl.kbdiacruc> kbdiacruc;
        }
        
        public partial struct kbkeycode
        {
            public uint scancode;
            
            public uint keycode;
        }
        
        public partial struct kbd_repeat
        {
            /// <summary>
            /// in msec; 
            /// &lt;
            /// = 0: don't change
            /// </summary>
            public int delay;
            
            /// <summary>
            /// in msec; 
            /// &lt;
            /// = 0: don't change
            /// </summary>
            public int period;
        }
        
        public partial struct console_font_op
        {
            /// <summary>
            /// operation code KD_FONT_OP_*
            /// </summary>
            public uint op;
            
            /// <summary>
            /// KD_FONT_FLAG_*
            /// </summary>
            public uint flags;
            
            /// <summary>
            /// font size
            /// </summary>
            public uint width;
            
            /// <summary>
            /// font size
            /// </summary>
            public uint height;
            
            public uint charcount;
            
            /// <summary>
            /// font data with vpitch fixed to 32 for
            /// KD_FONT_OP_SET/GET
            /// </summary>
            public byte* data;
        }
        
        public partial struct console_font
        {
            /// <summary>
            /// font size
            /// </summary>
            public uint width;
            
            /// <summary>
            /// font size
            /// </summary>
            public uint height;
            
            public uint charcount;
            
            /// <summary>
            /// font data with vpitch fixed to 32 for
            /// KD_FONT_OP_SET/GET
            /// </summary>
            public byte* data;
        }
        
        public readonly partial struct scrnmap_t : IEquatable<musl.scrnmap_t>
        {
            public scrnmap_t(byte value) => this.Value = value;
            
            public byte Value { get; }
            
            public override bool Equals(object obj) => obj is scrnmap_t other && Equals(other);
            
            public bool Equals(scrnmap_t other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator byte (musl.scrnmap_t from) => from.Value;
            
            public static implicit operator musl.scrnmap_t (byte from) => new musl.scrnmap_t(from);
            
            public static bool operator ==(scrnmap_t left, scrnmap_t right) => left.Equals(right);
            
            public static bool operator !=(scrnmap_t left, scrnmap_t right) => !left.Equals(right);
        }
    }
}
