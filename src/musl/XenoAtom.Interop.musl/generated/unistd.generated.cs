//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class musl
    {
        /// <summary>
        /// Adjust the file offset to the next location
        /// in the file greater than or equal to
        /// offset
        /// containing data.
        /// If
        /// offset
        /// points to data,
        /// then the file offset is set to
        /// offset .
        /// </summary>
        public const int SEEK_DATA = 3;
        
        /// <summary>
        /// Adjust the file offset to the next hole in the file
        /// greater than or equal to
        /// offset .
        /// If
        /// offset
        /// points into the middle of a hole,
        /// then the file offset is set to
        /// offset .
        /// If there is no hole past
        /// offset ,
        /// then the file offset is adjusted to the end of the file
        /// (i.e., there is an implicit hole at the end of any file).
        /// 
        /// In both of the above cases,
        /// lseek ()
        /// fails if
        /// offset
        /// points past the end of the file.
        /// 
        /// These operations allow applications to map holes in a sparsely
        /// allocated file.
        /// This can be useful for applications such as file backup tools,
        /// which can save space when creating backups and preserve holes,
        /// if they have a mechanism for discovering holes.
        /// 
        /// For the purposes of these operations, a hole is a sequence of zeros that
        /// (normally) has not been allocated in the underlying file storage.
        /// However, a filesystem is not obliged to report holes,
        /// so these operations are not a guaranteed mechanism for
        /// mapping the storage space actually allocated to a file.
        /// (Furthermore, a sequence of zeros that actually has been written
        /// to the underlying storage may not be reported as a hole.)
        /// In the simplest implementation,
        /// a filesystem can support the operations by making
        /// SEEK_HOLE
        /// always return the offset of the end of the file,
        /// and making
        /// SEEK_DATA
        /// always return
        /// offset
        /// (i.e., even if the location referred to by
        /// offset
        /// is a hole,
        /// it can be considered to consist of data that is a sequence of zeros).
        /// https://lkml.org/lkml/2011/4/22/79
        /// http://lwn.net/Articles/440255/
        /// http://blogs.oracle.com/bonwick/entry/seek_hole_and_seek_data
        /// 
        /// The
        /// _GNU_SOURCE
        /// feature test macro must be defined in order to obtain the definitions of
        /// SEEK_DATA
        /// and
        /// SEEK_HOLE
        /// from
        /// &lt;unistd.h&gt; .
        /// 
        /// The
        /// SEEK_HOLE
        /// and
        /// SEEK_DATA
        /// operations are supported for the following filesystems:
        /// \[bu] 3
        /// Btrfs (since Linux 3.1)
        /// \[bu]
        /// OCFS (since Linux 3.2)
        /// commit 93862d5e1ab875664c6cc95254fc365028a48bb1
        /// \[bu]
        /// XFS (since Linux 3.5)
        /// \[bu]
        /// ext4 (since Linux 3.8)
        /// \[bu]
        /// tmpfs (5)
        /// (since Linux 3.8)
        /// \[bu]
        /// NFS (since Linux 3.18)
        /// commit 1c6dcbe5ceff81c2cf8d929646af675cd59fe7c0
        /// commit 24bab491220faa446d945624086d838af41d616c
        /// \[bu]
        /// FUSE (since Linux 4.5)
        /// commit 0b5da8db145bfd44266ac964a2636a0cf8d7c286
        /// \[bu]
        /// GFS2 (since Linux 4.15)
        /// commit 3a27411cb4bc3ce31db228e3569ad01b462a4310
        /// </summary>
        public const int SEEK_HOLE = 4;
        
        /// <summary>
        /// Create pipe
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "pipe")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int pipe(FixedArray2<int> pipefd);
        
        /// <summary>
        /// Create pipe
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "pipe2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int pipe2(FixedArray2<int> arg0, int arg1);
        
        /// <summary>
        /// Close a file descriptor
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "close")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int close(int fd);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "posix_close")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int posix_close(int arg0, int arg1);
        
        /// <summary>
        /// Duplicate a file descriptor
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "dup")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int dup(int oldfd);
        
        /// <summary>
        /// Duplicate a file descriptor
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "dup2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int dup2(int oldfd, int newfd);
        
        /// <summary>
        /// Duplicate a file descriptor
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "dup3")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int dup3(int oldfd, int newfd, int flags);
        
        /// <summary>
        /// Reposition read/write file offset
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "lseek")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.off_t lseek(int fd, musl.off_t offset, int whence);
        
        /// <summary>
        /// Synchronize a file's in-core state with storage device
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "fsync")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int fsync(int fd);
        
        /// <summary>
        /// Synchronize a file's in-core state with storage device
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "fdatasync")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int fdatasync(int fd);
        
        /// <summary>
        /// Read from a file descriptor
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "read")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint read(int fd, void* buf, nuint count);
        
        /// <summary>
        /// Write to a file descriptor
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "write")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint write(int fd, void* buf, nuint count);
        
        /// <summary>
        /// Read from or write to a file descriptor at a given offset
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "pread")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint pread(int fd, void* buf, nuint count, musl.off_t offset);
        
        /// <summary>
        /// Read from or write to a file descriptor at a given offset
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "pwrite")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint pwrite(int fd, void* buf, nuint count, musl.off_t offset);
        
        /// <summary>
        /// Change ownership of a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "chown")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int chown(byte* pathname, musl.uid_t owner, musl.gid_t group);
        
        /// <summary>
        /// Change ownership of a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "chown")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int chown([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pathname, musl.uid_t owner, musl.gid_t group);
        
        /// <summary>
        /// Change ownership of a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "fchown")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int fchown(int fd, musl.uid_t owner, musl.gid_t group);
        
        /// <summary>
        /// Change ownership of a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "lchown")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int lchown(byte* pathname, musl.uid_t owner, musl.gid_t group);
        
        /// <summary>
        /// Change ownership of a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "lchown")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int lchown([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pathname, musl.uid_t owner, musl.gid_t group);
        
        /// <summary>
        /// Change ownership of a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "fchownat")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int fchownat(int dirfd, byte* pathname, musl.uid_t owner, musl.gid_t group, int flags);
        
        /// <summary>
        /// Change ownership of a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "fchownat")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int fchownat(int dirfd, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pathname, musl.uid_t owner, musl.gid_t group, int flags);
        
        /// <summary>
        /// Make a new name for a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "link")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int link(byte* oldpath, byte* newpath);
        
        /// <summary>
        /// Make a new name for a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "link")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int link([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> oldpath, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> newpath);
        
        /// <summary>
        /// Make a new name for a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "linkat")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int linkat(int olddirfd, byte* oldpath, int newdirfd, byte* newpath, int flags);
        
        /// <summary>
        /// Make a new name for a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "linkat")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int linkat(int olddirfd, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> oldpath, int newdirfd, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> newpath, int flags);
        
        /// <summary>
        /// Make a new name for a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "symlink")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int symlink(byte* target, byte* linkpath);
        
        /// <summary>
        /// Make a new name for a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "symlink")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int symlink([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> target, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> linkpath);
        
        /// <summary>
        /// Make a new name for a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "symlinkat")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int symlinkat(byte* target, int newdirfd, byte* linkpath);
        
        /// <summary>
        /// Make a new name for a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "symlinkat")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int symlinkat([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> target, int newdirfd, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> linkpath);
        
        /// <summary>
        /// Read value of a symbolic link
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "readlink")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint readlink(byte* pathname, byte* buf, nuint bufsiz);
        
        /// <summary>
        /// Read value of a symbolic link
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "readlink")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint readlink([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pathname, byte* buf, nuint bufsiz);
        
        /// <summary>
        /// Read value of a symbolic link
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "readlinkat")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint readlinkat(int dirfd, byte* pathname, byte* buf, nuint bufsiz);
        
        /// <summary>
        /// Read value of a symbolic link
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "readlinkat")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint readlinkat(int dirfd, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pathname, byte* buf, nuint bufsiz);
        
        /// <summary>
        /// Delete a name and possibly the file it refers to
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "unlink")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int unlink(byte* pathname);
        
        /// <summary>
        /// Delete a name and possibly the file it refers to
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "unlink")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int unlink([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pathname);
        
        /// <summary>
        /// Delete a name and possibly the file it refers to
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "unlinkat")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int unlinkat(int dirfd, byte* pathname, int flags);
        
        /// <summary>
        /// Delete a name and possibly the file it refers to
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "unlinkat")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int unlinkat(int dirfd, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pathname, int flags);
        
        /// <summary>
        /// Delete a directory
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "rmdir")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int rmdir(byte* pathname);
        
        /// <summary>
        /// Delete a directory
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "rmdir")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int rmdir([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pathname);
        
        /// <summary>
        /// Truncate a file to a specified length
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "truncate")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int truncate(byte* path, musl.off_t length);
        
        /// <summary>
        /// Truncate a file to a specified length
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "truncate")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int truncate([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path, musl.off_t length);
        
        /// <summary>
        /// Truncate a file to a specified length
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "ftruncate")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int ftruncate(int fd, musl.off_t length);
        
        /// <summary>
        /// Check user's permissions for a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "access")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int access(byte* pathname, int mode);
        
        /// <summary>
        /// Check user's permissions for a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "access")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int access([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pathname, int mode);
        
        /// <summary>
        /// Check user's permissions for a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "faccessat")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int faccessat(int dirfd, byte* pathname, int mode, int flags);
        
        /// <summary>
        /// Check user's permissions for a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "faccessat")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int faccessat(int dirfd, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pathname, int mode, int flags);
        
        /// <summary>
        /// Change working directory
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "chdir")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int chdir(byte* path);
        
        /// <summary>
        /// Change working directory
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "chdir")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int chdir([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path);
        
        /// <summary>
        /// Change working directory
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "fchdir")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int fchdir(int fd);
        
        /// <summary>
        /// Get current working directory
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getcwd")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* getcwd_(byte* buf, nuint size);
        
        /// <summary>
        /// Get current working directory
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getcwd")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string getcwd(byte* buf, nuint size);
        
        /// <summary>
        /// Set an alarm clock for delivery of a signal
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "alarm")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint alarm(uint seconds);
        
        /// <summary>
        /// Sleep for a specified number of seconds
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sleep")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint sleep(uint seconds);
        
        /// <summary>
        /// Wait for signal
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "pause")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int pause();
        
        /// <summary>
        /// Create a child process
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "fork")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.pid_t fork();
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "_Fork")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.pid_t _Fork();
        
        /// <summary>
        /// Execute program
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "execve")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int execve(byte* pathname, byte** argv, byte** envp);
        
        /// <summary>
        /// Execute program
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "execve")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int execve([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pathname, byte** argv, byte** envp);
        
        /// <summary>
        /// Execute a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "execv")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int execv(byte* pathname, byte** argv);
        
        /// <summary>
        /// Execute a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "execv")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int execv([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pathname, byte** argv);
        
        /// <summary>
        /// Execute a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "execvp")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int execvp(byte* file, byte** argv);
        
        /// <summary>
        /// Execute a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "execvp")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int execvp([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> file, byte** argv);
        
        /// <summary>
        /// Execute program specified via file descriptor
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "fexecve")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int fexecve(int arg0, byte** arg1, byte** arg2);
        
        /// <summary>
        /// Terminate the calling process
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "_exit")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void _exit(int status);
        
        /// <summary>
        /// Get process identification
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getpid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.pid_t getpid();
        
        /// <summary>
        /// Get process identification
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getppid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.pid_t getppid();
        
        /// <summary>
        /// Set/get process group
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getpgrp")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.pid_t getpgrp();
        
        /// <summary>
        /// Set/get process group
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getpgid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.pid_t getpgid(musl.pid_t pid);
        
        /// <summary>
        /// Set/get process group
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "setpgid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int setpgid(musl.pid_t pid, musl.pid_t pgid);
        
        /// <summary>
        /// Creates a session and sets the process group ID
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "setsid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.pid_t setsid();
        
        /// <summary>
        /// Get session ID
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getsid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.pid_t getsid(musl.pid_t pid);
        
        /// <summary>
        /// Return name of a terminal
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "ttyname")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* ttyname_(int fd);
        
        /// <summary>
        /// Return name of a terminal
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "ttyname")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string ttyname(int fd);
        
        /// <summary>
        /// Return name of a terminal
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "ttyname_r")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int ttyname_r(int fd, byte* buf, nuint buflen);
        
        /// <summary>
        /// Test whether a file descriptor refers to a terminal
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "isatty")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int isatty(int fd);
        
        /// <summary>
        /// Get and set terminal foreground process group
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "tcgetpgrp")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.pid_t tcgetpgrp(int fd);
        
        /// <summary>
        /// Get and set terminal foreground process group
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "tcsetpgrp")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int tcsetpgrp(int fd, musl.pid_t pgrp);
        
        /// <summary>
        /// Get user identity
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getuid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.uid_t getuid();
        
        /// <summary>
        /// Get user identity
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "geteuid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.uid_t geteuid();
        
        /// <summary>
        /// Get group identity
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getgid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.gid_t getgid();
        
        /// <summary>
        /// Get group identity
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getegid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.gid_t getegid();
        
        /// <summary>
        /// Get/set list of supplementary group IDs
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getgroups")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int getgroups(int size, musl.gid_t* list);
        
        /// <summary>
        /// Set user identity
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "setuid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int setuid(musl.uid_t uid);
        
        /// <summary>
        /// Set effective user or group ID
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "seteuid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int seteuid(musl.uid_t euid);
        
        /// <summary>
        /// Set group identity
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "setgid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int setgid(musl.gid_t gid);
        
        /// <summary>
        /// Set effective user or group ID
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "setegid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int setegid(musl.gid_t egid);
        
        /// <summary>
        /// Get username
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getlogin")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* getlogin_();
        
        /// <summary>
        /// Get username
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getlogin")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string getlogin();
        
        /// <summary>
        /// Get username
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getlogin_r")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int getlogin_r(byte* buf, nuint bufsize);
        
        /// <summary>
        /// Get/set hostname
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gethostname")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int gethostname(byte* name, nuint len);
        
        /// <summary>
        /// Get controlling terminal name
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "ctermid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* ctermid_(byte* s);
        
        /// <summary>
        /// Get controlling terminal name
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "ctermid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string ctermid(byte* s);
        
        /// <summary>
        /// getopt, getopt_long, getopt_long_only,
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getopt")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int getopt(int argc, byte** argv, byte* optstring);
        
        /// <summary>
        /// getopt, getopt_long, getopt_long_only,
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getopt")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int getopt(int argc, byte** argv, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> optstring);
        
        /// <summary>
        /// Get configuration values for files
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "pathconf")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint pathconf(byte* path, int name);
        
        /// <summary>
        /// Get configuration values for files
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "pathconf")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint pathconf([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path, int name);
        
        /// <summary>
        /// Get configuration values for files
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "fpathconf")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint fpathconf(int fd, int name);
        
        /// <summary>
        /// Get configuration information at run time
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sysconf")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint sysconf(int name);
        
        /// <summary>
        /// Get configuration dependent string variables
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "confstr")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nuint confstr(int name, byte* buf, nuint size);
        
        /// <summary>
        /// Set real and/or effective user or group ID
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "setreuid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int setreuid(musl.uid_t ruid, musl.uid_t euid);
        
        /// <summary>
        /// Set real and/or effective user or group ID
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "setregid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int setregid(musl.gid_t rgid, musl.gid_t egid);
        
        /// <summary>
        /// Apply, test or remove a POSIX lock on an open file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "lockf")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int lockf(int fd, int cmd, musl.off_t len);
        
        /// <summary>
        /// Get or set the unique identifier of the current host
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gethostid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint gethostid();
        
        /// <summary>
        /// Change process priority
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "nice")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int nice(int inc);
        
        /// <summary>
        /// Commit filesystem caches to disk
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sync")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void sync();
        
        /// <summary>
        /// Set/get process group
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "setpgrp")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.pid_t setpgrp();
        
        /// <summary>
        /// Password hashing
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "crypt")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* crypt_(byte* key, byte* salt);
        
        /// <summary>
        /// Password hashing
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "crypt")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string crypt([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> key, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> salt);
        
        /// <summary>
        /// Encrypt 64-bit messages
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "encrypt")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void encrypt(byte* arg0, int arg1);
        
        /// <summary>
        /// Swap adjacent bytes
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "swab")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void swab(void* from, void* to, nint n);
        
        /// <summary>
        /// Suspend execution for microsecond intervals
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "usleep")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int usleep(uint usec);
        
        /// <summary>
        /// Schedule signal after given number of microseconds
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "ualarm")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint ualarm(uint usecs, uint interval);
        
        /// <summary>
        /// Change data segment size
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "brk")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int brk(void* addr);
        
        /// <summary>
        /// Change data segment size
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sbrk")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void* sbrk(nint increment);
        
        /// <summary>
        /// Create a child process and block parent
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vfork")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.pid_t vfork();
        
        /// <summary>
        /// Virtually hangup the current terminal
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vhangup")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int vhangup();
        
        /// <summary>
        /// Change root directory
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "chroot")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int chroot(byte* path);
        
        /// <summary>
        /// Change root directory
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "chroot")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int chroot([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path);
        
        /// <summary>
        /// Get memory page size
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getpagesize")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int getpagesize();
        
        /// <summary>
        /// Get file descriptor table size
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getdtablesize")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int getdtablesize();
        
        /// <summary>
        /// Get/set hostname
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sethostname")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sethostname(byte* name, nuint len);
        
        /// <summary>
        /// Get/set hostname
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "sethostname")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int sethostname([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, nuint len);
        
        /// <summary>
        /// Get/set NIS domain name
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getdomainname")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int getdomainname(byte* name, nuint len);
        
        /// <summary>
        /// Get/set NIS domain name
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "setdomainname")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int setdomainname(byte* name, nuint len);
        
        /// <summary>
        /// Get/set NIS domain name
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "setdomainname")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int setdomainname([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, nuint len);
        
        /// <summary>
        /// Get/set list of supplementary group IDs
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "setgroups")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int setgroups(nuint size, ref musl.gid_t list);
        
        /// <summary>
        /// Get a password
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getpass")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* getpass_(byte* prompt);
        
        /// <summary>
        /// Get a password
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getpass")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string getpass([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> prompt);
        
        /// <summary>
        /// Run in the background
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "daemon")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int daemon(int nochdir, int noclose);
        
        /// <summary>
        /// Get permitted user shells
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "setusershell")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void setusershell();
        
        /// <summary>
        /// Get permitted user shells
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "endusershell")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void endusershell();
        
        /// <summary>
        /// Get permitted user shells
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getusershell")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* getusershell_();
        
        /// <summary>
        /// Get permitted user shells
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getusershell")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string getusershell();
        
        /// <summary>
        /// Switch process accounting on or off
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "acct")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int acct(byte* filename);
        
        /// <summary>
        /// Switch process accounting on or off
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "acct")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int acct([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> filename);
        
        /// <summary>
        /// Indirect system call
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "syscall")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint syscall(nint arg0);
        
        /// <summary>
        /// Execute a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "execvpe")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int execvpe(byte* arg0, byte** arg1, byte** arg2);
        
        /// <summary>
        /// Execute a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "execvpe")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int execvpe([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> arg0, byte** arg1, byte** arg2);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "issetugid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int issetugid();
        
        /// <summary>
        /// Fill a buffer with random bytes
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getentropy")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int getentropy(void* buffer, nuint length);
        
        /// <summary>
        /// Set real, effective, and saved user or group ID
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "setresuid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int setresuid(musl.uid_t ruid, musl.uid_t euid, musl.uid_t suid);
        
        /// <summary>
        /// Set real, effective, and saved user or group ID
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "setresgid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int setresgid(musl.gid_t rgid, musl.gid_t egid, musl.gid_t sgid);
        
        /// <summary>
        /// Get real, effective, and saved user/group IDs
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getresuid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int getresuid(ref musl.uid_t ruid, ref musl.uid_t euid, ref musl.uid_t suid);
        
        /// <summary>
        /// Get real, effective, and saved user/group IDs
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "getresgid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int getresgid(ref musl.gid_t rgid, ref musl.gid_t egid, ref musl.gid_t sgid);
        
        /// <summary>
        /// Get current working directory
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "get_current_dir_name")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* get_current_dir_name_();
        
        /// <summary>
        /// Get current working directory
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "get_current_dir_name")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string get_current_dir_name();
        
        /// <summary>
        /// Commit filesystem caches to disk
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "syncfs")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int syncfs(int fd);
        
        /// <summary>
        /// Check effective user's permissions for a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "euidaccess")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int euidaccess(byte* pathname, int mode);
        
        /// <summary>
        /// Check effective user's permissions for a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "euidaccess")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int euidaccess([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pathname, int mode);
        
        /// <summary>
        /// Check effective user's permissions for a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "eaccess")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int eaccess(byte* pathname, int mode);
        
        /// <summary>
        /// Check effective user's permissions for a file
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "eaccess")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int eaccess([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pathname, int mode);
        
        /// <summary>
        /// Copy a range of data from one file to another
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "copy_file_range")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint copy_file_range(int fd_in, ref musl.off_t off_in, int fd_out, ref musl.off_t off_out, nuint len, uint flags);
        
        /// <summary>
        /// Get thread identification
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "gettid")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial musl.pid_t gettid();
    }
}
