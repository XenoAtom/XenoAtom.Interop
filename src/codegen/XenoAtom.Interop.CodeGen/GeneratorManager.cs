// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.

using System.IO;
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace XenoAtom.Interop.CodeGen;

/// <summary>
/// This class is responsible for initializing and running all generators.
/// </summary>
public class GeneratorManager
{
    private readonly Dictionary<LibDescriptor, GeneratorBase> _generators = new();

    public GeneratorManager(LibDescriptor[] descriptors, string? repositoryRootFolder = null)
    {
        LibDescriptors = descriptors;
        ApkManager = new ApkManager();
        // Multi-arch is only used by musl, the other libraries are multi-arch by default using the same x86_64 default headers
        ApkManager.Architectures = [ApkManager.DefaultArch, "aarch64"]; // "x86", "armv7" <- not supporting these for now (only for musl)

        RepositoryRootFolder = repositoryRootFolder ?? Path.GetFullPath(Path.Combine(AppContext.BaseDirectory, $@"..", "..", "..", "..", "..", "..", ".."));
    }

    public LibDescriptor[] LibDescriptors { get; }

    public ApkManager ApkManager { get; }

    public string RepositoryRootFolder { get; set; }
    
    public async Task Initialize()
    {
        await ApkManager.Initialize();
        await ApkManager.EnsureIncludes("musl-dev");

        // Initialize all generators
        foreach (var libDescriptor in LibDescriptors)
        {
            Console.WriteLine($"=================================================");
            Console.WriteLine($"Initializing {libDescriptor.Name} generator");
            Console.WriteLine($"=================================================");
            var generator = libDescriptor.Generator!(libDescriptor);
            _generators[libDescriptor] = generator;
            await generator.Initialize(ApkManager);
        }
    }

    public async Task Run()
    {
        Console.WriteLine();

        // Run all generators
        foreach (var libDescriptor in LibDescriptors)
        {
            Console.WriteLine($"=================================================");
            Console.WriteLine($"Generating {libDescriptor.Name} bindings");
            Console.WriteLine($"=================================================");
            var generator = _generators[libDescriptor];
            await generator.Run();
        }

        UpdateReadme();
    }

    private void UpdateReadme()
    {
        var readmeFile = Path.Combine(RepositoryRootFolder, "readme.md");
        if (!File.Exists(readmeFile))
        {
            throw new InvalidOperationException($"Cannot find readme file at {readmeFile}");
        }

        var readmeLines = File.ReadAllLines(readmeFile);
        var newReadme = new StringBuilder();
        bool isAutoGeneratedSection = false;
        for (var i = 0; i < readmeLines.Length; i++)
        {
            var line = readmeLines[i];

            if (line.StartsWith("<!-- XENOATOM_INTEROP BEGIN -"))
            {
                newReadme.AppendLine(line);
                isAutoGeneratedSection = true;

                newReadme.AppendLine();
                newReadme.AppendLine($"The C/C++ header files from the [Alpine Linux](https://www.alpinelinux.org/) `{ApkManager.Version}` were used to generated automatically the .NET P/Invoke bindings.");
                newReadme.AppendLine();
                newReadme.AppendLine("The following libraries are available:");
                newReadme.AppendLine();
                newReadme.AppendLine("| Library | Native | C Version | Description | Supported Architectures | NuGet |");
                newReadme.AppendLine("| ------- | ------ | --------- | ----------- | ----------------------- | ----- |");
                foreach (var libDescriptor in LibDescriptors)
                {
                    var generator = _generators[libDescriptor];

                    newReadme.AppendLine($"| [{generator.ManagedPackageName}](https://github.com/XenoAtom/XenoAtom.Interop/tree/main/src/{libDescriptor.Name}) | {generator.GetNativeLibraryMarkdownLink() ?? ""} | `{generator.NativeVersion ?? "-"}` | {libDescriptor.CppDescription ?? libDescriptor.Summary} | {string.Join(", ", libDescriptor.SupportedArchitectures.Select(x => $"`{x}`"))} | [![NuGet](https://img.shields.io/nuget/v/{generator.ManagedPackageName}.svg)](https://www.nuget.org/packages/{generator.ManagedPackageName}) |");
                }
                newReadme.AppendLine();
            }
            else if (line.StartsWith("<!-- XENOATOM_INTEROP END -"))
            {
                newReadme.AppendLine(line);
                isAutoGeneratedSection = false;
            }
            else if (!isAutoGeneratedSection)
            {
                newReadme.AppendLine(line);
            }
        }

        var newReadmeText = newReadme.ToString();
        if (newReadmeText != string.Join(Environment.NewLine, readmeLines))
        {
            Console.WriteLine($"=================================================");
            File.WriteAllText(readmeFile, newReadmeText);
            Console.WriteLine($"Updated {readmeFile}");
        }
    }
}