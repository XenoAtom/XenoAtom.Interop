// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
using XenoAtom.Interop.CodeGen.common;
using XenoAtom.Interop.CodeGen.libdrm;
using XenoAtom.Interop.CodeGen.libgit2;
using XenoAtom.Interop.CodeGen.musl;
using XenoAtom.Interop.CodeGen.sqlite;
using XenoAtom.Interop.CodeGen.vulkan;
using XenoAtom.Interop.CodeGen.zlib;

namespace XenoAtom.Interop.CodeGen;

partial class Program
{
    /// <summary>
    /// Gets the list of library descriptors generated by the code generator.
    /// </summary>
    private static readonly LibDescriptor[] LibDescriptors =
    [
        new()
        {
            Name = "common",
            Summary = "This package provides the shared types `FixedArray#<T>` to interop between .NET and C/C++.",
            Url = "https://github.com/XenoAtom/Interop",
            Generator = desc => new EmptyGenerator(desc),
            HasGeneratedFolder = false,
            UsageInCSharp =
                """
                Example of using this library in C#:

                ```csharp
                using XenoAtom.Interop;

                // Create a fixed array of 10 integers
                var array = new FixedArray10<int>();
                array[0] = 42;
                array[1] = 43;
                // ...
                ```
                """
        },
        new()
        {
            Name = "musl",
            Summary = "This package provides a low-level and modern .NET P/Invoke wrapper around the musl libc library for accessing low-level sys kernel functions.",
            CppDescription = "musl libc is an implementation of the C standard library providing access to the Linux kernel syscalls.",
            Url = "https://musl.libc.org/",
            UrlDocumentation = "https://musl.libc.org/manual.html",
            Generator = desc => new MuslGenerator(desc),
            ApkDeps = ["musl-dev", "linux-headers"],
            UsageInCSharp =
                """
                Example of using this library in C#:

                ```csharp
                using static XenoAtom.Interop.musl;

                var ret = mkdir("test_directory", S_IRWXU | S_IRWXG | S_IRWXO);
                if (ret == -1)
                {
                    var lerrno = errno;
                    // ...
                }
                ```
                > Notice that is library requires the library [`musl`](https://musl.libc.org/) to be installed on the target system. This library is only supported on Linux.
                >
                > This library is available by default on [Alpine Linux](https://www.alpinelinux.org/). For other distributions, you will need to install the `musl` package.
                """,
            SupportedArchitectures = ["linux-x64", "linux-arm64"]
        },
        new()
        {
            Name = "libgit2",
            Summary = "This package provides a low-level and modern .NET P/Invoke wrapper around the libgit2 library.",
            CppDescription = "libgit2 is a pure C implementation of the git core methods.",
            Url = "https://libgit2.org/",
            UrlDocumentation = "https://libgit2.org/libgit2/",
            NativeNuGets = [new("LibGit2Sharp.NativeBinaries", "2.0.322")],
            Generator = desc => new LibGit2Generator(desc),
            ApkDeps = ["libgit2-dev"],
            UsageInCSharp =
                """
                Example of using this library in C#:

                ```csharp
                using static XenoAtom.Interop.libgit2;

                // Initialize libgit2
                var ret = git_libgit2_init();
                ret.Check(); // Automatically throws LibGit2Exception exception if the return value is not 0

                // Open a repository
                git_repository_open(out var repo, "path/to/repo").Check();

                // Do something with the repository
                // ...
                ```
                """
        },
        new()
        {
            Name = "sqlite",
            Summary = "This package provides a low-level and modern .NET P/Invoke wrapper around the SQLite database engine.",
            CppDescription = "SQLite is a small and fast SQL database engine.",
            Url = "https://www.sqlite.org/",
            UrlDocumentation = "https://www.sqlite.org/docs.html",
            NativeNuGets = [new("SQLitePCLRaw.lib.e_sqlite3", "2.1.8")],
            Generator = desc => new SqliteGenerator(desc),
            ApkDeps = ["sqlite-dev"],
            UsageInCSharp =
                """
                Example of using this library in C#:

                ```csharp
                using static XenoAtom.Interop.sqlite;

                // Open a connection to a database
                var ret = sqlite3_open("path/to/database", out var db);
                if (ret != SQLITE_OK)
                {
                    var errmsg = sqlite3_errmsg(db);
                    // ...
                }

                // Do something with the database
                // ...
                ```
                """
        },
        new()
        {
            Name = "zlib",
            Summary = "This package provides a low-level and modern .NET P/Invoke wrapper around the zlib compression library.",
            CppDescription = "zlib compression library.",
            Url = "https://zlib.net/",
            UrlDocumentation = "https://zlib.net/manual.html",
            NativeNuGets =
            [
                new("elskom.zlib.redist.win", "1.2.13"),
                new("elskom.zlib.redist.linux", "1.2.13"),
                new("elskom.zlib.redist.osx", "1.2.13")
            ],
            Generator = desc => new ZlibGenerator(desc),
            ApkDeps = ["zlib-dev"],
            UsageInCSharp =
                """
                Example of using this library in C#:

                ```csharp
                using static XenoAtom.Interop.zlib;

                // Compress a buffer
                var data = Encoding.UTF8.GetBytes("Hello, World!");
                var compressedData = new byte[32];
                var ret = compress(compressedData, out var compressedSize, data);
                if (ret != Z_OK)
                {
                    // ...
                }

                // Decompress a buffer
                var decompressedData = new byte[32];
                ret = uncompress(decompressedData, out var decompressedSize, compressedData);
                if (ret != Z_OK)
                {
                    // ...
                }
                ```
                """
        },
        new()
        {
            Name = "vulkan",
            Summary = "This package provides a low-level and modern .NET P/Invoke wrapper around the vulkan API.",
            CppDescription = "Vulkan is a low-overhead, cross-platform 3D graphics and compute API.",
            Url = "https://registry.khronos.org/vulkan/",
            UrlDocumentation = "https://registry.khronos.org/vulkan/specs/1.3/styleguide.html",
            Generator = desc => new VulkanGenerator(desc),
            ApkDeps = ["vulkan-headers"],
            GitHubActionPreStep =
                """
                      - name: Set up vulkan dependencies
                        run: |
                          sudo apt-get update
                          sudo apt-get install -y \
                            mesa-vulkan-drivers \
                            libvulkan1 \
                            vulkan-tools
                """
        },
        new()
        {
            Name = "libdrm",
            Summary = "This package provides a low-level and modern .NET P/Invoke wrapper around the libdrm API.",
            CppDescription = "libdrm is a userspace library that provides a user-space API to the Direct Rendering Manager.",
            Url = "https://gitlab.freedesktop.org/mesa/drm",
            UrlDocumentation = "https://gitlab.freedesktop.org/mesa/drm",
            Generator = desc => new LibdrmGenerator(desc),
            ApkDeps = ["libdrm-dev"],
            SupportedArchitectures = [ "linux" ]
        },
    ];
}