//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
namespace XenoAtom.Interop
{
    public static unsafe partial class vulkan
    {
        public enum StdVideoH264ChromaFormatIdc : uint
        {
            STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME = unchecked((uint)0),
            
            STD_VIDEO_H264_CHROMA_FORMAT_IDC_420 = unchecked((uint)1),
            
            STD_VIDEO_H264_CHROMA_FORMAT_IDC_422 = unchecked((uint)2),
            
            STD_VIDEO_H264_CHROMA_FORMAT_IDC_444 = unchecked((uint)3),
            
            STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH264ChromaFormatIdc STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME = StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME;
        
        public const vulkan.StdVideoH264ChromaFormatIdc STD_VIDEO_H264_CHROMA_FORMAT_IDC_420 = StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_420;
        
        public const vulkan.StdVideoH264ChromaFormatIdc STD_VIDEO_H264_CHROMA_FORMAT_IDC_422 = StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_422;
        
        public const vulkan.StdVideoH264ChromaFormatIdc STD_VIDEO_H264_CHROMA_FORMAT_IDC_444 = StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_444;
        
        public const vulkan.StdVideoH264ChromaFormatIdc STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID = StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID;
        
        public const vulkan.StdVideoH264ChromaFormatIdc STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM = StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM;
        
        public enum StdVideoH264ProfileIdc : uint
        {
            STD_VIDEO_H264_PROFILE_IDC_BASELINE = unchecked((uint)66),
            
            STD_VIDEO_H264_PROFILE_IDC_MAIN = unchecked((uint)77),
            
            STD_VIDEO_H264_PROFILE_IDC_HIGH = unchecked((uint)100),
            
            STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE = unchecked((uint)244),
            
            STD_VIDEO_H264_PROFILE_IDC_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH264ProfileIdc STD_VIDEO_H264_PROFILE_IDC_BASELINE = StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_BASELINE;
        
        public const vulkan.StdVideoH264ProfileIdc STD_VIDEO_H264_PROFILE_IDC_MAIN = StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_MAIN;
        
        public const vulkan.StdVideoH264ProfileIdc STD_VIDEO_H264_PROFILE_IDC_HIGH = StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_HIGH;
        
        public const vulkan.StdVideoH264ProfileIdc STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE = StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE;
        
        public const vulkan.StdVideoH264ProfileIdc STD_VIDEO_H264_PROFILE_IDC_INVALID = StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_INVALID;
        
        public const vulkan.StdVideoH264ProfileIdc STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM = StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM;
        
        public enum StdVideoH264LevelIdc : uint
        {
            STD_VIDEO_H264_LEVEL_IDC_1_0 = unchecked((uint)0),
            
            STD_VIDEO_H264_LEVEL_IDC_1_1 = unchecked((uint)1),
            
            STD_VIDEO_H264_LEVEL_IDC_1_2 = unchecked((uint)2),
            
            STD_VIDEO_H264_LEVEL_IDC_1_3 = unchecked((uint)3),
            
            STD_VIDEO_H264_LEVEL_IDC_2_0 = unchecked((uint)4),
            
            STD_VIDEO_H264_LEVEL_IDC_2_1 = unchecked((uint)5),
            
            STD_VIDEO_H264_LEVEL_IDC_2_2 = unchecked((uint)6),
            
            STD_VIDEO_H264_LEVEL_IDC_3_0 = unchecked((uint)7),
            
            STD_VIDEO_H264_LEVEL_IDC_3_1 = unchecked((uint)8),
            
            STD_VIDEO_H264_LEVEL_IDC_3_2 = unchecked((uint)9),
            
            STD_VIDEO_H264_LEVEL_IDC_4_0 = unchecked((uint)10),
            
            STD_VIDEO_H264_LEVEL_IDC_4_1 = unchecked((uint)11),
            
            STD_VIDEO_H264_LEVEL_IDC_4_2 = unchecked((uint)12),
            
            STD_VIDEO_H264_LEVEL_IDC_5_0 = unchecked((uint)13),
            
            STD_VIDEO_H264_LEVEL_IDC_5_1 = unchecked((uint)14),
            
            STD_VIDEO_H264_LEVEL_IDC_5_2 = unchecked((uint)15),
            
            STD_VIDEO_H264_LEVEL_IDC_6_0 = unchecked((uint)16),
            
            STD_VIDEO_H264_LEVEL_IDC_6_1 = unchecked((uint)17),
            
            STD_VIDEO_H264_LEVEL_IDC_6_2 = unchecked((uint)18),
            
            STD_VIDEO_H264_LEVEL_IDC_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_1_0 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_0;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_1_1 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_1;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_1_2 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_2;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_1_3 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_3;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_2_0 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_2_0;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_2_1 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_2_1;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_2_2 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_2_2;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_3_0 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_3_0;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_3_1 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_3_1;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_3_2 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_3_2;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_4_0 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_4_0;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_4_1 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_4_1;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_4_2 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_4_2;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_5_0 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_5_0;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_5_1 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_5_1;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_5_2 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_5_2;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_6_0 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_6_0;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_6_1 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_6_1;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_6_2 = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_6_2;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_INVALID = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_INVALID;
        
        public const vulkan.StdVideoH264LevelIdc STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM = StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM;
        
        public enum StdVideoH264PocType : uint
        {
            STD_VIDEO_H264_POC_TYPE_0 = unchecked((uint)0),
            
            STD_VIDEO_H264_POC_TYPE_1 = unchecked((uint)1),
            
            STD_VIDEO_H264_POC_TYPE_2 = unchecked((uint)2),
            
            STD_VIDEO_H264_POC_TYPE_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H264_POC_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH264PocType STD_VIDEO_H264_POC_TYPE_0 = StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_0;
        
        public const vulkan.StdVideoH264PocType STD_VIDEO_H264_POC_TYPE_1 = StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_1;
        
        public const vulkan.StdVideoH264PocType STD_VIDEO_H264_POC_TYPE_2 = StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_2;
        
        public const vulkan.StdVideoH264PocType STD_VIDEO_H264_POC_TYPE_INVALID = StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_INVALID;
        
        public const vulkan.StdVideoH264PocType STD_VIDEO_H264_POC_TYPE_MAX_ENUM = StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_MAX_ENUM;
        
        public enum StdVideoH264AspectRatioIdc : uint
        {
            STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED = unchecked((uint)0),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE = unchecked((uint)1),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11 = unchecked((uint)2),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11 = unchecked((uint)3),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11 = unchecked((uint)4),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33 = unchecked((uint)5),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11 = unchecked((uint)6),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11 = unchecked((uint)7),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11 = unchecked((uint)8),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33 = unchecked((uint)9),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11 = unchecked((uint)10),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11 = unchecked((uint)11),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33 = unchecked((uint)12),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99 = unchecked((uint)13),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3 = unchecked((uint)14),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2 = unchecked((uint)15),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1 = unchecked((uint)16),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR = unchecked((uint)255),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1 = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID;
        
        public const vulkan.StdVideoH264AspectRatioIdc STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM = StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM;
        
        public enum StdVideoH264WeightedBipredIdc : uint
        {
            STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT = unchecked((uint)0),
            
            STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT = unchecked((uint)1),
            
            STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT = unchecked((uint)2),
            
            STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH264WeightedBipredIdc STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT = StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT;
        
        public const vulkan.StdVideoH264WeightedBipredIdc STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT = StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT;
        
        public const vulkan.StdVideoH264WeightedBipredIdc STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT = StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT;
        
        public const vulkan.StdVideoH264WeightedBipredIdc STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID = StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID;
        
        public const vulkan.StdVideoH264WeightedBipredIdc STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM = StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM;
        
        public enum StdVideoH264ModificationOfPicNumsIdc : uint
        {
            STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT = unchecked((uint)0),
            
            STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD = unchecked((uint)1),
            
            STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM = unchecked((uint)2),
            
            STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END = unchecked((uint)3),
            
            STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH264ModificationOfPicNumsIdc STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT = StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT;
        
        public const vulkan.StdVideoH264ModificationOfPicNumsIdc STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD = StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD;
        
        public const vulkan.StdVideoH264ModificationOfPicNumsIdc STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM = StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM;
        
        public const vulkan.StdVideoH264ModificationOfPicNumsIdc STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END = StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END;
        
        public const vulkan.StdVideoH264ModificationOfPicNumsIdc STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID = StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID;
        
        public const vulkan.StdVideoH264ModificationOfPicNumsIdc STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM = StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM;
        
        public enum StdVideoH264MemMgmtControlOp : uint
        {
            STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END = unchecked((uint)0),
            
            STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM = unchecked((uint)1),
            
            STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM = unchecked((uint)2),
            
            STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM = unchecked((uint)3),
            
            STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX = unchecked((uint)4),
            
            STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL = unchecked((uint)5),
            
            STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM = unchecked((uint)6),
            
            STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH264MemMgmtControlOp STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END;
        
        public const vulkan.StdVideoH264MemMgmtControlOp STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM;
        
        public const vulkan.StdVideoH264MemMgmtControlOp STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM;
        
        public const vulkan.StdVideoH264MemMgmtControlOp STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM;
        
        public const vulkan.StdVideoH264MemMgmtControlOp STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX;
        
        public const vulkan.StdVideoH264MemMgmtControlOp STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL;
        
        public const vulkan.StdVideoH264MemMgmtControlOp STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM;
        
        public const vulkan.StdVideoH264MemMgmtControlOp STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID;
        
        public const vulkan.StdVideoH264MemMgmtControlOp STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM = StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM;
        
        public enum StdVideoH264CabacInitIdc : uint
        {
            STD_VIDEO_H264_CABAC_INIT_IDC_0 = unchecked((uint)0),
            
            STD_VIDEO_H264_CABAC_INIT_IDC_1 = unchecked((uint)1),
            
            STD_VIDEO_H264_CABAC_INIT_IDC_2 = unchecked((uint)2),
            
            STD_VIDEO_H264_CABAC_INIT_IDC_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH264CabacInitIdc STD_VIDEO_H264_CABAC_INIT_IDC_0 = StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_0;
        
        public const vulkan.StdVideoH264CabacInitIdc STD_VIDEO_H264_CABAC_INIT_IDC_1 = StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_1;
        
        public const vulkan.StdVideoH264CabacInitIdc STD_VIDEO_H264_CABAC_INIT_IDC_2 = StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_2;
        
        public const vulkan.StdVideoH264CabacInitIdc STD_VIDEO_H264_CABAC_INIT_IDC_INVALID = StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_INVALID;
        
        public const vulkan.StdVideoH264CabacInitIdc STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM = StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM;
        
        public enum StdVideoH264DisableDeblockingFilterIdc : uint
        {
            STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED = unchecked((uint)0),
            
            STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED = unchecked((uint)1),
            
            STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL = unchecked((uint)2),
            
            STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH264DisableDeblockingFilterIdc STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED = StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED;
        
        public const vulkan.StdVideoH264DisableDeblockingFilterIdc STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED = StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED;
        
        public const vulkan.StdVideoH264DisableDeblockingFilterIdc STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL = StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL;
        
        public const vulkan.StdVideoH264DisableDeblockingFilterIdc STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID = StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID;
        
        public const vulkan.StdVideoH264DisableDeblockingFilterIdc STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM = StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM;
        
        public enum StdVideoH264SliceType : uint
        {
            STD_VIDEO_H264_SLICE_TYPE_P = unchecked((uint)0),
            
            STD_VIDEO_H264_SLICE_TYPE_B = unchecked((uint)1),
            
            STD_VIDEO_H264_SLICE_TYPE_I = unchecked((uint)2),
            
            STD_VIDEO_H264_SLICE_TYPE_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH264SliceType STD_VIDEO_H264_SLICE_TYPE_P = StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_P;
        
        public const vulkan.StdVideoH264SliceType STD_VIDEO_H264_SLICE_TYPE_B = StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_B;
        
        public const vulkan.StdVideoH264SliceType STD_VIDEO_H264_SLICE_TYPE_I = StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_I;
        
        public const vulkan.StdVideoH264SliceType STD_VIDEO_H264_SLICE_TYPE_INVALID = StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_INVALID;
        
        public const vulkan.StdVideoH264SliceType STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM = StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM;
        
        public enum StdVideoH264PictureType : uint
        {
            STD_VIDEO_H264_PICTURE_TYPE_P = unchecked((uint)0),
            
            STD_VIDEO_H264_PICTURE_TYPE_B = unchecked((uint)1),
            
            STD_VIDEO_H264_PICTURE_TYPE_I = unchecked((uint)2),
            
            STD_VIDEO_H264_PICTURE_TYPE_IDR = unchecked((uint)5),
            
            STD_VIDEO_H264_PICTURE_TYPE_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH264PictureType STD_VIDEO_H264_PICTURE_TYPE_P = StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_P;
        
        public const vulkan.StdVideoH264PictureType STD_VIDEO_H264_PICTURE_TYPE_B = StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_B;
        
        public const vulkan.StdVideoH264PictureType STD_VIDEO_H264_PICTURE_TYPE_I = StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_I;
        
        public const vulkan.StdVideoH264PictureType STD_VIDEO_H264_PICTURE_TYPE_IDR = StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_IDR;
        
        public const vulkan.StdVideoH264PictureType STD_VIDEO_H264_PICTURE_TYPE_INVALID = StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_INVALID;
        
        public const vulkan.StdVideoH264PictureType STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM = StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM;
        
        public enum StdVideoH264NonVclNaluType : uint
        {
            STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS = unchecked((uint)0),
            
            STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS = unchecked((uint)1),
            
            STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD = unchecked((uint)2),
            
            STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX = unchecked((uint)3),
            
            STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE = unchecked((uint)4),
            
            STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM = unchecked((uint)5),
            
            STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED = unchecked((uint)6),
            
            STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH264NonVclNaluType STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS;
        
        public const vulkan.StdVideoH264NonVclNaluType STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS;
        
        public const vulkan.StdVideoH264NonVclNaluType STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD;
        
        public const vulkan.StdVideoH264NonVclNaluType STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX;
        
        public const vulkan.StdVideoH264NonVclNaluType STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE;
        
        public const vulkan.StdVideoH264NonVclNaluType STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM;
        
        public const vulkan.StdVideoH264NonVclNaluType STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED;
        
        public const vulkan.StdVideoH264NonVclNaluType STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID;
        
        public const vulkan.StdVideoH264NonVclNaluType STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM = StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM;
        
        public partial struct StdVideoH264SpsVuiFlags
        {
            private uint __bitfield__0;
            
            public uint aspect_ratio_info_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 0) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111110)) | ((((uint)value) & (unchecked((uint)0b1)) << 0));
                }
            }
            
            public uint overscan_info_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 1) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111101)) | ((((uint)value) & (unchecked((uint)0b1)) << 1));
                }
            }
            
            public uint overscan_appropriate_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 2) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111011)) | ((((uint)value) & (unchecked((uint)0b1)) << 2));
                }
            }
            
            public uint video_signal_type_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 3) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111110111)) | ((((uint)value) & (unchecked((uint)0b1)) << 3));
                }
            }
            
            public uint video_full_range_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 4) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111101111)) | ((((uint)value) & (unchecked((uint)0b1)) << 4));
                }
            }
            
            public uint color_description_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 5) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111011111)) | ((((uint)value) & (unchecked((uint)0b1)) << 5));
                }
            }
            
            public uint chroma_loc_info_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 6) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111110111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 6));
                }
            }
            
            public uint timing_info_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 7) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111101111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 7));
                }
            }
            
            public uint fixed_frame_rate_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 8) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111011111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 8));
                }
            }
            
            public uint bitstream_restriction_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 9) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111110111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 9));
                }
            }
            
            public uint nal_hrd_parameters_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 10) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111101111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 10));
                }
            }
            
            public uint vcl_hrd_parameters_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 11) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111011111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 11));
                }
            }
        }
        
        public unsafe partial struct StdVideoH264HrdParameters
        {
            public byte cpb_cnt_minus1;
            
            public byte bit_rate_scale;
            
            public byte cpb_size_scale;
            
            public byte reserved1;
            
            public fixed uint bit_rate_value_minus1[32];
            
            public fixed uint cpb_size_value_minus1[32];
            
            public fixed byte cbr_flag[32];
            
            public uint initial_cpb_removal_delay_length_minus1;
            
            public uint cpb_removal_delay_length_minus1;
            
            public uint dpb_output_delay_length_minus1;
            
            public uint time_offset_length;
        }
        
        public partial struct StdVideoH264SequenceParameterSetVui
        {
            public vulkan.StdVideoH264SpsVuiFlags flags;
            
            public vulkan.StdVideoH264AspectRatioIdc aspect_ratio_idc;
            
            public ushort sar_width;
            
            public ushort sar_height;
            
            public byte video_format;
            
            public byte colour_primaries;
            
            public byte transfer_characteristics;
            
            public byte matrix_coefficients;
            
            public uint num_units_in_tick;
            
            public uint time_scale;
            
            public byte max_num_reorder_frames;
            
            public byte max_dec_frame_buffering;
            
            public byte chroma_sample_loc_type_top_field;
            
            public byte chroma_sample_loc_type_bottom_field;
            
            public uint reserved1;
            
            public vulkan.StdVideoH264HrdParameters* pHrdParameters;
        }
        
        public partial struct StdVideoH264SpsFlags
        {
            private uint __bitfield__0;
            
            public uint constraint_set0_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 0) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111110)) | ((((uint)value) & (unchecked((uint)0b1)) << 0));
                }
            }
            
            public uint constraint_set1_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 1) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111101)) | ((((uint)value) & (unchecked((uint)0b1)) << 1));
                }
            }
            
            public uint constraint_set2_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 2) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111011)) | ((((uint)value) & (unchecked((uint)0b1)) << 2));
                }
            }
            
            public uint constraint_set3_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 3) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111110111)) | ((((uint)value) & (unchecked((uint)0b1)) << 3));
                }
            }
            
            public uint constraint_set4_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 4) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111101111)) | ((((uint)value) & (unchecked((uint)0b1)) << 4));
                }
            }
            
            public uint constraint_set5_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 5) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111011111)) | ((((uint)value) & (unchecked((uint)0b1)) << 5));
                }
            }
            
            public uint direct_8x8_inference_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 6) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111110111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 6));
                }
            }
            
            public uint mb_adaptive_frame_field_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 7) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111101111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 7));
                }
            }
            
            public uint frame_mbs_only_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 8) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111011111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 8));
                }
            }
            
            public uint delta_pic_order_always_zero_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 9) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111110111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 9));
                }
            }
            
            public uint separate_colour_plane_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 10) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111101111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 10));
                }
            }
            
            public uint gaps_in_frame_num_value_allowed_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 11) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111011111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 11));
                }
            }
            
            public uint qpprime_y_zero_transform_bypass_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 12) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111110111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 12));
                }
            }
            
            public uint frame_cropping_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 13) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111101111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 13));
                }
            }
            
            public uint seq_scaling_matrix_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 14) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111011111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 14));
                }
            }
            
            public uint vui_parameters_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 15) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111110111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 15));
                }
            }
        }
        
        public partial struct StdVideoH264ScalingLists
        {
            public ushort scaling_list_present_mask;
            
            public ushort use_default_scaling_matrix_mask;
            
            public FixedArray6<FixedArray16<byte>> ScalingList4x4;
            
            public FixedArray6<FixedArray64<byte>> ScalingList8x8;
        }
        
        public partial struct StdVideoH264SequenceParameterSet
        {
            public vulkan.StdVideoH264SpsFlags flags;
            
            public vulkan.StdVideoH264ProfileIdc profile_idc;
            
            public vulkan.StdVideoH264LevelIdc level_idc;
            
            public vulkan.StdVideoH264ChromaFormatIdc chroma_format_idc;
            
            public byte seq_parameter_set_id;
            
            public byte bit_depth_luma_minus8;
            
            public byte bit_depth_chroma_minus8;
            
            public byte log2_max_frame_num_minus4;
            
            public vulkan.StdVideoH264PocType pic_order_cnt_type;
            
            public int offset_for_non_ref_pic;
            
            public int offset_for_top_to_bottom_field;
            
            public byte log2_max_pic_order_cnt_lsb_minus4;
            
            public byte num_ref_frames_in_pic_order_cnt_cycle;
            
            public byte max_num_ref_frames;
            
            public byte reserved1;
            
            public uint pic_width_in_mbs_minus1;
            
            public uint pic_height_in_map_units_minus1;
            
            public uint frame_crop_left_offset;
            
            public uint frame_crop_right_offset;
            
            public uint frame_crop_top_offset;
            
            public uint frame_crop_bottom_offset;
            
            public uint reserved2;
            
            public int* pOffsetForRefFrame;
            
            public vulkan.StdVideoH264ScalingLists* pScalingLists;
            
            public vulkan.StdVideoH264SequenceParameterSetVui* pSequenceParameterSetVui;
        }
        
        public partial struct StdVideoH264PpsFlags
        {
            private uint __bitfield__0;
            
            public uint transform_8x8_mode_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 0) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111110)) | ((((uint)value) & (unchecked((uint)0b1)) << 0));
                }
            }
            
            public uint redundant_pic_cnt_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 1) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111101)) | ((((uint)value) & (unchecked((uint)0b1)) << 1));
                }
            }
            
            public uint constrained_intra_pred_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 2) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111011)) | ((((uint)value) & (unchecked((uint)0b1)) << 2));
                }
            }
            
            public uint deblocking_filter_control_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 3) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111110111)) | ((((uint)value) & (unchecked((uint)0b1)) << 3));
                }
            }
            
            public uint weighted_pred_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 4) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111101111)) | ((((uint)value) & (unchecked((uint)0b1)) << 4));
                }
            }
            
            public uint bottom_field_pic_order_in_frame_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 5) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111011111)) | ((((uint)value) & (unchecked((uint)0b1)) << 5));
                }
            }
            
            public uint entropy_coding_mode_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 6) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111110111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 6));
                }
            }
            
            public uint pic_scaling_matrix_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 7) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111101111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 7));
                }
            }
        }
        
        public partial struct StdVideoH264PictureParameterSet
        {
            public vulkan.StdVideoH264PpsFlags flags;
            
            public byte seq_parameter_set_id;
            
            public byte pic_parameter_set_id;
            
            public byte num_ref_idx_l0_default_active_minus1;
            
            public byte num_ref_idx_l1_default_active_minus1;
            
            public vulkan.StdVideoH264WeightedBipredIdc weighted_bipred_idc;
            
            public sbyte pic_init_qp_minus26;
            
            public sbyte pic_init_qs_minus26;
            
            public sbyte chroma_qp_index_offset;
            
            public sbyte second_chroma_qp_index_offset;
            
            public vulkan.StdVideoH264ScalingLists* pScalingLists;
        }
    }
}
