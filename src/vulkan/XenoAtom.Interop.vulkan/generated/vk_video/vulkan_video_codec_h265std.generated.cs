//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
namespace XenoAtom.Interop
{
    public static unsafe partial class vulkan
    {
        public enum StdVideoH265ChromaFormatIdc : uint
        {
            STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME = unchecked((uint)0),
            
            STD_VIDEO_H265_CHROMA_FORMAT_IDC_420 = unchecked((uint)1),
            
            STD_VIDEO_H265_CHROMA_FORMAT_IDC_422 = unchecked((uint)2),
            
            STD_VIDEO_H265_CHROMA_FORMAT_IDC_444 = unchecked((uint)3),
            
            STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH265ChromaFormatIdc STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME = StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME;
        
        public const vulkan.StdVideoH265ChromaFormatIdc STD_VIDEO_H265_CHROMA_FORMAT_IDC_420 = StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_420;
        
        public const vulkan.StdVideoH265ChromaFormatIdc STD_VIDEO_H265_CHROMA_FORMAT_IDC_422 = StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_422;
        
        public const vulkan.StdVideoH265ChromaFormatIdc STD_VIDEO_H265_CHROMA_FORMAT_IDC_444 = StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_444;
        
        public const vulkan.StdVideoH265ChromaFormatIdc STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID = StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID;
        
        public const vulkan.StdVideoH265ChromaFormatIdc STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM = StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM;
        
        public enum StdVideoH265ProfileIdc : uint
        {
            STD_VIDEO_H265_PROFILE_IDC_MAIN = unchecked((uint)1),
            
            STD_VIDEO_H265_PROFILE_IDC_MAIN_10 = unchecked((uint)2),
            
            STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE = unchecked((uint)3),
            
            STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS = unchecked((uint)4),
            
            STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS = unchecked((uint)9),
            
            STD_VIDEO_H265_PROFILE_IDC_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH265ProfileIdc STD_VIDEO_H265_PROFILE_IDC_MAIN = StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAIN;
        
        public const vulkan.StdVideoH265ProfileIdc STD_VIDEO_H265_PROFILE_IDC_MAIN_10 = StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAIN_10;
        
        public const vulkan.StdVideoH265ProfileIdc STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE = StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE;
        
        public const vulkan.StdVideoH265ProfileIdc STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS = StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS;
        
        public const vulkan.StdVideoH265ProfileIdc STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS = StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS;
        
        public const vulkan.StdVideoH265ProfileIdc STD_VIDEO_H265_PROFILE_IDC_INVALID = StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_INVALID;
        
        public const vulkan.StdVideoH265ProfileIdc STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM = StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM;
        
        public enum StdVideoH265LevelIdc : uint
        {
            STD_VIDEO_H265_LEVEL_IDC_1_0 = unchecked((uint)0),
            
            STD_VIDEO_H265_LEVEL_IDC_2_0 = unchecked((uint)1),
            
            STD_VIDEO_H265_LEVEL_IDC_2_1 = unchecked((uint)2),
            
            STD_VIDEO_H265_LEVEL_IDC_3_0 = unchecked((uint)3),
            
            STD_VIDEO_H265_LEVEL_IDC_3_1 = unchecked((uint)4),
            
            STD_VIDEO_H265_LEVEL_IDC_4_0 = unchecked((uint)5),
            
            STD_VIDEO_H265_LEVEL_IDC_4_1 = unchecked((uint)6),
            
            STD_VIDEO_H265_LEVEL_IDC_5_0 = unchecked((uint)7),
            
            STD_VIDEO_H265_LEVEL_IDC_5_1 = unchecked((uint)8),
            
            STD_VIDEO_H265_LEVEL_IDC_5_2 = unchecked((uint)9),
            
            STD_VIDEO_H265_LEVEL_IDC_6_0 = unchecked((uint)10),
            
            STD_VIDEO_H265_LEVEL_IDC_6_1 = unchecked((uint)11),
            
            STD_VIDEO_H265_LEVEL_IDC_6_2 = unchecked((uint)12),
            
            STD_VIDEO_H265_LEVEL_IDC_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH265LevelIdc STD_VIDEO_H265_LEVEL_IDC_1_0 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_1_0;
        
        public const vulkan.StdVideoH265LevelIdc STD_VIDEO_H265_LEVEL_IDC_2_0 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_2_0;
        
        public const vulkan.StdVideoH265LevelIdc STD_VIDEO_H265_LEVEL_IDC_2_1 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_2_1;
        
        public const vulkan.StdVideoH265LevelIdc STD_VIDEO_H265_LEVEL_IDC_3_0 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_3_0;
        
        public const vulkan.StdVideoH265LevelIdc STD_VIDEO_H265_LEVEL_IDC_3_1 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_3_1;
        
        public const vulkan.StdVideoH265LevelIdc STD_VIDEO_H265_LEVEL_IDC_4_0 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_4_0;
        
        public const vulkan.StdVideoH265LevelIdc STD_VIDEO_H265_LEVEL_IDC_4_1 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_4_1;
        
        public const vulkan.StdVideoH265LevelIdc STD_VIDEO_H265_LEVEL_IDC_5_0 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_5_0;
        
        public const vulkan.StdVideoH265LevelIdc STD_VIDEO_H265_LEVEL_IDC_5_1 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_5_1;
        
        public const vulkan.StdVideoH265LevelIdc STD_VIDEO_H265_LEVEL_IDC_5_2 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_5_2;
        
        public const vulkan.StdVideoH265LevelIdc STD_VIDEO_H265_LEVEL_IDC_6_0 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_6_0;
        
        public const vulkan.StdVideoH265LevelIdc STD_VIDEO_H265_LEVEL_IDC_6_1 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_6_1;
        
        public const vulkan.StdVideoH265LevelIdc STD_VIDEO_H265_LEVEL_IDC_6_2 = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_6_2;
        
        public const vulkan.StdVideoH265LevelIdc STD_VIDEO_H265_LEVEL_IDC_INVALID = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_INVALID;
        
        public const vulkan.StdVideoH265LevelIdc STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM = StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM;
        
        public enum StdVideoH265SliceType : uint
        {
            STD_VIDEO_H265_SLICE_TYPE_B = unchecked((uint)0),
            
            STD_VIDEO_H265_SLICE_TYPE_P = unchecked((uint)1),
            
            STD_VIDEO_H265_SLICE_TYPE_I = unchecked((uint)2),
            
            STD_VIDEO_H265_SLICE_TYPE_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH265SliceType STD_VIDEO_H265_SLICE_TYPE_B = StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_B;
        
        public const vulkan.StdVideoH265SliceType STD_VIDEO_H265_SLICE_TYPE_P = StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_P;
        
        public const vulkan.StdVideoH265SliceType STD_VIDEO_H265_SLICE_TYPE_I = StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_I;
        
        public const vulkan.StdVideoH265SliceType STD_VIDEO_H265_SLICE_TYPE_INVALID = StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_INVALID;
        
        public const vulkan.StdVideoH265SliceType STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM = StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM;
        
        public enum StdVideoH265PictureType : uint
        {
            STD_VIDEO_H265_PICTURE_TYPE_P = unchecked((uint)0),
            
            STD_VIDEO_H265_PICTURE_TYPE_B = unchecked((uint)1),
            
            STD_VIDEO_H265_PICTURE_TYPE_I = unchecked((uint)2),
            
            STD_VIDEO_H265_PICTURE_TYPE_IDR = unchecked((uint)3),
            
            STD_VIDEO_H265_PICTURE_TYPE_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH265PictureType STD_VIDEO_H265_PICTURE_TYPE_P = StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_P;
        
        public const vulkan.StdVideoH265PictureType STD_VIDEO_H265_PICTURE_TYPE_B = StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_B;
        
        public const vulkan.StdVideoH265PictureType STD_VIDEO_H265_PICTURE_TYPE_I = StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_I;
        
        public const vulkan.StdVideoH265PictureType STD_VIDEO_H265_PICTURE_TYPE_IDR = StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_IDR;
        
        public const vulkan.StdVideoH265PictureType STD_VIDEO_H265_PICTURE_TYPE_INVALID = StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_INVALID;
        
        public const vulkan.StdVideoH265PictureType STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM = StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM;
        
        public enum StdVideoH265AspectRatioIdc : uint
        {
            STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED = unchecked((uint)0),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE = unchecked((uint)1),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11 = unchecked((uint)2),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11 = unchecked((uint)3),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11 = unchecked((uint)4),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33 = unchecked((uint)5),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11 = unchecked((uint)6),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11 = unchecked((uint)7),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11 = unchecked((uint)8),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33 = unchecked((uint)9),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11 = unchecked((uint)10),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11 = unchecked((uint)11),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33 = unchecked((uint)12),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99 = unchecked((uint)13),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3 = unchecked((uint)14),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2 = unchecked((uint)15),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1 = unchecked((uint)16),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR = unchecked((uint)255),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID = unchecked((uint)2147483647),
            
            STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1 = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID;
        
        public const vulkan.StdVideoH265AspectRatioIdc STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM = StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM;
        
        public unsafe partial struct StdVideoH265DecPicBufMgr
        {
            public fixed uint max_latency_increase_plus1[7];
            
            public fixed byte max_dec_pic_buffering_minus1[7];
            
            public fixed byte max_num_reorder_pics[7];
        }
        
        public unsafe partial struct StdVideoH265SubLayerHrdParameters
        {
            public fixed uint bit_rate_value_minus1[32];
            
            public fixed uint cpb_size_value_minus1[32];
            
            public fixed uint cpb_size_du_value_minus1[32];
            
            public fixed uint bit_rate_du_value_minus1[32];
            
            public uint cbr_flag;
        }
        
        public partial struct StdVideoH265HrdFlags
        {
            private uint __bitfield__0;
            
            public uint nal_hrd_parameters_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 0) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111110)) | ((((uint)value) & (unchecked((uint)0b1)) << 0));
                }
            }
            
            public uint vcl_hrd_parameters_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 1) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111101)) | ((((uint)value) & (unchecked((uint)0b1)) << 1));
                }
            }
            
            public uint sub_pic_hrd_params_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 2) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111011)) | ((((uint)value) & (unchecked((uint)0b1)) << 2));
                }
            }
            
            public uint sub_pic_cpb_params_in_pic_timing_sei_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 3) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111110111)) | ((((uint)value) & (unchecked((uint)0b1)) << 3));
                }
            }
            
            public uint fixed_pic_rate_general_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 4) & 0b11111111));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111000000001111)) | ((((uint)value) & (unchecked((uint)0b11111111)) << 4));
                }
            }
            
            public uint fixed_pic_rate_within_cvs_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 12) & 0b11111111));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111100000000111111111111)) | ((((uint)value) & (unchecked((uint)0b11111111)) << 12));
                }
            }
            
            public uint low_delay_hrd_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 20) & 0b11111111));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11110000000011111111111111111111)) | ((((uint)value) & (unchecked((uint)0b11111111)) << 20));
                }
            }
        }
        
        public unsafe partial struct StdVideoH265HrdParameters
        {
            public vulkan.StdVideoH265HrdFlags flags;
            
            public byte tick_divisor_minus2;
            
            public byte du_cpb_removal_delay_increment_length_minus1;
            
            public byte dpb_output_delay_du_length_minus1;
            
            public byte bit_rate_scale;
            
            public byte cpb_size_scale;
            
            public byte cpb_size_du_scale;
            
            public byte initial_cpb_removal_delay_length_minus1;
            
            public byte au_cpb_removal_delay_length_minus1;
            
            public byte dpb_output_delay_length_minus1;
            
            public fixed byte cpb_cnt_minus1[7];
            
            public fixed ushort elemental_duration_in_tc_minus1[7];
            
            public fixed ushort reserved[3];
            
            public vulkan.StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal;
            
            public vulkan.StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl;
        }
        
        public partial struct StdVideoH265VpsFlags
        {
            private uint __bitfield__0;
            
            public uint vps_temporal_id_nesting_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 0) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111110)) | ((((uint)value) & (unchecked((uint)0b1)) << 0));
                }
            }
            
            public uint vps_sub_layer_ordering_info_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 1) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111101)) | ((((uint)value) & (unchecked((uint)0b1)) << 1));
                }
            }
            
            public uint vps_timing_info_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 2) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111011)) | ((((uint)value) & (unchecked((uint)0b1)) << 2));
                }
            }
            
            public uint vps_poc_proportional_to_timing_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 3) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111110111)) | ((((uint)value) & (unchecked((uint)0b1)) << 3));
                }
            }
        }
        
        public partial struct StdVideoH265ProfileTierLevelFlags
        {
            private uint __bitfield__0;
            
            public uint general_tier_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 0) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111110)) | ((((uint)value) & (unchecked((uint)0b1)) << 0));
                }
            }
            
            public uint general_progressive_source_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 1) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111101)) | ((((uint)value) & (unchecked((uint)0b1)) << 1));
                }
            }
            
            public uint general_interlaced_source_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 2) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111011)) | ((((uint)value) & (unchecked((uint)0b1)) << 2));
                }
            }
            
            public uint general_non_packed_constraint_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 3) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111110111)) | ((((uint)value) & (unchecked((uint)0b1)) << 3));
                }
            }
            
            public uint general_frame_only_constraint_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 4) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111101111)) | ((((uint)value) & (unchecked((uint)0b1)) << 4));
                }
            }
        }
        
        public partial struct StdVideoH265ProfileTierLevel
        {
            public vulkan.StdVideoH265ProfileTierLevelFlags flags;
            
            public vulkan.StdVideoH265ProfileIdc general_profile_idc;
            
            public vulkan.StdVideoH265LevelIdc general_level_idc;
        }
        
        public partial struct StdVideoH265VideoParameterSet
        {
            public vulkan.StdVideoH265VpsFlags flags;
            
            public byte vps_video_parameter_set_id;
            
            public byte vps_max_sub_layers_minus1;
            
            public byte reserved1;
            
            public byte reserved2;
            
            public uint vps_num_units_in_tick;
            
            public uint vps_time_scale;
            
            public uint vps_num_ticks_poc_diff_one_minus1;
            
            public uint reserved3;
            
            public vulkan.StdVideoH265DecPicBufMgr* pDecPicBufMgr;
            
            public vulkan.StdVideoH265HrdParameters* pHrdParameters;
            
            public vulkan.StdVideoH265ProfileTierLevel* pProfileTierLevel;
        }
        
        public unsafe partial struct StdVideoH265ScalingLists
        {
            public FixedArray6<FixedArray16<byte>> ScalingList4x4;
            
            public FixedArray6<FixedArray64<byte>> ScalingList8x8;
            
            public FixedArray6<FixedArray64<byte>> ScalingList16x16;
            
            public FixedArray2<FixedArray64<byte>> ScalingList32x32;
            
            public fixed byte ScalingListDCCoef16x16[6];
            
            public fixed byte ScalingListDCCoef32x32[2];
        }
        
        public partial struct StdVideoH265SpsVuiFlags
        {
            private uint __bitfield__0;
            
            public uint aspect_ratio_info_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 0) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111110)) | ((((uint)value) & (unchecked((uint)0b1)) << 0));
                }
            }
            
            public uint overscan_info_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 1) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111101)) | ((((uint)value) & (unchecked((uint)0b1)) << 1));
                }
            }
            
            public uint overscan_appropriate_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 2) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111011)) | ((((uint)value) & (unchecked((uint)0b1)) << 2));
                }
            }
            
            public uint video_signal_type_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 3) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111110111)) | ((((uint)value) & (unchecked((uint)0b1)) << 3));
                }
            }
            
            public uint video_full_range_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 4) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111101111)) | ((((uint)value) & (unchecked((uint)0b1)) << 4));
                }
            }
            
            public uint colour_description_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 5) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111011111)) | ((((uint)value) & (unchecked((uint)0b1)) << 5));
                }
            }
            
            public uint chroma_loc_info_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 6) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111110111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 6));
                }
            }
            
            public uint neutral_chroma_indication_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 7) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111101111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 7));
                }
            }
            
            public uint field_seq_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 8) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111011111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 8));
                }
            }
            
            public uint frame_field_info_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 9) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111110111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 9));
                }
            }
            
            public uint default_display_window_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 10) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111101111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 10));
                }
            }
            
            public uint vui_timing_info_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 11) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111011111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 11));
                }
            }
            
            public uint vui_poc_proportional_to_timing_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 12) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111110111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 12));
                }
            }
            
            public uint vui_hrd_parameters_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 13) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111101111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 13));
                }
            }
            
            public uint bitstream_restriction_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 14) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111011111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 14));
                }
            }
            
            public uint tiles_fixed_structure_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 15) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111110111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 15));
                }
            }
            
            public uint motion_vectors_over_pic_boundaries_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 16) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111101111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 16));
                }
            }
            
            public uint restricted_ref_pic_lists_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 17) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111011111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 17));
                }
            }
        }
        
        public partial struct StdVideoH265SequenceParameterSetVui
        {
            public vulkan.StdVideoH265SpsVuiFlags flags;
            
            public vulkan.StdVideoH265AspectRatioIdc aspect_ratio_idc;
            
            public ushort sar_width;
            
            public ushort sar_height;
            
            public byte video_format;
            
            public byte colour_primaries;
            
            public byte transfer_characteristics;
            
            public byte matrix_coeffs;
            
            public byte chroma_sample_loc_type_top_field;
            
            public byte chroma_sample_loc_type_bottom_field;
            
            public byte reserved1;
            
            public byte reserved2;
            
            public ushort def_disp_win_left_offset;
            
            public ushort def_disp_win_right_offset;
            
            public ushort def_disp_win_top_offset;
            
            public ushort def_disp_win_bottom_offset;
            
            public uint vui_num_units_in_tick;
            
            public uint vui_time_scale;
            
            public uint vui_num_ticks_poc_diff_one_minus1;
            
            public ushort min_spatial_segmentation_idc;
            
            public ushort reserved3;
            
            public byte max_bytes_per_pic_denom;
            
            public byte max_bits_per_min_cu_denom;
            
            public byte log2_max_mv_length_horizontal;
            
            public byte log2_max_mv_length_vertical;
            
            public vulkan.StdVideoH265HrdParameters* pHrdParameters;
        }
        
        public partial struct StdVideoH265PredictorPaletteEntries
        {
            public FixedArray3<FixedArray128<ushort>> PredictorPaletteEntries;
        }
        
        public partial struct StdVideoH265SpsFlags
        {
            private uint __bitfield__0;
            
            public uint sps_temporal_id_nesting_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 0) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111110)) | ((((uint)value) & (unchecked((uint)0b1)) << 0));
                }
            }
            
            public uint separate_colour_plane_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 1) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111101)) | ((((uint)value) & (unchecked((uint)0b1)) << 1));
                }
            }
            
            public uint conformance_window_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 2) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111011)) | ((((uint)value) & (unchecked((uint)0b1)) << 2));
                }
            }
            
            public uint sps_sub_layer_ordering_info_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 3) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111110111)) | ((((uint)value) & (unchecked((uint)0b1)) << 3));
                }
            }
            
            public uint scaling_list_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 4) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111101111)) | ((((uint)value) & (unchecked((uint)0b1)) << 4));
                }
            }
            
            public uint sps_scaling_list_data_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 5) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111011111)) | ((((uint)value) & (unchecked((uint)0b1)) << 5));
                }
            }
            
            public uint amp_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 6) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111110111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 6));
                }
            }
            
            public uint sample_adaptive_offset_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 7) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111101111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 7));
                }
            }
            
            public uint pcm_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 8) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111011111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 8));
                }
            }
            
            public uint pcm_loop_filter_disabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 9) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111110111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 9));
                }
            }
            
            public uint long_term_ref_pics_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 10) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111101111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 10));
                }
            }
            
            public uint sps_temporal_mvp_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 11) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111011111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 11));
                }
            }
            
            public uint strong_intra_smoothing_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 12) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111110111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 12));
                }
            }
            
            public uint vui_parameters_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 13) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111101111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 13));
                }
            }
            
            public uint sps_extension_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 14) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111011111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 14));
                }
            }
            
            public uint sps_range_extension_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 15) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111110111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 15));
                }
            }
            
            public uint transform_skip_rotation_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 16) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111101111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 16));
                }
            }
            
            public uint transform_skip_context_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 17) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111011111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 17));
                }
            }
            
            public uint implicit_rdpcm_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 18) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111110111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 18));
                }
            }
            
            public uint explicit_rdpcm_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 19) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111101111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 19));
                }
            }
            
            public uint extended_precision_processing_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 20) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111011111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 20));
                }
            }
            
            public uint intra_smoothing_disabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 21) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111110111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 21));
                }
            }
            
            public uint high_precision_offsets_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 22) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111101111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 22));
                }
            }
            
            public uint persistent_rice_adaptation_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 23) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111011111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 23));
                }
            }
            
            public uint cabac_bypass_alignment_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 24) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111110111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 24));
                }
            }
            
            public uint sps_scc_extension_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 25) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111101111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 25));
                }
            }
            
            public uint sps_curr_pic_ref_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 26) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111011111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 26));
                }
            }
            
            public uint palette_mode_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 27) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11110111111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 27));
                }
            }
            
            public uint sps_palette_predictor_initializers_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 28) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11101111111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 28));
                }
            }
            
            public uint intra_boundary_filtering_disabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 29) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11011111111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 29));
                }
            }
        }
        
        public partial struct StdVideoH265ShortTermRefPicSetFlags
        {
            private uint __bitfield__0;
            
            public uint inter_ref_pic_set_prediction_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 0) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111110)) | ((((uint)value) & (unchecked((uint)0b1)) << 0));
                }
            }
            
            public uint delta_rps_sign
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 1) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111101)) | ((((uint)value) & (unchecked((uint)0b1)) << 1));
                }
            }
        }
        
        public unsafe partial struct StdVideoH265ShortTermRefPicSet
        {
            public vulkan.StdVideoH265ShortTermRefPicSetFlags flags;
            
            public uint delta_idx_minus1;
            
            public ushort use_delta_flag;
            
            public ushort abs_delta_rps_minus1;
            
            public ushort used_by_curr_pic_flag;
            
            public ushort used_by_curr_pic_s0_flag;
            
            public ushort used_by_curr_pic_s1_flag;
            
            public ushort reserved1;
            
            public byte reserved2;
            
            public byte reserved3;
            
            public byte num_negative_pics;
            
            public byte num_positive_pics;
            
            public fixed ushort delta_poc_s0_minus1[16];
            
            public fixed ushort delta_poc_s1_minus1[16];
        }
        
        public unsafe partial struct StdVideoH265LongTermRefPicsSps
        {
            public uint used_by_curr_pic_lt_sps_flag;
            
            public fixed uint lt_ref_pic_poc_lsb_sps[32];
        }
        
        public partial struct StdVideoH265SequenceParameterSet
        {
            public vulkan.StdVideoH265SpsFlags flags;
            
            public vulkan.StdVideoH265ChromaFormatIdc chroma_format_idc;
            
            public uint pic_width_in_luma_samples;
            
            public uint pic_height_in_luma_samples;
            
            public byte sps_video_parameter_set_id;
            
            public byte sps_max_sub_layers_minus1;
            
            public byte sps_seq_parameter_set_id;
            
            public byte bit_depth_luma_minus8;
            
            public byte bit_depth_chroma_minus8;
            
            public byte log2_max_pic_order_cnt_lsb_minus4;
            
            public byte log2_min_luma_coding_block_size_minus3;
            
            public byte log2_diff_max_min_luma_coding_block_size;
            
            public byte log2_min_luma_transform_block_size_minus2;
            
            public byte log2_diff_max_min_luma_transform_block_size;
            
            public byte max_transform_hierarchy_depth_inter;
            
            public byte max_transform_hierarchy_depth_intra;
            
            public byte num_short_term_ref_pic_sets;
            
            public byte num_long_term_ref_pics_sps;
            
            public byte pcm_sample_bit_depth_luma_minus1;
            
            public byte pcm_sample_bit_depth_chroma_minus1;
            
            public byte log2_min_pcm_luma_coding_block_size_minus3;
            
            public byte log2_diff_max_min_pcm_luma_coding_block_size;
            
            public byte reserved1;
            
            public byte reserved2;
            
            public byte palette_max_size;
            
            public byte delta_palette_max_predictor_size;
            
            public byte motion_vector_resolution_control_idc;
            
            public byte sps_num_palette_predictor_initializers_minus1;
            
            public uint conf_win_left_offset;
            
            public uint conf_win_right_offset;
            
            public uint conf_win_top_offset;
            
            public uint conf_win_bottom_offset;
            
            public vulkan.StdVideoH265ProfileTierLevel* pProfileTierLevel;
            
            public vulkan.StdVideoH265DecPicBufMgr* pDecPicBufMgr;
            
            public vulkan.StdVideoH265ScalingLists* pScalingLists;
            
            public vulkan.StdVideoH265ShortTermRefPicSet* pShortTermRefPicSet;
            
            public vulkan.StdVideoH265LongTermRefPicsSps* pLongTermRefPicsSps;
            
            public vulkan.StdVideoH265SequenceParameterSetVui* pSequenceParameterSetVui;
            
            public vulkan.StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
        }
        
        public partial struct StdVideoH265PpsFlags
        {
            private uint __bitfield__0;
            
            public uint dependent_slice_segments_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 0) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111110)) | ((((uint)value) & (unchecked((uint)0b1)) << 0));
                }
            }
            
            public uint output_flag_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 1) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111101)) | ((((uint)value) & (unchecked((uint)0b1)) << 1));
                }
            }
            
            public uint sign_data_hiding_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 2) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111111011)) | ((((uint)value) & (unchecked((uint)0b1)) << 2));
                }
            }
            
            public uint cabac_init_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 3) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111110111)) | ((((uint)value) & (unchecked((uint)0b1)) << 3));
                }
            }
            
            public uint constrained_intra_pred_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 4) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111101111)) | ((((uint)value) & (unchecked((uint)0b1)) << 4));
                }
            }
            
            public uint transform_skip_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 5) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111111011111)) | ((((uint)value) & (unchecked((uint)0b1)) << 5));
                }
            }
            
            public uint cu_qp_delta_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 6) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111110111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 6));
                }
            }
            
            public uint pps_slice_chroma_qp_offsets_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 7) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111101111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 7));
                }
            }
            
            public uint weighted_pred_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 8) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111111011111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 8));
                }
            }
            
            public uint weighted_bipred_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 9) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111110111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 9));
                }
            }
            
            public uint transquant_bypass_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 10) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111101111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 10));
                }
            }
            
            public uint tiles_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 11) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111111011111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 11));
                }
            }
            
            public uint entropy_coding_sync_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 12) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111110111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 12));
                }
            }
            
            public uint uniform_spacing_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 13) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111101111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 13));
                }
            }
            
            public uint loop_filter_across_tiles_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 14) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111111011111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 14));
                }
            }
            
            public uint pps_loop_filter_across_slices_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 15) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111110111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 15));
                }
            }
            
            public uint deblocking_filter_control_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 16) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111101111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 16));
                }
            }
            
            public uint deblocking_filter_override_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 17) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111111011111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 17));
                }
            }
            
            public uint pps_deblocking_filter_disabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 18) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111110111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 18));
                }
            }
            
            public uint pps_scaling_list_data_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 19) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111101111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 19));
                }
            }
            
            public uint lists_modification_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 20) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111111011111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 20));
                }
            }
            
            public uint slice_segment_header_extension_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 21) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111110111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 21));
                }
            }
            
            public uint pps_extension_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 22) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111101111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 22));
                }
            }
            
            public uint cross_component_prediction_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 23) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111011111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 23));
                }
            }
            
            public uint chroma_qp_offset_list_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 24) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111110111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 24));
                }
            }
            
            public uint pps_curr_pic_ref_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 25) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111101111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 25));
                }
            }
            
            public uint residual_adaptive_colour_transform_enabled_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 26) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111011111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 26));
                }
            }
            
            public uint pps_slice_act_qp_offsets_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 27) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11110111111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 27));
                }
            }
            
            public uint pps_palette_predictor_initializers_present_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 28) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11101111111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 28));
                }
            }
            
            public uint monochrome_palette_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 29) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11011111111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 29));
                }
            }
            
            public uint pps_range_extension_flag
            {
                get
                {
                    return unchecked((uint)((__bitfield__0 >> 30) & 0b1));
                }
                set
                {
                    __bitfield__0 = (__bitfield__0 & unchecked((uint)0b10111111111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1)) << 30));
                }
            }
        }
        
        public unsafe partial struct StdVideoH265PictureParameterSet
        {
            public vulkan.StdVideoH265PpsFlags flags;
            
            public byte pps_pic_parameter_set_id;
            
            public byte pps_seq_parameter_set_id;
            
            public byte sps_video_parameter_set_id;
            
            public byte num_extra_slice_header_bits;
            
            public byte num_ref_idx_l0_default_active_minus1;
            
            public byte num_ref_idx_l1_default_active_minus1;
            
            public sbyte init_qp_minus26;
            
            public byte diff_cu_qp_delta_depth;
            
            public sbyte pps_cb_qp_offset;
            
            public sbyte pps_cr_qp_offset;
            
            public sbyte pps_beta_offset_div2;
            
            public sbyte pps_tc_offset_div2;
            
            public byte log2_parallel_merge_level_minus2;
            
            public byte log2_max_transform_skip_block_size_minus2;
            
            public byte diff_cu_chroma_qp_offset_depth;
            
            public byte chroma_qp_offset_list_len_minus1;
            
            public fixed byte cb_qp_offset_list[6];
            
            public fixed byte cr_qp_offset_list[6];
            
            public byte log2_sao_offset_scale_luma;
            
            public byte log2_sao_offset_scale_chroma;
            
            public sbyte pps_act_y_qp_offset_plus5;
            
            public sbyte pps_act_cb_qp_offset_plus5;
            
            public sbyte pps_act_cr_qp_offset_plus3;
            
            public byte pps_num_palette_predictor_initializers;
            
            public byte luma_bit_depth_entry_minus8;
            
            public byte chroma_bit_depth_entry_minus8;
            
            public byte num_tile_columns_minus1;
            
            public byte num_tile_rows_minus1;
            
            public byte reserved1;
            
            public byte reserved2;
            
            public fixed ushort column_width_minus1[19];
            
            public fixed ushort row_height_minus1[21];
            
            public uint reserved3;
            
            public vulkan.StdVideoH265ScalingLists* pScalingLists;
            
            public vulkan.StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
        }
    }
}
