//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    public static unsafe partial class vulkan
    {
        public readonly partial struct VkBuffer_T : IEquatable<vulkan.VkBuffer_T>
        {
            public VkBuffer_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkBuffer_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkBuffer_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkBuffer_T left, VkBuffer_T right) => left.Equals(right);
            
            public static bool operator !=(VkBuffer_T left, VkBuffer_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImage_T : IEquatable<vulkan.VkImage_T>
        {
            public VkImage_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkImage_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkImage_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkImage_T left, VkImage_T right) => left.Equals(right);
            
            public static bool operator !=(VkImage_T left, VkImage_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkInstance_T : IEquatable<vulkan.VkInstance_T>
        {
            public VkInstance_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkInstance_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkInstance_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkInstance_T left, VkInstance_T right) => left.Equals(right);
            
            public static bool operator !=(VkInstance_T left, VkInstance_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDevice_T : IEquatable<vulkan.VkPhysicalDevice_T>
        {
            public VkPhysicalDevice_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkPhysicalDevice_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkPhysicalDevice_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkPhysicalDevice_T left, VkPhysicalDevice_T right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDevice_T left, VkPhysicalDevice_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDevice_T : IEquatable<vulkan.VkDevice_T>
        {
            public VkDevice_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkDevice_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkDevice_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkDevice_T left, VkDevice_T right) => left.Equals(right);
            
            public static bool operator !=(VkDevice_T left, VkDevice_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkQueue_T : IEquatable<vulkan.VkQueue_T>
        {
            public VkQueue_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkQueue_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkQueue_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkQueue_T left, VkQueue_T right) => left.Equals(right);
            
            public static bool operator !=(VkQueue_T left, VkQueue_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSemaphore_T : IEquatable<vulkan.VkSemaphore_T>
        {
            public VkSemaphore_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkSemaphore_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkSemaphore_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkSemaphore_T left, VkSemaphore_T right) => left.Equals(right);
            
            public static bool operator !=(VkSemaphore_T left, VkSemaphore_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCommandBuffer_T : IEquatable<vulkan.VkCommandBuffer_T>
        {
            public VkCommandBuffer_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkCommandBuffer_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkCommandBuffer_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkCommandBuffer_T left, VkCommandBuffer_T right) => left.Equals(right);
            
            public static bool operator !=(VkCommandBuffer_T left, VkCommandBuffer_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkFence_T : IEquatable<vulkan.VkFence_T>
        {
            public VkFence_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkFence_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkFence_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkFence_T left, VkFence_T right) => left.Equals(right);
            
            public static bool operator !=(VkFence_T left, VkFence_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDeviceMemory_T : IEquatable<vulkan.VkDeviceMemory_T>
        {
            public VkDeviceMemory_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkDeviceMemory_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkDeviceMemory_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkDeviceMemory_T left, VkDeviceMemory_T right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceMemory_T left, VkDeviceMemory_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkEvent_T : IEquatable<vulkan.VkEvent_T>
        {
            public VkEvent_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkEvent_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkEvent_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkEvent_T left, VkEvent_T right) => left.Equals(right);
            
            public static bool operator !=(VkEvent_T left, VkEvent_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkQueryPool_T : IEquatable<vulkan.VkQueryPool_T>
        {
            public VkQueryPool_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkQueryPool_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkQueryPool_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkQueryPool_T left, VkQueryPool_T right) => left.Equals(right);
            
            public static bool operator !=(VkQueryPool_T left, VkQueryPool_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBufferView_T : IEquatable<vulkan.VkBufferView_T>
        {
            public VkBufferView_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkBufferView_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkBufferView_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkBufferView_T left, VkBufferView_T right) => left.Equals(right);
            
            public static bool operator !=(VkBufferView_T left, VkBufferView_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImageView_T : IEquatable<vulkan.VkImageView_T>
        {
            public VkImageView_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkImageView_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkImageView_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkImageView_T left, VkImageView_T right) => left.Equals(right);
            
            public static bool operator !=(VkImageView_T left, VkImageView_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkShaderModule_T : IEquatable<vulkan.VkShaderModule_T>
        {
            public VkShaderModule_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkShaderModule_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkShaderModule_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkShaderModule_T left, VkShaderModule_T right) => left.Equals(right);
            
            public static bool operator !=(VkShaderModule_T left, VkShaderModule_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineCache_T : IEquatable<vulkan.VkPipelineCache_T>
        {
            public VkPipelineCache_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkPipelineCache_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkPipelineCache_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkPipelineCache_T left, VkPipelineCache_T right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineCache_T left, VkPipelineCache_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineLayout_T : IEquatable<vulkan.VkPipelineLayout_T>
        {
            public VkPipelineLayout_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkPipelineLayout_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkPipelineLayout_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkPipelineLayout_T left, VkPipelineLayout_T right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineLayout_T left, VkPipelineLayout_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipeline_T : IEquatable<vulkan.VkPipeline_T>
        {
            public VkPipeline_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkPipeline_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkPipeline_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkPipeline_T left, VkPipeline_T right) => left.Equals(right);
            
            public static bool operator !=(VkPipeline_T left, VkPipeline_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkRenderPass_T : IEquatable<vulkan.VkRenderPass_T>
        {
            public VkRenderPass_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkRenderPass_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkRenderPass_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkRenderPass_T left, VkRenderPass_T right) => left.Equals(right);
            
            public static bool operator !=(VkRenderPass_T left, VkRenderPass_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorSetLayout_T : IEquatable<vulkan.VkDescriptorSetLayout_T>
        {
            public VkDescriptorSetLayout_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkDescriptorSetLayout_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkDescriptorSetLayout_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkDescriptorSetLayout_T left, VkDescriptorSetLayout_T right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorSetLayout_T left, VkDescriptorSetLayout_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSampler_T : IEquatable<vulkan.VkSampler_T>
        {
            public VkSampler_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkSampler_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkSampler_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkSampler_T left, VkSampler_T right) => left.Equals(right);
            
            public static bool operator !=(VkSampler_T left, VkSampler_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorSet_T : IEquatable<vulkan.VkDescriptorSet_T>
        {
            public VkDescriptorSet_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkDescriptorSet_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkDescriptorSet_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkDescriptorSet_T left, VkDescriptorSet_T right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorSet_T left, VkDescriptorSet_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorPool_T : IEquatable<vulkan.VkDescriptorPool_T>
        {
            public VkDescriptorPool_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkDescriptorPool_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkDescriptorPool_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkDescriptorPool_T left, VkDescriptorPool_T right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorPool_T left, VkDescriptorPool_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkFramebuffer_T : IEquatable<vulkan.VkFramebuffer_T>
        {
            public VkFramebuffer_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkFramebuffer_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkFramebuffer_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkFramebuffer_T left, VkFramebuffer_T right) => left.Equals(right);
            
            public static bool operator !=(VkFramebuffer_T left, VkFramebuffer_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCommandPool_T : IEquatable<vulkan.VkCommandPool_T>
        {
            public VkCommandPool_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkCommandPool_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkCommandPool_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkCommandPool_T left, VkCommandPool_T right) => left.Equals(right);
            
            public static bool operator !=(VkCommandPool_T left, VkCommandPool_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSamplerYcbcrConversion_T : IEquatable<vulkan.VkSamplerYcbcrConversion_T>
        {
            public VkSamplerYcbcrConversion_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkSamplerYcbcrConversion_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkSamplerYcbcrConversion_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkSamplerYcbcrConversion_T left, VkSamplerYcbcrConversion_T right) => left.Equals(right);
            
            public static bool operator !=(VkSamplerYcbcrConversion_T left, VkSamplerYcbcrConversion_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorUpdateTemplate_T : IEquatable<vulkan.VkDescriptorUpdateTemplate_T>
        {
            public VkDescriptorUpdateTemplate_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkDescriptorUpdateTemplate_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkDescriptorUpdateTemplate_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkDescriptorUpdateTemplate_T left, VkDescriptorUpdateTemplate_T right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorUpdateTemplate_T left, VkDescriptorUpdateTemplate_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPrivateDataSlot_T : IEquatable<vulkan.VkPrivateDataSlot_T>
        {
            public VkPrivateDataSlot_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkPrivateDataSlot_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkPrivateDataSlot_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkPrivateDataSlot_T left, VkPrivateDataSlot_T right) => left.Equals(right);
            
            public static bool operator !=(VkPrivateDataSlot_T left, VkPrivateDataSlot_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSurfaceKHR_T : IEquatable<vulkan.VkSurfaceKHR_T>
        {
            public VkSurfaceKHR_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkSurfaceKHR_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkSurfaceKHR_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkSurfaceKHR_T left, VkSurfaceKHR_T right) => left.Equals(right);
            
            public static bool operator !=(VkSurfaceKHR_T left, VkSurfaceKHR_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSwapchainKHR_T : IEquatable<vulkan.VkSwapchainKHR_T>
        {
            public VkSwapchainKHR_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkSwapchainKHR_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkSwapchainKHR_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkSwapchainKHR_T left, VkSwapchainKHR_T right) => left.Equals(right);
            
            public static bool operator !=(VkSwapchainKHR_T left, VkSwapchainKHR_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDisplayKHR_T : IEquatable<vulkan.VkDisplayKHR_T>
        {
            public VkDisplayKHR_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkDisplayKHR_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkDisplayKHR_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkDisplayKHR_T left, VkDisplayKHR_T right) => left.Equals(right);
            
            public static bool operator !=(VkDisplayKHR_T left, VkDisplayKHR_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDisplayModeKHR_T : IEquatable<vulkan.VkDisplayModeKHR_T>
        {
            public VkDisplayModeKHR_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkDisplayModeKHR_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkDisplayModeKHR_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkDisplayModeKHR_T left, VkDisplayModeKHR_T right) => left.Equals(right);
            
            public static bool operator !=(VkDisplayModeKHR_T left, VkDisplayModeKHR_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkVideoSessionKHR_T : IEquatable<vulkan.VkVideoSessionKHR_T>
        {
            public VkVideoSessionKHR_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkVideoSessionKHR_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkVideoSessionKHR_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkVideoSessionKHR_T left, VkVideoSessionKHR_T right) => left.Equals(right);
            
            public static bool operator !=(VkVideoSessionKHR_T left, VkVideoSessionKHR_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkVideoSessionParametersKHR_T : IEquatable<vulkan.VkVideoSessionParametersKHR_T>
        {
            public VkVideoSessionParametersKHR_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkVideoSessionParametersKHR_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkVideoSessionParametersKHR_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkVideoSessionParametersKHR_T left, VkVideoSessionParametersKHR_T right) => left.Equals(right);
            
            public static bool operator !=(VkVideoSessionParametersKHR_T left, VkVideoSessionParametersKHR_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDeferredOperationKHR_T : IEquatable<vulkan.VkDeferredOperationKHR_T>
        {
            public VkDeferredOperationKHR_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkDeferredOperationKHR_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkDeferredOperationKHR_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkDeferredOperationKHR_T left, VkDeferredOperationKHR_T right) => left.Equals(right);
            
            public static bool operator !=(VkDeferredOperationKHR_T left, VkDeferredOperationKHR_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineBinaryKHR_T : IEquatable<vulkan.VkPipelineBinaryKHR_T>
        {
            public VkPipelineBinaryKHR_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkPipelineBinaryKHR_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkPipelineBinaryKHR_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkPipelineBinaryKHR_T left, VkPipelineBinaryKHR_T right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineBinaryKHR_T left, VkPipelineBinaryKHR_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDebugReportCallbackEXT_T : IEquatable<vulkan.VkDebugReportCallbackEXT_T>
        {
            public VkDebugReportCallbackEXT_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkDebugReportCallbackEXT_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkDebugReportCallbackEXT_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkDebugReportCallbackEXT_T left, VkDebugReportCallbackEXT_T right) => left.Equals(right);
            
            public static bool operator !=(VkDebugReportCallbackEXT_T left, VkDebugReportCallbackEXT_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCuModuleNVX_T : IEquatable<vulkan.VkCuModuleNVX_T>
        {
            public VkCuModuleNVX_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkCuModuleNVX_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkCuModuleNVX_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkCuModuleNVX_T left, VkCuModuleNVX_T right) => left.Equals(right);
            
            public static bool operator !=(VkCuModuleNVX_T left, VkCuModuleNVX_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCuFunctionNVX_T : IEquatable<vulkan.VkCuFunctionNVX_T>
        {
            public VkCuFunctionNVX_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkCuFunctionNVX_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkCuFunctionNVX_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkCuFunctionNVX_T left, VkCuFunctionNVX_T right) => left.Equals(right);
            
            public static bool operator !=(VkCuFunctionNVX_T left, VkCuFunctionNVX_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDebugUtilsMessengerEXT_T : IEquatable<vulkan.VkDebugUtilsMessengerEXT_T>
        {
            public VkDebugUtilsMessengerEXT_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkDebugUtilsMessengerEXT_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkDebugUtilsMessengerEXT_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkDebugUtilsMessengerEXT_T left, VkDebugUtilsMessengerEXT_T right) => left.Equals(right);
            
            public static bool operator !=(VkDebugUtilsMessengerEXT_T left, VkDebugUtilsMessengerEXT_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkValidationCacheEXT_T : IEquatable<vulkan.VkValidationCacheEXT_T>
        {
            public VkValidationCacheEXT_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkValidationCacheEXT_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkValidationCacheEXT_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkValidationCacheEXT_T left, VkValidationCacheEXT_T right) => left.Equals(right);
            
            public static bool operator !=(VkValidationCacheEXT_T left, VkValidationCacheEXT_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkAccelerationStructureNV_T : IEquatable<vulkan.VkAccelerationStructureNV_T>
        {
            public VkAccelerationStructureNV_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkAccelerationStructureNV_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkAccelerationStructureNV_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkAccelerationStructureNV_T left, VkAccelerationStructureNV_T right) => left.Equals(right);
            
            public static bool operator !=(VkAccelerationStructureNV_T left, VkAccelerationStructureNV_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPerformanceConfigurationINTEL_T : IEquatable<vulkan.VkPerformanceConfigurationINTEL_T>
        {
            public VkPerformanceConfigurationINTEL_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkPerformanceConfigurationINTEL_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkPerformanceConfigurationINTEL_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkPerformanceConfigurationINTEL_T left, VkPerformanceConfigurationINTEL_T right) => left.Equals(right);
            
            public static bool operator !=(VkPerformanceConfigurationINTEL_T left, VkPerformanceConfigurationINTEL_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkIndirectCommandsLayoutNV_T : IEquatable<vulkan.VkIndirectCommandsLayoutNV_T>
        {
            public VkIndirectCommandsLayoutNV_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkIndirectCommandsLayoutNV_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkIndirectCommandsLayoutNV_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkIndirectCommandsLayoutNV_T left, VkIndirectCommandsLayoutNV_T right) => left.Equals(right);
            
            public static bool operator !=(VkIndirectCommandsLayoutNV_T left, VkIndirectCommandsLayoutNV_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCudaModuleNV_T : IEquatable<vulkan.VkCudaModuleNV_T>
        {
            public VkCudaModuleNV_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkCudaModuleNV_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkCudaModuleNV_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkCudaModuleNV_T left, VkCudaModuleNV_T right) => left.Equals(right);
            
            public static bool operator !=(VkCudaModuleNV_T left, VkCudaModuleNV_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCudaFunctionNV_T : IEquatable<vulkan.VkCudaFunctionNV_T>
        {
            public VkCudaFunctionNV_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkCudaFunctionNV_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkCudaFunctionNV_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkCudaFunctionNV_T left, VkCudaFunctionNV_T right) => left.Equals(right);
            
            public static bool operator !=(VkCudaFunctionNV_T left, VkCudaFunctionNV_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkAccelerationStructureKHR_T : IEquatable<vulkan.VkAccelerationStructureKHR_T>
        {
            public VkAccelerationStructureKHR_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkAccelerationStructureKHR_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkAccelerationStructureKHR_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkAccelerationStructureKHR_T left, VkAccelerationStructureKHR_T right) => left.Equals(right);
            
            public static bool operator !=(VkAccelerationStructureKHR_T left, VkAccelerationStructureKHR_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkMicromapEXT_T : IEquatable<vulkan.VkMicromapEXT_T>
        {
            public VkMicromapEXT_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkMicromapEXT_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkMicromapEXT_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkMicromapEXT_T left, VkMicromapEXT_T right) => left.Equals(right);
            
            public static bool operator !=(VkMicromapEXT_T left, VkMicromapEXT_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkOpticalFlowSessionNV_T : IEquatable<vulkan.VkOpticalFlowSessionNV_T>
        {
            public VkOpticalFlowSessionNV_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkOpticalFlowSessionNV_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkOpticalFlowSessionNV_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkOpticalFlowSessionNV_T left, VkOpticalFlowSessionNV_T right) => left.Equals(right);
            
            public static bool operator !=(VkOpticalFlowSessionNV_T left, VkOpticalFlowSessionNV_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkShaderEXT_T : IEquatable<vulkan.VkShaderEXT_T>
        {
            public VkShaderEXT_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkShaderEXT_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkShaderEXT_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkShaderEXT_T left, VkShaderEXT_T right) => left.Equals(right);
            
            public static bool operator !=(VkShaderEXT_T left, VkShaderEXT_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkIndirectExecutionSetEXT_T : IEquatable<vulkan.VkIndirectExecutionSetEXT_T>
        {
            public VkIndirectExecutionSetEXT_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkIndirectExecutionSetEXT_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkIndirectExecutionSetEXT_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkIndirectExecutionSetEXT_T left, VkIndirectExecutionSetEXT_T right) => left.Equals(right);
            
            public static bool operator !=(VkIndirectExecutionSetEXT_T left, VkIndirectExecutionSetEXT_T right) => !left.Equals(right);
        }
        
        public readonly partial struct VkIndirectCommandsLayoutEXT_T : IEquatable<vulkan.VkIndirectCommandsLayoutEXT_T>
        {
            public VkIndirectCommandsLayoutEXT_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkIndirectCommandsLayoutEXT_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkIndirectCommandsLayoutEXT_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkIndirectCommandsLayoutEXT_T left, VkIndirectCommandsLayoutEXT_T right) => left.Equals(right);
            
            public static bool operator !=(VkIndirectCommandsLayoutEXT_T left, VkIndirectCommandsLayoutEXT_T right) => !left.Equals(right);
        }
        
        /// <remarks>
        /// <para>Extension: VK_KHR_android_surface</para>
        /// </remarks>
        public readonly partial struct ANativeWindow : IEquatable<vulkan.ANativeWindow>
        {
            public ANativeWindow(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(ANativeWindow other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is ANativeWindow other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(ANativeWindow left, ANativeWindow right) => left.Equals(right);
            
            public static bool operator !=(ANativeWindow left, ANativeWindow right) => !left.Equals(right);
        }
        
        /// <remarks>
        /// <para>Extension: VK_ANDROID_external_memory_android_hardware_buffer</para>
        /// </remarks>
        public readonly partial struct AHardwareBuffer : IEquatable<vulkan.AHardwareBuffer>
        {
            public AHardwareBuffer(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(AHardwareBuffer other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is AHardwareBuffer other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(AHardwareBuffer left, AHardwareBuffer right) => left.Equals(right);
            
            public static bool operator !=(AHardwareBuffer left, AHardwareBuffer right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBufferCollectionFUCHSIA_T : IEquatable<vulkan.VkBufferCollectionFUCHSIA_T>
        {
            public VkBufferCollectionFUCHSIA_T(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(VkBufferCollectionFUCHSIA_T other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is VkBufferCollectionFUCHSIA_T other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(VkBufferCollectionFUCHSIA_T left, VkBufferCollectionFUCHSIA_T right) => left.Equals(right);
            
            public static bool operator !=(VkBufferCollectionFUCHSIA_T left, VkBufferCollectionFUCHSIA_T right) => !left.Equals(right);
        }
        
        public readonly partial struct __IOSurface : IEquatable<vulkan.__IOSurface>
        {
            public __IOSurface(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(__IOSurface other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is __IOSurface other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(__IOSurface left, __IOSurface right) => left.Equals(right);
            
            public static bool operator !=(__IOSurface left, __IOSurface right) => !left.Equals(right);
        }
        
        public readonly partial struct wl_display : IEquatable<vulkan.wl_display>
        {
            public wl_display(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(wl_display other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is wl_display other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(wl_display left, wl_display right) => left.Equals(right);
            
            public static bool operator !=(wl_display left, wl_display right) => !left.Equals(right);
        }
        
        public readonly partial struct wl_surface : IEquatable<vulkan.wl_surface>
        {
            public wl_surface(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(wl_surface other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is wl_surface other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(wl_surface left, wl_surface right) => left.Equals(right);
            
            public static bool operator !=(wl_surface left, wl_surface right) => !left.Equals(right);
        }
        
        public readonly partial struct _screen_context : IEquatable<vulkan._screen_context>
        {
            public _screen_context(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(_screen_context other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is _screen_context other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(_screen_context left, _screen_context right) => left.Equals(right);
            
            public static bool operator !=(_screen_context left, _screen_context right) => !left.Equals(right);
        }
        
        public readonly partial struct _screen_window : IEquatable<vulkan._screen_window>
        {
            public _screen_window(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(_screen_window other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is _screen_window other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(_screen_window left, _screen_window right) => left.Equals(right);
            
            public static bool operator !=(_screen_window left, _screen_window right) => !left.Equals(right);
        }
        
        public readonly partial struct _screen_buffer : IEquatable<vulkan._screen_buffer>
        {
            public _screen_buffer(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(_screen_buffer other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is _screen_buffer other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(_screen_buffer left, _screen_buffer right) => left.Equals(right);
            
            public static bool operator !=(_screen_buffer left, _screen_buffer right) => !left.Equals(right);
        }
    }
}
