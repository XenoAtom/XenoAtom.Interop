//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        /// <summary>
        /// Version negotiation values
        /// </summary>
        public enum VkNegotiateLayerStructType : uint
        {
            LAYER_NEGOTIATE_UNINTIALIZED = unchecked((uint)0),
            
            LAYER_NEGOTIATE_INTERFACE_STRUCT = unchecked((uint)1),
        }
        
        public const vulkan.VkNegotiateLayerStructType LAYER_NEGOTIATE_UNINTIALIZED = VkNegotiateLayerStructType.LAYER_NEGOTIATE_UNINTIALIZED;
        
        public const vulkan.VkNegotiateLayerStructType LAYER_NEGOTIATE_INTERFACE_STRUCT = VkNegotiateLayerStructType.LAYER_NEGOTIATE_INTERFACE_STRUCT;
        
        /// <summary>
        /// Sub type of structure for instance and device loader ext of CreateInfo.
        /// When sType == VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO
        /// or sType == VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO
        /// then VkLayerFunction indicates struct type pointed to by pNext
        /// </summary>
        public enum VkLayerFunction_ : uint
        {
            VK_LAYER_LINK_INFO = unchecked((uint)0),
            
            VK_LOADER_DATA_CALLBACK = unchecked((uint)1),
            
            VK_LOADER_LAYER_CREATE_DEVICE_CALLBACK = unchecked((uint)2),
            
            VK_LOADER_FEATURES = unchecked((uint)3),
        }
        
        public const vulkan.VkLayerFunction_ VK_LAYER_LINK_INFO = VkLayerFunction_.VK_LAYER_LINK_INFO;
        
        public const vulkan.VkLayerFunction_ VK_LOADER_DATA_CALLBACK = VkLayerFunction_.VK_LOADER_DATA_CALLBACK;
        
        public const vulkan.VkLayerFunction_ VK_LOADER_LAYER_CREATE_DEVICE_CALLBACK = VkLayerFunction_.VK_LOADER_LAYER_CREATE_DEVICE_CALLBACK;
        
        public const vulkan.VkLayerFunction_ VK_LOADER_FEATURES = VkLayerFunction_.VK_LOADER_FEATURES;
        
        [Flags]
        public enum VkLoaderFeatureFlags : uint
        {
            VK_LOADER_FEATURE_PHYSICAL_DEVICE_SORTING = unchecked((uint)1),
        }
        
        public const vulkan.VkLoaderFeatureFlags VK_LOADER_FEATURE_PHYSICAL_DEVICE_SORTING = VkLoaderFeatureFlags.VK_LOADER_FEATURE_PHYSICAL_DEVICE_SORTING;
        
        public enum VkChainType : uint
        {
            VK_CHAIN_TYPE_UNKNOWN = unchecked((uint)0),
            
            VK_CHAIN_TYPE_ENUMERATE_INSTANCE_EXTENSION_PROPERTIES = unchecked((uint)1),
            
            VK_CHAIN_TYPE_ENUMERATE_INSTANCE_LAYER_PROPERTIES = unchecked((uint)2),
            
            VK_CHAIN_TYPE_ENUMERATE_INSTANCE_VERSION = unchecked((uint)3),
        }
        
        public const vulkan.VkChainType VK_CHAIN_TYPE_UNKNOWN = VkChainType.VK_CHAIN_TYPE_UNKNOWN;
        
        public const vulkan.VkChainType VK_CHAIN_TYPE_ENUMERATE_INSTANCE_EXTENSION_PROPERTIES = VkChainType.VK_CHAIN_TYPE_ENUMERATE_INSTANCE_EXTENSION_PROPERTIES;
        
        public const vulkan.VkChainType VK_CHAIN_TYPE_ENUMERATE_INSTANCE_LAYER_PROPERTIES = VkChainType.VK_CHAIN_TYPE_ENUMERATE_INSTANCE_LAYER_PROPERTIES;
        
        public const vulkan.VkChainType VK_CHAIN_TYPE_ENUMERATE_INSTANCE_VERSION = VkChainType.VK_CHAIN_TYPE_ENUMERATE_INSTANCE_VERSION;
        
        /// <summary>
        /// Version negotiation structures
        /// </summary>
        public partial struct VkNegotiateLayerInterface
        {
            public vulkan.VkNegotiateLayerStructType sType;
            
            public void* pNext;
            
            public uint loaderLayerInterfaceVersion;
            
            public vulkan.PFN_vkGetInstanceProcAddr pfnGetInstanceProcAddr;
            
            public vulkan.PFN_vkGetDeviceProcAddr pfnGetDeviceProcAddr;
            
            public vulkan.PFN_GetPhysicalDeviceProcAddr pfnGetPhysicalDeviceProcAddr;
        }
        
        public partial struct VkLayerInstanceLink_
        {
            public vulkan.VkLayerInstanceLink_* pNext;
            
            public vulkan.PFN_vkGetInstanceProcAddr pfnNextGetInstanceProcAddr;
            
            public vulkan.PFN_GetPhysicalDeviceProcAddr pfnNextGetPhysicalDeviceProcAddr;
        }
        
        /// <summary>
        /// When creating the device chain the loader needs to pass
        /// down information about it's device structure needed at
        /// the end of the chain. Passing the data via the
        /// VkLayerDeviceInfo avoids issues with finding the
        /// exact instance being used.
        /// </summary>
        public partial struct VkLayerDeviceInfo_
        {
            public void* device_info;
            
            public vulkan.PFN_vkGetInstanceProcAddr pfnNextGetInstanceProcAddr;
        }
        
        public partial struct VkLayerInstanceCreateInfo
        {
            [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
            public partial struct VkLayerInstanceCreateInfo__union_0
            {
                public partial struct VkLayerInstanceCreateInfo_layerDevice
                {
                    public vulkan.PFN_vkLayerCreateDevice pfnLayerCreateDevice;
                    
                    public vulkan.PFN_vkLayerDestroyDevice pfnLayerDestroyDevice;
                }
                
                [FieldOffset(0)]
                public vulkan.VkLayerInstanceLink* pLayerInfo;
                
                [FieldOffset(0)]
                public vulkan.PFN_vkSetInstanceLoaderData pfnSetInstanceLoaderData;
                
                [FieldOffset(0)]
                public vulkan.VkLayerInstanceCreateInfo.VkLayerInstanceCreateInfo__union_0.VkLayerInstanceCreateInfo_layerDevice layerDevice;
                
                [FieldOffset(0)]
                public vulkan.VkLoaderFeatureFlags loaderFeatures;
            }
            
            /// <summary>
            /// VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO
            /// </summary>
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkLayerFunction function;
            
            public vulkan.VkLayerInstanceCreateInfo.VkLayerInstanceCreateInfo__union_0 u;
        }
        
        public readonly partial struct PFN_vkLayerCreateDevice : IEquatable<vulkan.PFN_vkLayerCreateDevice>
        {
            public PFN_vkLayerCreateDevice(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkPhysicalDevice, vulkan.VkDeviceCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDevice*, vulkan.PFN_vkGetInstanceProcAddr, vulkan.PFN_vkGetDeviceProcAddr*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkPhysicalDevice, vulkan.VkDeviceCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDevice*, vulkan.PFN_vkGetInstanceProcAddr, vulkan.PFN_vkGetDeviceProcAddr*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkLayerCreateDevice other && Equals(other);
            
            public bool Equals(PFN_vkLayerCreateDevice other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkPhysicalDevice, vulkan.VkDeviceCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDevice*, vulkan.PFN_vkGetInstanceProcAddr, vulkan.PFN_vkGetDeviceProcAddr*, vulkan.VkResult> (vulkan.PFN_vkLayerCreateDevice from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkLayerCreateDevice (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkPhysicalDevice, vulkan.VkDeviceCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDevice*, vulkan.PFN_vkGetInstanceProcAddr, vulkan.PFN_vkGetDeviceProcAddr*, vulkan.VkResult> from) => new vulkan.PFN_vkLayerCreateDevice(from);
            
            public static bool operator ==(PFN_vkLayerCreateDevice left, PFN_vkLayerCreateDevice right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkLayerCreateDevice left, PFN_vkLayerCreateDevice right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkLayerDestroyDevice : IEquatable<vulkan.PFN_vkLayerDestroyDevice>
        {
            public PFN_vkLayerDestroyDevice(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAllocationCallbacks*, vulkan.PFN_vkDestroyDevice, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAllocationCallbacks*, vulkan.PFN_vkDestroyDevice, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkLayerDestroyDevice other && Equals(other);
            
            public bool Equals(PFN_vkLayerDestroyDevice other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAllocationCallbacks*, vulkan.PFN_vkDestroyDevice, void> (vulkan.PFN_vkLayerDestroyDevice from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkLayerDestroyDevice (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAllocationCallbacks*, vulkan.PFN_vkDestroyDevice, void> from) => new vulkan.PFN_vkLayerDestroyDevice(from);
            
            public static bool operator ==(PFN_vkLayerDestroyDevice left, PFN_vkLayerDestroyDevice right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkLayerDestroyDevice left, PFN_vkLayerDestroyDevice right) => !left.Equals(right);
        }
        
        public readonly partial struct VkLayerInstanceLink : IEquatable<vulkan.VkLayerInstanceLink>
        {
            public VkLayerInstanceLink(vulkan.VkLayerInstanceLink_ value) => this.Value = value;
            
            public vulkan.VkLayerInstanceLink_ Value { get; }
            
            public override bool Equals(object obj) => obj is VkLayerInstanceLink other && Equals(other);
            
            public bool Equals(VkLayerInstanceLink other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkLayerInstanceLink_ (vulkan.VkLayerInstanceLink from) => from.Value;
            
            public static implicit operator vulkan.VkLayerInstanceLink (vulkan.VkLayerInstanceLink_ from) => new vulkan.VkLayerInstanceLink(from);
            
            public static bool operator ==(VkLayerInstanceLink left, VkLayerInstanceLink right) => left.Equals(right);
            
            public static bool operator !=(VkLayerInstanceLink left, VkLayerInstanceLink right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkSetInstanceLoaderData : IEquatable<vulkan.PFN_vkSetInstanceLoaderData>
        {
            public PFN_vkSetInstanceLoaderData(delegate*unmanaged[Stdcall]<vulkan.VkInstance, void*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, void*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkSetInstanceLoaderData other && Equals(other);
            
            public bool Equals(PFN_vkSetInstanceLoaderData other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, void*, vulkan.VkResult> (vulkan.PFN_vkSetInstanceLoaderData from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkSetInstanceLoaderData (delegate*unmanaged[Stdcall]<vulkan.VkInstance, void*, vulkan.VkResult> from) => new vulkan.PFN_vkSetInstanceLoaderData(from);
            
            public static bool operator ==(PFN_vkSetInstanceLoaderData left, PFN_vkSetInstanceLoaderData right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkSetInstanceLoaderData left, PFN_vkSetInstanceLoaderData right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Sub type of structure for instance and device loader ext of CreateInfo.
        /// When sType == VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO
        /// or sType == VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO
        /// then VkLayerFunction indicates struct type pointed to by pNext
        /// </summary>
        public readonly partial struct VkLayerFunction : IEquatable<vulkan.VkLayerFunction>
        {
            public VkLayerFunction(vulkan.VkLayerFunction_ value) => this.Value = value;
            
            public vulkan.VkLayerFunction_ Value { get; }
            
            public override bool Equals(object obj) => obj is VkLayerFunction other && Equals(other);
            
            public bool Equals(VkLayerFunction other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkLayerFunction_ (vulkan.VkLayerFunction from) => from.Value;
            
            public static implicit operator vulkan.VkLayerFunction (vulkan.VkLayerFunction_ from) => new vulkan.VkLayerFunction(from);
            
            public static bool operator ==(VkLayerFunction left, VkLayerFunction right) => left.Equals(right);
            
            public static bool operator !=(VkLayerFunction left, VkLayerFunction right) => !left.Equals(right);
        }
        
        public partial struct VkLayerDeviceLink_
        {
            public vulkan.VkLayerDeviceLink_* pNext;
            
            public vulkan.PFN_vkGetInstanceProcAddr pfnNextGetInstanceProcAddr;
            
            public vulkan.PFN_vkGetDeviceProcAddr pfnNextGetDeviceProcAddr;
        }
        
        public partial struct VkLayerDeviceCreateInfo
        {
            [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
            public partial struct VkLayerDeviceCreateInfo__union_0
            {
                [FieldOffset(0)]
                public vulkan.VkLayerDeviceLink* pLayerInfo;
                
                [FieldOffset(0)]
                public vulkan.PFN_vkSetDeviceLoaderData pfnSetDeviceLoaderData;
            }
            
            /// <summary>
            /// VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO
            /// </summary>
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkLayerFunction function;
            
            public vulkan.VkLayerDeviceCreateInfo.VkLayerDeviceCreateInfo__union_0 u;
        }
        
        public readonly partial struct VkLayerDeviceLink : IEquatable<vulkan.VkLayerDeviceLink>
        {
            public VkLayerDeviceLink(vulkan.VkLayerDeviceLink_ value) => this.Value = value;
            
            public vulkan.VkLayerDeviceLink_ Value { get; }
            
            public override bool Equals(object obj) => obj is VkLayerDeviceLink other && Equals(other);
            
            public bool Equals(VkLayerDeviceLink other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkLayerDeviceLink_ (vulkan.VkLayerDeviceLink from) => from.Value;
            
            public static implicit operator vulkan.VkLayerDeviceLink (vulkan.VkLayerDeviceLink_ from) => new vulkan.VkLayerDeviceLink(from);
            
            public static bool operator ==(VkLayerDeviceLink left, VkLayerDeviceLink right) => left.Equals(right);
            
            public static bool operator !=(VkLayerDeviceLink left, VkLayerDeviceLink right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkSetDeviceLoaderData : IEquatable<vulkan.PFN_vkSetDeviceLoaderData>
        {
            public PFN_vkSetDeviceLoaderData(delegate*unmanaged[Stdcall]<vulkan.VkDevice, void*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, void*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkSetDeviceLoaderData other && Equals(other);
            
            public bool Equals(PFN_vkSetDeviceLoaderData other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, void*, vulkan.VkResult> (vulkan.PFN_vkSetDeviceLoaderData from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkSetDeviceLoaderData (delegate*unmanaged[Stdcall]<vulkan.VkDevice, void*, vulkan.VkResult> from) => new vulkan.PFN_vkSetDeviceLoaderData(from);
            
            public static bool operator ==(PFN_vkSetDeviceLoaderData left, PFN_vkSetDeviceLoaderData right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkSetDeviceLoaderData left, PFN_vkSetDeviceLoaderData right) => !left.Equals(right);
        }
        
        public partial struct VkChainHeader
        {
            public vulkan.VkChainType type;
            
            public uint version;
            
            public uint size;
        }
        
        public partial struct VkEnumerateInstanceExtensionPropertiesChain
        {
            public vulkan.VkChainHeader header;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkEnumerateInstanceExtensionPropertiesChain*, byte*, uint*, vulkan.VkExtensionProperties*, vulkan.VkResult> pfnNextLayer;
            
            public vulkan.VkEnumerateInstanceExtensionPropertiesChain* pNextLink;
        }
        
        public partial struct VkEnumerateInstanceLayerPropertiesChain
        {
            public vulkan.VkChainHeader header;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkEnumerateInstanceLayerPropertiesChain*, uint*, vulkan.VkLayerProperties*, vulkan.VkResult> pfnNextLayer;
            
            public vulkan.VkEnumerateInstanceLayerPropertiesChain* pNextLink;
        }
        
        public partial struct VkEnumerateInstanceVersionChain
        {
            public vulkan.VkChainHeader header;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkEnumerateInstanceVersionChain*, uint*, vulkan.VkResult> pfnNextLayer;
            
            public vulkan.VkEnumerateInstanceVersionChain* pNextLink;
        }
        
        /// <summary>
        /// Version negotiation functions
        /// </summary>
        public readonly partial struct PFN_vkNegotiateLoaderLayerInterfaceVersion : IEquatable<vulkan.PFN_vkNegotiateLoaderLayerInterfaceVersion>, IvkFunctionPointer<vulkan.PFN_vkNegotiateLoaderLayerInterfaceVersion>
        {
            public PFN_vkNegotiateLoaderLayerInterfaceVersion(delegate*unmanaged[Stdcall]<vulkan.VkNegotiateLayerInterface*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkNegotiateLayerInterface*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkNegotiateLoaderLayerInterfaceVersion other && Equals(other);
            
            public bool Equals(PFN_vkNegotiateLoaderLayerInterfaceVersion other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkNegotiateLayerInterface*, vulkan.VkResult> (vulkan.PFN_vkNegotiateLoaderLayerInterfaceVersion from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkNegotiateLoaderLayerInterfaceVersion (delegate*unmanaged[Stdcall]<vulkan.VkNegotiateLayerInterface*, vulkan.VkResult> from) => new vulkan.PFN_vkNegotiateLoaderLayerInterfaceVersion(from);
            
            public static bool operator ==(PFN_vkNegotiateLoaderLayerInterfaceVersion left, PFN_vkNegotiateLoaderLayerInterfaceVersion right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkNegotiateLoaderLayerInterfaceVersion left, PFN_vkNegotiateLoaderLayerInterfaceVersion right) => !left.Equals(right);
            
            /// <summary>
            /// Gets the prototype of the function `vkNegotiateLoaderLayerInterfaceVersion`.
            /// </summary>
            public static ReadOnlyMemoryUtf8 Name => "vkNegotiateLoaderLayerInterfaceVersion"u8;
            
            public vulkan.VkResult Invoke(vulkan.VkNegotiateLayerInterface* pVersionStruct)
            {
                return Value(pVersionStruct);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        /// <summary>
        /// Function prototype for unknown physical device extension command
        /// </summary>
        public readonly partial struct PFN_PhysDevExt : IEquatable<vulkan.PFN_PhysDevExt>
        {
            public PFN_PhysDevExt(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_PhysDevExt other && Equals(other);
            
            public bool Equals(PFN_PhysDevExt other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkResult> (vulkan.PFN_PhysDevExt from) => from.Value;
            
            public static implicit operator vulkan.PFN_PhysDevExt (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkResult> from) => new vulkan.PFN_PhysDevExt(from);
            
            public static bool operator ==(PFN_PhysDevExt left, PFN_PhysDevExt right) => left.Equals(right);
            
            public static bool operator !=(PFN_PhysDevExt left, PFN_PhysDevExt right) => !left.Equals(right);
        }
        
        /// <summary>
        /// When creating the device chain the loader needs to pass
        /// down information about it's device structure needed at
        /// the end of the chain. Passing the data via the
        /// VkLayerDeviceInfo avoids issues with finding the
        /// exact instance being used.
        /// </summary>
        public readonly partial struct VkLayerDeviceInfo : IEquatable<vulkan.VkLayerDeviceInfo>
        {
            public VkLayerDeviceInfo(vulkan.VkLayerDeviceInfo_ value) => this.Value = value;
            
            public vulkan.VkLayerDeviceInfo_ Value { get; }
            
            public override bool Equals(object obj) => obj is VkLayerDeviceInfo other && Equals(other);
            
            public bool Equals(VkLayerDeviceInfo other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkLayerDeviceInfo_ (vulkan.VkLayerDeviceInfo from) => from.Value;
            
            public static implicit operator vulkan.VkLayerDeviceInfo (vulkan.VkLayerDeviceInfo_ from) => new vulkan.VkLayerDeviceInfo(from);
            
            public static bool operator ==(VkLayerDeviceInfo left, VkLayerDeviceInfo right) => left.Equals(right);
            
            public static bool operator !=(VkLayerDeviceInfo left, VkLayerDeviceInfo right) => !left.Equals(right);
        }
        
        public readonly partial struct VkLoaderFlagBits : IEquatable<vulkan.VkLoaderFlagBits>
        {
            public VkLoaderFlagBits(vulkan.VkLoaderFeatureFlags value) => this.Value = value;
            
            public vulkan.VkLoaderFeatureFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkLoaderFlagBits other && Equals(other);
            
            public bool Equals(VkLoaderFlagBits other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkLoaderFeatureFlags (vulkan.VkLoaderFlagBits from) => from.Value;
            
            public static implicit operator vulkan.VkLoaderFlagBits (vulkan.VkLoaderFeatureFlags from) => new vulkan.VkLoaderFlagBits(from);
            
            public static bool operator ==(VkLoaderFlagBits left, VkLoaderFlagBits right) => left.Equals(right);
            
            public static bool operator !=(VkLoaderFlagBits left, VkLoaderFlagBits right) => !left.Equals(right);
        }
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkNegotiateLoaderLayerInterfaceVersion")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkNegotiateLoaderLayerInterfaceVersion(vulkan.VkNegotiateLayerInterface* pVersionStruct);
    }
}
