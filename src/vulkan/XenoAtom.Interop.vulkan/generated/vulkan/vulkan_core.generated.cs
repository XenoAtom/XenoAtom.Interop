//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        public enum VkResult : int
        {
            VK_SUCCESS = unchecked((int)0),
            
            VK_NOT_READY = unchecked((int)1),
            
            VK_TIMEOUT = unchecked((int)2),
            
            VK_EVENT_SET = unchecked((int)3),
            
            VK_EVENT_RESET = unchecked((int)4),
            
            VK_INCOMPLETE = unchecked((int)5),
            
            VK_ERROR_OUT_OF_HOST_MEMORY = unchecked((int)-1),
            
            VK_ERROR_OUT_OF_DEVICE_MEMORY = unchecked((int)-2),
            
            VK_ERROR_INITIALIZATION_FAILED = unchecked((int)-3),
            
            VK_ERROR_DEVICE_LOST = unchecked((int)-4),
            
            VK_ERROR_MEMORY_MAP_FAILED = unchecked((int)-5),
            
            VK_ERROR_LAYER_NOT_PRESENT = unchecked((int)-6),
            
            VK_ERROR_EXTENSION_NOT_PRESENT = unchecked((int)-7),
            
            VK_ERROR_FEATURE_NOT_PRESENT = unchecked((int)-8),
            
            VK_ERROR_INCOMPATIBLE_DRIVER = unchecked((int)-9),
            
            VK_ERROR_TOO_MANY_OBJECTS = unchecked((int)-10),
            
            VK_ERROR_FORMAT_NOT_SUPPORTED = unchecked((int)-11),
            
            VK_ERROR_FRAGMENTED_POOL = unchecked((int)-12),
            
            VK_ERROR_UNKNOWN = unchecked((int)-13),
            
            VK_ERROR_OUT_OF_POOL_MEMORY = unchecked((int)-1000069000),
            
            VK_ERROR_INVALID_EXTERNAL_HANDLE = unchecked((int)-1000072003),
            
            VK_ERROR_FRAGMENTATION = unchecked((int)-1000161000),
            
            VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = unchecked((int)-1000257000),
            
            VK_PIPELINE_COMPILE_REQUIRED = unchecked((int)1000297000),
            
            VK_ERROR_SURFACE_LOST_KHR = unchecked((int)-1000000000),
            
            VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = unchecked((int)-1000000001),
            
            VK_SUBOPTIMAL_KHR = unchecked((int)1000001003),
            
            VK_ERROR_OUT_OF_DATE_KHR = unchecked((int)-1000001004),
            
            VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = unchecked((int)-1000003001),
            
            VK_ERROR_VALIDATION_FAILED_EXT = unchecked((int)-1000011001),
            
            VK_ERROR_INVALID_SHADER_NV = unchecked((int)-1000012000),
            
            VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR = unchecked((int)-1000023000),
            
            VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR = unchecked((int)-1000023001),
            
            VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR = unchecked((int)-1000023002),
            
            VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR = unchecked((int)-1000023003),
            
            VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR = unchecked((int)-1000023004),
            
            VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR = unchecked((int)-1000023005),
            
            VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = unchecked((int)-1000158000),
            
            VK_ERROR_NOT_PERMITTED_KHR = unchecked((int)-1000174001),
            
            VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = unchecked((int)-1000255000),
            
            VK_THREAD_IDLE_KHR = unchecked((int)1000268000),
            
            VK_THREAD_DONE_KHR = unchecked((int)1000268001),
            
            VK_OPERATION_DEFERRED_KHR = unchecked((int)1000268002),
            
            VK_OPERATION_NOT_DEFERRED_KHR = unchecked((int)1000268003),
            
            VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR = unchecked((int)-1000299000),
            
            VK_ERROR_COMPRESSION_EXHAUSTED_EXT = unchecked((int)-1000338000),
            
            VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT = unchecked((int)1000482000),
            
            VK_ERROR_OUT_OF_POOL_MEMORY_KHR = unchecked((int)-1000069000),
            
            VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = unchecked((int)-1000072003),
            
            VK_ERROR_FRAGMENTATION_EXT = unchecked((int)-1000161000),
            
            VK_ERROR_NOT_PERMITTED_EXT = unchecked((int)-1000174001),
            
            VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = unchecked((int)-1000257000),
            
            VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = unchecked((int)-1000257000),
            
            VK_PIPELINE_COMPILE_REQUIRED_EXT = unchecked((int)1000297000),
            
            VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = unchecked((int)1000297000),
            
            VK_RESULT_MAX_ENUM = unchecked((int)2147483647),
        }
        
        public const vulkan.VkResult VK_SUCCESS = VkResult.VK_SUCCESS;
        
        public const vulkan.VkResult VK_NOT_READY = VkResult.VK_NOT_READY;
        
        public const vulkan.VkResult VK_TIMEOUT = VkResult.VK_TIMEOUT;
        
        public const vulkan.VkResult VK_EVENT_SET = VkResult.VK_EVENT_SET;
        
        public const vulkan.VkResult VK_EVENT_RESET = VkResult.VK_EVENT_RESET;
        
        public const vulkan.VkResult VK_INCOMPLETE = VkResult.VK_INCOMPLETE;
        
        public const vulkan.VkResult VK_ERROR_OUT_OF_HOST_MEMORY = VkResult.VK_ERROR_OUT_OF_HOST_MEMORY;
        
        public const vulkan.VkResult VK_ERROR_OUT_OF_DEVICE_MEMORY = VkResult.VK_ERROR_OUT_OF_DEVICE_MEMORY;
        
        public const vulkan.VkResult VK_ERROR_INITIALIZATION_FAILED = VkResult.VK_ERROR_INITIALIZATION_FAILED;
        
        public const vulkan.VkResult VK_ERROR_DEVICE_LOST = VkResult.VK_ERROR_DEVICE_LOST;
        
        public const vulkan.VkResult VK_ERROR_MEMORY_MAP_FAILED = VkResult.VK_ERROR_MEMORY_MAP_FAILED;
        
        public const vulkan.VkResult VK_ERROR_LAYER_NOT_PRESENT = VkResult.VK_ERROR_LAYER_NOT_PRESENT;
        
        public const vulkan.VkResult VK_ERROR_EXTENSION_NOT_PRESENT = VkResult.VK_ERROR_EXTENSION_NOT_PRESENT;
        
        public const vulkan.VkResult VK_ERROR_FEATURE_NOT_PRESENT = VkResult.VK_ERROR_FEATURE_NOT_PRESENT;
        
        public const vulkan.VkResult VK_ERROR_INCOMPATIBLE_DRIVER = VkResult.VK_ERROR_INCOMPATIBLE_DRIVER;
        
        public const vulkan.VkResult VK_ERROR_TOO_MANY_OBJECTS = VkResult.VK_ERROR_TOO_MANY_OBJECTS;
        
        public const vulkan.VkResult VK_ERROR_FORMAT_NOT_SUPPORTED = VkResult.VK_ERROR_FORMAT_NOT_SUPPORTED;
        
        public const vulkan.VkResult VK_ERROR_FRAGMENTED_POOL = VkResult.VK_ERROR_FRAGMENTED_POOL;
        
        public const vulkan.VkResult VK_ERROR_UNKNOWN = VkResult.VK_ERROR_UNKNOWN;
        
        public const vulkan.VkResult VK_ERROR_OUT_OF_POOL_MEMORY = VkResult.VK_ERROR_OUT_OF_POOL_MEMORY;
        
        public const vulkan.VkResult VK_ERROR_INVALID_EXTERNAL_HANDLE = VkResult.VK_ERROR_INVALID_EXTERNAL_HANDLE;
        
        public const vulkan.VkResult VK_ERROR_FRAGMENTATION = VkResult.VK_ERROR_FRAGMENTATION;
        
        public const vulkan.VkResult VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = VkResult.VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS;
        
        public const vulkan.VkResult VK_PIPELINE_COMPILE_REQUIRED = VkResult.VK_PIPELINE_COMPILE_REQUIRED;
        
        public const vulkan.VkResult VK_ERROR_SURFACE_LOST_KHR = VkResult.VK_ERROR_SURFACE_LOST_KHR;
        
        public const vulkan.VkResult VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = VkResult.VK_ERROR_NATIVE_WINDOW_IN_USE_KHR;
        
        public const vulkan.VkResult VK_SUBOPTIMAL_KHR = VkResult.VK_SUBOPTIMAL_KHR;
        
        public const vulkan.VkResult VK_ERROR_OUT_OF_DATE_KHR = VkResult.VK_ERROR_OUT_OF_DATE_KHR;
        
        public const vulkan.VkResult VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = VkResult.VK_ERROR_INCOMPATIBLE_DISPLAY_KHR;
        
        public const vulkan.VkResult VK_ERROR_VALIDATION_FAILED_EXT = VkResult.VK_ERROR_VALIDATION_FAILED_EXT;
        
        public const vulkan.VkResult VK_ERROR_INVALID_SHADER_NV = VkResult.VK_ERROR_INVALID_SHADER_NV;
        
        public const vulkan.VkResult VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR = VkResult.VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR;
        
        public const vulkan.VkResult VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR = VkResult.VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR;
        
        public const vulkan.VkResult VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR = VkResult.VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR;
        
        public const vulkan.VkResult VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR = VkResult.VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR;
        
        public const vulkan.VkResult VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR = VkResult.VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR;
        
        public const vulkan.VkResult VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR = VkResult.VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR;
        
        public const vulkan.VkResult VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = VkResult.VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT;
        
        public const vulkan.VkResult VK_ERROR_NOT_PERMITTED_KHR = VkResult.VK_ERROR_NOT_PERMITTED_KHR;
        
        public const vulkan.VkResult VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = VkResult.VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT;
        
        public const vulkan.VkResult VK_THREAD_IDLE_KHR = VkResult.VK_THREAD_IDLE_KHR;
        
        public const vulkan.VkResult VK_THREAD_DONE_KHR = VkResult.VK_THREAD_DONE_KHR;
        
        public const vulkan.VkResult VK_OPERATION_DEFERRED_KHR = VkResult.VK_OPERATION_DEFERRED_KHR;
        
        public const vulkan.VkResult VK_OPERATION_NOT_DEFERRED_KHR = VkResult.VK_OPERATION_NOT_DEFERRED_KHR;
        
        public const vulkan.VkResult VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR = VkResult.VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR;
        
        public const vulkan.VkResult VK_ERROR_COMPRESSION_EXHAUSTED_EXT = VkResult.VK_ERROR_COMPRESSION_EXHAUSTED_EXT;
        
        public const vulkan.VkResult VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT = VkResult.VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT;
        
        public const vulkan.VkResult VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VkResult.VK_ERROR_OUT_OF_POOL_MEMORY_KHR;
        
        public const vulkan.VkResult VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VkResult.VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR;
        
        public const vulkan.VkResult VK_ERROR_FRAGMENTATION_EXT = VkResult.VK_ERROR_FRAGMENTATION_EXT;
        
        public const vulkan.VkResult VK_ERROR_NOT_PERMITTED_EXT = VkResult.VK_ERROR_NOT_PERMITTED_EXT;
        
        public const vulkan.VkResult VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = VkResult.VK_ERROR_INVALID_DEVICE_ADDRESS_EXT;
        
        public const vulkan.VkResult VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = VkResult.VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR;
        
        public const vulkan.VkResult VK_PIPELINE_COMPILE_REQUIRED_EXT = VkResult.VK_PIPELINE_COMPILE_REQUIRED_EXT;
        
        public const vulkan.VkResult VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = VkResult.VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT;
        
        public const vulkan.VkResult VK_RESULT_MAX_ENUM = VkResult.VK_RESULT_MAX_ENUM;
        
        public enum VkStructureType : uint
        {
            VK_STRUCTURE_TYPE_APPLICATION_INFO = unchecked((uint)0),
            
            VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = unchecked((uint)1),
            
            VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = unchecked((uint)2),
            
            VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = unchecked((uint)3),
            
            VK_STRUCTURE_TYPE_SUBMIT_INFO = unchecked((uint)4),
            
            VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = unchecked((uint)5),
            
            VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = unchecked((uint)6),
            
            VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = unchecked((uint)7),
            
            VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = unchecked((uint)8),
            
            VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = unchecked((uint)9),
            
            VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = unchecked((uint)10),
            
            VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = unchecked((uint)11),
            
            VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = unchecked((uint)12),
            
            VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = unchecked((uint)13),
            
            VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = unchecked((uint)14),
            
            VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = unchecked((uint)15),
            
            VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = unchecked((uint)16),
            
            VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = unchecked((uint)17),
            
            VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = unchecked((uint)18),
            
            VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = unchecked((uint)19),
            
            VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = unchecked((uint)20),
            
            VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = unchecked((uint)21),
            
            VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = unchecked((uint)22),
            
            VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = unchecked((uint)23),
            
            VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = unchecked((uint)24),
            
            VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = unchecked((uint)25),
            
            VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = unchecked((uint)26),
            
            VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = unchecked((uint)27),
            
            VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = unchecked((uint)28),
            
            VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = unchecked((uint)29),
            
            VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = unchecked((uint)30),
            
            VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = unchecked((uint)31),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = unchecked((uint)32),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = unchecked((uint)33),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = unchecked((uint)34),
            
            VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = unchecked((uint)35),
            
            VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = unchecked((uint)36),
            
            VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = unchecked((uint)37),
            
            VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = unchecked((uint)38),
            
            VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = unchecked((uint)39),
            
            VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = unchecked((uint)40),
            
            VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = unchecked((uint)41),
            
            VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = unchecked((uint)42),
            
            VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = unchecked((uint)43),
            
            VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = unchecked((uint)44),
            
            VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = unchecked((uint)45),
            
            VK_STRUCTURE_TYPE_MEMORY_BARRIER = unchecked((uint)46),
            
            VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = unchecked((uint)47),
            
            VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = unchecked((uint)48),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = unchecked((uint)1000094000),
            
            VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = unchecked((uint)1000157000),
            
            VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = unchecked((uint)1000157001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = unchecked((uint)1000083000),
            
            VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = unchecked((uint)1000127000),
            
            VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = unchecked((uint)1000127001),
            
            VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = unchecked((uint)1000060000),
            
            VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = unchecked((uint)1000060003),
            
            VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = unchecked((uint)1000060004),
            
            VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = unchecked((uint)1000060005),
            
            VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = unchecked((uint)1000060006),
            
            VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = unchecked((uint)1000060013),
            
            VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = unchecked((uint)1000060014),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = unchecked((uint)1000070000),
            
            VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = unchecked((uint)1000070001),
            
            VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = unchecked((uint)1000146000),
            
            VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = unchecked((uint)1000146001),
            
            VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = unchecked((uint)1000146002),
            
            VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = unchecked((uint)1000146003),
            
            VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = unchecked((uint)1000146004),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = unchecked((uint)1000059000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = unchecked((uint)1000059001),
            
            VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = unchecked((uint)1000059002),
            
            VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = unchecked((uint)1000059003),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = unchecked((uint)1000059004),
            
            VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = unchecked((uint)1000059005),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = unchecked((uint)1000059006),
            
            VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = unchecked((uint)1000059007),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = unchecked((uint)1000059008),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = unchecked((uint)1000117000),
            
            VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = unchecked((uint)1000117001),
            
            VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = unchecked((uint)1000117002),
            
            VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = unchecked((uint)1000117003),
            
            VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = unchecked((uint)1000053000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = unchecked((uint)1000053001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = unchecked((uint)1000053002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = unchecked((uint)1000120000),
            
            VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = unchecked((uint)1000145000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = unchecked((uint)1000145001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = unchecked((uint)1000145002),
            
            VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = unchecked((uint)1000145003),
            
            VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = unchecked((uint)1000156000),
            
            VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = unchecked((uint)1000156001),
            
            VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = unchecked((uint)1000156002),
            
            VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = unchecked((uint)1000156003),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = unchecked((uint)1000156004),
            
            VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = unchecked((uint)1000156005),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = unchecked((uint)1000085000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = unchecked((uint)1000071000),
            
            VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = unchecked((uint)1000071001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = unchecked((uint)1000071002),
            
            VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = unchecked((uint)1000071003),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = unchecked((uint)1000071004),
            
            VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = unchecked((uint)1000072000),
            
            VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = unchecked((uint)1000072001),
            
            VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = unchecked((uint)1000072002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = unchecked((uint)1000112000),
            
            VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = unchecked((uint)1000112001),
            
            VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = unchecked((uint)1000113000),
            
            VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = unchecked((uint)1000077000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = unchecked((uint)1000076000),
            
            VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = unchecked((uint)1000076001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = unchecked((uint)1000168000),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = unchecked((uint)1000168001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = unchecked((uint)1000063000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = unchecked((uint)49),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = unchecked((uint)50),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = unchecked((uint)51),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = unchecked((uint)52),
            
            VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = unchecked((uint)1000147000),
            
            VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = unchecked((uint)1000109000),
            
            VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = unchecked((uint)1000109001),
            
            VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = unchecked((uint)1000109002),
            
            VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = unchecked((uint)1000109003),
            
            VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = unchecked((uint)1000109004),
            
            VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = unchecked((uint)1000109005),
            
            VK_STRUCTURE_TYPE_SUBPASS_END_INFO = unchecked((uint)1000109006),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = unchecked((uint)1000177000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = unchecked((uint)1000196000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = unchecked((uint)1000180000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = unchecked((uint)1000082000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = unchecked((uint)1000197000),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = unchecked((uint)1000161000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = unchecked((uint)1000161001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = unchecked((uint)1000161002),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = unchecked((uint)1000161003),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = unchecked((uint)1000161004),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = unchecked((uint)1000199000),
            
            VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = unchecked((uint)1000199001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = unchecked((uint)1000221000),
            
            VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = unchecked((uint)1000246000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = unchecked((uint)1000130000),
            
            VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = unchecked((uint)1000130001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = unchecked((uint)1000211000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = unchecked((uint)1000108000),
            
            VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = unchecked((uint)1000108001),
            
            VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = unchecked((uint)1000108002),
            
            VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = unchecked((uint)1000108003),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = unchecked((uint)1000253000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = unchecked((uint)1000175000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = unchecked((uint)1000241000),
            
            VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = unchecked((uint)1000241001),
            
            VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = unchecked((uint)1000241002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = unchecked((uint)1000261000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = unchecked((uint)1000207000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = unchecked((uint)1000207001),
            
            VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = unchecked((uint)1000207002),
            
            VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = unchecked((uint)1000207003),
            
            VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = unchecked((uint)1000207004),
            
            VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = unchecked((uint)1000207005),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = unchecked((uint)1000257000),
            
            VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = unchecked((uint)1000244001),
            
            VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = unchecked((uint)1000257002),
            
            VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = unchecked((uint)1000257003),
            
            VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = unchecked((uint)1000257004),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = unchecked((uint)53),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = unchecked((uint)54),
            
            VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = unchecked((uint)1000192000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = unchecked((uint)1000215000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = unchecked((uint)1000245000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = unchecked((uint)1000276000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = unchecked((uint)1000295000),
            
            VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = unchecked((uint)1000295001),
            
            VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = unchecked((uint)1000295002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = unchecked((uint)1000297000),
            
            VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = unchecked((uint)1000314000),
            
            VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = unchecked((uint)1000314001),
            
            VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = unchecked((uint)1000314002),
            
            VK_STRUCTURE_TYPE_DEPENDENCY_INFO = unchecked((uint)1000314003),
            
            VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = unchecked((uint)1000314004),
            
            VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = unchecked((uint)1000314005),
            
            VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = unchecked((uint)1000314006),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = unchecked((uint)1000314007),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = unchecked((uint)1000325000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = unchecked((uint)1000335000),
            
            VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = unchecked((uint)1000337000),
            
            VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = unchecked((uint)1000337001),
            
            VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = unchecked((uint)1000337002),
            
            VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = unchecked((uint)1000337003),
            
            VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = unchecked((uint)1000337004),
            
            VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = unchecked((uint)1000337005),
            
            VK_STRUCTURE_TYPE_BUFFER_COPY_2 = unchecked((uint)1000337006),
            
            VK_STRUCTURE_TYPE_IMAGE_COPY_2 = unchecked((uint)1000337007),
            
            VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = unchecked((uint)1000337008),
            
            VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = unchecked((uint)1000337009),
            
            VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = unchecked((uint)1000337010),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = unchecked((uint)1000225000),
            
            VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = unchecked((uint)1000225001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = unchecked((uint)1000225002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = unchecked((uint)1000138000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = unchecked((uint)1000138001),
            
            VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = unchecked((uint)1000138002),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = unchecked((uint)1000138003),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = unchecked((uint)1000066000),
            
            VK_STRUCTURE_TYPE_RENDERING_INFO = unchecked((uint)1000044000),
            
            VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = unchecked((uint)1000044001),
            
            VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = unchecked((uint)1000044002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = unchecked((uint)1000044003),
            
            VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = unchecked((uint)1000044004),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = unchecked((uint)1000280000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = unchecked((uint)1000280001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = unchecked((uint)1000281001),
            
            VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = unchecked((uint)1000360000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = unchecked((uint)1000413000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = unchecked((uint)1000413001),
            
            VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = unchecked((uint)1000413002),
            
            VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = unchecked((uint)1000413003),
            
            VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = unchecked((uint)1000001000),
            
            VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = unchecked((uint)1000001001),
            
            VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = unchecked((uint)1000060007),
            
            VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = unchecked((uint)1000060008),
            
            VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = unchecked((uint)1000060009),
            
            VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = unchecked((uint)1000060010),
            
            VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = unchecked((uint)1000060011),
            
            VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = unchecked((uint)1000060012),
            
            VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = unchecked((uint)1000002000),
            
            VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = unchecked((uint)1000002001),
            
            VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = unchecked((uint)1000003000),
            
            VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = unchecked((uint)1000004000),
            
            VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = unchecked((uint)1000005000),
            
            VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = unchecked((uint)1000006000),
            
            VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = unchecked((uint)1000008000),
            
            VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = unchecked((uint)1000009000),
            
            VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = unchecked((uint)1000011000),
            
            VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = unchecked((uint)1000018000),
            
            VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = unchecked((uint)1000022000),
            
            VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = unchecked((uint)1000022001),
            
            VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = unchecked((uint)1000022002),
            
            VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR = unchecked((uint)1000023000),
            
            VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = unchecked((uint)1000023001),
            
            VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR = unchecked((uint)1000023002),
            
            VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR = unchecked((uint)1000023003),
            
            VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR = unchecked((uint)1000023004),
            
            VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = unchecked((uint)1000023005),
            
            VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = unchecked((uint)1000023006),
            
            VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = unchecked((uint)1000023007),
            
            VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = unchecked((uint)1000023008),
            
            VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = unchecked((uint)1000023009),
            
            VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = unchecked((uint)1000023010),
            
            VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR = unchecked((uint)1000023011),
            
            VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR = unchecked((uint)1000023012),
            
            VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR = unchecked((uint)1000023013),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = unchecked((uint)1000023014),
            
            VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = unchecked((uint)1000023015),
            
            VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR = unchecked((uint)1000023016),
            
            VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = unchecked((uint)1000024000),
            
            VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR = unchecked((uint)1000024001),
            
            VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR = unchecked((uint)1000024002),
            
            VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = unchecked((uint)1000026000),
            
            VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = unchecked((uint)1000026001),
            
            VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = unchecked((uint)1000026002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = unchecked((uint)1000028000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = unchecked((uint)1000028001),
            
            VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = unchecked((uint)1000028002),
            
            VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = unchecked((uint)1000029000),
            
            VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = unchecked((uint)1000029001),
            
            VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = unchecked((uint)1000029002),
            
            VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = unchecked((uint)1000030000),
            
            VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = unchecked((uint)1000030001),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT = unchecked((uint)1000038000),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT = unchecked((uint)1000038001),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT = unchecked((uint)1000038002),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_EXT = unchecked((uint)1000038003),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT = unchecked((uint)1000038004),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT = unchecked((uint)1000038005),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_EXT = unchecked((uint)1000038006),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT = unchecked((uint)1000038007),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT = unchecked((uint)1000038008),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT = unchecked((uint)1000038009),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT = unchecked((uint)1000038010),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_EXT = unchecked((uint)1000038011),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_EXT = unchecked((uint)1000038012),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_EXT = unchecked((uint)1000038013),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT = unchecked((uint)1000039000),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT = unchecked((uint)1000039001),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT = unchecked((uint)1000039002),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_EXT = unchecked((uint)1000039003),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT = unchecked((uint)1000039004),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT = unchecked((uint)1000039005),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_EXT = unchecked((uint)1000039006),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT = unchecked((uint)1000039007),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT = unchecked((uint)1000039009),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT = unchecked((uint)1000039010),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT = unchecked((uint)1000039011),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_EXT = unchecked((uint)1000039012),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_EXT = unchecked((uint)1000039013),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_EXT = unchecked((uint)1000039014),
            
            VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR = unchecked((uint)1000040000),
            
            VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR = unchecked((uint)1000040001),
            
            VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR = unchecked((uint)1000040003),
            
            VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = unchecked((uint)1000040004),
            
            VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = unchecked((uint)1000040005),
            
            VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR = unchecked((uint)1000040006),
            
            VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = unchecked((uint)1000041000),
            
            VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = unchecked((uint)1000044006),
            
            VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = unchecked((uint)1000044007),
            
            VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = unchecked((uint)1000044008),
            
            VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = unchecked((uint)1000044009),
            
            VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = unchecked((uint)1000049000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = unchecked((uint)1000050000),
            
            VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = unchecked((uint)1000056000),
            
            VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = unchecked((uint)1000056001),
            
            VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = unchecked((uint)1000057000),
            
            VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = unchecked((uint)1000057001),
            
            VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = unchecked((uint)1000058000),
            
            VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = unchecked((uint)1000061000),
            
            VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = unchecked((uint)1000062000),
            
            VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = unchecked((uint)1000067000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = unchecked((uint)1000067001),
            
            VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT = unchecked((uint)1000068000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT = unchecked((uint)1000068001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT = unchecked((uint)1000068002),
            
            VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = unchecked((uint)1000073000),
            
            VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = unchecked((uint)1000073001),
            
            VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = unchecked((uint)1000073002),
            
            VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = unchecked((uint)1000073003),
            
            VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = unchecked((uint)1000074000),
            
            VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = unchecked((uint)1000074001),
            
            VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = unchecked((uint)1000074002),
            
            VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = unchecked((uint)1000075000),
            
            VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = unchecked((uint)1000078000),
            
            VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = unchecked((uint)1000078001),
            
            VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = unchecked((uint)1000078002),
            
            VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = unchecked((uint)1000078003),
            
            VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = unchecked((uint)1000079000),
            
            VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = unchecked((uint)1000079001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = unchecked((uint)1000080000),
            
            VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = unchecked((uint)1000081000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = unchecked((uint)1000081001),
            
            VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = unchecked((uint)1000081002),
            
            VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = unchecked((uint)1000084000),
            
            VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = unchecked((uint)1000087000),
            
            VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = unchecked((uint)1000090000),
            
            VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = unchecked((uint)1000091000),
            
            VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = unchecked((uint)1000091001),
            
            VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = unchecked((uint)1000091002),
            
            VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = unchecked((uint)1000091003),
            
            VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = unchecked((uint)1000092000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = unchecked((uint)1000097000),
            
            VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = unchecked((uint)1000098000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = unchecked((uint)1000099000),
            
            VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = unchecked((uint)1000099001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = unchecked((uint)1000101000),
            
            VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = unchecked((uint)1000101001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = unchecked((uint)1000102000),
            
            VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = unchecked((uint)1000102001),
            
            VK_STRUCTURE_TYPE_HDR_METADATA_EXT = unchecked((uint)1000105000),
            
            VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = unchecked((uint)1000111000),
            
            VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = unchecked((uint)1000114000),
            
            VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = unchecked((uint)1000114001),
            
            VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = unchecked((uint)1000114002),
            
            VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = unchecked((uint)1000115000),
            
            VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = unchecked((uint)1000115001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = unchecked((uint)1000116000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = unchecked((uint)1000116001),
            
            VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = unchecked((uint)1000116002),
            
            VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = unchecked((uint)1000116003),
            
            VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = unchecked((uint)1000116004),
            
            VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = unchecked((uint)1000116005),
            
            VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = unchecked((uint)1000116006),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = unchecked((uint)1000119000),
            
            VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = unchecked((uint)1000119001),
            
            VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = unchecked((uint)1000119002),
            
            VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = unchecked((uint)1000121000),
            
            VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = unchecked((uint)1000121001),
            
            VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = unchecked((uint)1000121002),
            
            VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = unchecked((uint)1000121003),
            
            VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = unchecked((uint)1000121004),
            
            VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = unchecked((uint)1000122000),
            
            VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = unchecked((uint)1000123000),
            
            VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = unchecked((uint)1000128000),
            
            VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = unchecked((uint)1000128001),
            
            VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = unchecked((uint)1000128002),
            
            VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = unchecked((uint)1000128003),
            
            VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = unchecked((uint)1000128004),
            
            VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = unchecked((uint)1000129000),
            
            VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = unchecked((uint)1000129001),
            
            VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = unchecked((uint)1000129002),
            
            VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = unchecked((uint)1000129003),
            
            VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = unchecked((uint)1000129004),
            
            VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = unchecked((uint)1000129005),
            
            VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = unchecked((uint)1000129006),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX = unchecked((uint)1000134000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_PROPERTIES_AMDX = unchecked((uint)1000134001),
            
            VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_SCRATCH_SIZE_AMDX = unchecked((uint)1000134002),
            
            VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_CREATE_INFO_AMDX = unchecked((uint)1000134003),
            
            VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_NODE_CREATE_INFO_AMDX = unchecked((uint)1000134004),
            
            VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = unchecked((uint)1000143000),
            
            VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = unchecked((uint)1000143001),
            
            VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = unchecked((uint)1000143002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = unchecked((uint)1000143003),
            
            VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = unchecked((uint)1000143004),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = unchecked((uint)1000148000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = unchecked((uint)1000148001),
            
            VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = unchecked((uint)1000148002),
            
            VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = unchecked((uint)1000149000),
            
            VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = unchecked((uint)1000150007),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = unchecked((uint)1000150000),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = unchecked((uint)1000150002),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = unchecked((uint)1000150003),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = unchecked((uint)1000150004),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = unchecked((uint)1000150005),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = unchecked((uint)1000150006),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = unchecked((uint)1000150009),
            
            VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = unchecked((uint)1000150010),
            
            VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = unchecked((uint)1000150011),
            
            VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = unchecked((uint)1000150012),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = unchecked((uint)1000150013),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = unchecked((uint)1000150014),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = unchecked((uint)1000150017),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = unchecked((uint)1000150020),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = unchecked((uint)1000347000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = unchecked((uint)1000347001),
            
            VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = unchecked((uint)1000150015),
            
            VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = unchecked((uint)1000150016),
            
            VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = unchecked((uint)1000150018),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = unchecked((uint)1000348013),
            
            VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = unchecked((uint)1000152000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = unchecked((uint)1000154000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = unchecked((uint)1000154001),
            
            VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = unchecked((uint)1000158000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = unchecked((uint)1000158002),
            
            VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = unchecked((uint)1000158003),
            
            VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = unchecked((uint)1000158004),
            
            VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = unchecked((uint)1000158005),
            
            VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = unchecked((uint)1000158006),
            
            VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = unchecked((uint)1000160000),
            
            VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = unchecked((uint)1000160001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR = unchecked((uint)1000163000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR = unchecked((uint)1000163001),
            
            VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = unchecked((uint)1000164000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = unchecked((uint)1000164001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = unchecked((uint)1000164002),
            
            VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = unchecked((uint)1000164005),
            
            VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = unchecked((uint)1000165000),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = unchecked((uint)1000165001),
            
            VK_STRUCTURE_TYPE_GEOMETRY_NV = unchecked((uint)1000165003),
            
            VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = unchecked((uint)1000165004),
            
            VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = unchecked((uint)1000165005),
            
            VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = unchecked((uint)1000165006),
            
            VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = unchecked((uint)1000165007),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = unchecked((uint)1000165008),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = unchecked((uint)1000165009),
            
            VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = unchecked((uint)1000165011),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = unchecked((uint)1000165012),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = unchecked((uint)1000166000),
            
            VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = unchecked((uint)1000166001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = unchecked((uint)1000170000),
            
            VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = unchecked((uint)1000170001),
            
            VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = unchecked((uint)1000178000),
            
            VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = unchecked((uint)1000178001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = unchecked((uint)1000178002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = unchecked((uint)1000181000),
            
            VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = unchecked((uint)1000183000),
            
            VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = unchecked((uint)1000184000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = unchecked((uint)1000185000),
            
            VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR = unchecked((uint)1000187000),
            
            VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = unchecked((uint)1000187001),
            
            VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = unchecked((uint)1000187002),
            
            VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR = unchecked((uint)1000187003),
            
            VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR = unchecked((uint)1000187004),
            
            VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR = unchecked((uint)1000187005),
            
            VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = unchecked((uint)1000174000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = unchecked((uint)1000388000),
            
            VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = unchecked((uint)1000388001),
            
            VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = unchecked((uint)1000189000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = unchecked((uint)1000190000),
            
            VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = unchecked((uint)1000190001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = unchecked((uint)1000190002),
            
            VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = unchecked((uint)1000191000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = unchecked((uint)1000201000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = unchecked((uint)1000202000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = unchecked((uint)1000202001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = unchecked((uint)1000204000),
            
            VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = unchecked((uint)1000205000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = unchecked((uint)1000205002),
            
            VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = unchecked((uint)1000206000),
            
            VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = unchecked((uint)1000206001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = unchecked((uint)1000209000),
            
            VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = unchecked((uint)1000210000),
            
            VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = unchecked((uint)1000210001),
            
            VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = unchecked((uint)1000210002),
            
            VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = unchecked((uint)1000210003),
            
            VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = unchecked((uint)1000210004),
            
            VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = unchecked((uint)1000210005),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = unchecked((uint)1000212000),
            
            VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = unchecked((uint)1000213000),
            
            VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = unchecked((uint)1000213001),
            
            VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = unchecked((uint)1000214000),
            
            VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = unchecked((uint)1000217000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = unchecked((uint)1000218000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = unchecked((uint)1000218001),
            
            VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = unchecked((uint)1000218002),
            
            VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = unchecked((uint)1000226000),
            
            VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = unchecked((uint)1000226001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = unchecked((uint)1000226002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = unchecked((uint)1000226003),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = unchecked((uint)1000226004),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = unchecked((uint)1000227000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = unchecked((uint)1000229000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = unchecked((uint)1000234000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = unchecked((uint)1000237000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = unchecked((uint)1000238000),
            
            VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = unchecked((uint)1000238001),
            
            VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = unchecked((uint)1000239000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = unchecked((uint)1000240000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = unchecked((uint)1000244000),
            
            VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = unchecked((uint)1000244002),
            
            VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = unchecked((uint)1000247000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = unchecked((uint)1000248000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = unchecked((uint)1000249000),
            
            VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = unchecked((uint)1000249001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = unchecked((uint)1000249002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = unchecked((uint)1000250000),
            
            VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = unchecked((uint)1000250001),
            
            VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = unchecked((uint)1000250002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = unchecked((uint)1000251000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = unchecked((uint)1000252000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = unchecked((uint)1000254000),
            
            VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = unchecked((uint)1000254001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = unchecked((uint)1000254002),
            
            VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = unchecked((uint)1000255000),
            
            VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = unchecked((uint)1000255002),
            
            VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = unchecked((uint)1000255001),
            
            VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = unchecked((uint)1000256000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = unchecked((uint)1000259000),
            
            VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = unchecked((uint)1000259001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = unchecked((uint)1000259002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = unchecked((uint)1000260000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = unchecked((uint)1000265000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = unchecked((uint)1000267000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = unchecked((uint)1000269000),
            
            VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = unchecked((uint)1000269001),
            
            VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = unchecked((uint)1000269002),
            
            VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = unchecked((uint)1000269003),
            
            VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = unchecked((uint)1000269004),
            
            VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = unchecked((uint)1000269005),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT = unchecked((uint)1000270000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT = unchecked((uint)1000270001),
            
            VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT = unchecked((uint)1000270002),
            
            VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT = unchecked((uint)1000270003),
            
            VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT = unchecked((uint)1000270004),
            
            VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT = unchecked((uint)1000270005),
            
            VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT = unchecked((uint)1000270006),
            
            VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT = unchecked((uint)1000270007),
            
            VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT = unchecked((uint)1000270008),
            
            VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT = unchecked((uint)1000270009),
            
            VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR = unchecked((uint)1000271000),
            
            VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR = unchecked((uint)1000271001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = unchecked((uint)1000273000),
            
            VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT = unchecked((uint)1000274000),
            
            VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT = unchecked((uint)1000274001),
            
            VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT = unchecked((uint)1000274002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT = unchecked((uint)1000275000),
            
            VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT = unchecked((uint)1000275001),
            
            VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT = unchecked((uint)1000275002),
            
            VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT = unchecked((uint)1000275003),
            
            VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT = unchecked((uint)1000275004),
            
            VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT = unchecked((uint)1000275005),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = unchecked((uint)1000277000),
            
            VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = unchecked((uint)1000277001),
            
            VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = unchecked((uint)1000277002),
            
            VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = unchecked((uint)1000277003),
            
            VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = unchecked((uint)1000277004),
            
            VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = unchecked((uint)1000277005),
            
            VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = unchecked((uint)1000277006),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = unchecked((uint)1000277007),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = unchecked((uint)1000278000),
            
            VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = unchecked((uint)1000278001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = unchecked((uint)1000281000),
            
            VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = unchecked((uint)1000282000),
            
            VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = unchecked((uint)1000282001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT = unchecked((uint)1000283000),
            
            VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT = unchecked((uint)1000283001),
            
            VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT = unchecked((uint)1000283002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = unchecked((uint)1000284000),
            
            VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = unchecked((uint)1000284001),
            
            VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = unchecked((uint)1000284002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = unchecked((uint)1000286000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = unchecked((uint)1000286001),
            
            VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = unchecked((uint)1000287000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = unchecked((uint)1000287001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = unchecked((uint)1000287002),
            
            VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = unchecked((uint)1000290000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV = unchecked((uint)1000292000),
            
            VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV = unchecked((uint)1000292001),
            
            VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV = unchecked((uint)1000292002),
            
            VK_STRUCTURE_TYPE_PRESENT_ID_KHR = unchecked((uint)1000294000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = unchecked((uint)1000294001),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR = unchecked((uint)1000299000),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = unchecked((uint)1000299001),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR = unchecked((uint)1000299002),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR = unchecked((uint)1000299003),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR = unchecked((uint)1000299004),
            
            VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR = unchecked((uint)1000299005),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = unchecked((uint)1000299006),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR = unchecked((uint)1000299007),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = unchecked((uint)1000299008),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR = unchecked((uint)1000299009),
            
            VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = unchecked((uint)1000299010),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = unchecked((uint)1000300000),
            
            VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = unchecked((uint)1000300001),
            
            VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV = unchecked((uint)1000310000),
            
            VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT = unchecked((uint)1000311000),
            
            VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT = unchecked((uint)1000311001),
            
            VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT = unchecked((uint)1000311002),
            
            VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT = unchecked((uint)1000311003),
            
            VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT = unchecked((uint)1000311004),
            
            VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT = unchecked((uint)1000311005),
            
            VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT = unchecked((uint)1000311006),
            
            VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT = unchecked((uint)1000311007),
            
            VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT = unchecked((uint)1000311008),
            
            VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT = unchecked((uint)1000311009),
            
            VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT = unchecked((uint)1000311010),
            
            VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT = unchecked((uint)1000311011),
            
            VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = unchecked((uint)1000314008),
            
            VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = unchecked((uint)1000314009),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT = unchecked((uint)1000316000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT = unchecked((uint)1000316001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT = unchecked((uint)1000316002),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT = unchecked((uint)1000316003),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT = unchecked((uint)1000316004),
            
            VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = unchecked((uint)1000316005),
            
            VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = unchecked((uint)1000316006),
            
            VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = unchecked((uint)1000316007),
            
            VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = unchecked((uint)1000316008),
            
            VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT = unchecked((uint)1000316010),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT = unchecked((uint)1000316011),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT = unchecked((uint)1000316012),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = unchecked((uint)1000316009),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT = unchecked((uint)1000320000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT = unchecked((uint)1000320001),
            
            VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT = unchecked((uint)1000320002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD = unchecked((uint)1000321000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR = unchecked((uint)1000203000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR = unchecked((uint)1000322000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR = unchecked((uint)1000323000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = unchecked((uint)1000326000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = unchecked((uint)1000326001),
            
            VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = unchecked((uint)1000326002),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = unchecked((uint)1000327000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = unchecked((uint)1000327001),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = unchecked((uint)1000327002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT = unchecked((uint)1000328000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT = unchecked((uint)1000328001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = unchecked((uint)1000330000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = unchecked((uint)1000332000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = unchecked((uint)1000332001),
            
            VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = unchecked((uint)1000333000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = unchecked((uint)1000336000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT = unchecked((uint)1000338000),
            
            VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT = unchecked((uint)1000338001),
            
            VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT = unchecked((uint)1000338004),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT = unchecked((uint)1000339000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = unchecked((uint)1000340000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT = unchecked((uint)1000341000),
            
            VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT = unchecked((uint)1000341001),
            
            VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT = unchecked((uint)1000341002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = unchecked((uint)1000344000),
            
            VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = unchecked((uint)1000346000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = unchecked((uint)1000352000),
            
            VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = unchecked((uint)1000352001),
            
            VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = unchecked((uint)1000352002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = unchecked((uint)1000353000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT = unchecked((uint)1000354000),
            
            VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT = unchecked((uint)1000354001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = unchecked((uint)1000355000),
            
            VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = unchecked((uint)1000355001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = unchecked((uint)1000356000),
            
            VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = unchecked((uint)1000364000),
            
            VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = unchecked((uint)1000364001),
            
            VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = unchecked((uint)1000364002),
            
            VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = unchecked((uint)1000365000),
            
            VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = unchecked((uint)1000365001),
            
            VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = unchecked((uint)1000366000),
            
            VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = unchecked((uint)1000366001),
            
            VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = unchecked((uint)1000366002),
            
            VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = unchecked((uint)1000366003),
            
            VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = unchecked((uint)1000366004),
            
            VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = unchecked((uint)1000366005),
            
            VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = unchecked((uint)1000366006),
            
            VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = unchecked((uint)1000366007),
            
            VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = unchecked((uint)1000366008),
            
            VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = unchecked((uint)1000366009),
            
            VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = unchecked((uint)1000369000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = unchecked((uint)1000369001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = unchecked((uint)1000369002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = unchecked((uint)1000370000),
            
            VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = unchecked((uint)1000371000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = unchecked((uint)1000371001),
            
            VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT = unchecked((uint)1000372000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT = unchecked((uint)1000372001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT = unchecked((uint)1000376000),
            
            VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT = unchecked((uint)1000376001),
            
            VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT = unchecked((uint)1000376002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = unchecked((uint)1000377000),
            
            VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = unchecked((uint)1000378000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = unchecked((uint)1000381000),
            
            VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = unchecked((uint)1000381001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT = unchecked((uint)1000382000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR = unchecked((uint)1000386000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = unchecked((uint)1000391000),
            
            VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = unchecked((uint)1000391001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = unchecked((uint)1000392000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = unchecked((uint)1000392001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT = unchecked((uint)1000393000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT = unchecked((uint)1000395000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT = unchecked((uint)1000395001),
            
            VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT = unchecked((uint)1000396000),
            
            VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT = unchecked((uint)1000396001),
            
            VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT = unchecked((uint)1000396002),
            
            VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT = unchecked((uint)1000396003),
            
            VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT = unchecked((uint)1000396004),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT = unchecked((uint)1000396005),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT = unchecked((uint)1000396006),
            
            VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT = unchecked((uint)1000396007),
            
            VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT = unchecked((uint)1000396008),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT = unchecked((uint)1000396009),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV = unchecked((uint)1000397000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV = unchecked((uint)1000397001),
            
            VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_DISPLACEMENT_MICROMAP_NV = unchecked((uint)1000397002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI = unchecked((uint)1000404000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI = unchecked((uint)1000404001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = unchecked((uint)1000411000),
            
            VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = unchecked((uint)1000411001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = unchecked((uint)1000412000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM = unchecked((uint)1000415000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT = unchecked((uint)1000418000),
            
            VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT = unchecked((uint)1000418001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = unchecked((uint)1000420000),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = unchecked((uint)1000420001),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = unchecked((uint)1000420002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT = unchecked((uint)1000421000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT = unchecked((uint)1000422000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = unchecked((uint)1000425000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = unchecked((uint)1000425001),
            
            VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = unchecked((uint)1000425002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV = unchecked((uint)1000426000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV = unchecked((uint)1000426001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV = unchecked((uint)1000427000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV = unchecked((uint)1000427001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV = unchecked((uint)1000428000),
            
            VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV = unchecked((uint)1000428001),
            
            VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV = unchecked((uint)1000428002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = unchecked((uint)1000430000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT = unchecked((uint)1000437000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM = unchecked((uint)1000440000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM = unchecked((uint)1000440001),
            
            VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM = unchecked((uint)1000440002),
            
            VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT = unchecked((uint)1000453000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT = unchecked((uint)1000455000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT = unchecked((uint)1000455001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT = unchecked((uint)1000458000),
            
            VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT = unchecked((uint)1000458001),
            
            VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT = unchecked((uint)1000458002),
            
            VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT = unchecked((uint)1000458003),
            
            VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG = unchecked((uint)1000459000),
            
            VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG = unchecked((uint)1000459001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT = unchecked((uint)1000462000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT = unchecked((uint)1000462001),
            
            VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT = unchecked((uint)1000462002),
            
            VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT = unchecked((uint)1000462003),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT = unchecked((uint)1000342000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV = unchecked((uint)1000464000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV = unchecked((uint)1000464001),
            
            VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV = unchecked((uint)1000464002),
            
            VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV = unchecked((uint)1000464003),
            
            VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV = unchecked((uint)1000464004),
            
            VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV = unchecked((uint)1000464005),
            
            VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV = unchecked((uint)1000464010),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT = unchecked((uint)1000465000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT = unchecked((uint)1000466000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR = unchecked((uint)1000470000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR = unchecked((uint)1000470001),
            
            VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR = unchecked((uint)1000470003),
            
            VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR = unchecked((uint)1000470004),
            
            VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR = unchecked((uint)1000338002),
            
            VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR = unchecked((uint)1000338003),
            
            VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR = unchecked((uint)1000470005),
            
            VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR = unchecked((uint)1000470006),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR = unchecked((uint)1000481000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT = unchecked((uint)1000482000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT = unchecked((uint)1000482001),
            
            VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT = unchecked((uint)1000482002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM = unchecked((uint)1000484000),
            
            VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM = unchecked((uint)1000484001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC = unchecked((uint)1000485000),
            
            VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC = unchecked((uint)1000485001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM = unchecked((uint)1000488000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV = unchecked((uint)1000490000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV = unchecked((uint)1000490001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT = unchecked((uint)1000351000),
            
            VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT = unchecked((uint)1000351002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM = unchecked((uint)1000497000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM = unchecked((uint)1000497001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT = unchecked((uint)1000498000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT = unchecked((uint)1000499000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR = unchecked((uint)1000506000),
            
            VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR = unchecked((uint)1000506001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR = unchecked((uint)1000506002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM = unchecked((uint)1000510000),
            
            VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM = unchecked((uint)1000510001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT = unchecked((uint)1000524000),
            
            VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX = unchecked((uint)1000529000),
            
            VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX = unchecked((uint)1000529001),
            
            VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX = unchecked((uint)1000529002),
            
            VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX = unchecked((uint)1000529003),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX = unchecked((uint)1000529004),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = unchecked((uint)1000120000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = unchecked((uint)1000063000),
            
            VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = unchecked((uint)1000011000),
            
            VK_STRUCTURE_TYPE_RENDERING_INFO_KHR = unchecked((uint)1000044000),
            
            VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR = unchecked((uint)1000044001),
            
            VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR = unchecked((uint)1000044002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR = unchecked((uint)1000044003),
            
            VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR = unchecked((uint)1000044004),
            
            VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV = unchecked((uint)1000044008),
            
            VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = unchecked((uint)1000053000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = unchecked((uint)1000053001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = unchecked((uint)1000053002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = unchecked((uint)1000059000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = unchecked((uint)1000059001),
            
            VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = unchecked((uint)1000059002),
            
            VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = unchecked((uint)1000059003),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = unchecked((uint)1000059004),
            
            VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = unchecked((uint)1000059005),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = unchecked((uint)1000059006),
            
            VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = unchecked((uint)1000059007),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = unchecked((uint)1000059008),
            
            VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = unchecked((uint)1000060000),
            
            VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = unchecked((uint)1000060003),
            
            VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = unchecked((uint)1000060004),
            
            VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = unchecked((uint)1000060005),
            
            VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = unchecked((uint)1000060006),
            
            VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = unchecked((uint)1000060013),
            
            VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = unchecked((uint)1000060014),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = unchecked((uint)1000066000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = unchecked((uint)1000070000),
            
            VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = unchecked((uint)1000070001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = unchecked((uint)1000071000),
            
            VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = unchecked((uint)1000071001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = unchecked((uint)1000071002),
            
            VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = unchecked((uint)1000071003),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = unchecked((uint)1000071004),
            
            VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = unchecked((uint)1000072000),
            
            VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = unchecked((uint)1000072001),
            
            VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = unchecked((uint)1000072002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = unchecked((uint)1000076000),
            
            VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = unchecked((uint)1000076001),
            
            VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = unchecked((uint)1000077000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = unchecked((uint)1000082000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = unchecked((uint)1000082000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = unchecked((uint)1000083000),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = unchecked((uint)1000085000),
            
            VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = unchecked((uint)1000090000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = unchecked((uint)1000108000),
            
            VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = unchecked((uint)1000108001),
            
            VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = unchecked((uint)1000108002),
            
            VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = unchecked((uint)1000108003),
            
            VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = unchecked((uint)1000109000),
            
            VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = unchecked((uint)1000109001),
            
            VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = unchecked((uint)1000109002),
            
            VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = unchecked((uint)1000109003),
            
            VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = unchecked((uint)1000109004),
            
            VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = unchecked((uint)1000109005),
            
            VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = unchecked((uint)1000109006),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = unchecked((uint)1000112000),
            
            VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = unchecked((uint)1000112001),
            
            VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = unchecked((uint)1000113000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = unchecked((uint)1000117000),
            
            VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = unchecked((uint)1000117001),
            
            VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = unchecked((uint)1000117002),
            
            VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = unchecked((uint)1000117003),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = unchecked((uint)1000120000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = unchecked((uint)1000120000),
            
            VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = unchecked((uint)1000127000),
            
            VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = unchecked((uint)1000127001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = unchecked((uint)1000130000),
            
            VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = unchecked((uint)1000130001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = unchecked((uint)1000138000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = unchecked((uint)1000138001),
            
            VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = unchecked((uint)1000138002),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = unchecked((uint)1000138003),
            
            VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = unchecked((uint)1000146000),
            
            VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = unchecked((uint)1000146001),
            
            VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = unchecked((uint)1000146002),
            
            VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = unchecked((uint)1000146003),
            
            VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = unchecked((uint)1000146004),
            
            VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = unchecked((uint)1000147000),
            
            VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = unchecked((uint)1000156000),
            
            VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = unchecked((uint)1000156001),
            
            VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = unchecked((uint)1000156002),
            
            VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = unchecked((uint)1000156003),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = unchecked((uint)1000156004),
            
            VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = unchecked((uint)1000156005),
            
            VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = unchecked((uint)1000157000),
            
            VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = unchecked((uint)1000157001),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = unchecked((uint)1000161000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = unchecked((uint)1000161001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = unchecked((uint)1000161002),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = unchecked((uint)1000161003),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = unchecked((uint)1000161004),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = unchecked((uint)1000168000),
            
            VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = unchecked((uint)1000168001),
            
            VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = unchecked((uint)1000174000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = unchecked((uint)1000175000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = unchecked((uint)1000177000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = unchecked((uint)1000180000),
            
            VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = unchecked((uint)1000192000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = unchecked((uint)1000196000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = unchecked((uint)1000197000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = unchecked((uint)1000199000),
            
            VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = unchecked((uint)1000199001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = unchecked((uint)1000203000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = unchecked((uint)1000207000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = unchecked((uint)1000207001),
            
            VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = unchecked((uint)1000207002),
            
            VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = unchecked((uint)1000207003),
            
            VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = unchecked((uint)1000207004),
            
            VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = unchecked((uint)1000207005),
            
            VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = unchecked((uint)1000210000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = unchecked((uint)1000211000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = unchecked((uint)1000215000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = unchecked((uint)1000221000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = unchecked((uint)1000225000),
            
            VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = unchecked((uint)1000225001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = unchecked((uint)1000225002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = unchecked((uint)1000241000),
            
            VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = unchecked((uint)1000241001),
            
            VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = unchecked((uint)1000241002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = unchecked((uint)1000244000),
            
            VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = unchecked((uint)1000244001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = unchecked((uint)1000245000),
            
            VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = unchecked((uint)1000246000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = unchecked((uint)1000253000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = unchecked((uint)1000257000),
            
            VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = unchecked((uint)1000244001),
            
            VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = unchecked((uint)1000257002),
            
            VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = unchecked((uint)1000257003),
            
            VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = unchecked((uint)1000257004),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = unchecked((uint)1000261000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = unchecked((uint)1000276000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR = unchecked((uint)1000280000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR = unchecked((uint)1000280001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = unchecked((uint)1000281001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = unchecked((uint)1000295000),
            
            VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = unchecked((uint)1000295001),
            
            VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = unchecked((uint)1000295002),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = unchecked((uint)1000297000),
            
            VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = unchecked((uint)1000314000),
            
            VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = unchecked((uint)1000314001),
            
            VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = unchecked((uint)1000314002),
            
            VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = unchecked((uint)1000314003),
            
            VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = unchecked((uint)1000314004),
            
            VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = unchecked((uint)1000314005),
            
            VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = unchecked((uint)1000314006),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = unchecked((uint)1000314007),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = unchecked((uint)1000325000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = unchecked((uint)1000335000),
            
            VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = unchecked((uint)1000337000),
            
            VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = unchecked((uint)1000337001),
            
            VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = unchecked((uint)1000337002),
            
            VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = unchecked((uint)1000337003),
            
            VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = unchecked((uint)1000337004),
            
            VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = unchecked((uint)1000337005),
            
            VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = unchecked((uint)1000337006),
            
            VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = unchecked((uint)1000337007),
            
            VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = unchecked((uint)1000337008),
            
            VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = unchecked((uint)1000337009),
            
            VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = unchecked((uint)1000337010),
            
            VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT = unchecked((uint)1000338002),
            
            VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT = unchecked((uint)1000338003),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM = unchecked((uint)1000342000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = unchecked((uint)1000351000),
            
            VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = unchecked((uint)1000351002),
            
            VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR = unchecked((uint)1000360000),
            
            VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT = unchecked((uint)1000269001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT = unchecked((uint)1000388000),
            
            VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT = unchecked((uint)1000388001),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR = unchecked((uint)1000413000),
            
            VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR = unchecked((uint)1000413001),
            
            VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR = unchecked((uint)1000413002),
            
            VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR = unchecked((uint)1000413003),
            
            VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = unchecked((uint)1000225001),
            
            VK_STRUCTURE_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_APPLICATION_INFO = VkStructureType.VK_STRUCTURE_TYPE_APPLICATION_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBMIT_INFO = VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = VkStructureType.VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = VkStructureType.VK_STRUCTURE_TYPE_BIND_SPARSE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_EVENT_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = VkStructureType.VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_BARRIER = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = VkStructureType.VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBPASS_END_INFO = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_END_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = VkStructureType.VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEPENDENCY_INFO = VkStructureType.VK_STRUCTURE_TYPE_DEPENDENCY_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = VkStructureType.VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_COPY_2 = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COPY_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_COPY_2 = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_COPY_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_BLIT_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDERING_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = VkStructureType.VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = VkStructureType.VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = VkStructureType.VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = VkStructureType.VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = VkStructureType.VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = VkStructureType.VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = VkStructureType.VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_HDR_METADATA_EXT = VkStructureType.VK_STRUCTURE_TYPE_HDR_METADATA_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = VkStructureType.VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = VkStructureType.VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_PROPERTIES_AMDX = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_PROPERTIES_AMDX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_SCRATCH_SIZE_AMDX = VkStructureType.VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_SCRATCH_SIZE_AMDX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_CREATE_INFO_AMDX = VkStructureType.VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_CREATE_INFO_AMDX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_NODE_CREATE_INFO_AMDX = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_NODE_CREATE_INFO_AMDX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = VkStructureType.VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = VkStructureType.VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_GEOMETRY_NV = VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = VkStructureType.VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = VkStructureType.VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT = VkStructureType.VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT = VkStructureType.VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PRESENT_ID_KHR = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_ID_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV = VkStructureType.VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = VkStructureType.VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = VkStructureType.VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = VkStructureType.VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = VkStructureType.VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = VkStructureType.VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_DISPLACEMENT_MICROMAP_NV = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_DISPLACEMENT_MICROMAP_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG = VkStructureType.VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG = VkStructureType.VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT = VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC = VkStructureType.VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM = VkStructureType.VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX = VkStructureType.VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX = VkStructureType.VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDERING_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT = VkStructureType.VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = VkStructureType.VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR = VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = VkStructureType.VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT;
        
        public const vulkan.VkStructureType VK_STRUCTURE_TYPE_MAX_ENUM = VkStructureType.VK_STRUCTURE_TYPE_MAX_ENUM;
        
        public enum VkPipelineCacheHeaderVersion : uint
        {
            VK_PIPELINE_CACHE_HEADER_VERSION_ONE = unchecked((uint)1),
            
            VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPipelineCacheHeaderVersion VK_PIPELINE_CACHE_HEADER_VERSION_ONE = VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_ONE;
        
        public const vulkan.VkPipelineCacheHeaderVersion VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM;
        
        public enum VkImageLayout : uint
        {
            VK_IMAGE_LAYOUT_UNDEFINED = unchecked((uint)0),
            
            VK_IMAGE_LAYOUT_GENERAL = unchecked((uint)1),
            
            VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = unchecked((uint)2),
            
            VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = unchecked((uint)3),
            
            VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = unchecked((uint)4),
            
            VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = unchecked((uint)5),
            
            VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = unchecked((uint)6),
            
            VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = unchecked((uint)7),
            
            VK_IMAGE_LAYOUT_PREINITIALIZED = unchecked((uint)8),
            
            VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = unchecked((uint)1000117000),
            
            VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = unchecked((uint)1000117001),
            
            VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = unchecked((uint)1000241000),
            
            VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = unchecked((uint)1000241001),
            
            VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = unchecked((uint)1000241002),
            
            VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = unchecked((uint)1000241003),
            
            VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = unchecked((uint)1000314000),
            
            VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = unchecked((uint)1000314001),
            
            VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = unchecked((uint)1000001002),
            
            VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = unchecked((uint)1000024000),
            
            VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = unchecked((uint)1000024001),
            
            VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = unchecked((uint)1000024002),
            
            VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = unchecked((uint)1000111000),
            
            VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = unchecked((uint)1000218000),
            
            VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = unchecked((uint)1000164003),
            
            VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR = unchecked((uint)1000299000),
            
            VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR = unchecked((uint)1000299001),
            
            VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR = unchecked((uint)1000299002),
            
            VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT = unchecked((uint)1000339000),
            
            VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = unchecked((uint)1000117000),
            
            VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = unchecked((uint)1000117001),
            
            VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = unchecked((uint)1000164003),
            
            VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = unchecked((uint)1000241000),
            
            VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = unchecked((uint)1000241001),
            
            VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = unchecked((uint)1000241002),
            
            VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = unchecked((uint)1000241003),
            
            VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = unchecked((uint)1000314000),
            
            VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = unchecked((uint)1000314001),
            
            VK_IMAGE_LAYOUT_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_UNDEFINED = VkImageLayout.VK_IMAGE_LAYOUT_UNDEFINED;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_GENERAL = VkImageLayout.VK_IMAGE_LAYOUT_GENERAL;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_PREINITIALIZED = VkImageLayout.VK_IMAGE_LAYOUT_PREINITIALIZED;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = VkImageLayout.VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = VkImageLayout.VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = VkImageLayout.VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = VkImageLayout.VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR = VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR = VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR = VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT = VkImageLayout.VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = VkImageLayout.VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = VkImageLayout.VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR;
        
        public const vulkan.VkImageLayout VK_IMAGE_LAYOUT_MAX_ENUM = VkImageLayout.VK_IMAGE_LAYOUT_MAX_ENUM;
        
        public enum VkObjectType : uint
        {
            VK_OBJECT_TYPE_UNKNOWN = unchecked((uint)0),
            
            VK_OBJECT_TYPE_INSTANCE = unchecked((uint)1),
            
            VK_OBJECT_TYPE_PHYSICAL_DEVICE = unchecked((uint)2),
            
            VK_OBJECT_TYPE_DEVICE = unchecked((uint)3),
            
            VK_OBJECT_TYPE_QUEUE = unchecked((uint)4),
            
            VK_OBJECT_TYPE_SEMAPHORE = unchecked((uint)5),
            
            VK_OBJECT_TYPE_COMMAND_BUFFER = unchecked((uint)6),
            
            VK_OBJECT_TYPE_FENCE = unchecked((uint)7),
            
            VK_OBJECT_TYPE_DEVICE_MEMORY = unchecked((uint)8),
            
            VK_OBJECT_TYPE_BUFFER = unchecked((uint)9),
            
            VK_OBJECT_TYPE_IMAGE = unchecked((uint)10),
            
            VK_OBJECT_TYPE_EVENT = unchecked((uint)11),
            
            VK_OBJECT_TYPE_QUERY_POOL = unchecked((uint)12),
            
            VK_OBJECT_TYPE_BUFFER_VIEW = unchecked((uint)13),
            
            VK_OBJECT_TYPE_IMAGE_VIEW = unchecked((uint)14),
            
            VK_OBJECT_TYPE_SHADER_MODULE = unchecked((uint)15),
            
            VK_OBJECT_TYPE_PIPELINE_CACHE = unchecked((uint)16),
            
            VK_OBJECT_TYPE_PIPELINE_LAYOUT = unchecked((uint)17),
            
            VK_OBJECT_TYPE_RENDER_PASS = unchecked((uint)18),
            
            VK_OBJECT_TYPE_PIPELINE = unchecked((uint)19),
            
            VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = unchecked((uint)20),
            
            VK_OBJECT_TYPE_SAMPLER = unchecked((uint)21),
            
            VK_OBJECT_TYPE_DESCRIPTOR_POOL = unchecked((uint)22),
            
            VK_OBJECT_TYPE_DESCRIPTOR_SET = unchecked((uint)23),
            
            VK_OBJECT_TYPE_FRAMEBUFFER = unchecked((uint)24),
            
            VK_OBJECT_TYPE_COMMAND_POOL = unchecked((uint)25),
            
            VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = unchecked((uint)1000156000),
            
            VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = unchecked((uint)1000085000),
            
            VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = unchecked((uint)1000295000),
            
            VK_OBJECT_TYPE_SURFACE_KHR = unchecked((uint)1000000000),
            
            VK_OBJECT_TYPE_SWAPCHAIN_KHR = unchecked((uint)1000001000),
            
            VK_OBJECT_TYPE_DISPLAY_KHR = unchecked((uint)1000002000),
            
            VK_OBJECT_TYPE_DISPLAY_MODE_KHR = unchecked((uint)1000002001),
            
            VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = unchecked((uint)1000011000),
            
            VK_OBJECT_TYPE_VIDEO_SESSION_KHR = unchecked((uint)1000023000),
            
            VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = unchecked((uint)1000023001),
            
            VK_OBJECT_TYPE_CU_MODULE_NVX = unchecked((uint)1000029000),
            
            VK_OBJECT_TYPE_CU_FUNCTION_NVX = unchecked((uint)1000029001),
            
            VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = unchecked((uint)1000128000),
            
            VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = unchecked((uint)1000150000),
            
            VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = unchecked((uint)1000160000),
            
            VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = unchecked((uint)1000165000),
            
            VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = unchecked((uint)1000210000),
            
            VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = unchecked((uint)1000268000),
            
            VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = unchecked((uint)1000277000),
            
            VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = unchecked((uint)1000366000),
            
            VK_OBJECT_TYPE_MICROMAP_EXT = unchecked((uint)1000396000),
            
            VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV = unchecked((uint)1000464000),
            
            VK_OBJECT_TYPE_SHADER_EXT = unchecked((uint)1000482000),
            
            VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = unchecked((uint)1000085000),
            
            VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = unchecked((uint)1000156000),
            
            VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = unchecked((uint)1000295000),
            
            VK_OBJECT_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_UNKNOWN = VkObjectType.VK_OBJECT_TYPE_UNKNOWN;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_INSTANCE = VkObjectType.VK_OBJECT_TYPE_INSTANCE;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_PHYSICAL_DEVICE = VkObjectType.VK_OBJECT_TYPE_PHYSICAL_DEVICE;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_DEVICE = VkObjectType.VK_OBJECT_TYPE_DEVICE;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_QUEUE = VkObjectType.VK_OBJECT_TYPE_QUEUE;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_SEMAPHORE = VkObjectType.VK_OBJECT_TYPE_SEMAPHORE;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_COMMAND_BUFFER = VkObjectType.VK_OBJECT_TYPE_COMMAND_BUFFER;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_FENCE = VkObjectType.VK_OBJECT_TYPE_FENCE;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_DEVICE_MEMORY = VkObjectType.VK_OBJECT_TYPE_DEVICE_MEMORY;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_BUFFER = VkObjectType.VK_OBJECT_TYPE_BUFFER;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_IMAGE = VkObjectType.VK_OBJECT_TYPE_IMAGE;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_EVENT = VkObjectType.VK_OBJECT_TYPE_EVENT;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_QUERY_POOL = VkObjectType.VK_OBJECT_TYPE_QUERY_POOL;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_BUFFER_VIEW = VkObjectType.VK_OBJECT_TYPE_BUFFER_VIEW;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_IMAGE_VIEW = VkObjectType.VK_OBJECT_TYPE_IMAGE_VIEW;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_SHADER_MODULE = VkObjectType.VK_OBJECT_TYPE_SHADER_MODULE;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_PIPELINE_CACHE = VkObjectType.VK_OBJECT_TYPE_PIPELINE_CACHE;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_PIPELINE_LAYOUT = VkObjectType.VK_OBJECT_TYPE_PIPELINE_LAYOUT;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_RENDER_PASS = VkObjectType.VK_OBJECT_TYPE_RENDER_PASS;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_PIPELINE = VkObjectType.VK_OBJECT_TYPE_PIPELINE;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_SAMPLER = VkObjectType.VK_OBJECT_TYPE_SAMPLER;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_DESCRIPTOR_POOL = VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_POOL;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_DESCRIPTOR_SET = VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_SET;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_FRAMEBUFFER = VkObjectType.VK_OBJECT_TYPE_FRAMEBUFFER;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_COMMAND_POOL = VkObjectType.VK_OBJECT_TYPE_COMMAND_POOL;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = VkObjectType.VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = VkObjectType.VK_OBJECT_TYPE_PRIVATE_DATA_SLOT;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_SURFACE_KHR = VkObjectType.VK_OBJECT_TYPE_SURFACE_KHR;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_SWAPCHAIN_KHR = VkObjectType.VK_OBJECT_TYPE_SWAPCHAIN_KHR;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_DISPLAY_KHR = VkObjectType.VK_OBJECT_TYPE_DISPLAY_KHR;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_DISPLAY_MODE_KHR = VkObjectType.VK_OBJECT_TYPE_DISPLAY_MODE_KHR;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = VkObjectType.VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_VIDEO_SESSION_KHR = VkObjectType.VK_OBJECT_TYPE_VIDEO_SESSION_KHR;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = VkObjectType.VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_CU_MODULE_NVX = VkObjectType.VK_OBJECT_TYPE_CU_MODULE_NVX;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_CU_FUNCTION_NVX = VkObjectType.VK_OBJECT_TYPE_CU_FUNCTION_NVX;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = VkObjectType.VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = VkObjectType.VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = VkObjectType.VK_OBJECT_TYPE_VALIDATION_CACHE_EXT;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = VkObjectType.VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = VkObjectType.VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = VkObjectType.VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = VkObjectType.VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = VkObjectType.VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_MICROMAP_EXT = VkObjectType.VK_OBJECT_TYPE_MICROMAP_EXT;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV = VkObjectType.VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_SHADER_EXT = VkObjectType.VK_OBJECT_TYPE_SHADER_EXT;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VkObjectType.VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = VkObjectType.VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT;
        
        public const vulkan.VkObjectType VK_OBJECT_TYPE_MAX_ENUM = VkObjectType.VK_OBJECT_TYPE_MAX_ENUM;
        
        public enum VkVendorId : uint
        {
            VK_VENDOR_ID_VIV = unchecked((uint)65537),
            
            VK_VENDOR_ID_VSI = unchecked((uint)65538),
            
            VK_VENDOR_ID_KAZAN = unchecked((uint)65539),
            
            VK_VENDOR_ID_CODEPLAY = unchecked((uint)65540),
            
            VK_VENDOR_ID_MESA = unchecked((uint)65541),
            
            VK_VENDOR_ID_POCL = unchecked((uint)65542),
            
            VK_VENDOR_ID_MOBILEYE = unchecked((uint)65543),
            
            VK_VENDOR_ID_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkVendorId VK_VENDOR_ID_VIV = VkVendorId.VK_VENDOR_ID_VIV;
        
        public const vulkan.VkVendorId VK_VENDOR_ID_VSI = VkVendorId.VK_VENDOR_ID_VSI;
        
        public const vulkan.VkVendorId VK_VENDOR_ID_KAZAN = VkVendorId.VK_VENDOR_ID_KAZAN;
        
        public const vulkan.VkVendorId VK_VENDOR_ID_CODEPLAY = VkVendorId.VK_VENDOR_ID_CODEPLAY;
        
        public const vulkan.VkVendorId VK_VENDOR_ID_MESA = VkVendorId.VK_VENDOR_ID_MESA;
        
        public const vulkan.VkVendorId VK_VENDOR_ID_POCL = VkVendorId.VK_VENDOR_ID_POCL;
        
        public const vulkan.VkVendorId VK_VENDOR_ID_MOBILEYE = VkVendorId.VK_VENDOR_ID_MOBILEYE;
        
        public const vulkan.VkVendorId VK_VENDOR_ID_MAX_ENUM = VkVendorId.VK_VENDOR_ID_MAX_ENUM;
        
        public enum VkSystemAllocationScope : uint
        {
            VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = unchecked((uint)0),
            
            VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = unchecked((uint)1),
            
            VK_SYSTEM_ALLOCATION_SCOPE_CACHE = unchecked((uint)2),
            
            VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = unchecked((uint)3),
            
            VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = unchecked((uint)4),
            
            VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSystemAllocationScope VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_COMMAND;
        
        public const vulkan.VkSystemAllocationScope VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_OBJECT;
        
        public const vulkan.VkSystemAllocationScope VK_SYSTEM_ALLOCATION_SCOPE_CACHE = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_CACHE;
        
        public const vulkan.VkSystemAllocationScope VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_DEVICE;
        
        public const vulkan.VkSystemAllocationScope VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE;
        
        public const vulkan.VkSystemAllocationScope VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM;
        
        public enum VkInternalAllocationType : uint
        {
            VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = unchecked((uint)0),
            
            VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkInternalAllocationType VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE;
        
        public const vulkan.VkInternalAllocationType VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM;
        
        public enum VkFormat : uint
        {
            VK_FORMAT_UNDEFINED = unchecked((uint)0),
            
            VK_FORMAT_R4G4_UNORM_PACK8 = unchecked((uint)1),
            
            VK_FORMAT_R4G4B4A4_UNORM_PACK16 = unchecked((uint)2),
            
            VK_FORMAT_B4G4R4A4_UNORM_PACK16 = unchecked((uint)3),
            
            VK_FORMAT_R5G6B5_UNORM_PACK16 = unchecked((uint)4),
            
            VK_FORMAT_B5G6R5_UNORM_PACK16 = unchecked((uint)5),
            
            VK_FORMAT_R5G5B5A1_UNORM_PACK16 = unchecked((uint)6),
            
            VK_FORMAT_B5G5R5A1_UNORM_PACK16 = unchecked((uint)7),
            
            VK_FORMAT_A1R5G5B5_UNORM_PACK16 = unchecked((uint)8),
            
            VK_FORMAT_R8_UNORM = unchecked((uint)9),
            
            VK_FORMAT_R8_SNORM = unchecked((uint)10),
            
            VK_FORMAT_R8_USCALED = unchecked((uint)11),
            
            VK_FORMAT_R8_SSCALED = unchecked((uint)12),
            
            VK_FORMAT_R8_UINT = unchecked((uint)13),
            
            VK_FORMAT_R8_SINT = unchecked((uint)14),
            
            VK_FORMAT_R8_SRGB = unchecked((uint)15),
            
            VK_FORMAT_R8G8_UNORM = unchecked((uint)16),
            
            VK_FORMAT_R8G8_SNORM = unchecked((uint)17),
            
            VK_FORMAT_R8G8_USCALED = unchecked((uint)18),
            
            VK_FORMAT_R8G8_SSCALED = unchecked((uint)19),
            
            VK_FORMAT_R8G8_UINT = unchecked((uint)20),
            
            VK_FORMAT_R8G8_SINT = unchecked((uint)21),
            
            VK_FORMAT_R8G8_SRGB = unchecked((uint)22),
            
            VK_FORMAT_R8G8B8_UNORM = unchecked((uint)23),
            
            VK_FORMAT_R8G8B8_SNORM = unchecked((uint)24),
            
            VK_FORMAT_R8G8B8_USCALED = unchecked((uint)25),
            
            VK_FORMAT_R8G8B8_SSCALED = unchecked((uint)26),
            
            VK_FORMAT_R8G8B8_UINT = unchecked((uint)27),
            
            VK_FORMAT_R8G8B8_SINT = unchecked((uint)28),
            
            VK_FORMAT_R8G8B8_SRGB = unchecked((uint)29),
            
            VK_FORMAT_B8G8R8_UNORM = unchecked((uint)30),
            
            VK_FORMAT_B8G8R8_SNORM = unchecked((uint)31),
            
            VK_FORMAT_B8G8R8_USCALED = unchecked((uint)32),
            
            VK_FORMAT_B8G8R8_SSCALED = unchecked((uint)33),
            
            VK_FORMAT_B8G8R8_UINT = unchecked((uint)34),
            
            VK_FORMAT_B8G8R8_SINT = unchecked((uint)35),
            
            VK_FORMAT_B8G8R8_SRGB = unchecked((uint)36),
            
            VK_FORMAT_R8G8B8A8_UNORM = unchecked((uint)37),
            
            VK_FORMAT_R8G8B8A8_SNORM = unchecked((uint)38),
            
            VK_FORMAT_R8G8B8A8_USCALED = unchecked((uint)39),
            
            VK_FORMAT_R8G8B8A8_SSCALED = unchecked((uint)40),
            
            VK_FORMAT_R8G8B8A8_UINT = unchecked((uint)41),
            
            VK_FORMAT_R8G8B8A8_SINT = unchecked((uint)42),
            
            VK_FORMAT_R8G8B8A8_SRGB = unchecked((uint)43),
            
            VK_FORMAT_B8G8R8A8_UNORM = unchecked((uint)44),
            
            VK_FORMAT_B8G8R8A8_SNORM = unchecked((uint)45),
            
            VK_FORMAT_B8G8R8A8_USCALED = unchecked((uint)46),
            
            VK_FORMAT_B8G8R8A8_SSCALED = unchecked((uint)47),
            
            VK_FORMAT_B8G8R8A8_UINT = unchecked((uint)48),
            
            VK_FORMAT_B8G8R8A8_SINT = unchecked((uint)49),
            
            VK_FORMAT_B8G8R8A8_SRGB = unchecked((uint)50),
            
            VK_FORMAT_A8B8G8R8_UNORM_PACK32 = unchecked((uint)51),
            
            VK_FORMAT_A8B8G8R8_SNORM_PACK32 = unchecked((uint)52),
            
            VK_FORMAT_A8B8G8R8_USCALED_PACK32 = unchecked((uint)53),
            
            VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = unchecked((uint)54),
            
            VK_FORMAT_A8B8G8R8_UINT_PACK32 = unchecked((uint)55),
            
            VK_FORMAT_A8B8G8R8_SINT_PACK32 = unchecked((uint)56),
            
            VK_FORMAT_A8B8G8R8_SRGB_PACK32 = unchecked((uint)57),
            
            VK_FORMAT_A2R10G10B10_UNORM_PACK32 = unchecked((uint)58),
            
            VK_FORMAT_A2R10G10B10_SNORM_PACK32 = unchecked((uint)59),
            
            VK_FORMAT_A2R10G10B10_USCALED_PACK32 = unchecked((uint)60),
            
            VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = unchecked((uint)61),
            
            VK_FORMAT_A2R10G10B10_UINT_PACK32 = unchecked((uint)62),
            
            VK_FORMAT_A2R10G10B10_SINT_PACK32 = unchecked((uint)63),
            
            VK_FORMAT_A2B10G10R10_UNORM_PACK32 = unchecked((uint)64),
            
            VK_FORMAT_A2B10G10R10_SNORM_PACK32 = unchecked((uint)65),
            
            VK_FORMAT_A2B10G10R10_USCALED_PACK32 = unchecked((uint)66),
            
            VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = unchecked((uint)67),
            
            VK_FORMAT_A2B10G10R10_UINT_PACK32 = unchecked((uint)68),
            
            VK_FORMAT_A2B10G10R10_SINT_PACK32 = unchecked((uint)69),
            
            VK_FORMAT_R16_UNORM = unchecked((uint)70),
            
            VK_FORMAT_R16_SNORM = unchecked((uint)71),
            
            VK_FORMAT_R16_USCALED = unchecked((uint)72),
            
            VK_FORMAT_R16_SSCALED = unchecked((uint)73),
            
            VK_FORMAT_R16_UINT = unchecked((uint)74),
            
            VK_FORMAT_R16_SINT = unchecked((uint)75),
            
            VK_FORMAT_R16_SFLOAT = unchecked((uint)76),
            
            VK_FORMAT_R16G16_UNORM = unchecked((uint)77),
            
            VK_FORMAT_R16G16_SNORM = unchecked((uint)78),
            
            VK_FORMAT_R16G16_USCALED = unchecked((uint)79),
            
            VK_FORMAT_R16G16_SSCALED = unchecked((uint)80),
            
            VK_FORMAT_R16G16_UINT = unchecked((uint)81),
            
            VK_FORMAT_R16G16_SINT = unchecked((uint)82),
            
            VK_FORMAT_R16G16_SFLOAT = unchecked((uint)83),
            
            VK_FORMAT_R16G16B16_UNORM = unchecked((uint)84),
            
            VK_FORMAT_R16G16B16_SNORM = unchecked((uint)85),
            
            VK_FORMAT_R16G16B16_USCALED = unchecked((uint)86),
            
            VK_FORMAT_R16G16B16_SSCALED = unchecked((uint)87),
            
            VK_FORMAT_R16G16B16_UINT = unchecked((uint)88),
            
            VK_FORMAT_R16G16B16_SINT = unchecked((uint)89),
            
            VK_FORMAT_R16G16B16_SFLOAT = unchecked((uint)90),
            
            VK_FORMAT_R16G16B16A16_UNORM = unchecked((uint)91),
            
            VK_FORMAT_R16G16B16A16_SNORM = unchecked((uint)92),
            
            VK_FORMAT_R16G16B16A16_USCALED = unchecked((uint)93),
            
            VK_FORMAT_R16G16B16A16_SSCALED = unchecked((uint)94),
            
            VK_FORMAT_R16G16B16A16_UINT = unchecked((uint)95),
            
            VK_FORMAT_R16G16B16A16_SINT = unchecked((uint)96),
            
            VK_FORMAT_R16G16B16A16_SFLOAT = unchecked((uint)97),
            
            VK_FORMAT_R32_UINT = unchecked((uint)98),
            
            VK_FORMAT_R32_SINT = unchecked((uint)99),
            
            VK_FORMAT_R32_SFLOAT = unchecked((uint)100),
            
            VK_FORMAT_R32G32_UINT = unchecked((uint)101),
            
            VK_FORMAT_R32G32_SINT = unchecked((uint)102),
            
            VK_FORMAT_R32G32_SFLOAT = unchecked((uint)103),
            
            VK_FORMAT_R32G32B32_UINT = unchecked((uint)104),
            
            VK_FORMAT_R32G32B32_SINT = unchecked((uint)105),
            
            VK_FORMAT_R32G32B32_SFLOAT = unchecked((uint)106),
            
            VK_FORMAT_R32G32B32A32_UINT = unchecked((uint)107),
            
            VK_FORMAT_R32G32B32A32_SINT = unchecked((uint)108),
            
            VK_FORMAT_R32G32B32A32_SFLOAT = unchecked((uint)109),
            
            VK_FORMAT_R64_UINT = unchecked((uint)110),
            
            VK_FORMAT_R64_SINT = unchecked((uint)111),
            
            VK_FORMAT_R64_SFLOAT = unchecked((uint)112),
            
            VK_FORMAT_R64G64_UINT = unchecked((uint)113),
            
            VK_FORMAT_R64G64_SINT = unchecked((uint)114),
            
            VK_FORMAT_R64G64_SFLOAT = unchecked((uint)115),
            
            VK_FORMAT_R64G64B64_UINT = unchecked((uint)116),
            
            VK_FORMAT_R64G64B64_SINT = unchecked((uint)117),
            
            VK_FORMAT_R64G64B64_SFLOAT = unchecked((uint)118),
            
            VK_FORMAT_R64G64B64A64_UINT = unchecked((uint)119),
            
            VK_FORMAT_R64G64B64A64_SINT = unchecked((uint)120),
            
            VK_FORMAT_R64G64B64A64_SFLOAT = unchecked((uint)121),
            
            VK_FORMAT_B10G11R11_UFLOAT_PACK32 = unchecked((uint)122),
            
            VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = unchecked((uint)123),
            
            VK_FORMAT_D16_UNORM = unchecked((uint)124),
            
            VK_FORMAT_X8_D24_UNORM_PACK32 = unchecked((uint)125),
            
            VK_FORMAT_D32_SFLOAT = unchecked((uint)126),
            
            VK_FORMAT_S8_UINT = unchecked((uint)127),
            
            VK_FORMAT_D16_UNORM_S8_UINT = unchecked((uint)128),
            
            VK_FORMAT_D24_UNORM_S8_UINT = unchecked((uint)129),
            
            VK_FORMAT_D32_SFLOAT_S8_UINT = unchecked((uint)130),
            
            VK_FORMAT_BC1_RGB_UNORM_BLOCK = unchecked((uint)131),
            
            VK_FORMAT_BC1_RGB_SRGB_BLOCK = unchecked((uint)132),
            
            VK_FORMAT_BC1_RGBA_UNORM_BLOCK = unchecked((uint)133),
            
            VK_FORMAT_BC1_RGBA_SRGB_BLOCK = unchecked((uint)134),
            
            VK_FORMAT_BC2_UNORM_BLOCK = unchecked((uint)135),
            
            VK_FORMAT_BC2_SRGB_BLOCK = unchecked((uint)136),
            
            VK_FORMAT_BC3_UNORM_BLOCK = unchecked((uint)137),
            
            VK_FORMAT_BC3_SRGB_BLOCK = unchecked((uint)138),
            
            VK_FORMAT_BC4_UNORM_BLOCK = unchecked((uint)139),
            
            VK_FORMAT_BC4_SNORM_BLOCK = unchecked((uint)140),
            
            VK_FORMAT_BC5_UNORM_BLOCK = unchecked((uint)141),
            
            VK_FORMAT_BC5_SNORM_BLOCK = unchecked((uint)142),
            
            VK_FORMAT_BC6H_UFLOAT_BLOCK = unchecked((uint)143),
            
            VK_FORMAT_BC6H_SFLOAT_BLOCK = unchecked((uint)144),
            
            VK_FORMAT_BC7_UNORM_BLOCK = unchecked((uint)145),
            
            VK_FORMAT_BC7_SRGB_BLOCK = unchecked((uint)146),
            
            VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = unchecked((uint)147),
            
            VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = unchecked((uint)148),
            
            VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = unchecked((uint)149),
            
            VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = unchecked((uint)150),
            
            VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = unchecked((uint)151),
            
            VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = unchecked((uint)152),
            
            VK_FORMAT_EAC_R11_UNORM_BLOCK = unchecked((uint)153),
            
            VK_FORMAT_EAC_R11_SNORM_BLOCK = unchecked((uint)154),
            
            VK_FORMAT_EAC_R11G11_UNORM_BLOCK = unchecked((uint)155),
            
            VK_FORMAT_EAC_R11G11_SNORM_BLOCK = unchecked((uint)156),
            
            VK_FORMAT_ASTC_4x4_UNORM_BLOCK = unchecked((uint)157),
            
            VK_FORMAT_ASTC_4x4_SRGB_BLOCK = unchecked((uint)158),
            
            VK_FORMAT_ASTC_5x4_UNORM_BLOCK = unchecked((uint)159),
            
            VK_FORMAT_ASTC_5x4_SRGB_BLOCK = unchecked((uint)160),
            
            VK_FORMAT_ASTC_5x5_UNORM_BLOCK = unchecked((uint)161),
            
            VK_FORMAT_ASTC_5x5_SRGB_BLOCK = unchecked((uint)162),
            
            VK_FORMAT_ASTC_6x5_UNORM_BLOCK = unchecked((uint)163),
            
            VK_FORMAT_ASTC_6x5_SRGB_BLOCK = unchecked((uint)164),
            
            VK_FORMAT_ASTC_6x6_UNORM_BLOCK = unchecked((uint)165),
            
            VK_FORMAT_ASTC_6x6_SRGB_BLOCK = unchecked((uint)166),
            
            VK_FORMAT_ASTC_8x5_UNORM_BLOCK = unchecked((uint)167),
            
            VK_FORMAT_ASTC_8x5_SRGB_BLOCK = unchecked((uint)168),
            
            VK_FORMAT_ASTC_8x6_UNORM_BLOCK = unchecked((uint)169),
            
            VK_FORMAT_ASTC_8x6_SRGB_BLOCK = unchecked((uint)170),
            
            VK_FORMAT_ASTC_8x8_UNORM_BLOCK = unchecked((uint)171),
            
            VK_FORMAT_ASTC_8x8_SRGB_BLOCK = unchecked((uint)172),
            
            VK_FORMAT_ASTC_10x5_UNORM_BLOCK = unchecked((uint)173),
            
            VK_FORMAT_ASTC_10x5_SRGB_BLOCK = unchecked((uint)174),
            
            VK_FORMAT_ASTC_10x6_UNORM_BLOCK = unchecked((uint)175),
            
            VK_FORMAT_ASTC_10x6_SRGB_BLOCK = unchecked((uint)176),
            
            VK_FORMAT_ASTC_10x8_UNORM_BLOCK = unchecked((uint)177),
            
            VK_FORMAT_ASTC_10x8_SRGB_BLOCK = unchecked((uint)178),
            
            VK_FORMAT_ASTC_10x10_UNORM_BLOCK = unchecked((uint)179),
            
            VK_FORMAT_ASTC_10x10_SRGB_BLOCK = unchecked((uint)180),
            
            VK_FORMAT_ASTC_12x10_UNORM_BLOCK = unchecked((uint)181),
            
            VK_FORMAT_ASTC_12x10_SRGB_BLOCK = unchecked((uint)182),
            
            VK_FORMAT_ASTC_12x12_UNORM_BLOCK = unchecked((uint)183),
            
            VK_FORMAT_ASTC_12x12_SRGB_BLOCK = unchecked((uint)184),
            
            VK_FORMAT_G8B8G8R8_422_UNORM = unchecked((uint)1000156000),
            
            VK_FORMAT_B8G8R8G8_422_UNORM = unchecked((uint)1000156001),
            
            VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = unchecked((uint)1000156002),
            
            VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = unchecked((uint)1000156003),
            
            VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = unchecked((uint)1000156004),
            
            VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = unchecked((uint)1000156005),
            
            VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = unchecked((uint)1000156006),
            
            VK_FORMAT_R10X6_UNORM_PACK16 = unchecked((uint)1000156007),
            
            VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = unchecked((uint)1000156008),
            
            VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = unchecked((uint)1000156009),
            
            VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = unchecked((uint)1000156010),
            
            VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = unchecked((uint)1000156011),
            
            VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = unchecked((uint)1000156012),
            
            VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = unchecked((uint)1000156013),
            
            VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = unchecked((uint)1000156014),
            
            VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = unchecked((uint)1000156015),
            
            VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = unchecked((uint)1000156016),
            
            VK_FORMAT_R12X4_UNORM_PACK16 = unchecked((uint)1000156017),
            
            VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = unchecked((uint)1000156018),
            
            VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = unchecked((uint)1000156019),
            
            VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = unchecked((uint)1000156020),
            
            VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = unchecked((uint)1000156021),
            
            VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = unchecked((uint)1000156022),
            
            VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = unchecked((uint)1000156023),
            
            VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = unchecked((uint)1000156024),
            
            VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = unchecked((uint)1000156025),
            
            VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = unchecked((uint)1000156026),
            
            VK_FORMAT_G16B16G16R16_422_UNORM = unchecked((uint)1000156027),
            
            VK_FORMAT_B16G16R16G16_422_UNORM = unchecked((uint)1000156028),
            
            VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = unchecked((uint)1000156029),
            
            VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = unchecked((uint)1000156030),
            
            VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = unchecked((uint)1000156031),
            
            VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = unchecked((uint)1000156032),
            
            VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = unchecked((uint)1000156033),
            
            VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = unchecked((uint)1000330000),
            
            VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = unchecked((uint)1000330001),
            
            VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = unchecked((uint)1000330002),
            
            VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = unchecked((uint)1000330003),
            
            VK_FORMAT_A4R4G4B4_UNORM_PACK16 = unchecked((uint)1000340000),
            
            VK_FORMAT_A4B4G4R4_UNORM_PACK16 = unchecked((uint)1000340001),
            
            VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = unchecked((uint)1000066000),
            
            VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = unchecked((uint)1000066001),
            
            VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = unchecked((uint)1000066002),
            
            VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = unchecked((uint)1000066003),
            
            VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = unchecked((uint)1000066004),
            
            VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = unchecked((uint)1000066005),
            
            VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = unchecked((uint)1000066006),
            
            VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = unchecked((uint)1000066007),
            
            VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = unchecked((uint)1000066008),
            
            VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = unchecked((uint)1000066009),
            
            VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = unchecked((uint)1000066010),
            
            VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = unchecked((uint)1000066011),
            
            VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = unchecked((uint)1000066012),
            
            VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = unchecked((uint)1000066013),
            
            VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = unchecked((uint)1000054000),
            
            VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = unchecked((uint)1000054001),
            
            VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = unchecked((uint)1000054002),
            
            VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = unchecked((uint)1000054003),
            
            VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = unchecked((uint)1000054004),
            
            VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = unchecked((uint)1000054005),
            
            VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = unchecked((uint)1000054006),
            
            VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = unchecked((uint)1000054007),
            
            VK_FORMAT_R16G16_S10_5_NV = unchecked((uint)1000464000),
            
            VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR = unchecked((uint)1000470000),
            
            VK_FORMAT_A8_UNORM_KHR = unchecked((uint)1000470001),
            
            VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = unchecked((uint)1000066000),
            
            VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = unchecked((uint)1000066001),
            
            VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = unchecked((uint)1000066002),
            
            VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = unchecked((uint)1000066003),
            
            VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = unchecked((uint)1000066004),
            
            VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = unchecked((uint)1000066005),
            
            VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = unchecked((uint)1000066006),
            
            VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = unchecked((uint)1000066007),
            
            VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = unchecked((uint)1000066008),
            
            VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = unchecked((uint)1000066009),
            
            VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = unchecked((uint)1000066010),
            
            VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = unchecked((uint)1000066011),
            
            VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = unchecked((uint)1000066012),
            
            VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = unchecked((uint)1000066013),
            
            VK_FORMAT_G8B8G8R8_422_UNORM_KHR = unchecked((uint)1000156000),
            
            VK_FORMAT_B8G8R8G8_422_UNORM_KHR = unchecked((uint)1000156001),
            
            VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = unchecked((uint)1000156002),
            
            VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = unchecked((uint)1000156003),
            
            VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = unchecked((uint)1000156004),
            
            VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = unchecked((uint)1000156005),
            
            VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = unchecked((uint)1000156006),
            
            VK_FORMAT_R10X6_UNORM_PACK16_KHR = unchecked((uint)1000156007),
            
            VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = unchecked((uint)1000156008),
            
            VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = unchecked((uint)1000156009),
            
            VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = unchecked((uint)1000156010),
            
            VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = unchecked((uint)1000156011),
            
            VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = unchecked((uint)1000156012),
            
            VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = unchecked((uint)1000156013),
            
            VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = unchecked((uint)1000156014),
            
            VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = unchecked((uint)1000156015),
            
            VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = unchecked((uint)1000156016),
            
            VK_FORMAT_R12X4_UNORM_PACK16_KHR = unchecked((uint)1000156017),
            
            VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = unchecked((uint)1000156018),
            
            VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = unchecked((uint)1000156019),
            
            VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = unchecked((uint)1000156020),
            
            VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = unchecked((uint)1000156021),
            
            VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = unchecked((uint)1000156022),
            
            VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = unchecked((uint)1000156023),
            
            VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = unchecked((uint)1000156024),
            
            VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = unchecked((uint)1000156025),
            
            VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = unchecked((uint)1000156026),
            
            VK_FORMAT_G16B16G16R16_422_UNORM_KHR = unchecked((uint)1000156027),
            
            VK_FORMAT_B16G16R16G16_422_UNORM_KHR = unchecked((uint)1000156028),
            
            VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = unchecked((uint)1000156029),
            
            VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = unchecked((uint)1000156030),
            
            VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = unchecked((uint)1000156031),
            
            VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = unchecked((uint)1000156032),
            
            VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = unchecked((uint)1000156033),
            
            VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = unchecked((uint)1000330000),
            
            VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = unchecked((uint)1000330001),
            
            VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = unchecked((uint)1000330002),
            
            VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = unchecked((uint)1000330003),
            
            VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = unchecked((uint)1000340000),
            
            VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = unchecked((uint)1000340001),
            
            VK_FORMAT_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkFormat VK_FORMAT_UNDEFINED = VkFormat.VK_FORMAT_UNDEFINED;
        
        public const vulkan.VkFormat VK_FORMAT_R4G4_UNORM_PACK8 = VkFormat.VK_FORMAT_R4G4_UNORM_PACK8;
        
        public const vulkan.VkFormat VK_FORMAT_R4G4B4A4_UNORM_PACK16 = VkFormat.VK_FORMAT_R4G4B4A4_UNORM_PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_B4G4R4A4_UNORM_PACK16 = VkFormat.VK_FORMAT_B4G4R4A4_UNORM_PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_R5G6B5_UNORM_PACK16 = VkFormat.VK_FORMAT_R5G6B5_UNORM_PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_B5G6R5_UNORM_PACK16 = VkFormat.VK_FORMAT_B5G6R5_UNORM_PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_R5G5B5A1_UNORM_PACK16 = VkFormat.VK_FORMAT_R5G5B5A1_UNORM_PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_B5G5R5A1_UNORM_PACK16 = VkFormat.VK_FORMAT_B5G5R5A1_UNORM_PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_A1R5G5B5_UNORM_PACK16 = VkFormat.VK_FORMAT_A1R5G5B5_UNORM_PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_R8_UNORM = VkFormat.VK_FORMAT_R8_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R8_SNORM = VkFormat.VK_FORMAT_R8_SNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R8_USCALED = VkFormat.VK_FORMAT_R8_USCALED;
        
        public const vulkan.VkFormat VK_FORMAT_R8_SSCALED = VkFormat.VK_FORMAT_R8_SSCALED;
        
        public const vulkan.VkFormat VK_FORMAT_R8_UINT = VkFormat.VK_FORMAT_R8_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_R8_SINT = VkFormat.VK_FORMAT_R8_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_R8_SRGB = VkFormat.VK_FORMAT_R8_SRGB;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8_UNORM = VkFormat.VK_FORMAT_R8G8_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8_SNORM = VkFormat.VK_FORMAT_R8G8_SNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8_USCALED = VkFormat.VK_FORMAT_R8G8_USCALED;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8_SSCALED = VkFormat.VK_FORMAT_R8G8_SSCALED;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8_UINT = VkFormat.VK_FORMAT_R8G8_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8_SINT = VkFormat.VK_FORMAT_R8G8_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8_SRGB = VkFormat.VK_FORMAT_R8G8_SRGB;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8B8_UNORM = VkFormat.VK_FORMAT_R8G8B8_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8B8_SNORM = VkFormat.VK_FORMAT_R8G8B8_SNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8B8_USCALED = VkFormat.VK_FORMAT_R8G8B8_USCALED;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8B8_SSCALED = VkFormat.VK_FORMAT_R8G8B8_SSCALED;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8B8_UINT = VkFormat.VK_FORMAT_R8G8B8_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8B8_SINT = VkFormat.VK_FORMAT_R8G8B8_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8B8_SRGB = VkFormat.VK_FORMAT_R8G8B8_SRGB;
        
        public const vulkan.VkFormat VK_FORMAT_B8G8R8_UNORM = VkFormat.VK_FORMAT_B8G8R8_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_B8G8R8_SNORM = VkFormat.VK_FORMAT_B8G8R8_SNORM;
        
        public const vulkan.VkFormat VK_FORMAT_B8G8R8_USCALED = VkFormat.VK_FORMAT_B8G8R8_USCALED;
        
        public const vulkan.VkFormat VK_FORMAT_B8G8R8_SSCALED = VkFormat.VK_FORMAT_B8G8R8_SSCALED;
        
        public const vulkan.VkFormat VK_FORMAT_B8G8R8_UINT = VkFormat.VK_FORMAT_B8G8R8_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_B8G8R8_SINT = VkFormat.VK_FORMAT_B8G8R8_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_B8G8R8_SRGB = VkFormat.VK_FORMAT_B8G8R8_SRGB;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8B8A8_UNORM = VkFormat.VK_FORMAT_R8G8B8A8_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8B8A8_SNORM = VkFormat.VK_FORMAT_R8G8B8A8_SNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8B8A8_USCALED = VkFormat.VK_FORMAT_R8G8B8A8_USCALED;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8B8A8_SSCALED = VkFormat.VK_FORMAT_R8G8B8A8_SSCALED;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8B8A8_UINT = VkFormat.VK_FORMAT_R8G8B8A8_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8B8A8_SINT = VkFormat.VK_FORMAT_R8G8B8A8_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_R8G8B8A8_SRGB = VkFormat.VK_FORMAT_R8G8B8A8_SRGB;
        
        public const vulkan.VkFormat VK_FORMAT_B8G8R8A8_UNORM = VkFormat.VK_FORMAT_B8G8R8A8_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_B8G8R8A8_SNORM = VkFormat.VK_FORMAT_B8G8R8A8_SNORM;
        
        public const vulkan.VkFormat VK_FORMAT_B8G8R8A8_USCALED = VkFormat.VK_FORMAT_B8G8R8A8_USCALED;
        
        public const vulkan.VkFormat VK_FORMAT_B8G8R8A8_SSCALED = VkFormat.VK_FORMAT_B8G8R8A8_SSCALED;
        
        public const vulkan.VkFormat VK_FORMAT_B8G8R8A8_UINT = VkFormat.VK_FORMAT_B8G8R8A8_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_B8G8R8A8_SINT = VkFormat.VK_FORMAT_B8G8R8A8_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_B8G8R8A8_SRGB = VkFormat.VK_FORMAT_B8G8R8A8_SRGB;
        
        public const vulkan.VkFormat VK_FORMAT_A8B8G8R8_UNORM_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_UNORM_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A8B8G8R8_SNORM_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_SNORM_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A8B8G8R8_USCALED_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_USCALED_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_SSCALED_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A8B8G8R8_UINT_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_UINT_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A8B8G8R8_SINT_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_SINT_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A8B8G8R8_SRGB_PACK32 = VkFormat.VK_FORMAT_A8B8G8R8_SRGB_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A2R10G10B10_UNORM_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_UNORM_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A2R10G10B10_SNORM_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_SNORM_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A2R10G10B10_USCALED_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_USCALED_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_SSCALED_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A2R10G10B10_UINT_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_UINT_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A2R10G10B10_SINT_PACK32 = VkFormat.VK_FORMAT_A2R10G10B10_SINT_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A2B10G10R10_UNORM_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_UNORM_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A2B10G10R10_SNORM_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_SNORM_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A2B10G10R10_USCALED_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_USCALED_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_SSCALED_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A2B10G10R10_UINT_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_UINT_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_A2B10G10R10_SINT_PACK32 = VkFormat.VK_FORMAT_A2B10G10R10_SINT_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_R16_UNORM = VkFormat.VK_FORMAT_R16_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R16_SNORM = VkFormat.VK_FORMAT_R16_SNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R16_USCALED = VkFormat.VK_FORMAT_R16_USCALED;
        
        public const vulkan.VkFormat VK_FORMAT_R16_SSCALED = VkFormat.VK_FORMAT_R16_SSCALED;
        
        public const vulkan.VkFormat VK_FORMAT_R16_UINT = VkFormat.VK_FORMAT_R16_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_R16_SINT = VkFormat.VK_FORMAT_R16_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_R16_SFLOAT = VkFormat.VK_FORMAT_R16_SFLOAT;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16_UNORM = VkFormat.VK_FORMAT_R16G16_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16_SNORM = VkFormat.VK_FORMAT_R16G16_SNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16_USCALED = VkFormat.VK_FORMAT_R16G16_USCALED;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16_SSCALED = VkFormat.VK_FORMAT_R16G16_SSCALED;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16_UINT = VkFormat.VK_FORMAT_R16G16_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16_SINT = VkFormat.VK_FORMAT_R16G16_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16_SFLOAT = VkFormat.VK_FORMAT_R16G16_SFLOAT;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16B16_UNORM = VkFormat.VK_FORMAT_R16G16B16_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16B16_SNORM = VkFormat.VK_FORMAT_R16G16B16_SNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16B16_USCALED = VkFormat.VK_FORMAT_R16G16B16_USCALED;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16B16_SSCALED = VkFormat.VK_FORMAT_R16G16B16_SSCALED;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16B16_UINT = VkFormat.VK_FORMAT_R16G16B16_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16B16_SINT = VkFormat.VK_FORMAT_R16G16B16_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16B16_SFLOAT = VkFormat.VK_FORMAT_R16G16B16_SFLOAT;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16B16A16_UNORM = VkFormat.VK_FORMAT_R16G16B16A16_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16B16A16_SNORM = VkFormat.VK_FORMAT_R16G16B16A16_SNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16B16A16_USCALED = VkFormat.VK_FORMAT_R16G16B16A16_USCALED;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16B16A16_SSCALED = VkFormat.VK_FORMAT_R16G16B16A16_SSCALED;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16B16A16_UINT = VkFormat.VK_FORMAT_R16G16B16A16_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16B16A16_SINT = VkFormat.VK_FORMAT_R16G16B16A16_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16B16A16_SFLOAT = VkFormat.VK_FORMAT_R16G16B16A16_SFLOAT;
        
        public const vulkan.VkFormat VK_FORMAT_R32_UINT = VkFormat.VK_FORMAT_R32_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_R32_SINT = VkFormat.VK_FORMAT_R32_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_R32_SFLOAT = VkFormat.VK_FORMAT_R32_SFLOAT;
        
        public const vulkan.VkFormat VK_FORMAT_R32G32_UINT = VkFormat.VK_FORMAT_R32G32_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_R32G32_SINT = VkFormat.VK_FORMAT_R32G32_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_R32G32_SFLOAT = VkFormat.VK_FORMAT_R32G32_SFLOAT;
        
        public const vulkan.VkFormat VK_FORMAT_R32G32B32_UINT = VkFormat.VK_FORMAT_R32G32B32_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_R32G32B32_SINT = VkFormat.VK_FORMAT_R32G32B32_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_R32G32B32_SFLOAT = VkFormat.VK_FORMAT_R32G32B32_SFLOAT;
        
        public const vulkan.VkFormat VK_FORMAT_R32G32B32A32_UINT = VkFormat.VK_FORMAT_R32G32B32A32_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_R32G32B32A32_SINT = VkFormat.VK_FORMAT_R32G32B32A32_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_R32G32B32A32_SFLOAT = VkFormat.VK_FORMAT_R32G32B32A32_SFLOAT;
        
        public const vulkan.VkFormat VK_FORMAT_R64_UINT = VkFormat.VK_FORMAT_R64_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_R64_SINT = VkFormat.VK_FORMAT_R64_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_R64_SFLOAT = VkFormat.VK_FORMAT_R64_SFLOAT;
        
        public const vulkan.VkFormat VK_FORMAT_R64G64_UINT = VkFormat.VK_FORMAT_R64G64_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_R64G64_SINT = VkFormat.VK_FORMAT_R64G64_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_R64G64_SFLOAT = VkFormat.VK_FORMAT_R64G64_SFLOAT;
        
        public const vulkan.VkFormat VK_FORMAT_R64G64B64_UINT = VkFormat.VK_FORMAT_R64G64B64_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_R64G64B64_SINT = VkFormat.VK_FORMAT_R64G64B64_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_R64G64B64_SFLOAT = VkFormat.VK_FORMAT_R64G64B64_SFLOAT;
        
        public const vulkan.VkFormat VK_FORMAT_R64G64B64A64_UINT = VkFormat.VK_FORMAT_R64G64B64A64_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_R64G64B64A64_SINT = VkFormat.VK_FORMAT_R64G64B64A64_SINT;
        
        public const vulkan.VkFormat VK_FORMAT_R64G64B64A64_SFLOAT = VkFormat.VK_FORMAT_R64G64B64A64_SFLOAT;
        
        public const vulkan.VkFormat VK_FORMAT_B10G11R11_UFLOAT_PACK32 = VkFormat.VK_FORMAT_B10G11R11_UFLOAT_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = VkFormat.VK_FORMAT_E5B9G9R9_UFLOAT_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_D16_UNORM = VkFormat.VK_FORMAT_D16_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_X8_D24_UNORM_PACK32 = VkFormat.VK_FORMAT_X8_D24_UNORM_PACK32;
        
        public const vulkan.VkFormat VK_FORMAT_D32_SFLOAT = VkFormat.VK_FORMAT_D32_SFLOAT;
        
        public const vulkan.VkFormat VK_FORMAT_S8_UINT = VkFormat.VK_FORMAT_S8_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_D16_UNORM_S8_UINT = VkFormat.VK_FORMAT_D16_UNORM_S8_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_D24_UNORM_S8_UINT = VkFormat.VK_FORMAT_D24_UNORM_S8_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_D32_SFLOAT_S8_UINT = VkFormat.VK_FORMAT_D32_SFLOAT_S8_UINT;
        
        public const vulkan.VkFormat VK_FORMAT_BC1_RGB_UNORM_BLOCK = VkFormat.VK_FORMAT_BC1_RGB_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_BC1_RGB_SRGB_BLOCK = VkFormat.VK_FORMAT_BC1_RGB_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_BC1_RGBA_UNORM_BLOCK = VkFormat.VK_FORMAT_BC1_RGBA_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_BC1_RGBA_SRGB_BLOCK = VkFormat.VK_FORMAT_BC1_RGBA_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_BC2_UNORM_BLOCK = VkFormat.VK_FORMAT_BC2_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_BC2_SRGB_BLOCK = VkFormat.VK_FORMAT_BC2_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_BC3_UNORM_BLOCK = VkFormat.VK_FORMAT_BC3_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_BC3_SRGB_BLOCK = VkFormat.VK_FORMAT_BC3_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_BC4_UNORM_BLOCK = VkFormat.VK_FORMAT_BC4_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_BC4_SNORM_BLOCK = VkFormat.VK_FORMAT_BC4_SNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_BC5_UNORM_BLOCK = VkFormat.VK_FORMAT_BC5_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_BC5_SNORM_BLOCK = VkFormat.VK_FORMAT_BC5_SNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_BC6H_UFLOAT_BLOCK = VkFormat.VK_FORMAT_BC6H_UFLOAT_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_BC6H_SFLOAT_BLOCK = VkFormat.VK_FORMAT_BC6H_SFLOAT_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_BC7_UNORM_BLOCK = VkFormat.VK_FORMAT_BC7_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_BC7_SRGB_BLOCK = VkFormat.VK_FORMAT_BC7_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = VkFormat.VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_EAC_R11_UNORM_BLOCK = VkFormat.VK_FORMAT_EAC_R11_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_EAC_R11_SNORM_BLOCK = VkFormat.VK_FORMAT_EAC_R11_SNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_EAC_R11G11_UNORM_BLOCK = VkFormat.VK_FORMAT_EAC_R11G11_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_EAC_R11G11_SNORM_BLOCK = VkFormat.VK_FORMAT_EAC_R11G11_SNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_4x4_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_4x4_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_4x4_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_4x4_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_5x4_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_5x4_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_5x4_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_5x4_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_5x5_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_5x5_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_5x5_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_5x5_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_6x5_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_6x5_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_6x5_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_6x5_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_6x6_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_6x6_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_6x6_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_6x6_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_8x5_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_8x5_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_8x5_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_8x5_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_8x6_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_8x6_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_8x6_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_8x6_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_8x8_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_8x8_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_8x8_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_8x8_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_10x5_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_10x5_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_10x5_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_10x5_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_10x6_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_10x6_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_10x6_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_10x6_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_10x8_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_10x8_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_10x8_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_10x8_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_10x10_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_10x10_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_10x10_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_10x10_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_12x10_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_12x10_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_12x10_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_12x10_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_12x12_UNORM_BLOCK = VkFormat.VK_FORMAT_ASTC_12x12_UNORM_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_12x12_SRGB_BLOCK = VkFormat.VK_FORMAT_ASTC_12x12_SRGB_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_G8B8G8R8_422_UNORM = VkFormat.VK_FORMAT_G8B8G8R8_422_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_B8G8R8G8_422_UNORM = VkFormat.VK_FORMAT_B8G8R8G8_422_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = VkFormat.VK_FORMAT_G8_B8R8_2PLANE_420_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = VkFormat.VK_FORMAT_G8_B8R8_2PLANE_422_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_R10X6_UNORM_PACK16 = VkFormat.VK_FORMAT_R10X6_UNORM_PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = VkFormat.VK_FORMAT_R10X6G10X6_UNORM_2PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = VkFormat.VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = VkFormat.VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = VkFormat.VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_R12X4_UNORM_PACK16 = VkFormat.VK_FORMAT_R12X4_UNORM_PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = VkFormat.VK_FORMAT_R12X4G12X4_UNORM_2PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = VkFormat.VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = VkFormat.VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = VkFormat.VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_G16B16G16R16_422_UNORM = VkFormat.VK_FORMAT_G16B16G16R16_422_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_B16G16R16G16_422_UNORM = VkFormat.VK_FORMAT_B16G16R16G16_422_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = VkFormat.VK_FORMAT_G16_B16R16_2PLANE_420_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = VkFormat.VK_FORMAT_G16_B16R16_2PLANE_422_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = VkFormat.VK_FORMAT_G8_B8R8_2PLANE_444_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = VkFormat.VK_FORMAT_G16_B16R16_2PLANE_444_UNORM;
        
        public const vulkan.VkFormat VK_FORMAT_A4R4G4B4_UNORM_PACK16 = VkFormat.VK_FORMAT_A4R4G4B4_UNORM_PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_A4B4G4R4_UNORM_PACK16 = VkFormat.VK_FORMAT_A4B4G4R4_UNORM_PACK16;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = VkFormat.VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK;
        
        public const vulkan.VkFormat VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = VkFormat.VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG;
        
        public const vulkan.VkFormat VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = VkFormat.VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG;
        
        public const vulkan.VkFormat VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = VkFormat.VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG;
        
        public const vulkan.VkFormat VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = VkFormat.VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG;
        
        public const vulkan.VkFormat VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = VkFormat.VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG;
        
        public const vulkan.VkFormat VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = VkFormat.VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG;
        
        public const vulkan.VkFormat VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = VkFormat.VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG;
        
        public const vulkan.VkFormat VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = VkFormat.VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG;
        
        public const vulkan.VkFormat VK_FORMAT_R16G16_S10_5_NV = VkFormat.VK_FORMAT_R16G16_S10_5_NV;
        
        public const vulkan.VkFormat VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR = VkFormat.VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_A8_UNORM_KHR = VkFormat.VK_FORMAT_A8_UNORM_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = VkFormat.VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_G8B8G8R8_422_UNORM_KHR = VkFormat.VK_FORMAT_G8B8G8R8_422_UNORM_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_B8G8R8G8_422_UNORM_KHR = VkFormat.VK_FORMAT_B8G8R8G8_422_UNORM_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = VkFormat.VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = VkFormat.VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_R10X6_UNORM_PACK16_KHR = VkFormat.VK_FORMAT_R10X6_UNORM_PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = VkFormat.VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = VkFormat.VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = VkFormat.VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = VkFormat.VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_R12X4_UNORM_PACK16_KHR = VkFormat.VK_FORMAT_R12X4_UNORM_PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = VkFormat.VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = VkFormat.VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = VkFormat.VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = VkFormat.VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G16B16G16R16_422_UNORM_KHR = VkFormat.VK_FORMAT_G16B16G16R16_422_UNORM_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_B16G16R16G16_422_UNORM_KHR = VkFormat.VK_FORMAT_B16G16R16G16_422_UNORM_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = VkFormat.VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = VkFormat.VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR;
        
        public const vulkan.VkFormat VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = VkFormat.VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = VkFormat.VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = VkFormat.VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = VkFormat.VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT;
        
        public const vulkan.VkFormat VK_FORMAT_MAX_ENUM = VkFormat.VK_FORMAT_MAX_ENUM;
        
        public enum VkImageTiling : uint
        {
            VK_IMAGE_TILING_OPTIMAL = unchecked((uint)0),
            
            VK_IMAGE_TILING_LINEAR = unchecked((uint)1),
            
            VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = unchecked((uint)1000158000),
            
            VK_IMAGE_TILING_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkImageTiling VK_IMAGE_TILING_OPTIMAL = VkImageTiling.VK_IMAGE_TILING_OPTIMAL;
        
        public const vulkan.VkImageTiling VK_IMAGE_TILING_LINEAR = VkImageTiling.VK_IMAGE_TILING_LINEAR;
        
        public const vulkan.VkImageTiling VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = VkImageTiling.VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT;
        
        public const vulkan.VkImageTiling VK_IMAGE_TILING_MAX_ENUM = VkImageTiling.VK_IMAGE_TILING_MAX_ENUM;
        
        public enum VkImageType : uint
        {
            VK_IMAGE_TYPE_1D = unchecked((uint)0),
            
            VK_IMAGE_TYPE_2D = unchecked((uint)1),
            
            VK_IMAGE_TYPE_3D = unchecked((uint)2),
            
            VK_IMAGE_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkImageType VK_IMAGE_TYPE_1D = VkImageType.VK_IMAGE_TYPE_1D;
        
        public const vulkan.VkImageType VK_IMAGE_TYPE_2D = VkImageType.VK_IMAGE_TYPE_2D;
        
        public const vulkan.VkImageType VK_IMAGE_TYPE_3D = VkImageType.VK_IMAGE_TYPE_3D;
        
        public const vulkan.VkImageType VK_IMAGE_TYPE_MAX_ENUM = VkImageType.VK_IMAGE_TYPE_MAX_ENUM;
        
        public enum VkPhysicalDeviceType : uint
        {
            VK_PHYSICAL_DEVICE_TYPE_OTHER = unchecked((uint)0),
            
            VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = unchecked((uint)1),
            
            VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = unchecked((uint)2),
            
            VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = unchecked((uint)3),
            
            VK_PHYSICAL_DEVICE_TYPE_CPU = unchecked((uint)4),
            
            VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPhysicalDeviceType VK_PHYSICAL_DEVICE_TYPE_OTHER = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_OTHER;
        
        public const vulkan.VkPhysicalDeviceType VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU;
        
        public const vulkan.VkPhysicalDeviceType VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU;
        
        public const vulkan.VkPhysicalDeviceType VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU;
        
        public const vulkan.VkPhysicalDeviceType VK_PHYSICAL_DEVICE_TYPE_CPU = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_CPU;
        
        public const vulkan.VkPhysicalDeviceType VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM;
        
        public enum VkQueryType : uint
        {
            VK_QUERY_TYPE_OCCLUSION = unchecked((uint)0),
            
            VK_QUERY_TYPE_PIPELINE_STATISTICS = unchecked((uint)1),
            
            VK_QUERY_TYPE_TIMESTAMP = unchecked((uint)2),
            
            VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = unchecked((uint)1000023000),
            
            VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = unchecked((uint)1000028004),
            
            VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = unchecked((uint)1000116000),
            
            VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = unchecked((uint)1000150000),
            
            VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = unchecked((uint)1000150001),
            
            VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = unchecked((uint)1000165000),
            
            VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = unchecked((uint)1000210000),
            
            VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR = unchecked((uint)1000299000),
            
            VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT = unchecked((uint)1000328000),
            
            VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT = unchecked((uint)1000382000),
            
            VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR = unchecked((uint)1000386000),
            
            VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR = unchecked((uint)1000386001),
            
            VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT = unchecked((uint)1000396000),
            
            VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT = unchecked((uint)1000396001),
            
            VK_QUERY_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_OCCLUSION = VkQueryType.VK_QUERY_TYPE_OCCLUSION;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_PIPELINE_STATISTICS = VkQueryType.VK_QUERY_TYPE_PIPELINE_STATISTICS;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_TIMESTAMP = VkQueryType.VK_QUERY_TYPE_TIMESTAMP;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = VkQueryType.VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = VkQueryType.VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = VkQueryType.VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = VkQueryType.VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR = VkQueryType.VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT = VkQueryType.VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT = VkQueryType.VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR = VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR = VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT = VkQueryType.VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT = VkQueryType.VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT;
        
        public const vulkan.VkQueryType VK_QUERY_TYPE_MAX_ENUM = VkQueryType.VK_QUERY_TYPE_MAX_ENUM;
        
        public enum VkSharingMode : uint
        {
            VK_SHARING_MODE_EXCLUSIVE = unchecked((uint)0),
            
            VK_SHARING_MODE_CONCURRENT = unchecked((uint)1),
            
            VK_SHARING_MODE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSharingMode VK_SHARING_MODE_EXCLUSIVE = VkSharingMode.VK_SHARING_MODE_EXCLUSIVE;
        
        public const vulkan.VkSharingMode VK_SHARING_MODE_CONCURRENT = VkSharingMode.VK_SHARING_MODE_CONCURRENT;
        
        public const vulkan.VkSharingMode VK_SHARING_MODE_MAX_ENUM = VkSharingMode.VK_SHARING_MODE_MAX_ENUM;
        
        public enum VkComponentSwizzle : uint
        {
            VK_COMPONENT_SWIZZLE_IDENTITY = unchecked((uint)0),
            
            VK_COMPONENT_SWIZZLE_ZERO = unchecked((uint)1),
            
            VK_COMPONENT_SWIZZLE_ONE = unchecked((uint)2),
            
            VK_COMPONENT_SWIZZLE_R = unchecked((uint)3),
            
            VK_COMPONENT_SWIZZLE_G = unchecked((uint)4),
            
            VK_COMPONENT_SWIZZLE_B = unchecked((uint)5),
            
            VK_COMPONENT_SWIZZLE_A = unchecked((uint)6),
            
            VK_COMPONENT_SWIZZLE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkComponentSwizzle VK_COMPONENT_SWIZZLE_IDENTITY = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_IDENTITY;
        
        public const vulkan.VkComponentSwizzle VK_COMPONENT_SWIZZLE_ZERO = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_ZERO;
        
        public const vulkan.VkComponentSwizzle VK_COMPONENT_SWIZZLE_ONE = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_ONE;
        
        public const vulkan.VkComponentSwizzle VK_COMPONENT_SWIZZLE_R = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_R;
        
        public const vulkan.VkComponentSwizzle VK_COMPONENT_SWIZZLE_G = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_G;
        
        public const vulkan.VkComponentSwizzle VK_COMPONENT_SWIZZLE_B = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_B;
        
        public const vulkan.VkComponentSwizzle VK_COMPONENT_SWIZZLE_A = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_A;
        
        public const vulkan.VkComponentSwizzle VK_COMPONENT_SWIZZLE_MAX_ENUM = VkComponentSwizzle.VK_COMPONENT_SWIZZLE_MAX_ENUM;
        
        public enum VkImageViewType : uint
        {
            VK_IMAGE_VIEW_TYPE_1D = unchecked((uint)0),
            
            VK_IMAGE_VIEW_TYPE_2D = unchecked((uint)1),
            
            VK_IMAGE_VIEW_TYPE_3D = unchecked((uint)2),
            
            VK_IMAGE_VIEW_TYPE_CUBE = unchecked((uint)3),
            
            VK_IMAGE_VIEW_TYPE_1D_ARRAY = unchecked((uint)4),
            
            VK_IMAGE_VIEW_TYPE_2D_ARRAY = unchecked((uint)5),
            
            VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = unchecked((uint)6),
            
            VK_IMAGE_VIEW_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkImageViewType VK_IMAGE_VIEW_TYPE_1D = VkImageViewType.VK_IMAGE_VIEW_TYPE_1D;
        
        public const vulkan.VkImageViewType VK_IMAGE_VIEW_TYPE_2D = VkImageViewType.VK_IMAGE_VIEW_TYPE_2D;
        
        public const vulkan.VkImageViewType VK_IMAGE_VIEW_TYPE_3D = VkImageViewType.VK_IMAGE_VIEW_TYPE_3D;
        
        public const vulkan.VkImageViewType VK_IMAGE_VIEW_TYPE_CUBE = VkImageViewType.VK_IMAGE_VIEW_TYPE_CUBE;
        
        public const vulkan.VkImageViewType VK_IMAGE_VIEW_TYPE_1D_ARRAY = VkImageViewType.VK_IMAGE_VIEW_TYPE_1D_ARRAY;
        
        public const vulkan.VkImageViewType VK_IMAGE_VIEW_TYPE_2D_ARRAY = VkImageViewType.VK_IMAGE_VIEW_TYPE_2D_ARRAY;
        
        public const vulkan.VkImageViewType VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = VkImageViewType.VK_IMAGE_VIEW_TYPE_CUBE_ARRAY;
        
        public const vulkan.VkImageViewType VK_IMAGE_VIEW_TYPE_MAX_ENUM = VkImageViewType.VK_IMAGE_VIEW_TYPE_MAX_ENUM;
        
        public enum VkBlendFactor : uint
        {
            VK_BLEND_FACTOR_ZERO = unchecked((uint)0),
            
            VK_BLEND_FACTOR_ONE = unchecked((uint)1),
            
            VK_BLEND_FACTOR_SRC_COLOR = unchecked((uint)2),
            
            VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = unchecked((uint)3),
            
            VK_BLEND_FACTOR_DST_COLOR = unchecked((uint)4),
            
            VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = unchecked((uint)5),
            
            VK_BLEND_FACTOR_SRC_ALPHA = unchecked((uint)6),
            
            VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = unchecked((uint)7),
            
            VK_BLEND_FACTOR_DST_ALPHA = unchecked((uint)8),
            
            VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = unchecked((uint)9),
            
            VK_BLEND_FACTOR_CONSTANT_COLOR = unchecked((uint)10),
            
            VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = unchecked((uint)11),
            
            VK_BLEND_FACTOR_CONSTANT_ALPHA = unchecked((uint)12),
            
            VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = unchecked((uint)13),
            
            VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = unchecked((uint)14),
            
            VK_BLEND_FACTOR_SRC1_COLOR = unchecked((uint)15),
            
            VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = unchecked((uint)16),
            
            VK_BLEND_FACTOR_SRC1_ALPHA = unchecked((uint)17),
            
            VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = unchecked((uint)18),
            
            VK_BLEND_FACTOR_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_ZERO = VkBlendFactor.VK_BLEND_FACTOR_ZERO;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_ONE = VkBlendFactor.VK_BLEND_FACTOR_ONE;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_SRC_COLOR = VkBlendFactor.VK_BLEND_FACTOR_SRC_COLOR;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_DST_COLOR = VkBlendFactor.VK_BLEND_FACTOR_DST_COLOR;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_SRC_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_SRC_ALPHA;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_DST_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_DST_ALPHA;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_CONSTANT_COLOR = VkBlendFactor.VK_BLEND_FACTOR_CONSTANT_COLOR;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_CONSTANT_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_CONSTANT_ALPHA;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = VkBlendFactor.VK_BLEND_FACTOR_SRC_ALPHA_SATURATE;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_SRC1_COLOR = VkBlendFactor.VK_BLEND_FACTOR_SRC1_COLOR;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_SRC1_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_SRC1_ALPHA;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA;
        
        public const vulkan.VkBlendFactor VK_BLEND_FACTOR_MAX_ENUM = VkBlendFactor.VK_BLEND_FACTOR_MAX_ENUM;
        
        public enum VkBlendOp : uint
        {
            VK_BLEND_OP_ADD = unchecked((uint)0),
            
            VK_BLEND_OP_SUBTRACT = unchecked((uint)1),
            
            VK_BLEND_OP_REVERSE_SUBTRACT = unchecked((uint)2),
            
            VK_BLEND_OP_MIN = unchecked((uint)3),
            
            VK_BLEND_OP_MAX = unchecked((uint)4),
            
            VK_BLEND_OP_ZERO_EXT = unchecked((uint)1000148000),
            
            VK_BLEND_OP_SRC_EXT = unchecked((uint)1000148001),
            
            VK_BLEND_OP_DST_EXT = unchecked((uint)1000148002),
            
            VK_BLEND_OP_SRC_OVER_EXT = unchecked((uint)1000148003),
            
            VK_BLEND_OP_DST_OVER_EXT = unchecked((uint)1000148004),
            
            VK_BLEND_OP_SRC_IN_EXT = unchecked((uint)1000148005),
            
            VK_BLEND_OP_DST_IN_EXT = unchecked((uint)1000148006),
            
            VK_BLEND_OP_SRC_OUT_EXT = unchecked((uint)1000148007),
            
            VK_BLEND_OP_DST_OUT_EXT = unchecked((uint)1000148008),
            
            VK_BLEND_OP_SRC_ATOP_EXT = unchecked((uint)1000148009),
            
            VK_BLEND_OP_DST_ATOP_EXT = unchecked((uint)1000148010),
            
            VK_BLEND_OP_XOR_EXT = unchecked((uint)1000148011),
            
            VK_BLEND_OP_MULTIPLY_EXT = unchecked((uint)1000148012),
            
            VK_BLEND_OP_SCREEN_EXT = unchecked((uint)1000148013),
            
            VK_BLEND_OP_OVERLAY_EXT = unchecked((uint)1000148014),
            
            VK_BLEND_OP_DARKEN_EXT = unchecked((uint)1000148015),
            
            VK_BLEND_OP_LIGHTEN_EXT = unchecked((uint)1000148016),
            
            VK_BLEND_OP_COLORDODGE_EXT = unchecked((uint)1000148017),
            
            VK_BLEND_OP_COLORBURN_EXT = unchecked((uint)1000148018),
            
            VK_BLEND_OP_HARDLIGHT_EXT = unchecked((uint)1000148019),
            
            VK_BLEND_OP_SOFTLIGHT_EXT = unchecked((uint)1000148020),
            
            VK_BLEND_OP_DIFFERENCE_EXT = unchecked((uint)1000148021),
            
            VK_BLEND_OP_EXCLUSION_EXT = unchecked((uint)1000148022),
            
            VK_BLEND_OP_INVERT_EXT = unchecked((uint)1000148023),
            
            VK_BLEND_OP_INVERT_RGB_EXT = unchecked((uint)1000148024),
            
            VK_BLEND_OP_LINEARDODGE_EXT = unchecked((uint)1000148025),
            
            VK_BLEND_OP_LINEARBURN_EXT = unchecked((uint)1000148026),
            
            VK_BLEND_OP_VIVIDLIGHT_EXT = unchecked((uint)1000148027),
            
            VK_BLEND_OP_LINEARLIGHT_EXT = unchecked((uint)1000148028),
            
            VK_BLEND_OP_PINLIGHT_EXT = unchecked((uint)1000148029),
            
            VK_BLEND_OP_HARDMIX_EXT = unchecked((uint)1000148030),
            
            VK_BLEND_OP_HSL_HUE_EXT = unchecked((uint)1000148031),
            
            VK_BLEND_OP_HSL_SATURATION_EXT = unchecked((uint)1000148032),
            
            VK_BLEND_OP_HSL_COLOR_EXT = unchecked((uint)1000148033),
            
            VK_BLEND_OP_HSL_LUMINOSITY_EXT = unchecked((uint)1000148034),
            
            VK_BLEND_OP_PLUS_EXT = unchecked((uint)1000148035),
            
            VK_BLEND_OP_PLUS_CLAMPED_EXT = unchecked((uint)1000148036),
            
            VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = unchecked((uint)1000148037),
            
            VK_BLEND_OP_PLUS_DARKER_EXT = unchecked((uint)1000148038),
            
            VK_BLEND_OP_MINUS_EXT = unchecked((uint)1000148039),
            
            VK_BLEND_OP_MINUS_CLAMPED_EXT = unchecked((uint)1000148040),
            
            VK_BLEND_OP_CONTRAST_EXT = unchecked((uint)1000148041),
            
            VK_BLEND_OP_INVERT_OVG_EXT = unchecked((uint)1000148042),
            
            VK_BLEND_OP_RED_EXT = unchecked((uint)1000148043),
            
            VK_BLEND_OP_GREEN_EXT = unchecked((uint)1000148044),
            
            VK_BLEND_OP_BLUE_EXT = unchecked((uint)1000148045),
            
            VK_BLEND_OP_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkBlendOp VK_BLEND_OP_ADD = VkBlendOp.VK_BLEND_OP_ADD;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_SUBTRACT = VkBlendOp.VK_BLEND_OP_SUBTRACT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_REVERSE_SUBTRACT = VkBlendOp.VK_BLEND_OP_REVERSE_SUBTRACT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_MIN = VkBlendOp.VK_BLEND_OP_MIN;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_MAX = VkBlendOp.VK_BLEND_OP_MAX;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_ZERO_EXT = VkBlendOp.VK_BLEND_OP_ZERO_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_SRC_EXT = VkBlendOp.VK_BLEND_OP_SRC_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_DST_EXT = VkBlendOp.VK_BLEND_OP_DST_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_SRC_OVER_EXT = VkBlendOp.VK_BLEND_OP_SRC_OVER_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_DST_OVER_EXT = VkBlendOp.VK_BLEND_OP_DST_OVER_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_SRC_IN_EXT = VkBlendOp.VK_BLEND_OP_SRC_IN_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_DST_IN_EXT = VkBlendOp.VK_BLEND_OP_DST_IN_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_SRC_OUT_EXT = VkBlendOp.VK_BLEND_OP_SRC_OUT_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_DST_OUT_EXT = VkBlendOp.VK_BLEND_OP_DST_OUT_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_SRC_ATOP_EXT = VkBlendOp.VK_BLEND_OP_SRC_ATOP_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_DST_ATOP_EXT = VkBlendOp.VK_BLEND_OP_DST_ATOP_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_XOR_EXT = VkBlendOp.VK_BLEND_OP_XOR_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_MULTIPLY_EXT = VkBlendOp.VK_BLEND_OP_MULTIPLY_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_SCREEN_EXT = VkBlendOp.VK_BLEND_OP_SCREEN_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_OVERLAY_EXT = VkBlendOp.VK_BLEND_OP_OVERLAY_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_DARKEN_EXT = VkBlendOp.VK_BLEND_OP_DARKEN_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_LIGHTEN_EXT = VkBlendOp.VK_BLEND_OP_LIGHTEN_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_COLORDODGE_EXT = VkBlendOp.VK_BLEND_OP_COLORDODGE_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_COLORBURN_EXT = VkBlendOp.VK_BLEND_OP_COLORBURN_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_HARDLIGHT_EXT = VkBlendOp.VK_BLEND_OP_HARDLIGHT_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_SOFTLIGHT_EXT = VkBlendOp.VK_BLEND_OP_SOFTLIGHT_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_DIFFERENCE_EXT = VkBlendOp.VK_BLEND_OP_DIFFERENCE_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_EXCLUSION_EXT = VkBlendOp.VK_BLEND_OP_EXCLUSION_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_INVERT_EXT = VkBlendOp.VK_BLEND_OP_INVERT_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_INVERT_RGB_EXT = VkBlendOp.VK_BLEND_OP_INVERT_RGB_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_LINEARDODGE_EXT = VkBlendOp.VK_BLEND_OP_LINEARDODGE_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_LINEARBURN_EXT = VkBlendOp.VK_BLEND_OP_LINEARBURN_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_VIVIDLIGHT_EXT = VkBlendOp.VK_BLEND_OP_VIVIDLIGHT_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_LINEARLIGHT_EXT = VkBlendOp.VK_BLEND_OP_LINEARLIGHT_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_PINLIGHT_EXT = VkBlendOp.VK_BLEND_OP_PINLIGHT_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_HARDMIX_EXT = VkBlendOp.VK_BLEND_OP_HARDMIX_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_HSL_HUE_EXT = VkBlendOp.VK_BLEND_OP_HSL_HUE_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_HSL_SATURATION_EXT = VkBlendOp.VK_BLEND_OP_HSL_SATURATION_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_HSL_COLOR_EXT = VkBlendOp.VK_BLEND_OP_HSL_COLOR_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_HSL_LUMINOSITY_EXT = VkBlendOp.VK_BLEND_OP_HSL_LUMINOSITY_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_PLUS_EXT = VkBlendOp.VK_BLEND_OP_PLUS_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_PLUS_CLAMPED_EXT = VkBlendOp.VK_BLEND_OP_PLUS_CLAMPED_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = VkBlendOp.VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_PLUS_DARKER_EXT = VkBlendOp.VK_BLEND_OP_PLUS_DARKER_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_MINUS_EXT = VkBlendOp.VK_BLEND_OP_MINUS_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_MINUS_CLAMPED_EXT = VkBlendOp.VK_BLEND_OP_MINUS_CLAMPED_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_CONTRAST_EXT = VkBlendOp.VK_BLEND_OP_CONTRAST_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_INVERT_OVG_EXT = VkBlendOp.VK_BLEND_OP_INVERT_OVG_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_RED_EXT = VkBlendOp.VK_BLEND_OP_RED_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_GREEN_EXT = VkBlendOp.VK_BLEND_OP_GREEN_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_BLUE_EXT = VkBlendOp.VK_BLEND_OP_BLUE_EXT;
        
        public const vulkan.VkBlendOp VK_BLEND_OP_MAX_ENUM = VkBlendOp.VK_BLEND_OP_MAX_ENUM;
        
        public enum VkCompareOp : uint
        {
            VK_COMPARE_OP_NEVER = unchecked((uint)0),
            
            VK_COMPARE_OP_LESS = unchecked((uint)1),
            
            VK_COMPARE_OP_EQUAL = unchecked((uint)2),
            
            VK_COMPARE_OP_LESS_OR_EQUAL = unchecked((uint)3),
            
            VK_COMPARE_OP_GREATER = unchecked((uint)4),
            
            VK_COMPARE_OP_NOT_EQUAL = unchecked((uint)5),
            
            VK_COMPARE_OP_GREATER_OR_EQUAL = unchecked((uint)6),
            
            VK_COMPARE_OP_ALWAYS = unchecked((uint)7),
            
            VK_COMPARE_OP_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkCompareOp VK_COMPARE_OP_NEVER = VkCompareOp.VK_COMPARE_OP_NEVER;
        
        public const vulkan.VkCompareOp VK_COMPARE_OP_LESS = VkCompareOp.VK_COMPARE_OP_LESS;
        
        public const vulkan.VkCompareOp VK_COMPARE_OP_EQUAL = VkCompareOp.VK_COMPARE_OP_EQUAL;
        
        public const vulkan.VkCompareOp VK_COMPARE_OP_LESS_OR_EQUAL = VkCompareOp.VK_COMPARE_OP_LESS_OR_EQUAL;
        
        public const vulkan.VkCompareOp VK_COMPARE_OP_GREATER = VkCompareOp.VK_COMPARE_OP_GREATER;
        
        public const vulkan.VkCompareOp VK_COMPARE_OP_NOT_EQUAL = VkCompareOp.VK_COMPARE_OP_NOT_EQUAL;
        
        public const vulkan.VkCompareOp VK_COMPARE_OP_GREATER_OR_EQUAL = VkCompareOp.VK_COMPARE_OP_GREATER_OR_EQUAL;
        
        public const vulkan.VkCompareOp VK_COMPARE_OP_ALWAYS = VkCompareOp.VK_COMPARE_OP_ALWAYS;
        
        public const vulkan.VkCompareOp VK_COMPARE_OP_MAX_ENUM = VkCompareOp.VK_COMPARE_OP_MAX_ENUM;
        
        public enum VkDynamicState : uint
        {
            VK_DYNAMIC_STATE_VIEWPORT = unchecked((uint)0),
            
            VK_DYNAMIC_STATE_SCISSOR = unchecked((uint)1),
            
            VK_DYNAMIC_STATE_LINE_WIDTH = unchecked((uint)2),
            
            VK_DYNAMIC_STATE_DEPTH_BIAS = unchecked((uint)3),
            
            VK_DYNAMIC_STATE_BLEND_CONSTANTS = unchecked((uint)4),
            
            VK_DYNAMIC_STATE_DEPTH_BOUNDS = unchecked((uint)5),
            
            VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = unchecked((uint)6),
            
            VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = unchecked((uint)7),
            
            VK_DYNAMIC_STATE_STENCIL_REFERENCE = unchecked((uint)8),
            
            VK_DYNAMIC_STATE_CULL_MODE = unchecked((uint)1000267000),
            
            VK_DYNAMIC_STATE_FRONT_FACE = unchecked((uint)1000267001),
            
            VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = unchecked((uint)1000267002),
            
            VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = unchecked((uint)1000267003),
            
            VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = unchecked((uint)1000267004),
            
            VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = unchecked((uint)1000267005),
            
            VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = unchecked((uint)1000267006),
            
            VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = unchecked((uint)1000267007),
            
            VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = unchecked((uint)1000267008),
            
            VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = unchecked((uint)1000267009),
            
            VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = unchecked((uint)1000267010),
            
            VK_DYNAMIC_STATE_STENCIL_OP = unchecked((uint)1000267011),
            
            VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = unchecked((uint)1000377001),
            
            VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = unchecked((uint)1000377002),
            
            VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = unchecked((uint)1000377004),
            
            VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = unchecked((uint)1000087000),
            
            VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = unchecked((uint)1000099000),
            
            VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT = unchecked((uint)1000099001),
            
            VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT = unchecked((uint)1000099002),
            
            VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = unchecked((uint)1000143000),
            
            VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = unchecked((uint)1000347000),
            
            VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = unchecked((uint)1000164004),
            
            VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = unchecked((uint)1000164006),
            
            VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV = unchecked((uint)1000205000),
            
            VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = unchecked((uint)1000205001),
            
            VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = unchecked((uint)1000226000),
            
            VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = unchecked((uint)1000259000),
            
            VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = unchecked((uint)1000352000),
            
            VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = unchecked((uint)1000377000),
            
            VK_DYNAMIC_STATE_LOGIC_OP_EXT = unchecked((uint)1000377003),
            
            VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = unchecked((uint)1000381000),
            
            VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT = unchecked((uint)1000455002),
            
            VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT = unchecked((uint)1000455003),
            
            VK_DYNAMIC_STATE_POLYGON_MODE_EXT = unchecked((uint)1000455004),
            
            VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT = unchecked((uint)1000455005),
            
            VK_DYNAMIC_STATE_SAMPLE_MASK_EXT = unchecked((uint)1000455006),
            
            VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT = unchecked((uint)1000455007),
            
            VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT = unchecked((uint)1000455008),
            
            VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT = unchecked((uint)1000455009),
            
            VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT = unchecked((uint)1000455010),
            
            VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT = unchecked((uint)1000455011),
            
            VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT = unchecked((uint)1000455012),
            
            VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT = unchecked((uint)1000455013),
            
            VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT = unchecked((uint)1000455014),
            
            VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = unchecked((uint)1000455015),
            
            VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT = unchecked((uint)1000455016),
            
            VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT = unchecked((uint)1000455017),
            
            VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT = unchecked((uint)1000455018),
            
            VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT = unchecked((uint)1000455019),
            
            VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT = unchecked((uint)1000455020),
            
            VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT = unchecked((uint)1000455021),
            
            VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = unchecked((uint)1000455022),
            
            VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV = unchecked((uint)1000455023),
            
            VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV = unchecked((uint)1000455024),
            
            VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV = unchecked((uint)1000455025),
            
            VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV = unchecked((uint)1000455026),
            
            VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV = unchecked((uint)1000455027),
            
            VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV = unchecked((uint)1000455028),
            
            VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV = unchecked((uint)1000455029),
            
            VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV = unchecked((uint)1000455030),
            
            VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = unchecked((uint)1000455031),
            
            VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV = unchecked((uint)1000455032),
            
            VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT = unchecked((uint)1000524000),
            
            VK_DYNAMIC_STATE_CULL_MODE_EXT = unchecked((uint)1000267000),
            
            VK_DYNAMIC_STATE_FRONT_FACE_EXT = unchecked((uint)1000267001),
            
            VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = unchecked((uint)1000267002),
            
            VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = unchecked((uint)1000267003),
            
            VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = unchecked((uint)1000267004),
            
            VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = unchecked((uint)1000267005),
            
            VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = unchecked((uint)1000267006),
            
            VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = unchecked((uint)1000267007),
            
            VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = unchecked((uint)1000267008),
            
            VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = unchecked((uint)1000267009),
            
            VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = unchecked((uint)1000267010),
            
            VK_DYNAMIC_STATE_STENCIL_OP_EXT = unchecked((uint)1000267011),
            
            VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = unchecked((uint)1000377001),
            
            VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = unchecked((uint)1000377002),
            
            VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = unchecked((uint)1000377004),
            
            VK_DYNAMIC_STATE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_VIEWPORT = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_SCISSOR = VkDynamicState.VK_DYNAMIC_STATE_SCISSOR;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_LINE_WIDTH = VkDynamicState.VK_DYNAMIC_STATE_LINE_WIDTH;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DEPTH_BIAS = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BIAS;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_BLEND_CONSTANTS = VkDynamicState.VK_DYNAMIC_STATE_BLEND_CONSTANTS;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DEPTH_BOUNDS = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BOUNDS;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_WRITE_MASK;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_STENCIL_REFERENCE = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_REFERENCE;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_CULL_MODE = VkDynamicState.VK_DYNAMIC_STATE_CULL_MODE;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_FRONT_FACE = VkDynamicState.VK_DYNAMIC_STATE_FRONT_FACE;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = VkDynamicState.VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = VkDynamicState.VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = VkDynamicState.VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_COMPARE_OP;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_STENCIL_OP = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_OP;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = VkDynamicState.VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = VkDynamicState.VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = VkDynamicState.VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = VkDynamicState.VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV = VkDynamicState.VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = VkDynamicState.VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = VkDynamicState.VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_LINE_STIPPLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = VkDynamicState.VK_DYNAMIC_STATE_VERTEX_INPUT_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = VkDynamicState.VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_LOGIC_OP_EXT = VkDynamicState.VK_DYNAMIC_STATE_LOGIC_OP_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT = VkDynamicState.VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_POLYGON_MODE_EXT = VkDynamicState.VK_DYNAMIC_STATE_POLYGON_MODE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT = VkDynamicState.VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_SAMPLE_MASK_EXT = VkDynamicState.VK_DYNAMIC_STATE_SAMPLE_MASK_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT = VkDynamicState.VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT = VkDynamicState.VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT = VkDynamicState.VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT = VkDynamicState.VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = VkDynamicState.VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT = VkDynamicState.VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT = VkDynamicState.VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT = VkDynamicState.VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV = VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV = VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV = VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV = VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV = VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV = VkDynamicState.VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = VkDynamicState.VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV = VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_CULL_MODE_EXT = VkDynamicState.VK_DYNAMIC_STATE_CULL_MODE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_FRONT_FACE_EXT = VkDynamicState.VK_DYNAMIC_STATE_FRONT_FACE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = VkDynamicState.VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = VkDynamicState.VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = VkDynamicState.VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_STENCIL_OP_EXT = VkDynamicState.VK_DYNAMIC_STATE_STENCIL_OP_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = VkDynamicState.VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT;
        
        public const vulkan.VkDynamicState VK_DYNAMIC_STATE_MAX_ENUM = VkDynamicState.VK_DYNAMIC_STATE_MAX_ENUM;
        
        public enum VkFrontFace : uint
        {
            VK_FRONT_FACE_COUNTER_CLOCKWISE = unchecked((uint)0),
            
            VK_FRONT_FACE_CLOCKWISE = unchecked((uint)1),
            
            VK_FRONT_FACE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkFrontFace VK_FRONT_FACE_COUNTER_CLOCKWISE = VkFrontFace.VK_FRONT_FACE_COUNTER_CLOCKWISE;
        
        public const vulkan.VkFrontFace VK_FRONT_FACE_CLOCKWISE = VkFrontFace.VK_FRONT_FACE_CLOCKWISE;
        
        public const vulkan.VkFrontFace VK_FRONT_FACE_MAX_ENUM = VkFrontFace.VK_FRONT_FACE_MAX_ENUM;
        
        public enum VkVertexInputRate : uint
        {
            VK_VERTEX_INPUT_RATE_VERTEX = unchecked((uint)0),
            
            VK_VERTEX_INPUT_RATE_INSTANCE = unchecked((uint)1),
            
            VK_VERTEX_INPUT_RATE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkVertexInputRate VK_VERTEX_INPUT_RATE_VERTEX = VkVertexInputRate.VK_VERTEX_INPUT_RATE_VERTEX;
        
        public const vulkan.VkVertexInputRate VK_VERTEX_INPUT_RATE_INSTANCE = VkVertexInputRate.VK_VERTEX_INPUT_RATE_INSTANCE;
        
        public const vulkan.VkVertexInputRate VK_VERTEX_INPUT_RATE_MAX_ENUM = VkVertexInputRate.VK_VERTEX_INPUT_RATE_MAX_ENUM;
        
        public enum VkPrimitiveTopology : uint
        {
            VK_PRIMITIVE_TOPOLOGY_POINT_LIST = unchecked((uint)0),
            
            VK_PRIMITIVE_TOPOLOGY_LINE_LIST = unchecked((uint)1),
            
            VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = unchecked((uint)2),
            
            VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = unchecked((uint)3),
            
            VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = unchecked((uint)4),
            
            VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = unchecked((uint)5),
            
            VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = unchecked((uint)6),
            
            VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = unchecked((uint)7),
            
            VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = unchecked((uint)8),
            
            VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = unchecked((uint)9),
            
            VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = unchecked((uint)10),
            
            VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPrimitiveTopology VK_PRIMITIVE_TOPOLOGY_POINT_LIST = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_POINT_LIST;
        
        public const vulkan.VkPrimitiveTopology VK_PRIMITIVE_TOPOLOGY_LINE_LIST = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_LIST;
        
        public const vulkan.VkPrimitiveTopology VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_STRIP;
        
        public const vulkan.VkPrimitiveTopology VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
        
        public const vulkan.VkPrimitiveTopology VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP;
        
        public const vulkan.VkPrimitiveTopology VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN;
        
        public const vulkan.VkPrimitiveTopology VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY;
        
        public const vulkan.VkPrimitiveTopology VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY;
        
        public const vulkan.VkPrimitiveTopology VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY;
        
        public const vulkan.VkPrimitiveTopology VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY;
        
        public const vulkan.VkPrimitiveTopology VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_PATCH_LIST;
        
        public const vulkan.VkPrimitiveTopology VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_MAX_ENUM;
        
        public enum VkPolygonMode : uint
        {
            VK_POLYGON_MODE_FILL = unchecked((uint)0),
            
            VK_POLYGON_MODE_LINE = unchecked((uint)1),
            
            VK_POLYGON_MODE_POINT = unchecked((uint)2),
            
            VK_POLYGON_MODE_FILL_RECTANGLE_NV = unchecked((uint)1000153000),
            
            VK_POLYGON_MODE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPolygonMode VK_POLYGON_MODE_FILL = VkPolygonMode.VK_POLYGON_MODE_FILL;
        
        public const vulkan.VkPolygonMode VK_POLYGON_MODE_LINE = VkPolygonMode.VK_POLYGON_MODE_LINE;
        
        public const vulkan.VkPolygonMode VK_POLYGON_MODE_POINT = VkPolygonMode.VK_POLYGON_MODE_POINT;
        
        public const vulkan.VkPolygonMode VK_POLYGON_MODE_FILL_RECTANGLE_NV = VkPolygonMode.VK_POLYGON_MODE_FILL_RECTANGLE_NV;
        
        public const vulkan.VkPolygonMode VK_POLYGON_MODE_MAX_ENUM = VkPolygonMode.VK_POLYGON_MODE_MAX_ENUM;
        
        public enum VkStencilOp : uint
        {
            VK_STENCIL_OP_KEEP = unchecked((uint)0),
            
            VK_STENCIL_OP_ZERO = unchecked((uint)1),
            
            VK_STENCIL_OP_REPLACE = unchecked((uint)2),
            
            VK_STENCIL_OP_INCREMENT_AND_CLAMP = unchecked((uint)3),
            
            VK_STENCIL_OP_DECREMENT_AND_CLAMP = unchecked((uint)4),
            
            VK_STENCIL_OP_INVERT = unchecked((uint)5),
            
            VK_STENCIL_OP_INCREMENT_AND_WRAP = unchecked((uint)6),
            
            VK_STENCIL_OP_DECREMENT_AND_WRAP = unchecked((uint)7),
            
            VK_STENCIL_OP_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkStencilOp VK_STENCIL_OP_KEEP = VkStencilOp.VK_STENCIL_OP_KEEP;
        
        public const vulkan.VkStencilOp VK_STENCIL_OP_ZERO = VkStencilOp.VK_STENCIL_OP_ZERO;
        
        public const vulkan.VkStencilOp VK_STENCIL_OP_REPLACE = VkStencilOp.VK_STENCIL_OP_REPLACE;
        
        public const vulkan.VkStencilOp VK_STENCIL_OP_INCREMENT_AND_CLAMP = VkStencilOp.VK_STENCIL_OP_INCREMENT_AND_CLAMP;
        
        public const vulkan.VkStencilOp VK_STENCIL_OP_DECREMENT_AND_CLAMP = VkStencilOp.VK_STENCIL_OP_DECREMENT_AND_CLAMP;
        
        public const vulkan.VkStencilOp VK_STENCIL_OP_INVERT = VkStencilOp.VK_STENCIL_OP_INVERT;
        
        public const vulkan.VkStencilOp VK_STENCIL_OP_INCREMENT_AND_WRAP = VkStencilOp.VK_STENCIL_OP_INCREMENT_AND_WRAP;
        
        public const vulkan.VkStencilOp VK_STENCIL_OP_DECREMENT_AND_WRAP = VkStencilOp.VK_STENCIL_OP_DECREMENT_AND_WRAP;
        
        public const vulkan.VkStencilOp VK_STENCIL_OP_MAX_ENUM = VkStencilOp.VK_STENCIL_OP_MAX_ENUM;
        
        public enum VkLogicOp : uint
        {
            VK_LOGIC_OP_CLEAR = unchecked((uint)0),
            
            VK_LOGIC_OP_AND = unchecked((uint)1),
            
            VK_LOGIC_OP_AND_REVERSE = unchecked((uint)2),
            
            VK_LOGIC_OP_COPY = unchecked((uint)3),
            
            VK_LOGIC_OP_AND_INVERTED = unchecked((uint)4),
            
            VK_LOGIC_OP_NO_OP = unchecked((uint)5),
            
            VK_LOGIC_OP_XOR = unchecked((uint)6),
            
            VK_LOGIC_OP_OR = unchecked((uint)7),
            
            VK_LOGIC_OP_NOR = unchecked((uint)8),
            
            VK_LOGIC_OP_EQUIVALENT = unchecked((uint)9),
            
            VK_LOGIC_OP_INVERT = unchecked((uint)10),
            
            VK_LOGIC_OP_OR_REVERSE = unchecked((uint)11),
            
            VK_LOGIC_OP_COPY_INVERTED = unchecked((uint)12),
            
            VK_LOGIC_OP_OR_INVERTED = unchecked((uint)13),
            
            VK_LOGIC_OP_NAND = unchecked((uint)14),
            
            VK_LOGIC_OP_SET = unchecked((uint)15),
            
            VK_LOGIC_OP_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_CLEAR = VkLogicOp.VK_LOGIC_OP_CLEAR;
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_AND = VkLogicOp.VK_LOGIC_OP_AND;
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_AND_REVERSE = VkLogicOp.VK_LOGIC_OP_AND_REVERSE;
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_COPY = VkLogicOp.VK_LOGIC_OP_COPY;
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_AND_INVERTED = VkLogicOp.VK_LOGIC_OP_AND_INVERTED;
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_NO_OP = VkLogicOp.VK_LOGIC_OP_NO_OP;
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_XOR = VkLogicOp.VK_LOGIC_OP_XOR;
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_OR = VkLogicOp.VK_LOGIC_OP_OR;
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_NOR = VkLogicOp.VK_LOGIC_OP_NOR;
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_EQUIVALENT = VkLogicOp.VK_LOGIC_OP_EQUIVALENT;
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_INVERT = VkLogicOp.VK_LOGIC_OP_INVERT;
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_OR_REVERSE = VkLogicOp.VK_LOGIC_OP_OR_REVERSE;
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_COPY_INVERTED = VkLogicOp.VK_LOGIC_OP_COPY_INVERTED;
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_OR_INVERTED = VkLogicOp.VK_LOGIC_OP_OR_INVERTED;
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_NAND = VkLogicOp.VK_LOGIC_OP_NAND;
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_SET = VkLogicOp.VK_LOGIC_OP_SET;
        
        public const vulkan.VkLogicOp VK_LOGIC_OP_MAX_ENUM = VkLogicOp.VK_LOGIC_OP_MAX_ENUM;
        
        public enum VkBorderColor : uint
        {
            VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = unchecked((uint)0),
            
            VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = unchecked((uint)1),
            
            VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = unchecked((uint)2),
            
            VK_BORDER_COLOR_INT_OPAQUE_BLACK = unchecked((uint)3),
            
            VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = unchecked((uint)4),
            
            VK_BORDER_COLOR_INT_OPAQUE_WHITE = unchecked((uint)5),
            
            VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = unchecked((uint)1000287003),
            
            VK_BORDER_COLOR_INT_CUSTOM_EXT = unchecked((uint)1000287004),
            
            VK_BORDER_COLOR_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkBorderColor VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = VkBorderColor.VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK;
        
        public const vulkan.VkBorderColor VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = VkBorderColor.VK_BORDER_COLOR_INT_TRANSPARENT_BLACK;
        
        public const vulkan.VkBorderColor VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = VkBorderColor.VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK;
        
        public const vulkan.VkBorderColor VK_BORDER_COLOR_INT_OPAQUE_BLACK = VkBorderColor.VK_BORDER_COLOR_INT_OPAQUE_BLACK;
        
        public const vulkan.VkBorderColor VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = VkBorderColor.VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE;
        
        public const vulkan.VkBorderColor VK_BORDER_COLOR_INT_OPAQUE_WHITE = VkBorderColor.VK_BORDER_COLOR_INT_OPAQUE_WHITE;
        
        public const vulkan.VkBorderColor VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = VkBorderColor.VK_BORDER_COLOR_FLOAT_CUSTOM_EXT;
        
        public const vulkan.VkBorderColor VK_BORDER_COLOR_INT_CUSTOM_EXT = VkBorderColor.VK_BORDER_COLOR_INT_CUSTOM_EXT;
        
        public const vulkan.VkBorderColor VK_BORDER_COLOR_MAX_ENUM = VkBorderColor.VK_BORDER_COLOR_MAX_ENUM;
        
        public enum VkFilter : uint
        {
            VK_FILTER_NEAREST = unchecked((uint)0),
            
            VK_FILTER_LINEAR = unchecked((uint)1),
            
            VK_FILTER_CUBIC_EXT = unchecked((uint)1000015000),
            
            VK_FILTER_CUBIC_IMG = unchecked((uint)1000015000),
            
            VK_FILTER_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkFilter VK_FILTER_NEAREST = VkFilter.VK_FILTER_NEAREST;
        
        public const vulkan.VkFilter VK_FILTER_LINEAR = VkFilter.VK_FILTER_LINEAR;
        
        public const vulkan.VkFilter VK_FILTER_CUBIC_EXT = VkFilter.VK_FILTER_CUBIC_EXT;
        
        public const vulkan.VkFilter VK_FILTER_CUBIC_IMG = VkFilter.VK_FILTER_CUBIC_IMG;
        
        public const vulkan.VkFilter VK_FILTER_MAX_ENUM = VkFilter.VK_FILTER_MAX_ENUM;
        
        public enum VkSamplerAddressMode : uint
        {
            VK_SAMPLER_ADDRESS_MODE_REPEAT = unchecked((uint)0),
            
            VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = unchecked((uint)1),
            
            VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = unchecked((uint)2),
            
            VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = unchecked((uint)3),
            
            VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = unchecked((uint)4),
            
            VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = unchecked((uint)4),
            
            VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSamplerAddressMode VK_SAMPLER_ADDRESS_MODE_REPEAT = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_REPEAT;
        
        public const vulkan.VkSamplerAddressMode VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT;
        
        public const vulkan.VkSamplerAddressMode VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE;
        
        public const vulkan.VkSamplerAddressMode VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER;
        
        public const vulkan.VkSamplerAddressMode VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE;
        
        public const vulkan.VkSamplerAddressMode VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR;
        
        public const vulkan.VkSamplerAddressMode VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MAX_ENUM;
        
        public enum VkSamplerMipmapMode : uint
        {
            VK_SAMPLER_MIPMAP_MODE_NEAREST = unchecked((uint)0),
            
            VK_SAMPLER_MIPMAP_MODE_LINEAR = unchecked((uint)1),
            
            VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSamplerMipmapMode VK_SAMPLER_MIPMAP_MODE_NEAREST = VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_NEAREST;
        
        public const vulkan.VkSamplerMipmapMode VK_SAMPLER_MIPMAP_MODE_LINEAR = VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_LINEAR;
        
        public const vulkan.VkSamplerMipmapMode VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_MAX_ENUM;
        
        public enum VkDescriptorType : uint
        {
            VK_DESCRIPTOR_TYPE_SAMPLER = unchecked((uint)0),
            
            VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = unchecked((uint)1),
            
            VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = unchecked((uint)2),
            
            VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = unchecked((uint)3),
            
            VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = unchecked((uint)4),
            
            VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = unchecked((uint)5),
            
            VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = unchecked((uint)6),
            
            VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = unchecked((uint)7),
            
            VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = unchecked((uint)8),
            
            VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = unchecked((uint)9),
            
            VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = unchecked((uint)10),
            
            VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = unchecked((uint)1000138000),
            
            VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = unchecked((uint)1000150000),
            
            VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = unchecked((uint)1000165000),
            
            VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM = unchecked((uint)1000440000),
            
            VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM = unchecked((uint)1000440001),
            
            VK_DESCRIPTOR_TYPE_MUTABLE_EXT = unchecked((uint)1000351000),
            
            VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = unchecked((uint)1000138000),
            
            VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = unchecked((uint)1000351000),
            
            VK_DESCRIPTOR_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_SAMPLER = VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLER;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = VkDescriptorType.VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_IMAGE;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = VkDescriptorType.VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = VkDescriptorType.VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = VkDescriptorType.VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = VkDescriptorType.VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM = VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM = VkDescriptorType.VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_MUTABLE_EXT = VkDescriptorType.VK_DESCRIPTOR_TYPE_MUTABLE_EXT;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = VkDescriptorType.VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = VkDescriptorType.VK_DESCRIPTOR_TYPE_MUTABLE_VALVE;
        
        public const vulkan.VkDescriptorType VK_DESCRIPTOR_TYPE_MAX_ENUM = VkDescriptorType.VK_DESCRIPTOR_TYPE_MAX_ENUM;
        
        public enum VkAttachmentLoadOp : uint
        {
            VK_ATTACHMENT_LOAD_OP_LOAD = unchecked((uint)0),
            
            VK_ATTACHMENT_LOAD_OP_CLEAR = unchecked((uint)1),
            
            VK_ATTACHMENT_LOAD_OP_DONT_CARE = unchecked((uint)2),
            
            VK_ATTACHMENT_LOAD_OP_NONE_EXT = unchecked((uint)1000400000),
            
            VK_ATTACHMENT_LOAD_OP_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkAttachmentLoadOp VK_ATTACHMENT_LOAD_OP_LOAD = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_LOAD;
        
        public const vulkan.VkAttachmentLoadOp VK_ATTACHMENT_LOAD_OP_CLEAR = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_CLEAR;
        
        public const vulkan.VkAttachmentLoadOp VK_ATTACHMENT_LOAD_OP_DONT_CARE = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_DONT_CARE;
        
        public const vulkan.VkAttachmentLoadOp VK_ATTACHMENT_LOAD_OP_NONE_EXT = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_NONE_EXT;
        
        public const vulkan.VkAttachmentLoadOp VK_ATTACHMENT_LOAD_OP_MAX_ENUM = VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_MAX_ENUM;
        
        public enum VkAttachmentStoreOp : uint
        {
            VK_ATTACHMENT_STORE_OP_STORE = unchecked((uint)0),
            
            VK_ATTACHMENT_STORE_OP_DONT_CARE = unchecked((uint)1),
            
            VK_ATTACHMENT_STORE_OP_NONE = unchecked((uint)1000301000),
            
            VK_ATTACHMENT_STORE_OP_NONE_KHR = unchecked((uint)1000301000),
            
            VK_ATTACHMENT_STORE_OP_NONE_QCOM = unchecked((uint)1000301000),
            
            VK_ATTACHMENT_STORE_OP_NONE_EXT = unchecked((uint)1000301000),
            
            VK_ATTACHMENT_STORE_OP_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkAttachmentStoreOp VK_ATTACHMENT_STORE_OP_STORE = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_STORE;
        
        public const vulkan.VkAttachmentStoreOp VK_ATTACHMENT_STORE_OP_DONT_CARE = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_DONT_CARE;
        
        public const vulkan.VkAttachmentStoreOp VK_ATTACHMENT_STORE_OP_NONE = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_NONE;
        
        public const vulkan.VkAttachmentStoreOp VK_ATTACHMENT_STORE_OP_NONE_KHR = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_NONE_KHR;
        
        public const vulkan.VkAttachmentStoreOp VK_ATTACHMENT_STORE_OP_NONE_QCOM = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_NONE_QCOM;
        
        public const vulkan.VkAttachmentStoreOp VK_ATTACHMENT_STORE_OP_NONE_EXT = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_NONE_EXT;
        
        public const vulkan.VkAttachmentStoreOp VK_ATTACHMENT_STORE_OP_MAX_ENUM = VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_MAX_ENUM;
        
        public enum VkPipelineBindPoint : uint
        {
            VK_PIPELINE_BIND_POINT_GRAPHICS = unchecked((uint)0),
            
            VK_PIPELINE_BIND_POINT_COMPUTE = unchecked((uint)1),
            
            VK_PIPELINE_BIND_POINT_EXECUTION_GRAPH_AMDX = unchecked((uint)1000134000),
            
            VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = unchecked((uint)1000165000),
            
            VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = unchecked((uint)1000369003),
            
            VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = unchecked((uint)1000165000),
            
            VK_PIPELINE_BIND_POINT_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPipelineBindPoint VK_PIPELINE_BIND_POINT_GRAPHICS = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_GRAPHICS;
        
        public const vulkan.VkPipelineBindPoint VK_PIPELINE_BIND_POINT_COMPUTE = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_COMPUTE;
        
        public const vulkan.VkPipelineBindPoint VK_PIPELINE_BIND_POINT_EXECUTION_GRAPH_AMDX = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_EXECUTION_GRAPH_AMDX;
        
        public const vulkan.VkPipelineBindPoint VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR;
        
        public const vulkan.VkPipelineBindPoint VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI;
        
        public const vulkan.VkPipelineBindPoint VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_RAY_TRACING_NV;
        
        public const vulkan.VkPipelineBindPoint VK_PIPELINE_BIND_POINT_MAX_ENUM = VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_MAX_ENUM;
        
        public enum VkCommandBufferLevel : uint
        {
            VK_COMMAND_BUFFER_LEVEL_PRIMARY = unchecked((uint)0),
            
            VK_COMMAND_BUFFER_LEVEL_SECONDARY = unchecked((uint)1),
            
            VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkCommandBufferLevel VK_COMMAND_BUFFER_LEVEL_PRIMARY = VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_PRIMARY;
        
        public const vulkan.VkCommandBufferLevel VK_COMMAND_BUFFER_LEVEL_SECONDARY = VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_SECONDARY;
        
        public const vulkan.VkCommandBufferLevel VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_MAX_ENUM;
        
        public enum VkIndexType : uint
        {
            VK_INDEX_TYPE_UINT16 = unchecked((uint)0),
            
            VK_INDEX_TYPE_UINT32 = unchecked((uint)1),
            
            VK_INDEX_TYPE_NONE_KHR = unchecked((uint)1000165000),
            
            VK_INDEX_TYPE_UINT8_EXT = unchecked((uint)1000265000),
            
            VK_INDEX_TYPE_NONE_NV = unchecked((uint)1000165000),
            
            VK_INDEX_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkIndexType VK_INDEX_TYPE_UINT16 = VkIndexType.VK_INDEX_TYPE_UINT16;
        
        public const vulkan.VkIndexType VK_INDEX_TYPE_UINT32 = VkIndexType.VK_INDEX_TYPE_UINT32;
        
        public const vulkan.VkIndexType VK_INDEX_TYPE_NONE_KHR = VkIndexType.VK_INDEX_TYPE_NONE_KHR;
        
        public const vulkan.VkIndexType VK_INDEX_TYPE_UINT8_EXT = VkIndexType.VK_INDEX_TYPE_UINT8_EXT;
        
        public const vulkan.VkIndexType VK_INDEX_TYPE_NONE_NV = VkIndexType.VK_INDEX_TYPE_NONE_NV;
        
        public const vulkan.VkIndexType VK_INDEX_TYPE_MAX_ENUM = VkIndexType.VK_INDEX_TYPE_MAX_ENUM;
        
        public enum VkSubpassContents : uint
        {
            VK_SUBPASS_CONTENTS_INLINE = unchecked((uint)0),
            
            VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = unchecked((uint)1),
            
            VK_SUBPASS_CONTENTS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSubpassContents VK_SUBPASS_CONTENTS_INLINE = VkSubpassContents.VK_SUBPASS_CONTENTS_INLINE;
        
        public const vulkan.VkSubpassContents VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = VkSubpassContents.VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS;
        
        public const vulkan.VkSubpassContents VK_SUBPASS_CONTENTS_MAX_ENUM = VkSubpassContents.VK_SUBPASS_CONTENTS_MAX_ENUM;
        
        public enum VkAccessFlagBits : uint
        {
            VK_ACCESS_INDIRECT_COMMAND_READ_BIT = unchecked((uint)1),
            
            VK_ACCESS_INDEX_READ_BIT = unchecked((uint)2),
            
            VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = unchecked((uint)4),
            
            VK_ACCESS_UNIFORM_READ_BIT = unchecked((uint)8),
            
            VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = unchecked((uint)16),
            
            VK_ACCESS_SHADER_READ_BIT = unchecked((uint)32),
            
            VK_ACCESS_SHADER_WRITE_BIT = unchecked((uint)64),
            
            VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = unchecked((uint)128),
            
            VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = unchecked((uint)256),
            
            VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = unchecked((uint)512),
            
            VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = unchecked((uint)1024),
            
            VK_ACCESS_TRANSFER_READ_BIT = unchecked((uint)2048),
            
            VK_ACCESS_TRANSFER_WRITE_BIT = unchecked((uint)4096),
            
            VK_ACCESS_HOST_READ_BIT = unchecked((uint)8192),
            
            VK_ACCESS_HOST_WRITE_BIT = unchecked((uint)16384),
            
            VK_ACCESS_MEMORY_READ_BIT = unchecked((uint)32768),
            
            VK_ACCESS_MEMORY_WRITE_BIT = unchecked((uint)65536),
            
            VK_ACCESS_NONE = unchecked((uint)0),
            
            VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = unchecked((uint)33554432),
            
            VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = unchecked((uint)67108864),
            
            VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = unchecked((uint)134217728),
            
            VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = unchecked((uint)1048576),
            
            VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = unchecked((uint)524288),
            
            VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = unchecked((uint)2097152),
            
            VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = unchecked((uint)4194304),
            
            VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = unchecked((uint)16777216),
            
            VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = unchecked((uint)8388608),
            
            VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = unchecked((uint)131072),
            
            VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = unchecked((uint)262144),
            
            VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = unchecked((uint)8388608),
            
            VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = unchecked((uint)2097152),
            
            VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = unchecked((uint)4194304),
            
            VK_ACCESS_NONE_KHR = unchecked((uint)0),
            
            VK_ACCESS_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_INDIRECT_COMMAND_READ_BIT = VkAccessFlagBits.VK_ACCESS_INDIRECT_COMMAND_READ_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_INDEX_READ_BIT = VkAccessFlagBits.VK_ACCESS_INDEX_READ_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = VkAccessFlagBits.VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_UNIFORM_READ_BIT = VkAccessFlagBits.VK_ACCESS_UNIFORM_READ_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = VkAccessFlagBits.VK_ACCESS_INPUT_ATTACHMENT_READ_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_SHADER_READ_BIT = VkAccessFlagBits.VK_ACCESS_SHADER_READ_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_SHADER_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_SHADER_WRITE_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_READ_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = VkAccessFlagBits.VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_TRANSFER_READ_BIT = VkAccessFlagBits.VK_ACCESS_TRANSFER_READ_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_TRANSFER_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_TRANSFER_WRITE_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_HOST_READ_BIT = VkAccessFlagBits.VK_ACCESS_HOST_READ_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_HOST_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_HOST_WRITE_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_MEMORY_READ_BIT = VkAccessFlagBits.VK_ACCESS_MEMORY_READ_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_MEMORY_WRITE_BIT = VkAccessFlagBits.VK_ACCESS_MEMORY_WRITE_BIT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_NONE = VkAccessFlagBits.VK_ACCESS_NONE;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = VkAccessFlagBits.VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = VkAccessFlagBits.VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = VkAccessFlagBits.VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = VkAccessFlagBits.VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = VkAccessFlagBits.VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = VkAccessFlagBits.VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = VkAccessFlagBits.VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = VkAccessFlagBits.VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = VkAccessFlagBits.VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_NONE_KHR = VkAccessFlagBits.VK_ACCESS_NONE_KHR;
        
        public const vulkan.VkAccessFlagBits VK_ACCESS_FLAG_BITS_MAX_ENUM = VkAccessFlagBits.VK_ACCESS_FLAG_BITS_MAX_ENUM;
        
        public enum VkImageAspectFlagBits : uint
        {
            VK_IMAGE_ASPECT_COLOR_BIT = unchecked((uint)1),
            
            VK_IMAGE_ASPECT_DEPTH_BIT = unchecked((uint)2),
            
            VK_IMAGE_ASPECT_STENCIL_BIT = unchecked((uint)4),
            
            VK_IMAGE_ASPECT_METADATA_BIT = unchecked((uint)8),
            
            VK_IMAGE_ASPECT_PLANE_0_BIT = unchecked((uint)16),
            
            VK_IMAGE_ASPECT_PLANE_1_BIT = unchecked((uint)32),
            
            VK_IMAGE_ASPECT_PLANE_2_BIT = unchecked((uint)64),
            
            VK_IMAGE_ASPECT_NONE = unchecked((uint)0),
            
            VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = unchecked((uint)128),
            
            VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = unchecked((uint)256),
            
            VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = unchecked((uint)512),
            
            VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = unchecked((uint)1024),
            
            VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = unchecked((uint)16),
            
            VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = unchecked((uint)32),
            
            VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = unchecked((uint)64),
            
            VK_IMAGE_ASPECT_NONE_KHR = unchecked((uint)0),
            
            VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_COLOR_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_COLOR_BIT;
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_DEPTH_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_DEPTH_BIT;
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_STENCIL_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_STENCIL_BIT;
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_METADATA_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_METADATA_BIT;
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_PLANE_0_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_0_BIT;
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_PLANE_1_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_1_BIT;
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_PLANE_2_BIT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_2_BIT;
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_NONE = VkImageAspectFlagBits.VK_IMAGE_ASPECT_NONE;
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT;
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT;
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT;
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT;
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_0_BIT_KHR;
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_1_BIT_KHR;
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_2_BIT_KHR;
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_NONE_KHR = VkImageAspectFlagBits.VK_IMAGE_ASPECT_NONE_KHR;
        
        public const vulkan.VkImageAspectFlagBits VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = VkImageAspectFlagBits.VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM;
        
        public enum VkFormatFeatureFlagBits : uint
        {
            VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = unchecked((uint)1),
            
            VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = unchecked((uint)2),
            
            VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = unchecked((uint)4),
            
            VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = unchecked((uint)8),
            
            VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = unchecked((uint)16),
            
            VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = unchecked((uint)32),
            
            VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = unchecked((uint)64),
            
            VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = unchecked((uint)128),
            
            VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = unchecked((uint)256),
            
            VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = unchecked((uint)512),
            
            VK_FORMAT_FEATURE_BLIT_SRC_BIT = unchecked((uint)1024),
            
            VK_FORMAT_FEATURE_BLIT_DST_BIT = unchecked((uint)2048),
            
            VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = unchecked((uint)4096),
            
            VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = unchecked((uint)16384),
            
            VK_FORMAT_FEATURE_TRANSFER_DST_BIT = unchecked((uint)32768),
            
            VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = unchecked((uint)131072),
            
            VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = unchecked((uint)262144),
            
            VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = unchecked((uint)524288),
            
            VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = unchecked((uint)1048576),
            
            VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = unchecked((uint)2097152),
            
            VK_FORMAT_FEATURE_DISJOINT_BIT = unchecked((uint)4194304),
            
            VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = unchecked((uint)8388608),
            
            VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = unchecked((uint)65536),
            
            VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR = unchecked((uint)33554432),
            
            VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR = unchecked((uint)67108864),
            
            VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = unchecked((uint)536870912),
            
            VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = unchecked((uint)8192),
            
            VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = unchecked((uint)16777216),
            
            VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = unchecked((uint)1073741824),
            
            VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR = unchecked((uint)134217728),
            
            VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR = unchecked((uint)268435456),
            
            VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = unchecked((uint)8192),
            
            VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = unchecked((uint)16384),
            
            VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = unchecked((uint)32768),
            
            VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = unchecked((uint)65536),
            
            VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = unchecked((uint)131072),
            
            VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = unchecked((uint)262144),
            
            VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = unchecked((uint)524288),
            
            VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = unchecked((uint)1048576),
            
            VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = unchecked((uint)2097152),
            
            VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = unchecked((uint)4194304),
            
            VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = unchecked((uint)8388608),
            
            VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_BLIT_SRC_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_BLIT_SRC_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_BLIT_DST_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_BLIT_DST_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_SRC_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_TRANSFER_DST_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_DST_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_DISJOINT_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DISJOINT_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DISJOINT_BIT_KHR;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR;
        
        public const vulkan.VkFormatFeatureFlagBits VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM;
        
        public enum VkImageCreateFlagBits : uint
        {
            VK_IMAGE_CREATE_SPARSE_BINDING_BIT = unchecked((uint)1),
            
            VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = unchecked((uint)2),
            
            VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = unchecked((uint)4),
            
            VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = unchecked((uint)8),
            
            VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = unchecked((uint)16),
            
            VK_IMAGE_CREATE_ALIAS_BIT = unchecked((uint)1024),
            
            VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = unchecked((uint)64),
            
            VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = unchecked((uint)32),
            
            VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = unchecked((uint)128),
            
            VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = unchecked((uint)256),
            
            VK_IMAGE_CREATE_PROTECTED_BIT = unchecked((uint)2048),
            
            VK_IMAGE_CREATE_DISJOINT_BIT = unchecked((uint)512),
            
            VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = unchecked((uint)8192),
            
            VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = unchecked((uint)4096),
            
            VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = unchecked((uint)16384),
            
            VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = unchecked((uint)65536),
            
            VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT = unchecked((uint)262144),
            
            VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT = unchecked((uint)131072),
            
            VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = unchecked((uint)32768),
            
            VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = unchecked((uint)64),
            
            VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = unchecked((uint)32),
            
            VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = unchecked((uint)128),
            
            VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = unchecked((uint)256),
            
            VK_IMAGE_CREATE_DISJOINT_BIT_KHR = unchecked((uint)512),
            
            VK_IMAGE_CREATE_ALIAS_BIT_KHR = unchecked((uint)1024),
            
            VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_SPARSE_BINDING_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_BINDING_BIT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_ALIASED_BIT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_ALIAS_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_ALIAS_BIT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_EXTENDED_USAGE_BIT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_PROTECTED_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_PROTECTED_BIT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_DISJOINT_BIT = VkImageCreateFlagBits.VK_IMAGE_CREATE_DISJOINT_BIT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = VkImageCreateFlagBits.VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = VkImageCreateFlagBits.VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = VkImageCreateFlagBits.VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = VkImageCreateFlagBits.VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT = VkImageCreateFlagBits.VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT = VkImageCreateFlagBits.VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = VkImageCreateFlagBits.VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VkImageCreateFlagBits.VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = VkImageCreateFlagBits.VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = VkImageCreateFlagBits.VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = VkImageCreateFlagBits.VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_DISJOINT_BIT_KHR = VkImageCreateFlagBits.VK_IMAGE_CREATE_DISJOINT_BIT_KHR;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_ALIAS_BIT_KHR = VkImageCreateFlagBits.VK_IMAGE_CREATE_ALIAS_BIT_KHR;
        
        public const vulkan.VkImageCreateFlagBits VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = VkImageCreateFlagBits.VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkSampleCountFlagBits : uint
        {
            VK_SAMPLE_COUNT_1_BIT = unchecked((uint)1),
            
            VK_SAMPLE_COUNT_2_BIT = unchecked((uint)2),
            
            VK_SAMPLE_COUNT_4_BIT = unchecked((uint)4),
            
            VK_SAMPLE_COUNT_8_BIT = unchecked((uint)8),
            
            VK_SAMPLE_COUNT_16_BIT = unchecked((uint)16),
            
            VK_SAMPLE_COUNT_32_BIT = unchecked((uint)32),
            
            VK_SAMPLE_COUNT_64_BIT = unchecked((uint)64),
            
            VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSampleCountFlagBits VK_SAMPLE_COUNT_1_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_1_BIT;
        
        public const vulkan.VkSampleCountFlagBits VK_SAMPLE_COUNT_2_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_2_BIT;
        
        public const vulkan.VkSampleCountFlagBits VK_SAMPLE_COUNT_4_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_4_BIT;
        
        public const vulkan.VkSampleCountFlagBits VK_SAMPLE_COUNT_8_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_8_BIT;
        
        public const vulkan.VkSampleCountFlagBits VK_SAMPLE_COUNT_16_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_16_BIT;
        
        public const vulkan.VkSampleCountFlagBits VK_SAMPLE_COUNT_32_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_32_BIT;
        
        public const vulkan.VkSampleCountFlagBits VK_SAMPLE_COUNT_64_BIT = VkSampleCountFlagBits.VK_SAMPLE_COUNT_64_BIT;
        
        public const vulkan.VkSampleCountFlagBits VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = VkSampleCountFlagBits.VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM;
        
        public enum VkImageUsageFlagBits : uint
        {
            VK_IMAGE_USAGE_TRANSFER_SRC_BIT = unchecked((uint)1),
            
            VK_IMAGE_USAGE_TRANSFER_DST_BIT = unchecked((uint)2),
            
            VK_IMAGE_USAGE_SAMPLED_BIT = unchecked((uint)4),
            
            VK_IMAGE_USAGE_STORAGE_BIT = unchecked((uint)8),
            
            VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = unchecked((uint)16),
            
            VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = unchecked((uint)32),
            
            VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = unchecked((uint)64),
            
            VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = unchecked((uint)128),
            
            VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR = unchecked((uint)1024),
            
            VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR = unchecked((uint)2048),
            
            VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = unchecked((uint)4096),
            
            VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = unchecked((uint)512),
            
            VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = unchecked((uint)256),
            
            VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT = unchecked((uint)4194304),
            
            VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR = unchecked((uint)8192),
            
            VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = unchecked((uint)16384),
            
            VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR = unchecked((uint)32768),
            
            VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = unchecked((uint)524288),
            
            VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = unchecked((uint)262144),
            
            VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM = unchecked((uint)1048576),
            
            VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM = unchecked((uint)2097152),
            
            VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = unchecked((uint)256),
            
            VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_TRANSFER_SRC_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSFER_SRC_BIT;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_TRANSFER_DST_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSFER_DST_BIT;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_SAMPLED_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_SAMPLED_BIT;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_STORAGE_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_STORAGE_BIT;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = VkImageUsageFlagBits.VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR = VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR = VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = VkImageUsageFlagBits.VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VkImageUsageFlagBits.VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT = VkImageUsageFlagBits.VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR = VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR = VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = VkImageUsageFlagBits.VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = VkImageUsageFlagBits.VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM = VkImageUsageFlagBits.VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM = VkImageUsageFlagBits.VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = VkImageUsageFlagBits.VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV;
        
        public const vulkan.VkImageUsageFlagBits VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = VkImageUsageFlagBits.VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM;
        
        public enum VkInstanceCreateFlagBits : uint
        {
            VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR = unchecked((uint)1),
            
            VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkInstanceCreateFlagBits VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR = VkInstanceCreateFlagBits.VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR;
        
        public const vulkan.VkInstanceCreateFlagBits VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM = VkInstanceCreateFlagBits.VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkMemoryHeapFlagBits : uint
        {
            VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = unchecked((uint)1),
            
            VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = unchecked((uint)2),
            
            VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = unchecked((uint)2),
            
            VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkMemoryHeapFlagBits VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = VkMemoryHeapFlagBits.VK_MEMORY_HEAP_DEVICE_LOCAL_BIT;
        
        public const vulkan.VkMemoryHeapFlagBits VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = VkMemoryHeapFlagBits.VK_MEMORY_HEAP_MULTI_INSTANCE_BIT;
        
        public const vulkan.VkMemoryHeapFlagBits VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VkMemoryHeapFlagBits.VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR;
        
        public const vulkan.VkMemoryHeapFlagBits VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = VkMemoryHeapFlagBits.VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM;
        
        public enum VkMemoryPropertyFlagBits : uint
        {
            VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = unchecked((uint)1),
            
            VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = unchecked((uint)2),
            
            VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = unchecked((uint)4),
            
            VK_MEMORY_PROPERTY_HOST_CACHED_BIT = unchecked((uint)8),
            
            VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = unchecked((uint)16),
            
            VK_MEMORY_PROPERTY_PROTECTED_BIT = unchecked((uint)32),
            
            VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = unchecked((uint)64),
            
            VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = unchecked((uint)128),
            
            VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = unchecked((uint)256),
            
            VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkMemoryPropertyFlagBits VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT;
        
        public const vulkan.VkMemoryPropertyFlagBits VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT;
        
        public const vulkan.VkMemoryPropertyFlagBits VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_COHERENT_BIT;
        
        public const vulkan.VkMemoryPropertyFlagBits VK_MEMORY_PROPERTY_HOST_CACHED_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_CACHED_BIT;
        
        public const vulkan.VkMemoryPropertyFlagBits VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT;
        
        public const vulkan.VkMemoryPropertyFlagBits VK_MEMORY_PROPERTY_PROTECTED_BIT = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_PROTECTED_BIT;
        
        public const vulkan.VkMemoryPropertyFlagBits VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD;
        
        public const vulkan.VkMemoryPropertyFlagBits VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD;
        
        public const vulkan.VkMemoryPropertyFlagBits VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV;
        
        public const vulkan.VkMemoryPropertyFlagBits VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM;
        
        public enum VkQueueFlagBits : uint
        {
            VK_QUEUE_GRAPHICS_BIT = unchecked((uint)1),
            
            VK_QUEUE_COMPUTE_BIT = unchecked((uint)2),
            
            VK_QUEUE_TRANSFER_BIT = unchecked((uint)4),
            
            VK_QUEUE_SPARSE_BINDING_BIT = unchecked((uint)8),
            
            VK_QUEUE_PROTECTED_BIT = unchecked((uint)16),
            
            VK_QUEUE_VIDEO_DECODE_BIT_KHR = unchecked((uint)32),
            
            VK_QUEUE_VIDEO_ENCODE_BIT_KHR = unchecked((uint)64),
            
            VK_QUEUE_OPTICAL_FLOW_BIT_NV = unchecked((uint)256),
            
            VK_QUEUE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkQueueFlagBits VK_QUEUE_GRAPHICS_BIT = VkQueueFlagBits.VK_QUEUE_GRAPHICS_BIT;
        
        public const vulkan.VkQueueFlagBits VK_QUEUE_COMPUTE_BIT = VkQueueFlagBits.VK_QUEUE_COMPUTE_BIT;
        
        public const vulkan.VkQueueFlagBits VK_QUEUE_TRANSFER_BIT = VkQueueFlagBits.VK_QUEUE_TRANSFER_BIT;
        
        public const vulkan.VkQueueFlagBits VK_QUEUE_SPARSE_BINDING_BIT = VkQueueFlagBits.VK_QUEUE_SPARSE_BINDING_BIT;
        
        public const vulkan.VkQueueFlagBits VK_QUEUE_PROTECTED_BIT = VkQueueFlagBits.VK_QUEUE_PROTECTED_BIT;
        
        public const vulkan.VkQueueFlagBits VK_QUEUE_VIDEO_DECODE_BIT_KHR = VkQueueFlagBits.VK_QUEUE_VIDEO_DECODE_BIT_KHR;
        
        public const vulkan.VkQueueFlagBits VK_QUEUE_VIDEO_ENCODE_BIT_KHR = VkQueueFlagBits.VK_QUEUE_VIDEO_ENCODE_BIT_KHR;
        
        public const vulkan.VkQueueFlagBits VK_QUEUE_OPTICAL_FLOW_BIT_NV = VkQueueFlagBits.VK_QUEUE_OPTICAL_FLOW_BIT_NV;
        
        public const vulkan.VkQueueFlagBits VK_QUEUE_FLAG_BITS_MAX_ENUM = VkQueueFlagBits.VK_QUEUE_FLAG_BITS_MAX_ENUM;
        
        public enum VkDeviceQueueCreateFlagBits : uint
        {
            VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = unchecked((uint)1),
            
            VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDeviceQueueCreateFlagBits VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = VkDeviceQueueCreateFlagBits.VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT;
        
        public const vulkan.VkDeviceQueueCreateFlagBits VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = VkDeviceQueueCreateFlagBits.VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkPipelineStageFlagBits : uint
        {
            VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = unchecked((uint)1),
            
            VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = unchecked((uint)2),
            
            VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = unchecked((uint)4),
            
            VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = unchecked((uint)8),
            
            VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = unchecked((uint)16),
            
            VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = unchecked((uint)32),
            
            VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = unchecked((uint)64),
            
            VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = unchecked((uint)128),
            
            VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = unchecked((uint)256),
            
            VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = unchecked((uint)512),
            
            VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = unchecked((uint)1024),
            
            VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = unchecked((uint)2048),
            
            VK_PIPELINE_STAGE_TRANSFER_BIT = unchecked((uint)4096),
            
            VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = unchecked((uint)8192),
            
            VK_PIPELINE_STAGE_HOST_BIT = unchecked((uint)16384),
            
            VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = unchecked((uint)32768),
            
            VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = unchecked((uint)65536),
            
            VK_PIPELINE_STAGE_NONE = unchecked((uint)0),
            
            VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = unchecked((uint)16777216),
            
            VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = unchecked((uint)262144),
            
            VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = unchecked((uint)33554432),
            
            VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = unchecked((uint)2097152),
            
            VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = unchecked((uint)8388608),
            
            VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = unchecked((uint)4194304),
            
            VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = unchecked((uint)131072),
            
            VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT = unchecked((uint)524288),
            
            VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT = unchecked((uint)1048576),
            
            VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = unchecked((uint)4194304),
            
            VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = unchecked((uint)2097152),
            
            VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = unchecked((uint)33554432),
            
            VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = unchecked((uint)524288),
            
            VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = unchecked((uint)1048576),
            
            VK_PIPELINE_STAGE_NONE_KHR = unchecked((uint)0),
            
            VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_VERTEX_INPUT_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_VERTEX_SHADER_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_TRANSFER_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TRANSFER_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_HOST_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_HOST_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ALL_COMMANDS_BIT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_NONE = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_NONE;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_NONE_KHR = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_NONE_KHR;
        
        public const vulkan.VkPipelineStageFlagBits VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM;
        
        public enum VkSparseMemoryBindFlagBits : uint
        {
            VK_SPARSE_MEMORY_BIND_METADATA_BIT = unchecked((uint)1),
            
            VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSparseMemoryBindFlagBits VK_SPARSE_MEMORY_BIND_METADATA_BIT = VkSparseMemoryBindFlagBits.VK_SPARSE_MEMORY_BIND_METADATA_BIT;
        
        public const vulkan.VkSparseMemoryBindFlagBits VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = VkSparseMemoryBindFlagBits.VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM;
        
        public enum VkSparseImageFormatFlagBits : uint
        {
            VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = unchecked((uint)1),
            
            VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = unchecked((uint)2),
            
            VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = unchecked((uint)4),
            
            VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSparseImageFormatFlagBits VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT;
        
        public const vulkan.VkSparseImageFormatFlagBits VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT;
        
        public const vulkan.VkSparseImageFormatFlagBits VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT;
        
        public const vulkan.VkSparseImageFormatFlagBits VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM;
        
        public enum VkFenceCreateFlagBits : uint
        {
            VK_FENCE_CREATE_SIGNALED_BIT = unchecked((uint)1),
            
            VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkFenceCreateFlagBits VK_FENCE_CREATE_SIGNALED_BIT = VkFenceCreateFlagBits.VK_FENCE_CREATE_SIGNALED_BIT;
        
        public const vulkan.VkFenceCreateFlagBits VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = VkFenceCreateFlagBits.VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkEventCreateFlagBits : uint
        {
            VK_EVENT_CREATE_DEVICE_ONLY_BIT = unchecked((uint)1),
            
            VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = unchecked((uint)1),
            
            VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkEventCreateFlagBits VK_EVENT_CREATE_DEVICE_ONLY_BIT = VkEventCreateFlagBits.VK_EVENT_CREATE_DEVICE_ONLY_BIT;
        
        public const vulkan.VkEventCreateFlagBits VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = VkEventCreateFlagBits.VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR;
        
        public const vulkan.VkEventCreateFlagBits VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = VkEventCreateFlagBits.VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkQueryPipelineStatisticFlagBits : uint
        {
            VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = unchecked((uint)1),
            
            VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = unchecked((uint)2),
            
            VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = unchecked((uint)4),
            
            VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = unchecked((uint)8),
            
            VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = unchecked((uint)16),
            
            VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = unchecked((uint)32),
            
            VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = unchecked((uint)64),
            
            VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = unchecked((uint)128),
            
            VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = unchecked((uint)256),
            
            VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = unchecked((uint)512),
            
            VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = unchecked((uint)1024),
            
            VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT = unchecked((uint)2048),
            
            VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT = unchecked((uint)4096),
            
            VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI = unchecked((uint)8192),
            
            VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkQueryPipelineStatisticFlagBits VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT;
        
        public const vulkan.VkQueryPipelineStatisticFlagBits VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT;
        
        public const vulkan.VkQueryPipelineStatisticFlagBits VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT;
        
        public const vulkan.VkQueryPipelineStatisticFlagBits VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT;
        
        public const vulkan.VkQueryPipelineStatisticFlagBits VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT;
        
        public const vulkan.VkQueryPipelineStatisticFlagBits VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT;
        
        public const vulkan.VkQueryPipelineStatisticFlagBits VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT;
        
        public const vulkan.VkQueryPipelineStatisticFlagBits VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT;
        
        public const vulkan.VkQueryPipelineStatisticFlagBits VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT;
        
        public const vulkan.VkQueryPipelineStatisticFlagBits VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT;
        
        public const vulkan.VkQueryPipelineStatisticFlagBits VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT;
        
        public const vulkan.VkQueryPipelineStatisticFlagBits VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT;
        
        public const vulkan.VkQueryPipelineStatisticFlagBits VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT;
        
        public const vulkan.VkQueryPipelineStatisticFlagBits VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI;
        
        public const vulkan.VkQueryPipelineStatisticFlagBits VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM;
        
        public enum VkQueryResultFlagBits : uint
        {
            VK_QUERY_RESULT_64_BIT = unchecked((uint)1),
            
            VK_QUERY_RESULT_WAIT_BIT = unchecked((uint)2),
            
            VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = unchecked((uint)4),
            
            VK_QUERY_RESULT_PARTIAL_BIT = unchecked((uint)8),
            
            VK_QUERY_RESULT_WITH_STATUS_BIT_KHR = unchecked((uint)16),
            
            VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkQueryResultFlagBits VK_QUERY_RESULT_64_BIT = VkQueryResultFlagBits.VK_QUERY_RESULT_64_BIT;
        
        public const vulkan.VkQueryResultFlagBits VK_QUERY_RESULT_WAIT_BIT = VkQueryResultFlagBits.VK_QUERY_RESULT_WAIT_BIT;
        
        public const vulkan.VkQueryResultFlagBits VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = VkQueryResultFlagBits.VK_QUERY_RESULT_WITH_AVAILABILITY_BIT;
        
        public const vulkan.VkQueryResultFlagBits VK_QUERY_RESULT_PARTIAL_BIT = VkQueryResultFlagBits.VK_QUERY_RESULT_PARTIAL_BIT;
        
        public const vulkan.VkQueryResultFlagBits VK_QUERY_RESULT_WITH_STATUS_BIT_KHR = VkQueryResultFlagBits.VK_QUERY_RESULT_WITH_STATUS_BIT_KHR;
        
        public const vulkan.VkQueryResultFlagBits VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = VkQueryResultFlagBits.VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM;
        
        public enum VkBufferCreateFlagBits : uint
        {
            VK_BUFFER_CREATE_SPARSE_BINDING_BIT = unchecked((uint)1),
            
            VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = unchecked((uint)2),
            
            VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = unchecked((uint)4),
            
            VK_BUFFER_CREATE_PROTECTED_BIT = unchecked((uint)8),
            
            VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = unchecked((uint)16),
            
            VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = unchecked((uint)32),
            
            VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = unchecked((uint)16),
            
            VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = unchecked((uint)16),
            
            VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkBufferCreateFlagBits VK_BUFFER_CREATE_SPARSE_BINDING_BIT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_BINDING_BIT;
        
        public const vulkan.VkBufferCreateFlagBits VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT;
        
        public const vulkan.VkBufferCreateFlagBits VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_ALIASED_BIT;
        
        public const vulkan.VkBufferCreateFlagBits VK_BUFFER_CREATE_PROTECTED_BIT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_PROTECTED_BIT;
        
        public const vulkan.VkBufferCreateFlagBits VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT;
        
        public const vulkan.VkBufferCreateFlagBits VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT;
        
        public const vulkan.VkBufferCreateFlagBits VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = VkBufferCreateFlagBits.VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT;
        
        public const vulkan.VkBufferCreateFlagBits VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VkBufferCreateFlagBits.VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR;
        
        public const vulkan.VkBufferCreateFlagBits VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = VkBufferCreateFlagBits.VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkBufferUsageFlagBits : uint
        {
            VK_BUFFER_USAGE_TRANSFER_SRC_BIT = unchecked((uint)1),
            
            VK_BUFFER_USAGE_TRANSFER_DST_BIT = unchecked((uint)2),
            
            VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = unchecked((uint)4),
            
            VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = unchecked((uint)8),
            
            VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = unchecked((uint)16),
            
            VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = unchecked((uint)32),
            
            VK_BUFFER_USAGE_INDEX_BUFFER_BIT = unchecked((uint)64),
            
            VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = unchecked((uint)128),
            
            VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = unchecked((uint)256),
            
            VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = unchecked((uint)131072),
            
            VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = unchecked((uint)8192),
            
            VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = unchecked((uint)16384),
            
            VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = unchecked((uint)2048),
            
            VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = unchecked((uint)4096),
            
            VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = unchecked((uint)512),
            
            VK_BUFFER_USAGE_EXECUTION_GRAPH_SCRATCH_BIT_AMDX = unchecked((uint)33554432),
            
            VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = unchecked((uint)524288),
            
            VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = unchecked((uint)1048576),
            
            VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = unchecked((uint)1024),
            
            VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR = unchecked((uint)32768),
            
            VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = unchecked((uint)65536),
            
            VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = unchecked((uint)2097152),
            
            VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = unchecked((uint)4194304),
            
            VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = unchecked((uint)67108864),
            
            VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = unchecked((uint)8388608),
            
            VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = unchecked((uint)16777216),
            
            VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = unchecked((uint)1024),
            
            VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = unchecked((uint)131072),
            
            VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = unchecked((uint)131072),
            
            VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_TRANSFER_SRC_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFER_SRC_BIT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_TRANSFER_DST_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFER_DST_BIT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_STORAGE_BUFFER_BIT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_INDEX_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_INDEX_BUFFER_BIT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_VERTEX_BUFFER_BIT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_EXECUTION_GRAPH_SCRATCH_BIT_AMDX = VkBufferUsageFlagBits.VK_BUFFER_USAGE_EXECUTION_GRAPH_SCRATCH_BIT_AMDX;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = VkBufferUsageFlagBits.VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = VkBufferUsageFlagBits.VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR = VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = VkBufferUsageFlagBits.VK_BUFFER_USAGE_RAY_TRACING_BIT_NV;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR;
        
        public const vulkan.VkBufferUsageFlagBits VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = VkBufferUsageFlagBits.VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM;
        
        public enum VkImageViewCreateFlagBits : uint
        {
            VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = unchecked((uint)1),
            
            VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = unchecked((uint)4),
            
            VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = unchecked((uint)2),
            
            VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkImageViewCreateFlagBits VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT;
        
        public const vulkan.VkImageViewCreateFlagBits VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT;
        
        public const vulkan.VkImageViewCreateFlagBits VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT;
        
        public const vulkan.VkImageViewCreateFlagBits VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkPipelineCacheCreateFlagBits : uint
        {
            VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = unchecked((uint)1),
            
            VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = unchecked((uint)1),
            
            VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPipelineCacheCreateFlagBits VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT;
        
        public const vulkan.VkPipelineCacheCreateFlagBits VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT;
        
        public const vulkan.VkPipelineCacheCreateFlagBits VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkColorComponentFlagBits : uint
        {
            VK_COLOR_COMPONENT_R_BIT = unchecked((uint)1),
            
            VK_COLOR_COMPONENT_G_BIT = unchecked((uint)2),
            
            VK_COLOR_COMPONENT_B_BIT = unchecked((uint)4),
            
            VK_COLOR_COMPONENT_A_BIT = unchecked((uint)8),
            
            VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkColorComponentFlagBits VK_COLOR_COMPONENT_R_BIT = VkColorComponentFlagBits.VK_COLOR_COMPONENT_R_BIT;
        
        public const vulkan.VkColorComponentFlagBits VK_COLOR_COMPONENT_G_BIT = VkColorComponentFlagBits.VK_COLOR_COMPONENT_G_BIT;
        
        public const vulkan.VkColorComponentFlagBits VK_COLOR_COMPONENT_B_BIT = VkColorComponentFlagBits.VK_COLOR_COMPONENT_B_BIT;
        
        public const vulkan.VkColorComponentFlagBits VK_COLOR_COMPONENT_A_BIT = VkColorComponentFlagBits.VK_COLOR_COMPONENT_A_BIT;
        
        public const vulkan.VkColorComponentFlagBits VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = VkColorComponentFlagBits.VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM;
        
        public enum VkPipelineCreateFlagBits : uint
        {
            VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = unchecked((uint)1),
            
            VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = unchecked((uint)2),
            
            VK_PIPELINE_CREATE_DERIVATIVE_BIT = unchecked((uint)4),
            
            VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = unchecked((uint)8),
            
            VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = unchecked((uint)16),
            
            VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = unchecked((uint)256),
            
            VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = unchecked((uint)512),
            
            VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = unchecked((uint)2097152),
            
            VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = unchecked((uint)4194304),
            
            VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = unchecked((uint)16384),
            
            VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = unchecked((uint)32768),
            
            VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = unchecked((uint)65536),
            
            VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = unchecked((uint)131072),
            
            VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = unchecked((uint)4096),
            
            VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = unchecked((uint)8192),
            
            VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = unchecked((uint)524288),
            
            VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = unchecked((uint)32),
            
            VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = unchecked((uint)64),
            
            VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = unchecked((uint)128),
            
            VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = unchecked((uint)262144),
            
            VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = unchecked((uint)2048),
            
            VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = unchecked((uint)536870912),
            
            VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = unchecked((uint)8388608),
            
            VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = unchecked((uint)1024),
            
            VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = unchecked((uint)1048576),
            
            VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = unchecked((uint)33554432),
            
            VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = unchecked((uint)67108864),
            
            VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = unchecked((uint)16777216),
            
            VK_PIPELINE_CREATE_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV = unchecked((uint)268435456),
            
            VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT = unchecked((uint)134217728),
            
            VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT = unchecked((uint)1073741824),
            
            VK_PIPELINE_CREATE_DISPATCH_BASE = unchecked((uint)16),
            
            VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = unchecked((uint)2097152),
            
            VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = unchecked((uint)4194304),
            
            VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = unchecked((uint)8),
            
            VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = unchecked((uint)16),
            
            VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = unchecked((uint)256),
            
            VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = unchecked((uint)512),
            
            VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_DERIVATIVE_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DERIVATIVE_BIT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE_BIT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_LIBRARY_BIT_KHR;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_DISPATCH_BASE = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE_KHR;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT;
        
        public const vulkan.VkPipelineCreateFlagBits VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkPipelineShaderStageCreateFlagBits : uint
        {
            VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = unchecked((uint)1),
            
            VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = unchecked((uint)2),
            
            VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = unchecked((uint)1),
            
            VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = unchecked((uint)2),
            
            VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPipelineShaderStageCreateFlagBits VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT;
        
        public const vulkan.VkPipelineShaderStageCreateFlagBits VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT;
        
        public const vulkan.VkPipelineShaderStageCreateFlagBits VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT;
        
        public const vulkan.VkPipelineShaderStageCreateFlagBits VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT;
        
        public const vulkan.VkPipelineShaderStageCreateFlagBits VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkShaderStageFlagBits : uint
        {
            VK_SHADER_STAGE_VERTEX_BIT = unchecked((uint)1),
            
            VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = unchecked((uint)2),
            
            VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = unchecked((uint)4),
            
            VK_SHADER_STAGE_GEOMETRY_BIT = unchecked((uint)8),
            
            VK_SHADER_STAGE_FRAGMENT_BIT = unchecked((uint)16),
            
            VK_SHADER_STAGE_COMPUTE_BIT = unchecked((uint)32),
            
            VK_SHADER_STAGE_ALL_GRAPHICS = unchecked((uint)31),
            
            VK_SHADER_STAGE_ALL = unchecked((uint)2147483647),
            
            VK_SHADER_STAGE_RAYGEN_BIT_KHR = unchecked((uint)256),
            
            VK_SHADER_STAGE_ANY_HIT_BIT_KHR = unchecked((uint)512),
            
            VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = unchecked((uint)1024),
            
            VK_SHADER_STAGE_MISS_BIT_KHR = unchecked((uint)2048),
            
            VK_SHADER_STAGE_INTERSECTION_BIT_KHR = unchecked((uint)4096),
            
            VK_SHADER_STAGE_CALLABLE_BIT_KHR = unchecked((uint)8192),
            
            VK_SHADER_STAGE_TASK_BIT_EXT = unchecked((uint)64),
            
            VK_SHADER_STAGE_MESH_BIT_EXT = unchecked((uint)128),
            
            VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = unchecked((uint)16384),
            
            VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI = unchecked((uint)524288),
            
            VK_SHADER_STAGE_RAYGEN_BIT_NV = unchecked((uint)256),
            
            VK_SHADER_STAGE_ANY_HIT_BIT_NV = unchecked((uint)512),
            
            VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = unchecked((uint)1024),
            
            VK_SHADER_STAGE_MISS_BIT_NV = unchecked((uint)2048),
            
            VK_SHADER_STAGE_INTERSECTION_BIT_NV = unchecked((uint)4096),
            
            VK_SHADER_STAGE_CALLABLE_BIT_NV = unchecked((uint)8192),
            
            VK_SHADER_STAGE_TASK_BIT_NV = unchecked((uint)64),
            
            VK_SHADER_STAGE_MESH_BIT_NV = unchecked((uint)128),
            
            VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_VERTEX_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_VERTEX_BIT;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_GEOMETRY_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_GEOMETRY_BIT;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_FRAGMENT_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_FRAGMENT_BIT;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_COMPUTE_BIT = VkShaderStageFlagBits.VK_SHADER_STAGE_COMPUTE_BIT;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_ALL_GRAPHICS = VkShaderStageFlagBits.VK_SHADER_STAGE_ALL_GRAPHICS;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_ALL = VkShaderStageFlagBits.VK_SHADER_STAGE_ALL;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_RAYGEN_BIT_KHR = VkShaderStageFlagBits.VK_SHADER_STAGE_RAYGEN_BIT_KHR;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_ANY_HIT_BIT_KHR = VkShaderStageFlagBits.VK_SHADER_STAGE_ANY_HIT_BIT_KHR;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = VkShaderStageFlagBits.VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_MISS_BIT_KHR = VkShaderStageFlagBits.VK_SHADER_STAGE_MISS_BIT_KHR;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_INTERSECTION_BIT_KHR = VkShaderStageFlagBits.VK_SHADER_STAGE_INTERSECTION_BIT_KHR;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_CALLABLE_BIT_KHR = VkShaderStageFlagBits.VK_SHADER_STAGE_CALLABLE_BIT_KHR;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_TASK_BIT_EXT = VkShaderStageFlagBits.VK_SHADER_STAGE_TASK_BIT_EXT;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_MESH_BIT_EXT = VkShaderStageFlagBits.VK_SHADER_STAGE_MESH_BIT_EXT;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = VkShaderStageFlagBits.VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI = VkShaderStageFlagBits.VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_RAYGEN_BIT_NV = VkShaderStageFlagBits.VK_SHADER_STAGE_RAYGEN_BIT_NV;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_ANY_HIT_BIT_NV = VkShaderStageFlagBits.VK_SHADER_STAGE_ANY_HIT_BIT_NV;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = VkShaderStageFlagBits.VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_MISS_BIT_NV = VkShaderStageFlagBits.VK_SHADER_STAGE_MISS_BIT_NV;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_INTERSECTION_BIT_NV = VkShaderStageFlagBits.VK_SHADER_STAGE_INTERSECTION_BIT_NV;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_CALLABLE_BIT_NV = VkShaderStageFlagBits.VK_SHADER_STAGE_CALLABLE_BIT_NV;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_TASK_BIT_NV = VkShaderStageFlagBits.VK_SHADER_STAGE_TASK_BIT_NV;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_MESH_BIT_NV = VkShaderStageFlagBits.VK_SHADER_STAGE_MESH_BIT_NV;
        
        public const vulkan.VkShaderStageFlagBits VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = VkShaderStageFlagBits.VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM;
        
        public enum VkCullModeFlagBits : uint
        {
            VK_CULL_MODE_NONE = unchecked((uint)0),
            
            VK_CULL_MODE_FRONT_BIT = unchecked((uint)1),
            
            VK_CULL_MODE_BACK_BIT = unchecked((uint)2),
            
            VK_CULL_MODE_FRONT_AND_BACK = unchecked((uint)3),
            
            VK_CULL_MODE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkCullModeFlagBits VK_CULL_MODE_NONE = VkCullModeFlagBits.VK_CULL_MODE_NONE;
        
        public const vulkan.VkCullModeFlagBits VK_CULL_MODE_FRONT_BIT = VkCullModeFlagBits.VK_CULL_MODE_FRONT_BIT;
        
        public const vulkan.VkCullModeFlagBits VK_CULL_MODE_BACK_BIT = VkCullModeFlagBits.VK_CULL_MODE_BACK_BIT;
        
        public const vulkan.VkCullModeFlagBits VK_CULL_MODE_FRONT_AND_BACK = VkCullModeFlagBits.VK_CULL_MODE_FRONT_AND_BACK;
        
        public const vulkan.VkCullModeFlagBits VK_CULL_MODE_FLAG_BITS_MAX_ENUM = VkCullModeFlagBits.VK_CULL_MODE_FLAG_BITS_MAX_ENUM;
        
        public enum VkPipelineDepthStencilStateCreateFlagBits : uint
        {
            VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = unchecked((uint)1),
            
            VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = unchecked((uint)2),
            
            VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = unchecked((uint)1),
            
            VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = unchecked((uint)2),
            
            VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPipelineDepthStencilStateCreateFlagBits VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT;
        
        public const vulkan.VkPipelineDepthStencilStateCreateFlagBits VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT;
        
        public const vulkan.VkPipelineDepthStencilStateCreateFlagBits VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM;
        
        public const vulkan.VkPipelineDepthStencilStateCreateFlagBits VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM;
        
        public const vulkan.VkPipelineDepthStencilStateCreateFlagBits VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkPipelineColorBlendStateCreateFlagBits : uint
        {
            VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = unchecked((uint)1),
            
            VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = unchecked((uint)1),
            
            VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPipelineColorBlendStateCreateFlagBits VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = VkPipelineColorBlendStateCreateFlagBits.VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT;
        
        public const vulkan.VkPipelineColorBlendStateCreateFlagBits VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = VkPipelineColorBlendStateCreateFlagBits.VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM;
        
        public const vulkan.VkPipelineColorBlendStateCreateFlagBits VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = VkPipelineColorBlendStateCreateFlagBits.VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkPipelineLayoutCreateFlagBits : uint
        {
            VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = unchecked((uint)2),
            
            VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPipelineLayoutCreateFlagBits VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = VkPipelineLayoutCreateFlagBits.VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT;
        
        public const vulkan.VkPipelineLayoutCreateFlagBits VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = VkPipelineLayoutCreateFlagBits.VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkSamplerCreateFlagBits : uint
        {
            VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = unchecked((uint)1),
            
            VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = unchecked((uint)2),
            
            VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = unchecked((uint)8),
            
            VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT = unchecked((uint)4),
            
            VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM = unchecked((uint)16),
            
            VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSamplerCreateFlagBits VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT;
        
        public const vulkan.VkSamplerCreateFlagBits VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT;
        
        public const vulkan.VkSamplerCreateFlagBits VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT;
        
        public const vulkan.VkSamplerCreateFlagBits VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT = VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT;
        
        public const vulkan.VkSamplerCreateFlagBits VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM = VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM;
        
        public const vulkan.VkSamplerCreateFlagBits VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkDescriptorPoolCreateFlagBits : uint
        {
            VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = unchecked((uint)1),
            
            VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = unchecked((uint)2),
            
            VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT = unchecked((uint)4),
            
            VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = unchecked((uint)2),
            
            VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = unchecked((uint)4),
            
            VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDescriptorPoolCreateFlagBits VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT;
        
        public const vulkan.VkDescriptorPoolCreateFlagBits VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT;
        
        public const vulkan.VkDescriptorPoolCreateFlagBits VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT;
        
        public const vulkan.VkDescriptorPoolCreateFlagBits VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT;
        
        public const vulkan.VkDescriptorPoolCreateFlagBits VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE;
        
        public const vulkan.VkDescriptorPoolCreateFlagBits VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkDescriptorSetLayoutCreateFlagBits : uint
        {
            VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = unchecked((uint)2),
            
            VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = unchecked((uint)1),
            
            VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = unchecked((uint)16),
            
            VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = unchecked((uint)32),
            
            VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV = unchecked((uint)128),
            
            VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT = unchecked((uint)4),
            
            VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = unchecked((uint)2),
            
            VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = unchecked((uint)4),
            
            VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDescriptorSetLayoutCreateFlagBits VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT;
        
        public const vulkan.VkDescriptorSetLayoutCreateFlagBits VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR;
        
        public const vulkan.VkDescriptorSetLayoutCreateFlagBits VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT;
        
        public const vulkan.VkDescriptorSetLayoutCreateFlagBits VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT;
        
        public const vulkan.VkDescriptorSetLayoutCreateFlagBits VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV;
        
        public const vulkan.VkDescriptorSetLayoutCreateFlagBits VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT;
        
        public const vulkan.VkDescriptorSetLayoutCreateFlagBits VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT;
        
        public const vulkan.VkDescriptorSetLayoutCreateFlagBits VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE;
        
        public const vulkan.VkDescriptorSetLayoutCreateFlagBits VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkAttachmentDescriptionFlagBits : uint
        {
            VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = unchecked((uint)1),
            
            VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkAttachmentDescriptionFlagBits VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = VkAttachmentDescriptionFlagBits.VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT;
        
        public const vulkan.VkAttachmentDescriptionFlagBits VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = VkAttachmentDescriptionFlagBits.VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM;
        
        public enum VkDependencyFlagBits : uint
        {
            VK_DEPENDENCY_BY_REGION_BIT = unchecked((uint)1),
            
            VK_DEPENDENCY_DEVICE_GROUP_BIT = unchecked((uint)4),
            
            VK_DEPENDENCY_VIEW_LOCAL_BIT = unchecked((uint)2),
            
            VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT = unchecked((uint)8),
            
            VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = unchecked((uint)2),
            
            VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = unchecked((uint)4),
            
            VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDependencyFlagBits VK_DEPENDENCY_BY_REGION_BIT = VkDependencyFlagBits.VK_DEPENDENCY_BY_REGION_BIT;
        
        public const vulkan.VkDependencyFlagBits VK_DEPENDENCY_DEVICE_GROUP_BIT = VkDependencyFlagBits.VK_DEPENDENCY_DEVICE_GROUP_BIT;
        
        public const vulkan.VkDependencyFlagBits VK_DEPENDENCY_VIEW_LOCAL_BIT = VkDependencyFlagBits.VK_DEPENDENCY_VIEW_LOCAL_BIT;
        
        public const vulkan.VkDependencyFlagBits VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT = VkDependencyFlagBits.VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT;
        
        public const vulkan.VkDependencyFlagBits VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = VkDependencyFlagBits.VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR;
        
        public const vulkan.VkDependencyFlagBits VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = VkDependencyFlagBits.VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR;
        
        public const vulkan.VkDependencyFlagBits VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = VkDependencyFlagBits.VK_DEPENDENCY_FLAG_BITS_MAX_ENUM;
        
        public enum VkFramebufferCreateFlagBits : uint
        {
            VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = unchecked((uint)1),
            
            VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = unchecked((uint)1),
            
            VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkFramebufferCreateFlagBits VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = VkFramebufferCreateFlagBits.VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT;
        
        public const vulkan.VkFramebufferCreateFlagBits VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = VkFramebufferCreateFlagBits.VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR;
        
        public const vulkan.VkFramebufferCreateFlagBits VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = VkFramebufferCreateFlagBits.VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkRenderPassCreateFlagBits : uint
        {
            VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = unchecked((uint)2),
            
            VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkRenderPassCreateFlagBits VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = VkRenderPassCreateFlagBits.VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM;
        
        public const vulkan.VkRenderPassCreateFlagBits VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = VkRenderPassCreateFlagBits.VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkSubpassDescriptionFlagBits : uint
        {
            VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = unchecked((uint)1),
            
            VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = unchecked((uint)2),
            
            VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = unchecked((uint)4),
            
            VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = unchecked((uint)8),
            
            VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = unchecked((uint)16),
            
            VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = unchecked((uint)32),
            
            VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = unchecked((uint)64),
            
            VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT = unchecked((uint)128),
            
            VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = unchecked((uint)16),
            
            VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = unchecked((uint)32),
            
            VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = unchecked((uint)64),
            
            VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSubpassDescriptionFlagBits VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX;
        
        public const vulkan.VkSubpassDescriptionFlagBits VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX;
        
        public const vulkan.VkSubpassDescriptionFlagBits VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM;
        
        public const vulkan.VkSubpassDescriptionFlagBits VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM;
        
        public const vulkan.VkSubpassDescriptionFlagBits VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT;
        
        public const vulkan.VkSubpassDescriptionFlagBits VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT;
        
        public const vulkan.VkSubpassDescriptionFlagBits VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT;
        
        public const vulkan.VkSubpassDescriptionFlagBits VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT;
        
        public const vulkan.VkSubpassDescriptionFlagBits VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM;
        
        public const vulkan.VkSubpassDescriptionFlagBits VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM;
        
        public const vulkan.VkSubpassDescriptionFlagBits VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM;
        
        public const vulkan.VkSubpassDescriptionFlagBits VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM;
        
        public enum VkCommandPoolCreateFlagBits : uint
        {
            VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = unchecked((uint)1),
            
            VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = unchecked((uint)2),
            
            VK_COMMAND_POOL_CREATE_PROTECTED_BIT = unchecked((uint)4),
            
            VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkCommandPoolCreateFlagBits VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_TRANSIENT_BIT;
        
        public const vulkan.VkCommandPoolCreateFlagBits VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT;
        
        public const vulkan.VkCommandPoolCreateFlagBits VK_COMMAND_POOL_CREATE_PROTECTED_BIT = VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_PROTECTED_BIT;
        
        public const vulkan.VkCommandPoolCreateFlagBits VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkCommandPoolResetFlagBits : uint
        {
            VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = unchecked((uint)1),
            
            VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkCommandPoolResetFlagBits VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = VkCommandPoolResetFlagBits.VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT;
        
        public const vulkan.VkCommandPoolResetFlagBits VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = VkCommandPoolResetFlagBits.VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM;
        
        public enum VkCommandBufferUsageFlagBits : uint
        {
            VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = unchecked((uint)1),
            
            VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = unchecked((uint)2),
            
            VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = unchecked((uint)4),
            
            VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkCommandBufferUsageFlagBits VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT;
        
        public const vulkan.VkCommandBufferUsageFlagBits VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT;
        
        public const vulkan.VkCommandBufferUsageFlagBits VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT;
        
        public const vulkan.VkCommandBufferUsageFlagBits VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM;
        
        public enum VkQueryControlFlagBits : uint
        {
            VK_QUERY_CONTROL_PRECISE_BIT = unchecked((uint)1),
            
            VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkQueryControlFlagBits VK_QUERY_CONTROL_PRECISE_BIT = VkQueryControlFlagBits.VK_QUERY_CONTROL_PRECISE_BIT;
        
        public const vulkan.VkQueryControlFlagBits VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = VkQueryControlFlagBits.VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM;
        
        public enum VkCommandBufferResetFlagBits : uint
        {
            VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = unchecked((uint)1),
            
            VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkCommandBufferResetFlagBits VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = VkCommandBufferResetFlagBits.VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT;
        
        public const vulkan.VkCommandBufferResetFlagBits VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = VkCommandBufferResetFlagBits.VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM;
        
        public enum VkStencilFaceFlagBits : uint
        {
            VK_STENCIL_FACE_FRONT_BIT = unchecked((uint)1),
            
            VK_STENCIL_FACE_BACK_BIT = unchecked((uint)2),
            
            VK_STENCIL_FACE_FRONT_AND_BACK = unchecked((uint)3),
            
            VK_STENCIL_FRONT_AND_BACK = unchecked((uint)3),
            
            VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkStencilFaceFlagBits VK_STENCIL_FACE_FRONT_BIT = VkStencilFaceFlagBits.VK_STENCIL_FACE_FRONT_BIT;
        
        public const vulkan.VkStencilFaceFlagBits VK_STENCIL_FACE_BACK_BIT = VkStencilFaceFlagBits.VK_STENCIL_FACE_BACK_BIT;
        
        public const vulkan.VkStencilFaceFlagBits VK_STENCIL_FACE_FRONT_AND_BACK = VkStencilFaceFlagBits.VK_STENCIL_FACE_FRONT_AND_BACK;
        
        public const vulkan.VkStencilFaceFlagBits VK_STENCIL_FRONT_AND_BACK = VkStencilFaceFlagBits.VK_STENCIL_FRONT_AND_BACK;
        
        public const vulkan.VkStencilFaceFlagBits VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = VkStencilFaceFlagBits.VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM;
        
        public enum VkPointClippingBehavior : uint
        {
            VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = unchecked((uint)0),
            
            VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = unchecked((uint)1),
            
            VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = unchecked((uint)0),
            
            VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = unchecked((uint)1),
            
            VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPointClippingBehavior VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES;
        
        public const vulkan.VkPointClippingBehavior VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY;
        
        public const vulkan.VkPointClippingBehavior VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR;
        
        public const vulkan.VkPointClippingBehavior VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR;
        
        public const vulkan.VkPointClippingBehavior VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM;
        
        public enum VkTessellationDomainOrigin : uint
        {
            VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = unchecked((uint)0),
            
            VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = unchecked((uint)1),
            
            VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = unchecked((uint)0),
            
            VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = unchecked((uint)1),
            
            VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkTessellationDomainOrigin VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT;
        
        public const vulkan.VkTessellationDomainOrigin VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT;
        
        public const vulkan.VkTessellationDomainOrigin VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR;
        
        public const vulkan.VkTessellationDomainOrigin VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR;
        
        public const vulkan.VkTessellationDomainOrigin VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM;
        
        public enum VkSamplerYcbcrModelConversion : uint
        {
            VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = unchecked((uint)0),
            
            VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = unchecked((uint)1),
            
            VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = unchecked((uint)2),
            
            VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = unchecked((uint)3),
            
            VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = unchecked((uint)4),
            
            VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = unchecked((uint)0),
            
            VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = unchecked((uint)1),
            
            VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = unchecked((uint)2),
            
            VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = unchecked((uint)3),
            
            VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = unchecked((uint)4),
            
            VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSamplerYcbcrModelConversion VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY;
        
        public const vulkan.VkSamplerYcbcrModelConversion VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY;
        
        public const vulkan.VkSamplerYcbcrModelConversion VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709;
        
        public const vulkan.VkSamplerYcbcrModelConversion VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601;
        
        public const vulkan.VkSamplerYcbcrModelConversion VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020;
        
        public const vulkan.VkSamplerYcbcrModelConversion VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR;
        
        public const vulkan.VkSamplerYcbcrModelConversion VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR;
        
        public const vulkan.VkSamplerYcbcrModelConversion VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR;
        
        public const vulkan.VkSamplerYcbcrModelConversion VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR;
        
        public const vulkan.VkSamplerYcbcrModelConversion VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR;
        
        public const vulkan.VkSamplerYcbcrModelConversion VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM;
        
        public enum VkSamplerYcbcrRange : uint
        {
            VK_SAMPLER_YCBCR_RANGE_ITU_FULL = unchecked((uint)0),
            
            VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = unchecked((uint)1),
            
            VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = unchecked((uint)0),
            
            VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = unchecked((uint)1),
            
            VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSamplerYcbcrRange VK_SAMPLER_YCBCR_RANGE_ITU_FULL = VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_FULL;
        
        public const vulkan.VkSamplerYcbcrRange VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_NARROW;
        
        public const vulkan.VkSamplerYcbcrRange VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR;
        
        public const vulkan.VkSamplerYcbcrRange VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR;
        
        public const vulkan.VkSamplerYcbcrRange VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_MAX_ENUM;
        
        public enum VkChromaLocation : uint
        {
            VK_CHROMA_LOCATION_COSITED_EVEN = unchecked((uint)0),
            
            VK_CHROMA_LOCATION_MIDPOINT = unchecked((uint)1),
            
            VK_CHROMA_LOCATION_COSITED_EVEN_KHR = unchecked((uint)0),
            
            VK_CHROMA_LOCATION_MIDPOINT_KHR = unchecked((uint)1),
            
            VK_CHROMA_LOCATION_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkChromaLocation VK_CHROMA_LOCATION_COSITED_EVEN = VkChromaLocation.VK_CHROMA_LOCATION_COSITED_EVEN;
        
        public const vulkan.VkChromaLocation VK_CHROMA_LOCATION_MIDPOINT = VkChromaLocation.VK_CHROMA_LOCATION_MIDPOINT;
        
        public const vulkan.VkChromaLocation VK_CHROMA_LOCATION_COSITED_EVEN_KHR = VkChromaLocation.VK_CHROMA_LOCATION_COSITED_EVEN_KHR;
        
        public const vulkan.VkChromaLocation VK_CHROMA_LOCATION_MIDPOINT_KHR = VkChromaLocation.VK_CHROMA_LOCATION_MIDPOINT_KHR;
        
        public const vulkan.VkChromaLocation VK_CHROMA_LOCATION_MAX_ENUM = VkChromaLocation.VK_CHROMA_LOCATION_MAX_ENUM;
        
        public enum VkDescriptorUpdateTemplateType : uint
        {
            VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = unchecked((uint)0),
            
            VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = unchecked((uint)1),
            
            VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = unchecked((uint)0),
            
            VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDescriptorUpdateTemplateType VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET;
        
        public const vulkan.VkDescriptorUpdateTemplateType VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR;
        
        public const vulkan.VkDescriptorUpdateTemplateType VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR;
        
        public const vulkan.VkDescriptorUpdateTemplateType VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM;
        
        public enum VkSubgroupFeatureFlagBits : uint
        {
            VK_SUBGROUP_FEATURE_BASIC_BIT = unchecked((uint)1),
            
            VK_SUBGROUP_FEATURE_VOTE_BIT = unchecked((uint)2),
            
            VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = unchecked((uint)4),
            
            VK_SUBGROUP_FEATURE_BALLOT_BIT = unchecked((uint)8),
            
            VK_SUBGROUP_FEATURE_SHUFFLE_BIT = unchecked((uint)16),
            
            VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = unchecked((uint)32),
            
            VK_SUBGROUP_FEATURE_CLUSTERED_BIT = unchecked((uint)64),
            
            VK_SUBGROUP_FEATURE_QUAD_BIT = unchecked((uint)128),
            
            VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = unchecked((uint)256),
            
            VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSubgroupFeatureFlagBits VK_SUBGROUP_FEATURE_BASIC_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_BASIC_BIT;
        
        public const vulkan.VkSubgroupFeatureFlagBits VK_SUBGROUP_FEATURE_VOTE_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_VOTE_BIT;
        
        public const vulkan.VkSubgroupFeatureFlagBits VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_ARITHMETIC_BIT;
        
        public const vulkan.VkSubgroupFeatureFlagBits VK_SUBGROUP_FEATURE_BALLOT_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_BALLOT_BIT;
        
        public const vulkan.VkSubgroupFeatureFlagBits VK_SUBGROUP_FEATURE_SHUFFLE_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_SHUFFLE_BIT;
        
        public const vulkan.VkSubgroupFeatureFlagBits VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT;
        
        public const vulkan.VkSubgroupFeatureFlagBits VK_SUBGROUP_FEATURE_CLUSTERED_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_CLUSTERED_BIT;
        
        public const vulkan.VkSubgroupFeatureFlagBits VK_SUBGROUP_FEATURE_QUAD_BIT = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_QUAD_BIT;
        
        public const vulkan.VkSubgroupFeatureFlagBits VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV;
        
        public const vulkan.VkSubgroupFeatureFlagBits VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM;
        
        public enum VkPeerMemoryFeatureFlagBits : uint
        {
            VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = unchecked((uint)1),
            
            VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = unchecked((uint)2),
            
            VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = unchecked((uint)4),
            
            VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = unchecked((uint)8),
            
            VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = unchecked((uint)1),
            
            VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = unchecked((uint)2),
            
            VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = unchecked((uint)4),
            
            VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = unchecked((uint)8),
            
            VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPeerMemoryFeatureFlagBits VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT;
        
        public const vulkan.VkPeerMemoryFeatureFlagBits VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_DST_BIT;
        
        public const vulkan.VkPeerMemoryFeatureFlagBits VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT;
        
        public const vulkan.VkPeerMemoryFeatureFlagBits VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT;
        
        public const vulkan.VkPeerMemoryFeatureFlagBits VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR;
        
        public const vulkan.VkPeerMemoryFeatureFlagBits VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR;
        
        public const vulkan.VkPeerMemoryFeatureFlagBits VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR;
        
        public const vulkan.VkPeerMemoryFeatureFlagBits VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR;
        
        public const vulkan.VkPeerMemoryFeatureFlagBits VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM;
        
        public enum VkMemoryAllocateFlagBits : uint
        {
            VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = unchecked((uint)1),
            
            VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = unchecked((uint)2),
            
            VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = unchecked((uint)4),
            
            VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = unchecked((uint)1),
            
            VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = unchecked((uint)2),
            
            VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = unchecked((uint)4),
            
            VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkMemoryAllocateFlagBits VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT;
        
        public const vulkan.VkMemoryAllocateFlagBits VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT;
        
        public const vulkan.VkMemoryAllocateFlagBits VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT;
        
        public const vulkan.VkMemoryAllocateFlagBits VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR;
        
        public const vulkan.VkMemoryAllocateFlagBits VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR;
        
        public const vulkan.VkMemoryAllocateFlagBits VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR;
        
        public const vulkan.VkMemoryAllocateFlagBits VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM;
        
        public enum VkExternalMemoryHandleTypeFlagBits : uint
        {
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = unchecked((uint)1),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = unchecked((uint)2),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = unchecked((uint)4),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = unchecked((uint)8),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = unchecked((uint)16),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = unchecked((uint)32),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = unchecked((uint)64),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = unchecked((uint)512),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = unchecked((uint)1024),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = unchecked((uint)128),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = unchecked((uint)256),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = unchecked((uint)2048),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = unchecked((uint)4096),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX = unchecked((uint)16384),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = unchecked((uint)1),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = unchecked((uint)2),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = unchecked((uint)4),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = unchecked((uint)8),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = unchecked((uint)16),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = unchecked((uint)32),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = unchecked((uint)64),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBits VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM;
        
        public enum VkExternalMemoryFeatureFlagBits : uint
        {
            VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = unchecked((uint)1),
            
            VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = unchecked((uint)2),
            
            VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = unchecked((uint)4),
            
            VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = unchecked((uint)1),
            
            VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = unchecked((uint)2),
            
            VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = unchecked((uint)4),
            
            VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkExternalMemoryFeatureFlagBits VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT;
        
        public const vulkan.VkExternalMemoryFeatureFlagBits VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT;
        
        public const vulkan.VkExternalMemoryFeatureFlagBits VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT;
        
        public const vulkan.VkExternalMemoryFeatureFlagBits VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR;
        
        public const vulkan.VkExternalMemoryFeatureFlagBits VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR;
        
        public const vulkan.VkExternalMemoryFeatureFlagBits VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR;
        
        public const vulkan.VkExternalMemoryFeatureFlagBits VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM;
        
        public enum VkExternalFenceHandleTypeFlagBits : uint
        {
            VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = unchecked((uint)1),
            
            VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = unchecked((uint)2),
            
            VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = unchecked((uint)4),
            
            VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = unchecked((uint)8),
            
            VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = unchecked((uint)1),
            
            VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = unchecked((uint)2),
            
            VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = unchecked((uint)4),
            
            VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = unchecked((uint)8),
            
            VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkExternalFenceHandleTypeFlagBits VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT;
        
        public const vulkan.VkExternalFenceHandleTypeFlagBits VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT;
        
        public const vulkan.VkExternalFenceHandleTypeFlagBits VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
        
        public const vulkan.VkExternalFenceHandleTypeFlagBits VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT;
        
        public const vulkan.VkExternalFenceHandleTypeFlagBits VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR;
        
        public const vulkan.VkExternalFenceHandleTypeFlagBits VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR;
        
        public const vulkan.VkExternalFenceHandleTypeFlagBits VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR;
        
        public const vulkan.VkExternalFenceHandleTypeFlagBits VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR;
        
        public const vulkan.VkExternalFenceHandleTypeFlagBits VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM;
        
        public enum VkExternalFenceFeatureFlagBits : uint
        {
            VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = unchecked((uint)1),
            
            VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = unchecked((uint)2),
            
            VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = unchecked((uint)1),
            
            VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = unchecked((uint)2),
            
            VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkExternalFenceFeatureFlagBits VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT;
        
        public const vulkan.VkExternalFenceFeatureFlagBits VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT;
        
        public const vulkan.VkExternalFenceFeatureFlagBits VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR;
        
        public const vulkan.VkExternalFenceFeatureFlagBits VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR;
        
        public const vulkan.VkExternalFenceFeatureFlagBits VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM;
        
        public enum VkFenceImportFlagBits : uint
        {
            VK_FENCE_IMPORT_TEMPORARY_BIT = unchecked((uint)1),
            
            VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = unchecked((uint)1),
            
            VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkFenceImportFlagBits VK_FENCE_IMPORT_TEMPORARY_BIT = VkFenceImportFlagBits.VK_FENCE_IMPORT_TEMPORARY_BIT;
        
        public const vulkan.VkFenceImportFlagBits VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = VkFenceImportFlagBits.VK_FENCE_IMPORT_TEMPORARY_BIT_KHR;
        
        public const vulkan.VkFenceImportFlagBits VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = VkFenceImportFlagBits.VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM;
        
        public enum VkSemaphoreImportFlagBits : uint
        {
            VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = unchecked((uint)1),
            
            VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = unchecked((uint)1),
            
            VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSemaphoreImportFlagBits VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_TEMPORARY_BIT;
        
        public const vulkan.VkSemaphoreImportFlagBits VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR;
        
        public const vulkan.VkSemaphoreImportFlagBits VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM;
        
        public enum VkExternalSemaphoreHandleTypeFlagBits : uint
        {
            VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = unchecked((uint)1),
            
            VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = unchecked((uint)2),
            
            VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = unchecked((uint)4),
            
            VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = unchecked((uint)8),
            
            VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = unchecked((uint)16),
            
            VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = unchecked((uint)128),
            
            VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = unchecked((uint)8),
            
            VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = unchecked((uint)1),
            
            VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = unchecked((uint)2),
            
            VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = unchecked((uint)4),
            
            VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = unchecked((uint)8),
            
            VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = unchecked((uint)16),
            
            VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkExternalSemaphoreHandleTypeFlagBits VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT;
        
        public const vulkan.VkExternalSemaphoreHandleTypeFlagBits VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT;
        
        public const vulkan.VkExternalSemaphoreHandleTypeFlagBits VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
        
        public const vulkan.VkExternalSemaphoreHandleTypeFlagBits VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT;
        
        public const vulkan.VkExternalSemaphoreHandleTypeFlagBits VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT;
        
        public const vulkan.VkExternalSemaphoreHandleTypeFlagBits VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA;
        
        public const vulkan.VkExternalSemaphoreHandleTypeFlagBits VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT;
        
        public const vulkan.VkExternalSemaphoreHandleTypeFlagBits VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR;
        
        public const vulkan.VkExternalSemaphoreHandleTypeFlagBits VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR;
        
        public const vulkan.VkExternalSemaphoreHandleTypeFlagBits VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR;
        
        public const vulkan.VkExternalSemaphoreHandleTypeFlagBits VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR;
        
        public const vulkan.VkExternalSemaphoreHandleTypeFlagBits VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR;
        
        public const vulkan.VkExternalSemaphoreHandleTypeFlagBits VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM;
        
        public enum VkExternalSemaphoreFeatureFlagBits : uint
        {
            VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = unchecked((uint)1),
            
            VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = unchecked((uint)2),
            
            VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = unchecked((uint)1),
            
            VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = unchecked((uint)2),
            
            VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkExternalSemaphoreFeatureFlagBits VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT;
        
        public const vulkan.VkExternalSemaphoreFeatureFlagBits VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT;
        
        public const vulkan.VkExternalSemaphoreFeatureFlagBits VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR;
        
        public const vulkan.VkExternalSemaphoreFeatureFlagBits VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR;
        
        public const vulkan.VkExternalSemaphoreFeatureFlagBits VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM;
        
        public enum VkDriverId : uint
        {
            VK_DRIVER_ID_AMD_PROPRIETARY = unchecked((uint)1),
            
            VK_DRIVER_ID_AMD_OPEN_SOURCE = unchecked((uint)2),
            
            VK_DRIVER_ID_MESA_RADV = unchecked((uint)3),
            
            VK_DRIVER_ID_NVIDIA_PROPRIETARY = unchecked((uint)4),
            
            VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = unchecked((uint)5),
            
            VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = unchecked((uint)6),
            
            VK_DRIVER_ID_IMAGINATION_PROPRIETARY = unchecked((uint)7),
            
            VK_DRIVER_ID_QUALCOMM_PROPRIETARY = unchecked((uint)8),
            
            VK_DRIVER_ID_ARM_PROPRIETARY = unchecked((uint)9),
            
            VK_DRIVER_ID_GOOGLE_SWIFTSHADER = unchecked((uint)10),
            
            VK_DRIVER_ID_GGP_PROPRIETARY = unchecked((uint)11),
            
            VK_DRIVER_ID_BROADCOM_PROPRIETARY = unchecked((uint)12),
            
            VK_DRIVER_ID_MESA_LLVMPIPE = unchecked((uint)13),
            
            VK_DRIVER_ID_MOLTENVK = unchecked((uint)14),
            
            VK_DRIVER_ID_COREAVI_PROPRIETARY = unchecked((uint)15),
            
            VK_DRIVER_ID_JUICE_PROPRIETARY = unchecked((uint)16),
            
            VK_DRIVER_ID_VERISILICON_PROPRIETARY = unchecked((uint)17),
            
            VK_DRIVER_ID_MESA_TURNIP = unchecked((uint)18),
            
            VK_DRIVER_ID_MESA_V3DV = unchecked((uint)19),
            
            VK_DRIVER_ID_MESA_PANVK = unchecked((uint)20),
            
            VK_DRIVER_ID_SAMSUNG_PROPRIETARY = unchecked((uint)21),
            
            VK_DRIVER_ID_MESA_VENUS = unchecked((uint)22),
            
            VK_DRIVER_ID_MESA_DOZEN = unchecked((uint)23),
            
            VK_DRIVER_ID_MESA_NVK = unchecked((uint)24),
            
            VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = unchecked((uint)25),
            
            VK_DRIVER_ID_AMD_PROPRIETARY_KHR = unchecked((uint)1),
            
            VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = unchecked((uint)2),
            
            VK_DRIVER_ID_MESA_RADV_KHR = unchecked((uint)3),
            
            VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = unchecked((uint)4),
            
            VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = unchecked((uint)5),
            
            VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = unchecked((uint)6),
            
            VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = unchecked((uint)7),
            
            VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = unchecked((uint)8),
            
            VK_DRIVER_ID_ARM_PROPRIETARY_KHR = unchecked((uint)9),
            
            VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = unchecked((uint)10),
            
            VK_DRIVER_ID_GGP_PROPRIETARY_KHR = unchecked((uint)11),
            
            VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = unchecked((uint)12),
            
            VK_DRIVER_ID_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDriverId VK_DRIVER_ID_AMD_PROPRIETARY = VkDriverId.VK_DRIVER_ID_AMD_PROPRIETARY;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_AMD_OPEN_SOURCE = VkDriverId.VK_DRIVER_ID_AMD_OPEN_SOURCE;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_MESA_RADV = VkDriverId.VK_DRIVER_ID_MESA_RADV;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_NVIDIA_PROPRIETARY = VkDriverId.VK_DRIVER_ID_NVIDIA_PROPRIETARY;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = VkDriverId.VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = VkDriverId.VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_IMAGINATION_PROPRIETARY = VkDriverId.VK_DRIVER_ID_IMAGINATION_PROPRIETARY;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_QUALCOMM_PROPRIETARY = VkDriverId.VK_DRIVER_ID_QUALCOMM_PROPRIETARY;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_ARM_PROPRIETARY = VkDriverId.VK_DRIVER_ID_ARM_PROPRIETARY;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_GOOGLE_SWIFTSHADER = VkDriverId.VK_DRIVER_ID_GOOGLE_SWIFTSHADER;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_GGP_PROPRIETARY = VkDriverId.VK_DRIVER_ID_GGP_PROPRIETARY;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_BROADCOM_PROPRIETARY = VkDriverId.VK_DRIVER_ID_BROADCOM_PROPRIETARY;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_MESA_LLVMPIPE = VkDriverId.VK_DRIVER_ID_MESA_LLVMPIPE;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_MOLTENVK = VkDriverId.VK_DRIVER_ID_MOLTENVK;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_COREAVI_PROPRIETARY = VkDriverId.VK_DRIVER_ID_COREAVI_PROPRIETARY;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_JUICE_PROPRIETARY = VkDriverId.VK_DRIVER_ID_JUICE_PROPRIETARY;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_VERISILICON_PROPRIETARY = VkDriverId.VK_DRIVER_ID_VERISILICON_PROPRIETARY;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_MESA_TURNIP = VkDriverId.VK_DRIVER_ID_MESA_TURNIP;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_MESA_V3DV = VkDriverId.VK_DRIVER_ID_MESA_V3DV;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_MESA_PANVK = VkDriverId.VK_DRIVER_ID_MESA_PANVK;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_SAMSUNG_PROPRIETARY = VkDriverId.VK_DRIVER_ID_SAMSUNG_PROPRIETARY;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_MESA_VENUS = VkDriverId.VK_DRIVER_ID_MESA_VENUS;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_MESA_DOZEN = VkDriverId.VK_DRIVER_ID_MESA_DOZEN;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_MESA_NVK = VkDriverId.VK_DRIVER_ID_MESA_NVK;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = VkDriverId.VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_AMD_PROPRIETARY_KHR = VkDriverId.VK_DRIVER_ID_AMD_PROPRIETARY_KHR;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = VkDriverId.VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_MESA_RADV_KHR = VkDriverId.VK_DRIVER_ID_MESA_RADV_KHR;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = VkDriverId.VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = VkDriverId.VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = VkDriverId.VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = VkDriverId.VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = VkDriverId.VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_ARM_PROPRIETARY_KHR = VkDriverId.VK_DRIVER_ID_ARM_PROPRIETARY_KHR;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = VkDriverId.VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_GGP_PROPRIETARY_KHR = VkDriverId.VK_DRIVER_ID_GGP_PROPRIETARY_KHR;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = VkDriverId.VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR;
        
        public const vulkan.VkDriverId VK_DRIVER_ID_MAX_ENUM = VkDriverId.VK_DRIVER_ID_MAX_ENUM;
        
        public enum VkShaderFloatControlsIndependence : uint
        {
            VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = unchecked((uint)0),
            
            VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = unchecked((uint)1),
            
            VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = unchecked((uint)2),
            
            VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = unchecked((uint)0),
            
            VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = unchecked((uint)1),
            
            VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = unchecked((uint)2),
            
            VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkShaderFloatControlsIndependence VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY;
        
        public const vulkan.VkShaderFloatControlsIndependence VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL;
        
        public const vulkan.VkShaderFloatControlsIndependence VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE;
        
        public const vulkan.VkShaderFloatControlsIndependence VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR;
        
        public const vulkan.VkShaderFloatControlsIndependence VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR;
        
        public const vulkan.VkShaderFloatControlsIndependence VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR;
        
        public const vulkan.VkShaderFloatControlsIndependence VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM;
        
        public enum VkSamplerReductionMode : uint
        {
            VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = unchecked((uint)0),
            
            VK_SAMPLER_REDUCTION_MODE_MIN = unchecked((uint)1),
            
            VK_SAMPLER_REDUCTION_MODE_MAX = unchecked((uint)2),
            
            VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = unchecked((uint)0),
            
            VK_SAMPLER_REDUCTION_MODE_MIN_EXT = unchecked((uint)1),
            
            VK_SAMPLER_REDUCTION_MODE_MAX_EXT = unchecked((uint)2),
            
            VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSamplerReductionMode VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE;
        
        public const vulkan.VkSamplerReductionMode VK_SAMPLER_REDUCTION_MODE_MIN = VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MIN;
        
        public const vulkan.VkSamplerReductionMode VK_SAMPLER_REDUCTION_MODE_MAX = VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MAX;
        
        public const vulkan.VkSamplerReductionMode VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT;
        
        public const vulkan.VkSamplerReductionMode VK_SAMPLER_REDUCTION_MODE_MIN_EXT = VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MIN_EXT;
        
        public const vulkan.VkSamplerReductionMode VK_SAMPLER_REDUCTION_MODE_MAX_EXT = VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MAX_EXT;
        
        public const vulkan.VkSamplerReductionMode VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MAX_ENUM;
        
        public enum VkSemaphoreType : uint
        {
            VK_SEMAPHORE_TYPE_BINARY = unchecked((uint)0),
            
            VK_SEMAPHORE_TYPE_TIMELINE = unchecked((uint)1),
            
            VK_SEMAPHORE_TYPE_BINARY_KHR = unchecked((uint)0),
            
            VK_SEMAPHORE_TYPE_TIMELINE_KHR = unchecked((uint)1),
            
            VK_SEMAPHORE_TYPE_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSemaphoreType VK_SEMAPHORE_TYPE_BINARY = VkSemaphoreType.VK_SEMAPHORE_TYPE_BINARY;
        
        public const vulkan.VkSemaphoreType VK_SEMAPHORE_TYPE_TIMELINE = VkSemaphoreType.VK_SEMAPHORE_TYPE_TIMELINE;
        
        public const vulkan.VkSemaphoreType VK_SEMAPHORE_TYPE_BINARY_KHR = VkSemaphoreType.VK_SEMAPHORE_TYPE_BINARY_KHR;
        
        public const vulkan.VkSemaphoreType VK_SEMAPHORE_TYPE_TIMELINE_KHR = VkSemaphoreType.VK_SEMAPHORE_TYPE_TIMELINE_KHR;
        
        public const vulkan.VkSemaphoreType VK_SEMAPHORE_TYPE_MAX_ENUM = VkSemaphoreType.VK_SEMAPHORE_TYPE_MAX_ENUM;
        
        public enum VkResolveModeFlagBits : uint
        {
            VK_RESOLVE_MODE_NONE = unchecked((uint)0),
            
            VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = unchecked((uint)1),
            
            VK_RESOLVE_MODE_AVERAGE_BIT = unchecked((uint)2),
            
            VK_RESOLVE_MODE_MIN_BIT = unchecked((uint)4),
            
            VK_RESOLVE_MODE_MAX_BIT = unchecked((uint)8),
            
            VK_RESOLVE_MODE_NONE_KHR = unchecked((uint)0),
            
            VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = unchecked((uint)1),
            
            VK_RESOLVE_MODE_AVERAGE_BIT_KHR = unchecked((uint)2),
            
            VK_RESOLVE_MODE_MIN_BIT_KHR = unchecked((uint)4),
            
            VK_RESOLVE_MODE_MAX_BIT_KHR = unchecked((uint)8),
            
            VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkResolveModeFlagBits VK_RESOLVE_MODE_NONE = VkResolveModeFlagBits.VK_RESOLVE_MODE_NONE;
        
        public const vulkan.VkResolveModeFlagBits VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = VkResolveModeFlagBits.VK_RESOLVE_MODE_SAMPLE_ZERO_BIT;
        
        public const vulkan.VkResolveModeFlagBits VK_RESOLVE_MODE_AVERAGE_BIT = VkResolveModeFlagBits.VK_RESOLVE_MODE_AVERAGE_BIT;
        
        public const vulkan.VkResolveModeFlagBits VK_RESOLVE_MODE_MIN_BIT = VkResolveModeFlagBits.VK_RESOLVE_MODE_MIN_BIT;
        
        public const vulkan.VkResolveModeFlagBits VK_RESOLVE_MODE_MAX_BIT = VkResolveModeFlagBits.VK_RESOLVE_MODE_MAX_BIT;
        
        public const vulkan.VkResolveModeFlagBits VK_RESOLVE_MODE_NONE_KHR = VkResolveModeFlagBits.VK_RESOLVE_MODE_NONE_KHR;
        
        public const vulkan.VkResolveModeFlagBits VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = VkResolveModeFlagBits.VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR;
        
        public const vulkan.VkResolveModeFlagBits VK_RESOLVE_MODE_AVERAGE_BIT_KHR = VkResolveModeFlagBits.VK_RESOLVE_MODE_AVERAGE_BIT_KHR;
        
        public const vulkan.VkResolveModeFlagBits VK_RESOLVE_MODE_MIN_BIT_KHR = VkResolveModeFlagBits.VK_RESOLVE_MODE_MIN_BIT_KHR;
        
        public const vulkan.VkResolveModeFlagBits VK_RESOLVE_MODE_MAX_BIT_KHR = VkResolveModeFlagBits.VK_RESOLVE_MODE_MAX_BIT_KHR;
        
        public const vulkan.VkResolveModeFlagBits VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = VkResolveModeFlagBits.VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM;
        
        public enum VkDescriptorBindingFlagBits : uint
        {
            VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = unchecked((uint)1),
            
            VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = unchecked((uint)2),
            
            VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = unchecked((uint)4),
            
            VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = unchecked((uint)8),
            
            VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = unchecked((uint)1),
            
            VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = unchecked((uint)2),
            
            VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = unchecked((uint)4),
            
            VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = unchecked((uint)8),
            
            VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDescriptorBindingFlagBits VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT;
        
        public const vulkan.VkDescriptorBindingFlagBits VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT;
        
        public const vulkan.VkDescriptorBindingFlagBits VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT;
        
        public const vulkan.VkDescriptorBindingFlagBits VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT;
        
        public const vulkan.VkDescriptorBindingFlagBits VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT;
        
        public const vulkan.VkDescriptorBindingFlagBits VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT;
        
        public const vulkan.VkDescriptorBindingFlagBits VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT;
        
        public const vulkan.VkDescriptorBindingFlagBits VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT;
        
        public const vulkan.VkDescriptorBindingFlagBits VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM;
        
        public enum VkSemaphoreWaitFlagBits : uint
        {
            VK_SEMAPHORE_WAIT_ANY_BIT = unchecked((uint)1),
            
            VK_SEMAPHORE_WAIT_ANY_BIT_KHR = unchecked((uint)1),
            
            VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSemaphoreWaitFlagBits VK_SEMAPHORE_WAIT_ANY_BIT = VkSemaphoreWaitFlagBits.VK_SEMAPHORE_WAIT_ANY_BIT;
        
        public const vulkan.VkSemaphoreWaitFlagBits VK_SEMAPHORE_WAIT_ANY_BIT_KHR = VkSemaphoreWaitFlagBits.VK_SEMAPHORE_WAIT_ANY_BIT_KHR;
        
        public const vulkan.VkSemaphoreWaitFlagBits VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = VkSemaphoreWaitFlagBits.VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM;
        
        public enum VkPipelineCreationFeedbackFlagBits : uint
        {
            VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = unchecked((uint)1),
            
            VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = unchecked((uint)2),
            
            VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = unchecked((uint)4),
            
            VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = unchecked((uint)1),
            
            VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = unchecked((uint)2),
            
            VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = unchecked((uint)4),
            
            VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPipelineCreationFeedbackFlagBits VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT;
        
        public const vulkan.VkPipelineCreationFeedbackFlagBits VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT;
        
        public const vulkan.VkPipelineCreationFeedbackFlagBits VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT;
        
        public const vulkan.VkPipelineCreationFeedbackFlagBits VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT;
        
        public const vulkan.VkPipelineCreationFeedbackFlagBits VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT;
        
        public const vulkan.VkPipelineCreationFeedbackFlagBits VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT;
        
        public const vulkan.VkPipelineCreationFeedbackFlagBits VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM;
        
        public enum VkToolPurposeFlagBits : uint
        {
            VK_TOOL_PURPOSE_VALIDATION_BIT = unchecked((uint)1),
            
            VK_TOOL_PURPOSE_PROFILING_BIT = unchecked((uint)2),
            
            VK_TOOL_PURPOSE_TRACING_BIT = unchecked((uint)4),
            
            VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = unchecked((uint)8),
            
            VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = unchecked((uint)16),
            
            VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = unchecked((uint)32),
            
            VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = unchecked((uint)64),
            
            VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = unchecked((uint)1),
            
            VK_TOOL_PURPOSE_PROFILING_BIT_EXT = unchecked((uint)2),
            
            VK_TOOL_PURPOSE_TRACING_BIT_EXT = unchecked((uint)4),
            
            VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = unchecked((uint)8),
            
            VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = unchecked((uint)16),
            
            VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkToolPurposeFlagBits VK_TOOL_PURPOSE_VALIDATION_BIT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_VALIDATION_BIT;
        
        public const vulkan.VkToolPurposeFlagBits VK_TOOL_PURPOSE_PROFILING_BIT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_PROFILING_BIT;
        
        public const vulkan.VkToolPurposeFlagBits VK_TOOL_PURPOSE_TRACING_BIT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_TRACING_BIT;
        
        public const vulkan.VkToolPurposeFlagBits VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT;
        
        public const vulkan.VkToolPurposeFlagBits VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT;
        
        public const vulkan.VkToolPurposeFlagBits VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT;
        
        public const vulkan.VkToolPurposeFlagBits VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT;
        
        public const vulkan.VkToolPurposeFlagBits VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_VALIDATION_BIT_EXT;
        
        public const vulkan.VkToolPurposeFlagBits VK_TOOL_PURPOSE_PROFILING_BIT_EXT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_PROFILING_BIT_EXT;
        
        public const vulkan.VkToolPurposeFlagBits VK_TOOL_PURPOSE_TRACING_BIT_EXT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_TRACING_BIT_EXT;
        
        public const vulkan.VkToolPurposeFlagBits VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT;
        
        public const vulkan.VkToolPurposeFlagBits VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT;
        
        public const vulkan.VkToolPurposeFlagBits VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = VkToolPurposeFlagBits.VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM;
        
        public enum VkSubmitFlagBits : uint
        {
            VK_SUBMIT_PROTECTED_BIT = unchecked((uint)1),
            
            VK_SUBMIT_PROTECTED_BIT_KHR = unchecked((uint)1),
            
            VK_SUBMIT_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSubmitFlagBits VK_SUBMIT_PROTECTED_BIT = VkSubmitFlagBits.VK_SUBMIT_PROTECTED_BIT;
        
        public const vulkan.VkSubmitFlagBits VK_SUBMIT_PROTECTED_BIT_KHR = VkSubmitFlagBits.VK_SUBMIT_PROTECTED_BIT_KHR;
        
        public const vulkan.VkSubmitFlagBits VK_SUBMIT_FLAG_BITS_MAX_ENUM = VkSubmitFlagBits.VK_SUBMIT_FLAG_BITS_MAX_ENUM;
        
        public enum VkRenderingFlagBits : uint
        {
            VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = unchecked((uint)1),
            
            VK_RENDERING_SUSPENDING_BIT = unchecked((uint)2),
            
            VK_RENDERING_RESUMING_BIT = unchecked((uint)4),
            
            VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT = unchecked((uint)8),
            
            VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = unchecked((uint)1),
            
            VK_RENDERING_SUSPENDING_BIT_KHR = unchecked((uint)2),
            
            VK_RENDERING_RESUMING_BIT_KHR = unchecked((uint)4),
            
            VK_RENDERING_FLAG_BITS_MAX_ENUM = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkRenderingFlagBits VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = VkRenderingFlagBits.VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT;
        
        public const vulkan.VkRenderingFlagBits VK_RENDERING_SUSPENDING_BIT = VkRenderingFlagBits.VK_RENDERING_SUSPENDING_BIT;
        
        public const vulkan.VkRenderingFlagBits VK_RENDERING_RESUMING_BIT = VkRenderingFlagBits.VK_RENDERING_RESUMING_BIT;
        
        public const vulkan.VkRenderingFlagBits VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT = VkRenderingFlagBits.VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT;
        
        public const vulkan.VkRenderingFlagBits VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = VkRenderingFlagBits.VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR;
        
        public const vulkan.VkRenderingFlagBits VK_RENDERING_SUSPENDING_BIT_KHR = VkRenderingFlagBits.VK_RENDERING_SUSPENDING_BIT_KHR;
        
        public const vulkan.VkRenderingFlagBits VK_RENDERING_RESUMING_BIT_KHR = VkRenderingFlagBits.VK_RENDERING_RESUMING_BIT_KHR;
        
        public const vulkan.VkRenderingFlagBits VK_RENDERING_FLAG_BITS_MAX_ENUM = VkRenderingFlagBits.VK_RENDERING_FLAG_BITS_MAX_ENUM;
        
        public enum VkPresentModeKHR : uint
        {
            VK_PRESENT_MODE_IMMEDIATE_KHR = unchecked((uint)0),
            
            VK_PRESENT_MODE_MAILBOX_KHR = unchecked((uint)1),
            
            VK_PRESENT_MODE_FIFO_KHR = unchecked((uint)2),
            
            VK_PRESENT_MODE_FIFO_RELAXED_KHR = unchecked((uint)3),
            
            VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = unchecked((uint)1000111000),
            
            VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = unchecked((uint)1000111001),
            
            VK_PRESENT_MODE_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPresentModeKHR VK_PRESENT_MODE_IMMEDIATE_KHR = VkPresentModeKHR.VK_PRESENT_MODE_IMMEDIATE_KHR;
        
        public const vulkan.VkPresentModeKHR VK_PRESENT_MODE_MAILBOX_KHR = VkPresentModeKHR.VK_PRESENT_MODE_MAILBOX_KHR;
        
        public const vulkan.VkPresentModeKHR VK_PRESENT_MODE_FIFO_KHR = VkPresentModeKHR.VK_PRESENT_MODE_FIFO_KHR;
        
        public const vulkan.VkPresentModeKHR VK_PRESENT_MODE_FIFO_RELAXED_KHR = VkPresentModeKHR.VK_PRESENT_MODE_FIFO_RELAXED_KHR;
        
        public const vulkan.VkPresentModeKHR VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = VkPresentModeKHR.VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR;
        
        public const vulkan.VkPresentModeKHR VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = VkPresentModeKHR.VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR;
        
        public const vulkan.VkPresentModeKHR VK_PRESENT_MODE_MAX_ENUM_KHR = VkPresentModeKHR.VK_PRESENT_MODE_MAX_ENUM_KHR;
        
        public enum VkColorSpaceKHR : uint
        {
            VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = unchecked((uint)0),
            
            VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = unchecked((uint)1000104001),
            
            VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = unchecked((uint)1000104002),
            
            VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = unchecked((uint)1000104003),
            
            VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = unchecked((uint)1000104004),
            
            VK_COLOR_SPACE_BT709_LINEAR_EXT = unchecked((uint)1000104005),
            
            VK_COLOR_SPACE_BT709_NONLINEAR_EXT = unchecked((uint)1000104006),
            
            VK_COLOR_SPACE_BT2020_LINEAR_EXT = unchecked((uint)1000104007),
            
            VK_COLOR_SPACE_HDR10_ST2084_EXT = unchecked((uint)1000104008),
            
            VK_COLOR_SPACE_DOLBYVISION_EXT = unchecked((uint)1000104009),
            
            VK_COLOR_SPACE_HDR10_HLG_EXT = unchecked((uint)1000104010),
            
            VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = unchecked((uint)1000104011),
            
            VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = unchecked((uint)1000104012),
            
            VK_COLOR_SPACE_PASS_THROUGH_EXT = unchecked((uint)1000104013),
            
            VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = unchecked((uint)1000104014),
            
            VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = unchecked((uint)1000213000),
            
            VK_COLORSPACE_SRGB_NONLINEAR_KHR = unchecked((uint)0),
            
            VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = unchecked((uint)1000104003),
            
            VK_COLOR_SPACE_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = VkColorSpaceKHR.VK_COLOR_SPACE_SRGB_NONLINEAR_KHR;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_BT709_LINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_BT709_LINEAR_EXT;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_BT709_NONLINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_BT709_NONLINEAR_EXT;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_BT2020_LINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_BT2020_LINEAR_EXT;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_HDR10_ST2084_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_HDR10_ST2084_EXT;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_DOLBYVISION_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_DOLBYVISION_EXT;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_HDR10_HLG_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_HDR10_HLG_EXT;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_PASS_THROUGH_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_PASS_THROUGH_EXT;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_NATIVE_AMD;
        
        public const vulkan.VkColorSpaceKHR VK_COLORSPACE_SRGB_NONLINEAR_KHR = VkColorSpaceKHR.VK_COLORSPACE_SRGB_NONLINEAR_KHR;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = VkColorSpaceKHR.VK_COLOR_SPACE_DCI_P3_LINEAR_EXT;
        
        public const vulkan.VkColorSpaceKHR VK_COLOR_SPACE_MAX_ENUM_KHR = VkColorSpaceKHR.VK_COLOR_SPACE_MAX_ENUM_KHR;
        
        public enum VkSurfaceTransformFlagBitsKHR : uint
        {
            VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = unchecked((uint)1),
            
            VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = unchecked((uint)2),
            
            VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = unchecked((uint)4),
            
            VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = unchecked((uint)8),
            
            VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = unchecked((uint)16),
            
            VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = unchecked((uint)32),
            
            VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = unchecked((uint)64),
            
            VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = unchecked((uint)128),
            
            VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = unchecked((uint)256),
            
            VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSurfaceTransformFlagBitsKHR VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR;
        
        public const vulkan.VkSurfaceTransformFlagBitsKHR VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR;
        
        public const vulkan.VkSurfaceTransformFlagBitsKHR VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR;
        
        public const vulkan.VkSurfaceTransformFlagBitsKHR VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR;
        
        public const vulkan.VkSurfaceTransformFlagBitsKHR VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR;
        
        public const vulkan.VkSurfaceTransformFlagBitsKHR VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR;
        
        public const vulkan.VkSurfaceTransformFlagBitsKHR VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR;
        
        public const vulkan.VkSurfaceTransformFlagBitsKHR VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR;
        
        public const vulkan.VkSurfaceTransformFlagBitsKHR VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR;
        
        public const vulkan.VkSurfaceTransformFlagBitsKHR VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkCompositeAlphaFlagBitsKHR : uint
        {
            VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = unchecked((uint)1),
            
            VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = unchecked((uint)2),
            
            VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = unchecked((uint)4),
            
            VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = unchecked((uint)8),
            
            VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkCompositeAlphaFlagBitsKHR VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;
        
        public const vulkan.VkCompositeAlphaFlagBitsKHR VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR;
        
        public const vulkan.VkCompositeAlphaFlagBitsKHR VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR;
        
        public const vulkan.VkCompositeAlphaFlagBitsKHR VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR;
        
        public const vulkan.VkCompositeAlphaFlagBitsKHR VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkSwapchainCreateFlagBitsKHR : uint
        {
            VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = unchecked((uint)1),
            
            VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = unchecked((uint)2),
            
            VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = unchecked((uint)4),
            
            VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT = unchecked((uint)8),
            
            VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSwapchainCreateFlagBitsKHR VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR;
        
        public const vulkan.VkSwapchainCreateFlagBitsKHR VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR;
        
        public const vulkan.VkSwapchainCreateFlagBitsKHR VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR;
        
        public const vulkan.VkSwapchainCreateFlagBitsKHR VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT = VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT;
        
        public const vulkan.VkSwapchainCreateFlagBitsKHR VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkDeviceGroupPresentModeFlagBitsKHR : uint
        {
            VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = unchecked((uint)1),
            
            VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = unchecked((uint)2),
            
            VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = unchecked((uint)4),
            
            VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = unchecked((uint)8),
            
            VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDeviceGroupPresentModeFlagBitsKHR VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR;
        
        public const vulkan.VkDeviceGroupPresentModeFlagBitsKHR VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR;
        
        public const vulkan.VkDeviceGroupPresentModeFlagBitsKHR VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR;
        
        public const vulkan.VkDeviceGroupPresentModeFlagBitsKHR VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR;
        
        public const vulkan.VkDeviceGroupPresentModeFlagBitsKHR VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkDisplayPlaneAlphaFlagBitsKHR : uint
        {
            VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = unchecked((uint)1),
            
            VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = unchecked((uint)2),
            
            VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = unchecked((uint)4),
            
            VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = unchecked((uint)8),
            
            VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDisplayPlaneAlphaFlagBitsKHR VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR;
        
        public const vulkan.VkDisplayPlaneAlphaFlagBitsKHR VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR;
        
        public const vulkan.VkDisplayPlaneAlphaFlagBitsKHR VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR;
        
        public const vulkan.VkDisplayPlaneAlphaFlagBitsKHR VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR;
        
        public const vulkan.VkDisplayPlaneAlphaFlagBitsKHR VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkQueryResultStatusKHR : int
        {
            VK_QUERY_RESULT_STATUS_ERROR_KHR = unchecked((int)-1),
            
            VK_QUERY_RESULT_STATUS_NOT_READY_KHR = unchecked((int)0),
            
            VK_QUERY_RESULT_STATUS_COMPLETE_KHR = unchecked((int)1),
            
            VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR = unchecked((int)2147483647),
        }
        
        public const vulkan.VkQueryResultStatusKHR VK_QUERY_RESULT_STATUS_ERROR_KHR = VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_ERROR_KHR;
        
        public const vulkan.VkQueryResultStatusKHR VK_QUERY_RESULT_STATUS_NOT_READY_KHR = VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_NOT_READY_KHR;
        
        public const vulkan.VkQueryResultStatusKHR VK_QUERY_RESULT_STATUS_COMPLETE_KHR = VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_COMPLETE_KHR;
        
        public const vulkan.VkQueryResultStatusKHR VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR = VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR;
        
        public enum VkVideoCodecOperationFlagBitsKHR : uint
        {
            VK_VIDEO_CODEC_OPERATION_NONE_KHR = unchecked((uint)0),
            
            VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_EXT = unchecked((uint)65536),
            
            VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_EXT = unchecked((uint)131072),
            
            VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR = unchecked((uint)1),
            
            VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR = unchecked((uint)2),
            
            VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkVideoCodecOperationFlagBitsKHR VK_VIDEO_CODEC_OPERATION_NONE_KHR = VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_NONE_KHR;
        
        public const vulkan.VkVideoCodecOperationFlagBitsKHR VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_EXT = VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_EXT;
        
        public const vulkan.VkVideoCodecOperationFlagBitsKHR VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_EXT = VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_EXT;
        
        public const vulkan.VkVideoCodecOperationFlagBitsKHR VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR = VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR;
        
        public const vulkan.VkVideoCodecOperationFlagBitsKHR VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR = VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR;
        
        public const vulkan.VkVideoCodecOperationFlagBitsKHR VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR = VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkVideoChromaSubsamplingFlagBitsKHR : uint
        {
            VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = unchecked((uint)0),
            
            VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = unchecked((uint)1),
            
            VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = unchecked((uint)2),
            
            VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = unchecked((uint)4),
            
            VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = unchecked((uint)8),
            
            VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkVideoChromaSubsamplingFlagBitsKHR VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR;
        
        public const vulkan.VkVideoChromaSubsamplingFlagBitsKHR VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR;
        
        public const vulkan.VkVideoChromaSubsamplingFlagBitsKHR VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR;
        
        public const vulkan.VkVideoChromaSubsamplingFlagBitsKHR VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR;
        
        public const vulkan.VkVideoChromaSubsamplingFlagBitsKHR VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR;
        
        public const vulkan.VkVideoChromaSubsamplingFlagBitsKHR VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR = VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkVideoComponentBitDepthFlagBitsKHR : uint
        {
            VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = unchecked((uint)0),
            
            VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = unchecked((uint)1),
            
            VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = unchecked((uint)4),
            
            VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = unchecked((uint)16),
            
            VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkVideoComponentBitDepthFlagBitsKHR VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR;
        
        public const vulkan.VkVideoComponentBitDepthFlagBitsKHR VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR;
        
        public const vulkan.VkVideoComponentBitDepthFlagBitsKHR VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR;
        
        public const vulkan.VkVideoComponentBitDepthFlagBitsKHR VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR;
        
        public const vulkan.VkVideoComponentBitDepthFlagBitsKHR VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR = VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkVideoCapabilityFlagBitsKHR : uint
        {
            VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = unchecked((uint)1),
            
            VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = unchecked((uint)2),
            
            VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkVideoCapabilityFlagBitsKHR VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = VkVideoCapabilityFlagBitsKHR.VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR;
        
        public const vulkan.VkVideoCapabilityFlagBitsKHR VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = VkVideoCapabilityFlagBitsKHR.VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR;
        
        public const vulkan.VkVideoCapabilityFlagBitsKHR VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = VkVideoCapabilityFlagBitsKHR.VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkVideoSessionCreateFlagBitsKHR : uint
        {
            VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = unchecked((uint)1),
            
            VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR = unchecked((uint)2),
            
            VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkVideoSessionCreateFlagBitsKHR VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR;
        
        public const vulkan.VkVideoSessionCreateFlagBitsKHR VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR = VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR;
        
        public const vulkan.VkVideoSessionCreateFlagBitsKHR VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR = VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkVideoCodingControlFlagBitsKHR : uint
        {
            VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR = unchecked((uint)1),
            
            VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR = unchecked((uint)2),
            
            VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR = unchecked((uint)4),
            
            VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkVideoCodingControlFlagBitsKHR VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR = VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR;
        
        public const vulkan.VkVideoCodingControlFlagBitsKHR VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR = VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR;
        
        public const vulkan.VkVideoCodingControlFlagBitsKHR VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR = VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR;
        
        public const vulkan.VkVideoCodingControlFlagBitsKHR VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR = VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkVideoDecodeCapabilityFlagBitsKHR : uint
        {
            VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = unchecked((uint)1),
            
            VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = unchecked((uint)2),
            
            VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkVideoDecodeCapabilityFlagBitsKHR VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = VkVideoDecodeCapabilityFlagBitsKHR.VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR;
        
        public const vulkan.VkVideoDecodeCapabilityFlagBitsKHR VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = VkVideoDecodeCapabilityFlagBitsKHR.VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR;
        
        public const vulkan.VkVideoDecodeCapabilityFlagBitsKHR VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = VkVideoDecodeCapabilityFlagBitsKHR.VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkVideoDecodeUsageFlagBitsKHR : uint
        {
            VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = unchecked((uint)0),
            
            VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = unchecked((uint)1),
            
            VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = unchecked((uint)2),
            
            VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = unchecked((uint)4),
            
            VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkVideoDecodeUsageFlagBitsKHR VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_DEFAULT_KHR;
        
        public const vulkan.VkVideoDecodeUsageFlagBitsKHR VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR;
        
        public const vulkan.VkVideoDecodeUsageFlagBitsKHR VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR;
        
        public const vulkan.VkVideoDecodeUsageFlagBitsKHR VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR;
        
        public const vulkan.VkVideoDecodeUsageFlagBitsKHR VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkVideoDecodeH264PictureLayoutFlagBitsKHR : uint
        {
            VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = unchecked((uint)0),
            
            VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR = unchecked((uint)1),
            
            VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR = unchecked((uint)2),
            
            VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkVideoDecodeH264PictureLayoutFlagBitsKHR VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = VkVideoDecodeH264PictureLayoutFlagBitsKHR.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR;
        
        public const vulkan.VkVideoDecodeH264PictureLayoutFlagBitsKHR VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR = VkVideoDecodeH264PictureLayoutFlagBitsKHR.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR;
        
        public const vulkan.VkVideoDecodeH264PictureLayoutFlagBitsKHR VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR = VkVideoDecodeH264PictureLayoutFlagBitsKHR.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR;
        
        public const vulkan.VkVideoDecodeH264PictureLayoutFlagBitsKHR VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR = VkVideoDecodeH264PictureLayoutFlagBitsKHR.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkPerformanceCounterUnitKHR : uint
        {
            VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = unchecked((uint)0),
            
            VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = unchecked((uint)1),
            
            VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = unchecked((uint)2),
            
            VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = unchecked((uint)3),
            
            VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = unchecked((uint)4),
            
            VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = unchecked((uint)5),
            
            VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = unchecked((uint)6),
            
            VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = unchecked((uint)7),
            
            VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = unchecked((uint)8),
            
            VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = unchecked((uint)9),
            
            VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = unchecked((uint)10),
            
            VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPerformanceCounterUnitKHR VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR;
        
        public const vulkan.VkPerformanceCounterUnitKHR VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR;
        
        public const vulkan.VkPerformanceCounterUnitKHR VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR;
        
        public const vulkan.VkPerformanceCounterUnitKHR VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR;
        
        public const vulkan.VkPerformanceCounterUnitKHR VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR;
        
        public const vulkan.VkPerformanceCounterUnitKHR VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR;
        
        public const vulkan.VkPerformanceCounterUnitKHR VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR;
        
        public const vulkan.VkPerformanceCounterUnitKHR VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR;
        
        public const vulkan.VkPerformanceCounterUnitKHR VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR;
        
        public const vulkan.VkPerformanceCounterUnitKHR VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR;
        
        public const vulkan.VkPerformanceCounterUnitKHR VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR;
        
        public const vulkan.VkPerformanceCounterUnitKHR VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR;
        
        public enum VkPerformanceCounterScopeKHR : uint
        {
            VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = unchecked((uint)0),
            
            VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = unchecked((uint)1),
            
            VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = unchecked((uint)2),
            
            VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = unchecked((uint)0),
            
            VK_QUERY_SCOPE_RENDER_PASS_KHR = unchecked((uint)1),
            
            VK_QUERY_SCOPE_COMMAND_KHR = unchecked((uint)2),
            
            VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPerformanceCounterScopeKHR VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR;
        
        public const vulkan.VkPerformanceCounterScopeKHR VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR;
        
        public const vulkan.VkPerformanceCounterScopeKHR VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR;
        
        public const vulkan.VkPerformanceCounterScopeKHR VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = VkPerformanceCounterScopeKHR.VK_QUERY_SCOPE_COMMAND_BUFFER_KHR;
        
        public const vulkan.VkPerformanceCounterScopeKHR VK_QUERY_SCOPE_RENDER_PASS_KHR = VkPerformanceCounterScopeKHR.VK_QUERY_SCOPE_RENDER_PASS_KHR;
        
        public const vulkan.VkPerformanceCounterScopeKHR VK_QUERY_SCOPE_COMMAND_KHR = VkPerformanceCounterScopeKHR.VK_QUERY_SCOPE_COMMAND_KHR;
        
        public const vulkan.VkPerformanceCounterScopeKHR VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR;
        
        public enum VkPerformanceCounterStorageKHR : uint
        {
            VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = unchecked((uint)0),
            
            VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = unchecked((uint)1),
            
            VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = unchecked((uint)2),
            
            VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = unchecked((uint)3),
            
            VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = unchecked((uint)4),
            
            VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = unchecked((uint)5),
            
            VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPerformanceCounterStorageKHR VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR;
        
        public const vulkan.VkPerformanceCounterStorageKHR VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR;
        
        public const vulkan.VkPerformanceCounterStorageKHR VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR;
        
        public const vulkan.VkPerformanceCounterStorageKHR VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR;
        
        public const vulkan.VkPerformanceCounterStorageKHR VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR;
        
        public const vulkan.VkPerformanceCounterStorageKHR VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR;
        
        public const vulkan.VkPerformanceCounterStorageKHR VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR;
        
        public enum VkPerformanceCounterDescriptionFlagBitsKHR : uint
        {
            VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = unchecked((uint)1),
            
            VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = unchecked((uint)2),
            
            VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = unchecked((uint)1),
            
            VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = unchecked((uint)2),
            
            VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPerformanceCounterDescriptionFlagBitsKHR VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR;
        
        public const vulkan.VkPerformanceCounterDescriptionFlagBitsKHR VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR;
        
        public const vulkan.VkPerformanceCounterDescriptionFlagBitsKHR VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR;
        
        public const vulkan.VkPerformanceCounterDescriptionFlagBitsKHR VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR;
        
        public const vulkan.VkPerformanceCounterDescriptionFlagBitsKHR VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkAcquireProfilingLockFlagBitsKHR : uint
        {
            VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkAcquireProfilingLockFlagBitsKHR VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = VkAcquireProfilingLockFlagBitsKHR.VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkQueueGlobalPriorityKHR : uint
        {
            VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = unchecked((uint)128),
            
            VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = unchecked((uint)256),
            
            VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = unchecked((uint)512),
            
            VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = unchecked((uint)1024),
            
            VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = unchecked((uint)128),
            
            VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = unchecked((uint)256),
            
            VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = unchecked((uint)512),
            
            VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = unchecked((uint)1024),
            
            VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkQueueGlobalPriorityKHR VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR;
        
        public const vulkan.VkQueueGlobalPriorityKHR VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR;
        
        public const vulkan.VkQueueGlobalPriorityKHR VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR;
        
        public const vulkan.VkQueueGlobalPriorityKHR VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR;
        
        public const vulkan.VkQueueGlobalPriorityKHR VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT;
        
        public const vulkan.VkQueueGlobalPriorityKHR VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT;
        
        public const vulkan.VkQueueGlobalPriorityKHR VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT;
        
        public const vulkan.VkQueueGlobalPriorityKHR VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT;
        
        public const vulkan.VkQueueGlobalPriorityKHR VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR = VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR;
        
        public enum VkFragmentShadingRateCombinerOpKHR : uint
        {
            VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = unchecked((uint)0),
            
            VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = unchecked((uint)1),
            
            VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = unchecked((uint)2),
            
            VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = unchecked((uint)3),
            
            VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = unchecked((uint)4),
            
            VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkFragmentShadingRateCombinerOpKHR VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR;
        
        public const vulkan.VkFragmentShadingRateCombinerOpKHR VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR;
        
        public const vulkan.VkFragmentShadingRateCombinerOpKHR VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR;
        
        public const vulkan.VkFragmentShadingRateCombinerOpKHR VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR;
        
        public const vulkan.VkFragmentShadingRateCombinerOpKHR VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR;
        
        public const vulkan.VkFragmentShadingRateCombinerOpKHR VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR;
        
        public enum VkPipelineExecutableStatisticFormatKHR : uint
        {
            VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = unchecked((uint)0),
            
            VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = unchecked((uint)1),
            
            VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = unchecked((uint)2),
            
            VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = unchecked((uint)3),
            
            VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPipelineExecutableStatisticFormatKHR VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR;
        
        public const vulkan.VkPipelineExecutableStatisticFormatKHR VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR;
        
        public const vulkan.VkPipelineExecutableStatisticFormatKHR VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR;
        
        public const vulkan.VkPipelineExecutableStatisticFormatKHR VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR;
        
        public const vulkan.VkPipelineExecutableStatisticFormatKHR VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR;
        
        public enum VkComponentTypeKHR : uint
        {
            VK_COMPONENT_TYPE_FLOAT16_KHR = unchecked((uint)0),
            
            VK_COMPONENT_TYPE_FLOAT32_KHR = unchecked((uint)1),
            
            VK_COMPONENT_TYPE_FLOAT64_KHR = unchecked((uint)2),
            
            VK_COMPONENT_TYPE_SINT8_KHR = unchecked((uint)3),
            
            VK_COMPONENT_TYPE_SINT16_KHR = unchecked((uint)4),
            
            VK_COMPONENT_TYPE_SINT32_KHR = unchecked((uint)5),
            
            VK_COMPONENT_TYPE_SINT64_KHR = unchecked((uint)6),
            
            VK_COMPONENT_TYPE_UINT8_KHR = unchecked((uint)7),
            
            VK_COMPONENT_TYPE_UINT16_KHR = unchecked((uint)8),
            
            VK_COMPONENT_TYPE_UINT32_KHR = unchecked((uint)9),
            
            VK_COMPONENT_TYPE_UINT64_KHR = unchecked((uint)10),
            
            VK_COMPONENT_TYPE_FLOAT16_NV = unchecked((uint)0),
            
            VK_COMPONENT_TYPE_FLOAT32_NV = unchecked((uint)1),
            
            VK_COMPONENT_TYPE_FLOAT64_NV = unchecked((uint)2),
            
            VK_COMPONENT_TYPE_SINT8_NV = unchecked((uint)3),
            
            VK_COMPONENT_TYPE_SINT16_NV = unchecked((uint)4),
            
            VK_COMPONENT_TYPE_SINT32_NV = unchecked((uint)5),
            
            VK_COMPONENT_TYPE_SINT64_NV = unchecked((uint)6),
            
            VK_COMPONENT_TYPE_UINT8_NV = unchecked((uint)7),
            
            VK_COMPONENT_TYPE_UINT16_NV = unchecked((uint)8),
            
            VK_COMPONENT_TYPE_UINT32_NV = unchecked((uint)9),
            
            VK_COMPONENT_TYPE_UINT64_NV = unchecked((uint)10),
            
            VK_COMPONENT_TYPE_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_FLOAT16_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT16_KHR;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_FLOAT32_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT32_KHR;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_FLOAT64_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT64_KHR;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_SINT8_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT8_KHR;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_SINT16_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT16_KHR;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_SINT32_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT32_KHR;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_SINT64_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT64_KHR;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_UINT8_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT8_KHR;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_UINT16_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT16_KHR;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_UINT32_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT32_KHR;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_UINT64_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT64_KHR;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_FLOAT16_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT16_NV;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_FLOAT32_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT32_NV;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_FLOAT64_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT64_NV;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_SINT8_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT8_NV;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_SINT16_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT16_NV;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_SINT32_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT32_NV;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_SINT64_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT64_NV;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_UINT8_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT8_NV;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_UINT16_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT16_NV;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_UINT32_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT32_NV;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_UINT64_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT64_NV;
        
        public const vulkan.VkComponentTypeKHR VK_COMPONENT_TYPE_MAX_ENUM_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_MAX_ENUM_KHR;
        
        public enum VkScopeKHR : uint
        {
            VK_SCOPE_DEVICE_KHR = unchecked((uint)1),
            
            VK_SCOPE_WORKGROUP_KHR = unchecked((uint)2),
            
            VK_SCOPE_SUBGROUP_KHR = unchecked((uint)3),
            
            VK_SCOPE_QUEUE_FAMILY_KHR = unchecked((uint)5),
            
            VK_SCOPE_DEVICE_NV = unchecked((uint)1),
            
            VK_SCOPE_WORKGROUP_NV = unchecked((uint)2),
            
            VK_SCOPE_SUBGROUP_NV = unchecked((uint)3),
            
            VK_SCOPE_QUEUE_FAMILY_NV = unchecked((uint)5),
            
            VK_SCOPE_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkScopeKHR VK_SCOPE_DEVICE_KHR = VkScopeKHR.VK_SCOPE_DEVICE_KHR;
        
        public const vulkan.VkScopeKHR VK_SCOPE_WORKGROUP_KHR = VkScopeKHR.VK_SCOPE_WORKGROUP_KHR;
        
        public const vulkan.VkScopeKHR VK_SCOPE_SUBGROUP_KHR = VkScopeKHR.VK_SCOPE_SUBGROUP_KHR;
        
        public const vulkan.VkScopeKHR VK_SCOPE_QUEUE_FAMILY_KHR = VkScopeKHR.VK_SCOPE_QUEUE_FAMILY_KHR;
        
        public const vulkan.VkScopeKHR VK_SCOPE_DEVICE_NV = VkScopeKHR.VK_SCOPE_DEVICE_NV;
        
        public const vulkan.VkScopeKHR VK_SCOPE_WORKGROUP_NV = VkScopeKHR.VK_SCOPE_WORKGROUP_NV;
        
        public const vulkan.VkScopeKHR VK_SCOPE_SUBGROUP_NV = VkScopeKHR.VK_SCOPE_SUBGROUP_NV;
        
        public const vulkan.VkScopeKHR VK_SCOPE_QUEUE_FAMILY_NV = VkScopeKHR.VK_SCOPE_QUEUE_FAMILY_NV;
        
        public const vulkan.VkScopeKHR VK_SCOPE_MAX_ENUM_KHR = VkScopeKHR.VK_SCOPE_MAX_ENUM_KHR;
        
        public enum VkDebugReportObjectTypeEXT : uint
        {
            VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = unchecked((uint)0),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = unchecked((uint)1),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = unchecked((uint)2),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = unchecked((uint)3),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = unchecked((uint)4),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = unchecked((uint)5),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = unchecked((uint)6),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = unchecked((uint)7),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = unchecked((uint)8),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = unchecked((uint)9),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = unchecked((uint)10),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = unchecked((uint)11),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = unchecked((uint)12),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = unchecked((uint)13),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = unchecked((uint)14),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = unchecked((uint)15),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = unchecked((uint)16),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = unchecked((uint)17),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = unchecked((uint)18),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = unchecked((uint)19),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = unchecked((uint)20),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = unchecked((uint)21),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = unchecked((uint)22),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = unchecked((uint)23),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = unchecked((uint)24),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = unchecked((uint)25),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = unchecked((uint)26),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = unchecked((uint)27),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = unchecked((uint)28),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = unchecked((uint)29),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = unchecked((uint)30),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = unchecked((uint)33),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = unchecked((uint)1000156000),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = unchecked((uint)1000085000),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = unchecked((uint)1000029000),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = unchecked((uint)1000029001),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = unchecked((uint)1000150000),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = unchecked((uint)1000165000),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = unchecked((uint)1000366000),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = unchecked((uint)28),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = unchecked((uint)33),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = unchecked((uint)1000085000),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = unchecked((uint)1000156000),
            
            VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT;
        
        public const vulkan.VkDebugReportObjectTypeEXT VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT;
        
        public enum VkDebugReportFlagBitsEXT : uint
        {
            VK_DEBUG_REPORT_INFORMATION_BIT_EXT = unchecked((uint)1),
            
            VK_DEBUG_REPORT_WARNING_BIT_EXT = unchecked((uint)2),
            
            VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = unchecked((uint)4),
            
            VK_DEBUG_REPORT_ERROR_BIT_EXT = unchecked((uint)8),
            
            VK_DEBUG_REPORT_DEBUG_BIT_EXT = unchecked((uint)16),
            
            VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDebugReportFlagBitsEXT VK_DEBUG_REPORT_INFORMATION_BIT_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_INFORMATION_BIT_EXT;
        
        public const vulkan.VkDebugReportFlagBitsEXT VK_DEBUG_REPORT_WARNING_BIT_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_WARNING_BIT_EXT;
        
        public const vulkan.VkDebugReportFlagBitsEXT VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT;
        
        public const vulkan.VkDebugReportFlagBitsEXT VK_DEBUG_REPORT_ERROR_BIT_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_ERROR_BIT_EXT;
        
        public const vulkan.VkDebugReportFlagBitsEXT VK_DEBUG_REPORT_DEBUG_BIT_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_DEBUG_BIT_EXT;
        
        public const vulkan.VkDebugReportFlagBitsEXT VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT;
        
        public enum VkRasterizationOrderAMD : uint
        {
            VK_RASTERIZATION_ORDER_STRICT_AMD = unchecked((uint)0),
            
            VK_RASTERIZATION_ORDER_RELAXED_AMD = unchecked((uint)1),
            
            VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkRasterizationOrderAMD VK_RASTERIZATION_ORDER_STRICT_AMD = VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_STRICT_AMD;
        
        public const vulkan.VkRasterizationOrderAMD VK_RASTERIZATION_ORDER_RELAXED_AMD = VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_RELAXED_AMD;
        
        public const vulkan.VkRasterizationOrderAMD VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_MAX_ENUM_AMD;
        
        public enum VkShaderInfoTypeAMD : uint
        {
            VK_SHADER_INFO_TYPE_STATISTICS_AMD = unchecked((uint)0),
            
            VK_SHADER_INFO_TYPE_BINARY_AMD = unchecked((uint)1),
            
            VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = unchecked((uint)2),
            
            VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkShaderInfoTypeAMD VK_SHADER_INFO_TYPE_STATISTICS_AMD = VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_STATISTICS_AMD;
        
        public const vulkan.VkShaderInfoTypeAMD VK_SHADER_INFO_TYPE_BINARY_AMD = VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_BINARY_AMD;
        
        public const vulkan.VkShaderInfoTypeAMD VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD;
        
        public const vulkan.VkShaderInfoTypeAMD VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_MAX_ENUM_AMD;
        
        public enum VkExternalMemoryHandleTypeFlagBitsNV : uint
        {
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = unchecked((uint)1),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = unchecked((uint)2),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = unchecked((uint)4),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = unchecked((uint)8),
            
            VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBitsNV VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBitsNV VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBitsNV VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBitsNV VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV;
        
        public const vulkan.VkExternalMemoryHandleTypeFlagBitsNV VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV;
        
        public enum VkExternalMemoryFeatureFlagBitsNV : uint
        {
            VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = unchecked((uint)1),
            
            VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = unchecked((uint)2),
            
            VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = unchecked((uint)4),
            
            VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkExternalMemoryFeatureFlagBitsNV VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV;
        
        public const vulkan.VkExternalMemoryFeatureFlagBitsNV VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV;
        
        public const vulkan.VkExternalMemoryFeatureFlagBitsNV VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV;
        
        public const vulkan.VkExternalMemoryFeatureFlagBitsNV VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV;
        
        public enum VkValidationCheckEXT : uint
        {
            VK_VALIDATION_CHECK_ALL_EXT = unchecked((uint)0),
            
            VK_VALIDATION_CHECK_SHADERS_EXT = unchecked((uint)1),
            
            VK_VALIDATION_CHECK_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkValidationCheckEXT VK_VALIDATION_CHECK_ALL_EXT = VkValidationCheckEXT.VK_VALIDATION_CHECK_ALL_EXT;
        
        public const vulkan.VkValidationCheckEXT VK_VALIDATION_CHECK_SHADERS_EXT = VkValidationCheckEXT.VK_VALIDATION_CHECK_SHADERS_EXT;
        
        public const vulkan.VkValidationCheckEXT VK_VALIDATION_CHECK_MAX_ENUM_EXT = VkValidationCheckEXT.VK_VALIDATION_CHECK_MAX_ENUM_EXT;
        
        public enum VkPipelineRobustnessBufferBehaviorEXT : uint
        {
            VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = unchecked((uint)0),
            
            VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = unchecked((uint)1),
            
            VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = unchecked((uint)2),
            
            VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = unchecked((uint)3),
            
            VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPipelineRobustnessBufferBehaviorEXT VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT;
        
        public const vulkan.VkPipelineRobustnessBufferBehaviorEXT VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT;
        
        public const vulkan.VkPipelineRobustnessBufferBehaviorEXT VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT;
        
        public const vulkan.VkPipelineRobustnessBufferBehaviorEXT VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT;
        
        public const vulkan.VkPipelineRobustnessBufferBehaviorEXT VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT = VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT;
        
        public enum VkPipelineRobustnessImageBehaviorEXT : uint
        {
            VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = unchecked((uint)0),
            
            VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = unchecked((uint)1),
            
            VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = unchecked((uint)2),
            
            VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = unchecked((uint)3),
            
            VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPipelineRobustnessImageBehaviorEXT VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT;
        
        public const vulkan.VkPipelineRobustnessImageBehaviorEXT VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT;
        
        public const vulkan.VkPipelineRobustnessImageBehaviorEXT VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT;
        
        public const vulkan.VkPipelineRobustnessImageBehaviorEXT VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT;
        
        public const vulkan.VkPipelineRobustnessImageBehaviorEXT VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT = VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT;
        
        public enum VkConditionalRenderingFlagBitsEXT : uint
        {
            VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = unchecked((uint)1),
            
            VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkConditionalRenderingFlagBitsEXT VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = VkConditionalRenderingFlagBitsEXT.VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT;
        
        public const vulkan.VkConditionalRenderingFlagBitsEXT VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = VkConditionalRenderingFlagBitsEXT.VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT;
        
        public enum VkSurfaceCounterFlagBitsEXT : uint
        {
            VK_SURFACE_COUNTER_VBLANK_BIT_EXT = unchecked((uint)1),
            
            VK_SURFACE_COUNTER_VBLANK_EXT = unchecked((uint)1),
            
            VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSurfaceCounterFlagBitsEXT VK_SURFACE_COUNTER_VBLANK_BIT_EXT = VkSurfaceCounterFlagBitsEXT.VK_SURFACE_COUNTER_VBLANK_BIT_EXT;
        
        public const vulkan.VkSurfaceCounterFlagBitsEXT VK_SURFACE_COUNTER_VBLANK_EXT = VkSurfaceCounterFlagBitsEXT.VK_SURFACE_COUNTER_VBLANK_EXT;
        
        public const vulkan.VkSurfaceCounterFlagBitsEXT VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = VkSurfaceCounterFlagBitsEXT.VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT;
        
        public enum VkDisplayPowerStateEXT : uint
        {
            VK_DISPLAY_POWER_STATE_OFF_EXT = unchecked((uint)0),
            
            VK_DISPLAY_POWER_STATE_SUSPEND_EXT = unchecked((uint)1),
            
            VK_DISPLAY_POWER_STATE_ON_EXT = unchecked((uint)2),
            
            VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDisplayPowerStateEXT VK_DISPLAY_POWER_STATE_OFF_EXT = VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_OFF_EXT;
        
        public const vulkan.VkDisplayPowerStateEXT VK_DISPLAY_POWER_STATE_SUSPEND_EXT = VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_SUSPEND_EXT;
        
        public const vulkan.VkDisplayPowerStateEXT VK_DISPLAY_POWER_STATE_ON_EXT = VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_ON_EXT;
        
        public const vulkan.VkDisplayPowerStateEXT VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT;
        
        public enum VkDeviceEventTypeEXT : uint
        {
            VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = unchecked((uint)0),
            
            VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDeviceEventTypeEXT VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = VkDeviceEventTypeEXT.VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT;
        
        public const vulkan.VkDeviceEventTypeEXT VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = VkDeviceEventTypeEXT.VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT;
        
        public enum VkDisplayEventTypeEXT : uint
        {
            VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = unchecked((uint)0),
            
            VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDisplayEventTypeEXT VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = VkDisplayEventTypeEXT.VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT;
        
        public const vulkan.VkDisplayEventTypeEXT VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = VkDisplayEventTypeEXT.VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT;
        
        public enum VkViewportCoordinateSwizzleNV : uint
        {
            VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = unchecked((uint)0),
            
            VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = unchecked((uint)1),
            
            VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = unchecked((uint)2),
            
            VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = unchecked((uint)3),
            
            VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = unchecked((uint)4),
            
            VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = unchecked((uint)5),
            
            VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = unchecked((uint)6),
            
            VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = unchecked((uint)7),
            
            VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkViewportCoordinateSwizzleNV VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV;
        
        public const vulkan.VkViewportCoordinateSwizzleNV VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV;
        
        public const vulkan.VkViewportCoordinateSwizzleNV VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV;
        
        public const vulkan.VkViewportCoordinateSwizzleNV VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV;
        
        public const vulkan.VkViewportCoordinateSwizzleNV VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV;
        
        public const vulkan.VkViewportCoordinateSwizzleNV VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV;
        
        public const vulkan.VkViewportCoordinateSwizzleNV VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV;
        
        public const vulkan.VkViewportCoordinateSwizzleNV VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV;
        
        public const vulkan.VkViewportCoordinateSwizzleNV VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV;
        
        public enum VkDiscardRectangleModeEXT : uint
        {
            VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = unchecked((uint)0),
            
            VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = unchecked((uint)1),
            
            VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDiscardRectangleModeEXT VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT;
        
        public const vulkan.VkDiscardRectangleModeEXT VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT;
        
        public const vulkan.VkDiscardRectangleModeEXT VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT;
        
        public enum VkConservativeRasterizationModeEXT : uint
        {
            VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = unchecked((uint)0),
            
            VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = unchecked((uint)1),
            
            VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = unchecked((uint)2),
            
            VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkConservativeRasterizationModeEXT VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT;
        
        public const vulkan.VkConservativeRasterizationModeEXT VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT;
        
        public const vulkan.VkConservativeRasterizationModeEXT VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT;
        
        public const vulkan.VkConservativeRasterizationModeEXT VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT;
        
        public enum VkDebugUtilsMessageSeverityFlagBitsEXT : uint
        {
            VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = unchecked((uint)1),
            
            VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = unchecked((uint)16),
            
            VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = unchecked((uint)256),
            
            VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = unchecked((uint)4096),
            
            VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDebugUtilsMessageSeverityFlagBitsEXT VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT;
        
        public const vulkan.VkDebugUtilsMessageSeverityFlagBitsEXT VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT;
        
        public const vulkan.VkDebugUtilsMessageSeverityFlagBitsEXT VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT;
        
        public const vulkan.VkDebugUtilsMessageSeverityFlagBitsEXT VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT;
        
        public const vulkan.VkDebugUtilsMessageSeverityFlagBitsEXT VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT;
        
        public enum VkDebugUtilsMessageTypeFlagBitsEXT : uint
        {
            VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = unchecked((uint)1),
            
            VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = unchecked((uint)2),
            
            VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = unchecked((uint)4),
            
            VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = unchecked((uint)8),
            
            VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDebugUtilsMessageTypeFlagBitsEXT VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT;
        
        public const vulkan.VkDebugUtilsMessageTypeFlagBitsEXT VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT;
        
        public const vulkan.VkDebugUtilsMessageTypeFlagBitsEXT VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT;
        
        public const vulkan.VkDebugUtilsMessageTypeFlagBitsEXT VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT;
        
        public const vulkan.VkDebugUtilsMessageTypeFlagBitsEXT VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT;
        
        public enum VkBlendOverlapEXT : uint
        {
            VK_BLEND_OVERLAP_UNCORRELATED_EXT = unchecked((uint)0),
            
            VK_BLEND_OVERLAP_DISJOINT_EXT = unchecked((uint)1),
            
            VK_BLEND_OVERLAP_CONJOINT_EXT = unchecked((uint)2),
            
            VK_BLEND_OVERLAP_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkBlendOverlapEXT VK_BLEND_OVERLAP_UNCORRELATED_EXT = VkBlendOverlapEXT.VK_BLEND_OVERLAP_UNCORRELATED_EXT;
        
        public const vulkan.VkBlendOverlapEXT VK_BLEND_OVERLAP_DISJOINT_EXT = VkBlendOverlapEXT.VK_BLEND_OVERLAP_DISJOINT_EXT;
        
        public const vulkan.VkBlendOverlapEXT VK_BLEND_OVERLAP_CONJOINT_EXT = VkBlendOverlapEXT.VK_BLEND_OVERLAP_CONJOINT_EXT;
        
        public const vulkan.VkBlendOverlapEXT VK_BLEND_OVERLAP_MAX_ENUM_EXT = VkBlendOverlapEXT.VK_BLEND_OVERLAP_MAX_ENUM_EXT;
        
        public enum VkCoverageModulationModeNV : uint
        {
            VK_COVERAGE_MODULATION_MODE_NONE_NV = unchecked((uint)0),
            
            VK_COVERAGE_MODULATION_MODE_RGB_NV = unchecked((uint)1),
            
            VK_COVERAGE_MODULATION_MODE_ALPHA_NV = unchecked((uint)2),
            
            VK_COVERAGE_MODULATION_MODE_RGBA_NV = unchecked((uint)3),
            
            VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkCoverageModulationModeNV VK_COVERAGE_MODULATION_MODE_NONE_NV = VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_NONE_NV;
        
        public const vulkan.VkCoverageModulationModeNV VK_COVERAGE_MODULATION_MODE_RGB_NV = VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_RGB_NV;
        
        public const vulkan.VkCoverageModulationModeNV VK_COVERAGE_MODULATION_MODE_ALPHA_NV = VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_ALPHA_NV;
        
        public const vulkan.VkCoverageModulationModeNV VK_COVERAGE_MODULATION_MODE_RGBA_NV = VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_RGBA_NV;
        
        public const vulkan.VkCoverageModulationModeNV VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV;
        
        public enum VkValidationCacheHeaderVersionEXT : uint
        {
            VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = unchecked((uint)1),
            
            VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkValidationCacheHeaderVersionEXT VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = VkValidationCacheHeaderVersionEXT.VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT;
        
        public const vulkan.VkValidationCacheHeaderVersionEXT VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = VkValidationCacheHeaderVersionEXT.VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT;
        
        public enum VkShadingRatePaletteEntryNV : uint
        {
            VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = unchecked((uint)0),
            
            VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = unchecked((uint)1),
            
            VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = unchecked((uint)2),
            
            VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = unchecked((uint)3),
            
            VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = unchecked((uint)4),
            
            VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = unchecked((uint)5),
            
            VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = unchecked((uint)6),
            
            VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = unchecked((uint)7),
            
            VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = unchecked((uint)8),
            
            VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = unchecked((uint)9),
            
            VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = unchecked((uint)10),
            
            VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = unchecked((uint)11),
            
            VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkShadingRatePaletteEntryNV VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV;
        
        public const vulkan.VkShadingRatePaletteEntryNV VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV;
        
        public const vulkan.VkShadingRatePaletteEntryNV VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV;
        
        public const vulkan.VkShadingRatePaletteEntryNV VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV;
        
        public const vulkan.VkShadingRatePaletteEntryNV VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV;
        
        public const vulkan.VkShadingRatePaletteEntryNV VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV;
        
        public const vulkan.VkShadingRatePaletteEntryNV VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV;
        
        public const vulkan.VkShadingRatePaletteEntryNV VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV;
        
        public const vulkan.VkShadingRatePaletteEntryNV VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV;
        
        public const vulkan.VkShadingRatePaletteEntryNV VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV;
        
        public const vulkan.VkShadingRatePaletteEntryNV VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV;
        
        public const vulkan.VkShadingRatePaletteEntryNV VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV;
        
        public const vulkan.VkShadingRatePaletteEntryNV VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV;
        
        public enum VkCoarseSampleOrderTypeNV : uint
        {
            VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = unchecked((uint)0),
            
            VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = unchecked((uint)1),
            
            VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = unchecked((uint)2),
            
            VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = unchecked((uint)3),
            
            VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkCoarseSampleOrderTypeNV VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV;
        
        public const vulkan.VkCoarseSampleOrderTypeNV VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV;
        
        public const vulkan.VkCoarseSampleOrderTypeNV VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV;
        
        public const vulkan.VkCoarseSampleOrderTypeNV VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV;
        
        public const vulkan.VkCoarseSampleOrderTypeNV VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV;
        
        public enum VkRayTracingShaderGroupTypeKHR : uint
        {
            VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = unchecked((uint)0),
            
            VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = unchecked((uint)1),
            
            VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = unchecked((uint)2),
            
            VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = unchecked((uint)0),
            
            VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = unchecked((uint)1),
            
            VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = unchecked((uint)2),
            
            VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkRayTracingShaderGroupTypeKHR VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR;
        
        public const vulkan.VkRayTracingShaderGroupTypeKHR VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR;
        
        public const vulkan.VkRayTracingShaderGroupTypeKHR VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR;
        
        public const vulkan.VkRayTracingShaderGroupTypeKHR VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV;
        
        public const vulkan.VkRayTracingShaderGroupTypeKHR VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV;
        
        public const vulkan.VkRayTracingShaderGroupTypeKHR VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV;
        
        public const vulkan.VkRayTracingShaderGroupTypeKHR VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR;
        
        public enum VkGeometryTypeKHR : uint
        {
            VK_GEOMETRY_TYPE_TRIANGLES_KHR = unchecked((uint)0),
            
            VK_GEOMETRY_TYPE_AABBS_KHR = unchecked((uint)1),
            
            VK_GEOMETRY_TYPE_INSTANCES_KHR = unchecked((uint)2),
            
            VK_GEOMETRY_TYPE_TRIANGLES_NV = unchecked((uint)0),
            
            VK_GEOMETRY_TYPE_AABBS_NV = unchecked((uint)1),
            
            VK_GEOMETRY_TYPE_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkGeometryTypeKHR VK_GEOMETRY_TYPE_TRIANGLES_KHR = VkGeometryTypeKHR.VK_GEOMETRY_TYPE_TRIANGLES_KHR;
        
        public const vulkan.VkGeometryTypeKHR VK_GEOMETRY_TYPE_AABBS_KHR = VkGeometryTypeKHR.VK_GEOMETRY_TYPE_AABBS_KHR;
        
        public const vulkan.VkGeometryTypeKHR VK_GEOMETRY_TYPE_INSTANCES_KHR = VkGeometryTypeKHR.VK_GEOMETRY_TYPE_INSTANCES_KHR;
        
        public const vulkan.VkGeometryTypeKHR VK_GEOMETRY_TYPE_TRIANGLES_NV = VkGeometryTypeKHR.VK_GEOMETRY_TYPE_TRIANGLES_NV;
        
        public const vulkan.VkGeometryTypeKHR VK_GEOMETRY_TYPE_AABBS_NV = VkGeometryTypeKHR.VK_GEOMETRY_TYPE_AABBS_NV;
        
        public const vulkan.VkGeometryTypeKHR VK_GEOMETRY_TYPE_MAX_ENUM_KHR = VkGeometryTypeKHR.VK_GEOMETRY_TYPE_MAX_ENUM_KHR;
        
        public enum VkAccelerationStructureTypeKHR : uint
        {
            VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = unchecked((uint)0),
            
            VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = unchecked((uint)1),
            
            VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = unchecked((uint)2),
            
            VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = unchecked((uint)0),
            
            VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = unchecked((uint)1),
            
            VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkAccelerationStructureTypeKHR VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR;
        
        public const vulkan.VkAccelerationStructureTypeKHR VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR;
        
        public const vulkan.VkAccelerationStructureTypeKHR VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR;
        
        public const vulkan.VkAccelerationStructureTypeKHR VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV;
        
        public const vulkan.VkAccelerationStructureTypeKHR VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV;
        
        public const vulkan.VkAccelerationStructureTypeKHR VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR;
        
        public enum VkCopyAccelerationStructureModeKHR : uint
        {
            VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = unchecked((uint)0),
            
            VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = unchecked((uint)1),
            
            VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = unchecked((uint)2),
            
            VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = unchecked((uint)3),
            
            VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = unchecked((uint)0),
            
            VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = unchecked((uint)1),
            
            VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkCopyAccelerationStructureModeKHR VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR;
        
        public const vulkan.VkCopyAccelerationStructureModeKHR VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR;
        
        public const vulkan.VkCopyAccelerationStructureModeKHR VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR;
        
        public const vulkan.VkCopyAccelerationStructureModeKHR VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR;
        
        public const vulkan.VkCopyAccelerationStructureModeKHR VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV;
        
        public const vulkan.VkCopyAccelerationStructureModeKHR VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV;
        
        public const vulkan.VkCopyAccelerationStructureModeKHR VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR;
        
        public enum VkAccelerationStructureMemoryRequirementsTypeNV : uint
        {
            VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = unchecked((uint)0),
            
            VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = unchecked((uint)1),
            
            VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = unchecked((uint)2),
            
            VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkAccelerationStructureMemoryRequirementsTypeNV VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV;
        
        public const vulkan.VkAccelerationStructureMemoryRequirementsTypeNV VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV;
        
        public const vulkan.VkAccelerationStructureMemoryRequirementsTypeNV VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV;
        
        public const vulkan.VkAccelerationStructureMemoryRequirementsTypeNV VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV;
        
        public enum VkGeometryFlagBitsKHR : uint
        {
            VK_GEOMETRY_OPAQUE_BIT_KHR = unchecked((uint)1),
            
            VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = unchecked((uint)2),
            
            VK_GEOMETRY_OPAQUE_BIT_NV = unchecked((uint)1),
            
            VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = unchecked((uint)2),
            
            VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkGeometryFlagBitsKHR VK_GEOMETRY_OPAQUE_BIT_KHR = VkGeometryFlagBitsKHR.VK_GEOMETRY_OPAQUE_BIT_KHR;
        
        public const vulkan.VkGeometryFlagBitsKHR VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = VkGeometryFlagBitsKHR.VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR;
        
        public const vulkan.VkGeometryFlagBitsKHR VK_GEOMETRY_OPAQUE_BIT_NV = VkGeometryFlagBitsKHR.VK_GEOMETRY_OPAQUE_BIT_NV;
        
        public const vulkan.VkGeometryFlagBitsKHR VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = VkGeometryFlagBitsKHR.VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV;
        
        public const vulkan.VkGeometryFlagBitsKHR VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = VkGeometryFlagBitsKHR.VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkGeometryInstanceFlagBitsKHR : uint
        {
            VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = unchecked((uint)1),
            
            VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = unchecked((uint)2),
            
            VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = unchecked((uint)4),
            
            VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = unchecked((uint)8),
            
            VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = unchecked((uint)16),
            
            VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = unchecked((uint)32),
            
            VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = unchecked((uint)2),
            
            VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = unchecked((uint)1),
            
            VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = unchecked((uint)2),
            
            VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = unchecked((uint)4),
            
            VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = unchecked((uint)8),
            
            VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkGeometryInstanceFlagBitsKHR VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR;
        
        public const vulkan.VkGeometryInstanceFlagBitsKHR VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR;
        
        public const vulkan.VkGeometryInstanceFlagBitsKHR VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR;
        
        public const vulkan.VkGeometryInstanceFlagBitsKHR VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR;
        
        public const vulkan.VkGeometryInstanceFlagBitsKHR VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT;
        
        public const vulkan.VkGeometryInstanceFlagBitsKHR VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT;
        
        public const vulkan.VkGeometryInstanceFlagBitsKHR VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR;
        
        public const vulkan.VkGeometryInstanceFlagBitsKHR VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV;
        
        public const vulkan.VkGeometryInstanceFlagBitsKHR VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV;
        
        public const vulkan.VkGeometryInstanceFlagBitsKHR VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV;
        
        public const vulkan.VkGeometryInstanceFlagBitsKHR VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV;
        
        public const vulkan.VkGeometryInstanceFlagBitsKHR VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkBuildAccelerationStructureFlagBitsKHR : uint
        {
            VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = unchecked((uint)1),
            
            VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = unchecked((uint)2),
            
            VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = unchecked((uint)4),
            
            VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = unchecked((uint)8),
            
            VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = unchecked((uint)16),
            
            VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = unchecked((uint)32),
            
            VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = unchecked((uint)64),
            
            VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = unchecked((uint)128),
            
            VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = unchecked((uint)256),
            
            VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISPLACEMENT_MICROMAP_UPDATE_NV = unchecked((uint)512),
            
            VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR = unchecked((uint)2048),
            
            VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = unchecked((uint)1),
            
            VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = unchecked((uint)2),
            
            VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = unchecked((uint)4),
            
            VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = unchecked((uint)8),
            
            VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = unchecked((uint)16),
            
            VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR;
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR;
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR;
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR;
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR;
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV;
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT;
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT;
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT;
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISPLACEMENT_MICROMAP_UPDATE_NV = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISPLACEMENT_MICROMAP_UPDATE_NV;
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR;
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV;
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV;
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV;
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV;
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV;
        
        public const vulkan.VkBuildAccelerationStructureFlagBitsKHR VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkPipelineCompilerControlFlagBitsAMD : uint
        {
            VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPipelineCompilerControlFlagBitsAMD VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = VkPipelineCompilerControlFlagBitsAMD.VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD;
        
        public enum VkTimeDomainEXT : uint
        {
            VK_TIME_DOMAIN_DEVICE_EXT = unchecked((uint)0),
            
            VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = unchecked((uint)1),
            
            VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = unchecked((uint)2),
            
            VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = unchecked((uint)3),
            
            VK_TIME_DOMAIN_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkTimeDomainEXT VK_TIME_DOMAIN_DEVICE_EXT = VkTimeDomainEXT.VK_TIME_DOMAIN_DEVICE_EXT;
        
        public const vulkan.VkTimeDomainEXT VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = VkTimeDomainEXT.VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT;
        
        public const vulkan.VkTimeDomainEXT VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = VkTimeDomainEXT.VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT;
        
        public const vulkan.VkTimeDomainEXT VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = VkTimeDomainEXT.VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT;
        
        public const vulkan.VkTimeDomainEXT VK_TIME_DOMAIN_MAX_ENUM_EXT = VkTimeDomainEXT.VK_TIME_DOMAIN_MAX_ENUM_EXT;
        
        public enum VkMemoryOverallocationBehaviorAMD : uint
        {
            VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = unchecked((uint)0),
            
            VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = unchecked((uint)1),
            
            VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = unchecked((uint)2),
            
            VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkMemoryOverallocationBehaviorAMD VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD;
        
        public const vulkan.VkMemoryOverallocationBehaviorAMD VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD;
        
        public const vulkan.VkMemoryOverallocationBehaviorAMD VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD;
        
        public const vulkan.VkMemoryOverallocationBehaviorAMD VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD;
        
        public enum VkPerformanceConfigurationTypeINTEL : uint
        {
            VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = unchecked((uint)0),
            
            VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPerformanceConfigurationTypeINTEL VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = VkPerformanceConfigurationTypeINTEL.VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL;
        
        public const vulkan.VkPerformanceConfigurationTypeINTEL VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = VkPerformanceConfigurationTypeINTEL.VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL;
        
        public enum VkQueryPoolSamplingModeINTEL : uint
        {
            VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = unchecked((uint)0),
            
            VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkQueryPoolSamplingModeINTEL VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = VkQueryPoolSamplingModeINTEL.VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL;
        
        public const vulkan.VkQueryPoolSamplingModeINTEL VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = VkQueryPoolSamplingModeINTEL.VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL;
        
        public enum VkPerformanceOverrideTypeINTEL : uint
        {
            VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = unchecked((uint)0),
            
            VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = unchecked((uint)1),
            
            VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPerformanceOverrideTypeINTEL VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL;
        
        public const vulkan.VkPerformanceOverrideTypeINTEL VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL;
        
        public const vulkan.VkPerformanceOverrideTypeINTEL VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL;
        
        public enum VkPerformanceParameterTypeINTEL : uint
        {
            VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = unchecked((uint)0),
            
            VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = unchecked((uint)1),
            
            VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPerformanceParameterTypeINTEL VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL;
        
        public const vulkan.VkPerformanceParameterTypeINTEL VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL;
        
        public const vulkan.VkPerformanceParameterTypeINTEL VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL;
        
        public enum VkPerformanceValueTypeINTEL : uint
        {
            VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = unchecked((uint)0),
            
            VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = unchecked((uint)1),
            
            VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = unchecked((uint)2),
            
            VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = unchecked((uint)3),
            
            VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = unchecked((uint)4),
            
            VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPerformanceValueTypeINTEL VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL;
        
        public const vulkan.VkPerformanceValueTypeINTEL VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL;
        
        public const vulkan.VkPerformanceValueTypeINTEL VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL;
        
        public const vulkan.VkPerformanceValueTypeINTEL VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL;
        
        public const vulkan.VkPerformanceValueTypeINTEL VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL;
        
        public const vulkan.VkPerformanceValueTypeINTEL VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL;
        
        public enum VkShaderCorePropertiesFlagBitsAMD : uint
        {
            VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkShaderCorePropertiesFlagBitsAMD VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = VkShaderCorePropertiesFlagBitsAMD.VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD;
        
        public enum VkValidationFeatureEnableEXT : uint
        {
            VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = unchecked((uint)0),
            
            VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = unchecked((uint)1),
            
            VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = unchecked((uint)2),
            
            VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = unchecked((uint)3),
            
            VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = unchecked((uint)4),
            
            VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkValidationFeatureEnableEXT VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT;
        
        public const vulkan.VkValidationFeatureEnableEXT VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT;
        
        public const vulkan.VkValidationFeatureEnableEXT VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT;
        
        public const vulkan.VkValidationFeatureEnableEXT VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT;
        
        public const vulkan.VkValidationFeatureEnableEXT VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT;
        
        public const vulkan.VkValidationFeatureEnableEXT VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT;
        
        public enum VkValidationFeatureDisableEXT : uint
        {
            VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = unchecked((uint)0),
            
            VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = unchecked((uint)1),
            
            VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = unchecked((uint)2),
            
            VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = unchecked((uint)3),
            
            VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = unchecked((uint)4),
            
            VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = unchecked((uint)5),
            
            VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = unchecked((uint)6),
            
            VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = unchecked((uint)7),
            
            VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkValidationFeatureDisableEXT VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_ALL_EXT;
        
        public const vulkan.VkValidationFeatureDisableEXT VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT;
        
        public const vulkan.VkValidationFeatureDisableEXT VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT;
        
        public const vulkan.VkValidationFeatureDisableEXT VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT;
        
        public const vulkan.VkValidationFeatureDisableEXT VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT;
        
        public const vulkan.VkValidationFeatureDisableEXT VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT;
        
        public const vulkan.VkValidationFeatureDisableEXT VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT;
        
        public const vulkan.VkValidationFeatureDisableEXT VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT;
        
        public const vulkan.VkValidationFeatureDisableEXT VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT;
        
        public enum VkCoverageReductionModeNV : uint
        {
            VK_COVERAGE_REDUCTION_MODE_MERGE_NV = unchecked((uint)0),
            
            VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = unchecked((uint)1),
            
            VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkCoverageReductionModeNV VK_COVERAGE_REDUCTION_MODE_MERGE_NV = VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_MERGE_NV;
        
        public const vulkan.VkCoverageReductionModeNV VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV;
        
        public const vulkan.VkCoverageReductionModeNV VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV;
        
        public enum VkProvokingVertexModeEXT : uint
        {
            VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = unchecked((uint)0),
            
            VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = unchecked((uint)1),
            
            VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkProvokingVertexModeEXT VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = VkProvokingVertexModeEXT.VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT;
        
        public const vulkan.VkProvokingVertexModeEXT VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = VkProvokingVertexModeEXT.VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT;
        
        public const vulkan.VkProvokingVertexModeEXT VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = VkProvokingVertexModeEXT.VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT;
        
        public enum VkLineRasterizationModeEXT : uint
        {
            VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = unchecked((uint)0),
            
            VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = unchecked((uint)1),
            
            VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = unchecked((uint)2),
            
            VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = unchecked((uint)3),
            
            VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkLineRasterizationModeEXT VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT;
        
        public const vulkan.VkLineRasterizationModeEXT VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT;
        
        public const vulkan.VkLineRasterizationModeEXT VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT;
        
        public const vulkan.VkLineRasterizationModeEXT VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT;
        
        public const vulkan.VkLineRasterizationModeEXT VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT;
        
        public enum VkHostImageCopyFlagBitsEXT : uint
        {
            VK_HOST_IMAGE_COPY_MEMCPY_EXT = unchecked((uint)1),
            
            VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkHostImageCopyFlagBitsEXT VK_HOST_IMAGE_COPY_MEMCPY_EXT = VkHostImageCopyFlagBitsEXT.VK_HOST_IMAGE_COPY_MEMCPY_EXT;
        
        public const vulkan.VkHostImageCopyFlagBitsEXT VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM_EXT = VkHostImageCopyFlagBitsEXT.VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM_EXT;
        
        public enum VkPresentScalingFlagBitsEXT : uint
        {
            VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT = unchecked((uint)1),
            
            VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT = unchecked((uint)2),
            
            VK_PRESENT_SCALING_STRETCH_BIT_EXT = unchecked((uint)4),
            
            VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPresentScalingFlagBitsEXT VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT = VkPresentScalingFlagBitsEXT.VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT;
        
        public const vulkan.VkPresentScalingFlagBitsEXT VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT = VkPresentScalingFlagBitsEXT.VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT;
        
        public const vulkan.VkPresentScalingFlagBitsEXT VK_PRESENT_SCALING_STRETCH_BIT_EXT = VkPresentScalingFlagBitsEXT.VK_PRESENT_SCALING_STRETCH_BIT_EXT;
        
        public const vulkan.VkPresentScalingFlagBitsEXT VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT = VkPresentScalingFlagBitsEXT.VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT;
        
        public enum VkPresentGravityFlagBitsEXT : uint
        {
            VK_PRESENT_GRAVITY_MIN_BIT_EXT = unchecked((uint)1),
            
            VK_PRESENT_GRAVITY_MAX_BIT_EXT = unchecked((uint)2),
            
            VK_PRESENT_GRAVITY_CENTERED_BIT_EXT = unchecked((uint)4),
            
            VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkPresentGravityFlagBitsEXT VK_PRESENT_GRAVITY_MIN_BIT_EXT = VkPresentGravityFlagBitsEXT.VK_PRESENT_GRAVITY_MIN_BIT_EXT;
        
        public const vulkan.VkPresentGravityFlagBitsEXT VK_PRESENT_GRAVITY_MAX_BIT_EXT = VkPresentGravityFlagBitsEXT.VK_PRESENT_GRAVITY_MAX_BIT_EXT;
        
        public const vulkan.VkPresentGravityFlagBitsEXT VK_PRESENT_GRAVITY_CENTERED_BIT_EXT = VkPresentGravityFlagBitsEXT.VK_PRESENT_GRAVITY_CENTERED_BIT_EXT;
        
        public const vulkan.VkPresentGravityFlagBitsEXT VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT = VkPresentGravityFlagBitsEXT.VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT;
        
        public enum VkIndirectCommandsTokenTypeNV : uint
        {
            VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = unchecked((uint)0),
            
            VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = unchecked((uint)1),
            
            VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = unchecked((uint)2),
            
            VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = unchecked((uint)3),
            
            VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = unchecked((uint)4),
            
            VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = unchecked((uint)5),
            
            VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = unchecked((uint)6),
            
            VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = unchecked((uint)7),
            
            VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = unchecked((uint)1000328000),
            
            VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV = unchecked((uint)1000428003),
            
            VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV = unchecked((uint)1000428004),
            
            VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkIndirectCommandsTokenTypeNV VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV;
        
        public const vulkan.VkIndirectCommandsTokenTypeNV VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV;
        
        public const vulkan.VkIndirectCommandsTokenTypeNV VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV;
        
        public const vulkan.VkIndirectCommandsTokenTypeNV VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV;
        
        public const vulkan.VkIndirectCommandsTokenTypeNV VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV;
        
        public const vulkan.VkIndirectCommandsTokenTypeNV VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV;
        
        public const vulkan.VkIndirectCommandsTokenTypeNV VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV;
        
        public const vulkan.VkIndirectCommandsTokenTypeNV VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV;
        
        public const vulkan.VkIndirectCommandsTokenTypeNV VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV;
        
        public const vulkan.VkIndirectCommandsTokenTypeNV VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV;
        
        public const vulkan.VkIndirectCommandsTokenTypeNV VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV;
        
        public const vulkan.VkIndirectCommandsTokenTypeNV VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV;
        
        public enum VkIndirectStateFlagBitsNV : uint
        {
            VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = unchecked((uint)1),
            
            VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkIndirectStateFlagBitsNV VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = VkIndirectStateFlagBitsNV.VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV;
        
        public const vulkan.VkIndirectStateFlagBitsNV VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = VkIndirectStateFlagBitsNV.VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV;
        
        public enum VkIndirectCommandsLayoutUsageFlagBitsNV : uint
        {
            VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = unchecked((uint)1),
            
            VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = unchecked((uint)2),
            
            VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = unchecked((uint)4),
            
            VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkIndirectCommandsLayoutUsageFlagBitsNV VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV;
        
        public const vulkan.VkIndirectCommandsLayoutUsageFlagBitsNV VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV;
        
        public const vulkan.VkIndirectCommandsLayoutUsageFlagBitsNV VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV;
        
        public const vulkan.VkIndirectCommandsLayoutUsageFlagBitsNV VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV;
        
        public enum VkDepthBiasRepresentationEXT : uint
        {
            VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT = unchecked((uint)0),
            
            VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT = unchecked((uint)1),
            
            VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT = unchecked((uint)2),
            
            VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDepthBiasRepresentationEXT VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT = VkDepthBiasRepresentationEXT.VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT;
        
        public const vulkan.VkDepthBiasRepresentationEXT VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT = VkDepthBiasRepresentationEXT.VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT;
        
        public const vulkan.VkDepthBiasRepresentationEXT VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT = VkDepthBiasRepresentationEXT.VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT;
        
        public const vulkan.VkDepthBiasRepresentationEXT VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT = VkDepthBiasRepresentationEXT.VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT;
        
        public enum VkDeviceMemoryReportEventTypeEXT : uint
        {
            VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = unchecked((uint)0),
            
            VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = unchecked((uint)1),
            
            VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = unchecked((uint)2),
            
            VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = unchecked((uint)3),
            
            VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = unchecked((uint)4),
            
            VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDeviceMemoryReportEventTypeEXT VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT;
        
        public const vulkan.VkDeviceMemoryReportEventTypeEXT VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT;
        
        public const vulkan.VkDeviceMemoryReportEventTypeEXT VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT;
        
        public const vulkan.VkDeviceMemoryReportEventTypeEXT VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT;
        
        public const vulkan.VkDeviceMemoryReportEventTypeEXT VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT;
        
        public const vulkan.VkDeviceMemoryReportEventTypeEXT VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT;
        
        public enum VkDeviceDiagnosticsConfigFlagBitsNV : uint
        {
            VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = unchecked((uint)1),
            
            VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = unchecked((uint)2),
            
            VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = unchecked((uint)4),
            
            VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = unchecked((uint)8),
            
            VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDeviceDiagnosticsConfigFlagBitsNV VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV;
        
        public const vulkan.VkDeviceDiagnosticsConfigFlagBitsNV VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV;
        
        public const vulkan.VkDeviceDiagnosticsConfigFlagBitsNV VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV;
        
        public const vulkan.VkDeviceDiagnosticsConfigFlagBitsNV VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV;
        
        public const vulkan.VkDeviceDiagnosticsConfigFlagBitsNV VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV;
        
        public enum VkGraphicsPipelineLibraryFlagBitsEXT : uint
        {
            VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = unchecked((uint)1),
            
            VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = unchecked((uint)2),
            
            VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = unchecked((uint)4),
            
            VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = unchecked((uint)8),
            
            VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkGraphicsPipelineLibraryFlagBitsEXT VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT;
        
        public const vulkan.VkGraphicsPipelineLibraryFlagBitsEXT VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT;
        
        public const vulkan.VkGraphicsPipelineLibraryFlagBitsEXT VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT;
        
        public const vulkan.VkGraphicsPipelineLibraryFlagBitsEXT VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT;
        
        public const vulkan.VkGraphicsPipelineLibraryFlagBitsEXT VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT = VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT;
        
        public enum VkFragmentShadingRateTypeNV : uint
        {
            VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = unchecked((uint)0),
            
            VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = unchecked((uint)1),
            
            VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkFragmentShadingRateTypeNV VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = VkFragmentShadingRateTypeNV.VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV;
        
        public const vulkan.VkFragmentShadingRateTypeNV VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = VkFragmentShadingRateTypeNV.VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV;
        
        public const vulkan.VkFragmentShadingRateTypeNV VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = VkFragmentShadingRateTypeNV.VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV;
        
        public enum VkFragmentShadingRateNV : uint
        {
            VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = unchecked((uint)0),
            
            VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = unchecked((uint)1),
            
            VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = unchecked((uint)4),
            
            VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = unchecked((uint)5),
            
            VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = unchecked((uint)6),
            
            VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = unchecked((uint)9),
            
            VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = unchecked((uint)10),
            
            VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = unchecked((uint)11),
            
            VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = unchecked((uint)12),
            
            VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = unchecked((uint)13),
            
            VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = unchecked((uint)14),
            
            VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = unchecked((uint)15),
            
            VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkFragmentShadingRateNV VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV;
        
        public const vulkan.VkFragmentShadingRateNV VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV;
        
        public const vulkan.VkFragmentShadingRateNV VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV;
        
        public const vulkan.VkFragmentShadingRateNV VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV;
        
        public const vulkan.VkFragmentShadingRateNV VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV;
        
        public const vulkan.VkFragmentShadingRateNV VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV;
        
        public const vulkan.VkFragmentShadingRateNV VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV;
        
        public const vulkan.VkFragmentShadingRateNV VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV;
        
        public const vulkan.VkFragmentShadingRateNV VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV;
        
        public const vulkan.VkFragmentShadingRateNV VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV;
        
        public const vulkan.VkFragmentShadingRateNV VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV;
        
        public const vulkan.VkFragmentShadingRateNV VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV;
        
        public const vulkan.VkFragmentShadingRateNV VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV;
        
        public enum VkAccelerationStructureMotionInstanceTypeNV : uint
        {
            VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = unchecked((uint)0),
            
            VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = unchecked((uint)1),
            
            VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = unchecked((uint)2),
            
            VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkAccelerationStructureMotionInstanceTypeNV VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV;
        
        public const vulkan.VkAccelerationStructureMotionInstanceTypeNV VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV;
        
        public const vulkan.VkAccelerationStructureMotionInstanceTypeNV VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV;
        
        public const vulkan.VkAccelerationStructureMotionInstanceTypeNV VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV;
        
        public enum VkImageCompressionFlagBitsEXT : uint
        {
            VK_IMAGE_COMPRESSION_DEFAULT_EXT = unchecked((uint)0),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = unchecked((uint)1),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = unchecked((uint)2),
            
            VK_IMAGE_COMPRESSION_DISABLED_EXT = unchecked((uint)4),
            
            VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkImageCompressionFlagBitsEXT VK_IMAGE_COMPRESSION_DEFAULT_EXT = VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_DEFAULT_EXT;
        
        public const vulkan.VkImageCompressionFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT;
        
        public const vulkan.VkImageCompressionFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT;
        
        public const vulkan.VkImageCompressionFlagBitsEXT VK_IMAGE_COMPRESSION_DISABLED_EXT = VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_DISABLED_EXT;
        
        public const vulkan.VkImageCompressionFlagBitsEXT VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT = VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT;
        
        public enum VkImageCompressionFixedRateFlagBitsEXT : uint
        {
            VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = unchecked((uint)0),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = unchecked((uint)1),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = unchecked((uint)2),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = unchecked((uint)4),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = unchecked((uint)8),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = unchecked((uint)16),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = unchecked((uint)32),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = unchecked((uint)64),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = unchecked((uint)128),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = unchecked((uint)256),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = unchecked((uint)512),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = unchecked((uint)1024),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = unchecked((uint)2048),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = unchecked((uint)4096),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = unchecked((uint)8192),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = unchecked((uint)16384),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = unchecked((uint)32768),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = unchecked((uint)65536),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = unchecked((uint)131072),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = unchecked((uint)262144),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = unchecked((uint)524288),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = unchecked((uint)1048576),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = unchecked((uint)2097152),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = unchecked((uint)4194304),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = unchecked((uint)8388608),
            
            VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT;
        
        public const vulkan.VkImageCompressionFixedRateFlagBitsEXT VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT = VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT;
        
        public enum VkDeviceFaultAddressTypeEXT : uint
        {
            VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = unchecked((uint)0),
            
            VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = unchecked((uint)1),
            
            VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = unchecked((uint)2),
            
            VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = unchecked((uint)3),
            
            VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = unchecked((uint)4),
            
            VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = unchecked((uint)5),
            
            VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = unchecked((uint)6),
            
            VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDeviceFaultAddressTypeEXT VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT;
        
        public const vulkan.VkDeviceFaultAddressTypeEXT VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT;
        
        public const vulkan.VkDeviceFaultAddressTypeEXT VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT;
        
        public const vulkan.VkDeviceFaultAddressTypeEXT VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT;
        
        public const vulkan.VkDeviceFaultAddressTypeEXT VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT;
        
        public const vulkan.VkDeviceFaultAddressTypeEXT VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT;
        
        public const vulkan.VkDeviceFaultAddressTypeEXT VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT;
        
        public const vulkan.VkDeviceFaultAddressTypeEXT VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT = VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT;
        
        public enum VkDeviceFaultVendorBinaryHeaderVersionEXT : uint
        {
            VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = unchecked((uint)1),
            
            VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDeviceFaultVendorBinaryHeaderVersionEXT VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = VkDeviceFaultVendorBinaryHeaderVersionEXT.VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT;
        
        public const vulkan.VkDeviceFaultVendorBinaryHeaderVersionEXT VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT = VkDeviceFaultVendorBinaryHeaderVersionEXT.VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT;
        
        public enum VkDeviceAddressBindingTypeEXT : uint
        {
            VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = unchecked((uint)0),
            
            VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = unchecked((uint)1),
            
            VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDeviceAddressBindingTypeEXT VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = VkDeviceAddressBindingTypeEXT.VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT;
        
        public const vulkan.VkDeviceAddressBindingTypeEXT VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = VkDeviceAddressBindingTypeEXT.VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT;
        
        public const vulkan.VkDeviceAddressBindingTypeEXT VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT = VkDeviceAddressBindingTypeEXT.VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT;
        
        public enum VkDeviceAddressBindingFlagBitsEXT : uint
        {
            VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = unchecked((uint)1),
            
            VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDeviceAddressBindingFlagBitsEXT VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = VkDeviceAddressBindingFlagBitsEXT.VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT;
        
        public const vulkan.VkDeviceAddressBindingFlagBitsEXT VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT = VkDeviceAddressBindingFlagBitsEXT.VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT;
        
        public enum VkMicromapTypeEXT : uint
        {
            VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT = unchecked((uint)0),
            
            VK_MICROMAP_TYPE_DISPLACEMENT_MICROMAP_NV = unchecked((uint)1000397000),
            
            VK_MICROMAP_TYPE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkMicromapTypeEXT VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT = VkMicromapTypeEXT.VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT;
        
        public const vulkan.VkMicromapTypeEXT VK_MICROMAP_TYPE_DISPLACEMENT_MICROMAP_NV = VkMicromapTypeEXT.VK_MICROMAP_TYPE_DISPLACEMENT_MICROMAP_NV;
        
        public const vulkan.VkMicromapTypeEXT VK_MICROMAP_TYPE_MAX_ENUM_EXT = VkMicromapTypeEXT.VK_MICROMAP_TYPE_MAX_ENUM_EXT;
        
        public enum VkBuildMicromapModeEXT : uint
        {
            VK_BUILD_MICROMAP_MODE_BUILD_EXT = unchecked((uint)0),
            
            VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkBuildMicromapModeEXT VK_BUILD_MICROMAP_MODE_BUILD_EXT = VkBuildMicromapModeEXT.VK_BUILD_MICROMAP_MODE_BUILD_EXT;
        
        public const vulkan.VkBuildMicromapModeEXT VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT = VkBuildMicromapModeEXT.VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT;
        
        public enum VkCopyMicromapModeEXT : uint
        {
            VK_COPY_MICROMAP_MODE_CLONE_EXT = unchecked((uint)0),
            
            VK_COPY_MICROMAP_MODE_SERIALIZE_EXT = unchecked((uint)1),
            
            VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT = unchecked((uint)2),
            
            VK_COPY_MICROMAP_MODE_COMPACT_EXT = unchecked((uint)3),
            
            VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkCopyMicromapModeEXT VK_COPY_MICROMAP_MODE_CLONE_EXT = VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_CLONE_EXT;
        
        public const vulkan.VkCopyMicromapModeEXT VK_COPY_MICROMAP_MODE_SERIALIZE_EXT = VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_SERIALIZE_EXT;
        
        public const vulkan.VkCopyMicromapModeEXT VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT = VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT;
        
        public const vulkan.VkCopyMicromapModeEXT VK_COPY_MICROMAP_MODE_COMPACT_EXT = VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_COMPACT_EXT;
        
        public const vulkan.VkCopyMicromapModeEXT VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT = VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT;
        
        public enum VkOpacityMicromapFormatEXT : uint
        {
            VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT = unchecked((uint)1),
            
            VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT = unchecked((uint)2),
            
            VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkOpacityMicromapFormatEXT VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT = VkOpacityMicromapFormatEXT.VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT;
        
        public const vulkan.VkOpacityMicromapFormatEXT VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT = VkOpacityMicromapFormatEXT.VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT;
        
        public const vulkan.VkOpacityMicromapFormatEXT VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT = VkOpacityMicromapFormatEXT.VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT;
        
        public enum VkOpacityMicromapSpecialIndexEXT : int
        {
            VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = unchecked((int)-1),
            
            VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = unchecked((int)-2),
            
            VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = unchecked((int)-3),
            
            VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = unchecked((int)-4),
            
            VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT = unchecked((int)2147483647),
        }
        
        public const vulkan.VkOpacityMicromapSpecialIndexEXT VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT;
        
        public const vulkan.VkOpacityMicromapSpecialIndexEXT VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT;
        
        public const vulkan.VkOpacityMicromapSpecialIndexEXT VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT;
        
        public const vulkan.VkOpacityMicromapSpecialIndexEXT VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT;
        
        public const vulkan.VkOpacityMicromapSpecialIndexEXT VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT = VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT;
        
        public enum VkAccelerationStructureCompatibilityKHR : uint
        {
            VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = unchecked((uint)0),
            
            VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = unchecked((uint)1),
            
            VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkAccelerationStructureCompatibilityKHR VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = VkAccelerationStructureCompatibilityKHR.VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR;
        
        public const vulkan.VkAccelerationStructureCompatibilityKHR VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = VkAccelerationStructureCompatibilityKHR.VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR;
        
        public const vulkan.VkAccelerationStructureCompatibilityKHR VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = VkAccelerationStructureCompatibilityKHR.VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR;
        
        public enum VkAccelerationStructureBuildTypeKHR : uint
        {
            VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = unchecked((uint)0),
            
            VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = unchecked((uint)1),
            
            VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = unchecked((uint)2),
            
            VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkAccelerationStructureBuildTypeKHR VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = VkAccelerationStructureBuildTypeKHR.VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR;
        
        public const vulkan.VkAccelerationStructureBuildTypeKHR VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = VkAccelerationStructureBuildTypeKHR.VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR;
        
        public const vulkan.VkAccelerationStructureBuildTypeKHR VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = VkAccelerationStructureBuildTypeKHR.VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR;
        
        public const vulkan.VkAccelerationStructureBuildTypeKHR VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = VkAccelerationStructureBuildTypeKHR.VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR;
        
        public enum VkBuildMicromapFlagBitsEXT : uint
        {
            VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT = unchecked((uint)1),
            
            VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT = unchecked((uint)2),
            
            VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT = unchecked((uint)4),
            
            VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkBuildMicromapFlagBitsEXT VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT = VkBuildMicromapFlagBitsEXT.VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT;
        
        public const vulkan.VkBuildMicromapFlagBitsEXT VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT = VkBuildMicromapFlagBitsEXT.VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT;
        
        public const vulkan.VkBuildMicromapFlagBitsEXT VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT = VkBuildMicromapFlagBitsEXT.VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT;
        
        public const vulkan.VkBuildMicromapFlagBitsEXT VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT = VkBuildMicromapFlagBitsEXT.VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT;
        
        public enum VkMicromapCreateFlagBitsEXT : uint
        {
            VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = unchecked((uint)1),
            
            VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkMicromapCreateFlagBitsEXT VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = VkMicromapCreateFlagBitsEXT.VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT;
        
        public const vulkan.VkMicromapCreateFlagBitsEXT VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT = VkMicromapCreateFlagBitsEXT.VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT;
        
        public enum VkSubpassMergeStatusEXT : uint
        {
            VK_SUBPASS_MERGE_STATUS_MERGED_EXT = unchecked((uint)0),
            
            VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT = unchecked((uint)1),
            
            VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = unchecked((uint)2),
            
            VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = unchecked((uint)3),
            
            VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = unchecked((uint)4),
            
            VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = unchecked((uint)5),
            
            VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = unchecked((uint)6),
            
            VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = unchecked((uint)7),
            
            VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = unchecked((uint)8),
            
            VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = unchecked((uint)9),
            
            VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = unchecked((uint)10),
            
            VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = unchecked((uint)11),
            
            VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = unchecked((uint)12),
            
            VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = unchecked((uint)13),
            
            VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkSubpassMergeStatusEXT VK_SUBPASS_MERGE_STATUS_MERGED_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_MERGED_EXT;
        
        public const vulkan.VkSubpassMergeStatusEXT VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT;
        
        public const vulkan.VkSubpassMergeStatusEXT VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT;
        
        public const vulkan.VkSubpassMergeStatusEXT VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT;
        
        public const vulkan.VkSubpassMergeStatusEXT VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT;
        
        public const vulkan.VkSubpassMergeStatusEXT VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT;
        
        public const vulkan.VkSubpassMergeStatusEXT VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT;
        
        public const vulkan.VkSubpassMergeStatusEXT VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT;
        
        public const vulkan.VkSubpassMergeStatusEXT VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT;
        
        public const vulkan.VkSubpassMergeStatusEXT VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT;
        
        public const vulkan.VkSubpassMergeStatusEXT VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT;
        
        public const vulkan.VkSubpassMergeStatusEXT VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT;
        
        public const vulkan.VkSubpassMergeStatusEXT VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT;
        
        public const vulkan.VkSubpassMergeStatusEXT VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT;
        
        public const vulkan.VkSubpassMergeStatusEXT VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT = VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT;
        
        public enum VkDirectDriverLoadingModeLUNARG : uint
        {
            VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG = unchecked((uint)0),
            
            VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG = unchecked((uint)1),
            
            VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkDirectDriverLoadingModeLUNARG VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG = VkDirectDriverLoadingModeLUNARG.VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG;
        
        public const vulkan.VkDirectDriverLoadingModeLUNARG VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG = VkDirectDriverLoadingModeLUNARG.VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG;
        
        public const vulkan.VkDirectDriverLoadingModeLUNARG VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG = VkDirectDriverLoadingModeLUNARG.VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG;
        
        public enum VkOpticalFlowPerformanceLevelNV : uint
        {
            VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = unchecked((uint)0),
            
            VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = unchecked((uint)1),
            
            VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = unchecked((uint)2),
            
            VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = unchecked((uint)3),
            
            VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkOpticalFlowPerformanceLevelNV VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV;
        
        public const vulkan.VkOpticalFlowPerformanceLevelNV VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV;
        
        public const vulkan.VkOpticalFlowPerformanceLevelNV VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV;
        
        public const vulkan.VkOpticalFlowPerformanceLevelNV VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV;
        
        public const vulkan.VkOpticalFlowPerformanceLevelNV VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV = VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV;
        
        public enum VkOpticalFlowSessionBindingPointNV : uint
        {
            VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = unchecked((uint)0),
            
            VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = unchecked((uint)1),
            
            VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = unchecked((uint)2),
            
            VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = unchecked((uint)3),
            
            VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = unchecked((uint)4),
            
            VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = unchecked((uint)5),
            
            VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = unchecked((uint)6),
            
            VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = unchecked((uint)7),
            
            VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = unchecked((uint)8),
            
            VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkOpticalFlowSessionBindingPointNV VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV;
        
        public const vulkan.VkOpticalFlowSessionBindingPointNV VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV;
        
        public const vulkan.VkOpticalFlowSessionBindingPointNV VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV;
        
        public const vulkan.VkOpticalFlowSessionBindingPointNV VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV;
        
        public const vulkan.VkOpticalFlowSessionBindingPointNV VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV;
        
        public const vulkan.VkOpticalFlowSessionBindingPointNV VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV;
        
        public const vulkan.VkOpticalFlowSessionBindingPointNV VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV;
        
        public const vulkan.VkOpticalFlowSessionBindingPointNV VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV;
        
        public const vulkan.VkOpticalFlowSessionBindingPointNV VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV;
        
        public const vulkan.VkOpticalFlowSessionBindingPointNV VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV = VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV;
        
        public enum VkOpticalFlowGridSizeFlagBitsNV : uint
        {
            VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = unchecked((uint)0),
            
            VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV = unchecked((uint)1),
            
            VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV = unchecked((uint)2),
            
            VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV = unchecked((uint)4),
            
            VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV = unchecked((uint)8),
            
            VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkOpticalFlowGridSizeFlagBitsNV VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV;
        
        public const vulkan.VkOpticalFlowGridSizeFlagBitsNV VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV = VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV;
        
        public const vulkan.VkOpticalFlowGridSizeFlagBitsNV VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV = VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV;
        
        public const vulkan.VkOpticalFlowGridSizeFlagBitsNV VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV = VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV;
        
        public const vulkan.VkOpticalFlowGridSizeFlagBitsNV VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV = VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV;
        
        public const vulkan.VkOpticalFlowGridSizeFlagBitsNV VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV = VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV;
        
        public enum VkOpticalFlowUsageFlagBitsNV : uint
        {
            VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV = unchecked((uint)0),
            
            VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV = unchecked((uint)1),
            
            VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV = unchecked((uint)2),
            
            VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV = unchecked((uint)4),
            
            VK_OPTICAL_FLOW_USAGE_COST_BIT_NV = unchecked((uint)8),
            
            VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV = unchecked((uint)16),
            
            VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkOpticalFlowUsageFlagBitsNV VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV = VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV;
        
        public const vulkan.VkOpticalFlowUsageFlagBitsNV VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV = VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV;
        
        public const vulkan.VkOpticalFlowUsageFlagBitsNV VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV = VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV;
        
        public const vulkan.VkOpticalFlowUsageFlagBitsNV VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV = VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV;
        
        public const vulkan.VkOpticalFlowUsageFlagBitsNV VK_OPTICAL_FLOW_USAGE_COST_BIT_NV = VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_COST_BIT_NV;
        
        public const vulkan.VkOpticalFlowUsageFlagBitsNV VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV = VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV;
        
        public const vulkan.VkOpticalFlowUsageFlagBitsNV VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV = VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV;
        
        public enum VkOpticalFlowSessionCreateFlagBitsNV : uint
        {
            VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV = unchecked((uint)1),
            
            VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV = unchecked((uint)2),
            
            VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV = unchecked((uint)4),
            
            VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV = unchecked((uint)8),
            
            VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV = unchecked((uint)16),
            
            VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkOpticalFlowSessionCreateFlagBitsNV VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV = VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV;
        
        public const vulkan.VkOpticalFlowSessionCreateFlagBitsNV VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV = VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV;
        
        public const vulkan.VkOpticalFlowSessionCreateFlagBitsNV VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV = VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV;
        
        public const vulkan.VkOpticalFlowSessionCreateFlagBitsNV VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV = VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV;
        
        public const vulkan.VkOpticalFlowSessionCreateFlagBitsNV VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV = VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV;
        
        public const vulkan.VkOpticalFlowSessionCreateFlagBitsNV VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV = VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV;
        
        public enum VkOpticalFlowExecuteFlagBitsNV : uint
        {
            VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV = unchecked((uint)1),
            
            VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkOpticalFlowExecuteFlagBitsNV VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV = VkOpticalFlowExecuteFlagBitsNV.VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV;
        
        public const vulkan.VkOpticalFlowExecuteFlagBitsNV VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV = VkOpticalFlowExecuteFlagBitsNV.VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV;
        
        public enum VkShaderCodeTypeEXT : uint
        {
            VK_SHADER_CODE_TYPE_BINARY_EXT = unchecked((uint)0),
            
            VK_SHADER_CODE_TYPE_SPIRV_EXT = unchecked((uint)1),
            
            VK_SHADER_CODE_TYPE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkShaderCodeTypeEXT VK_SHADER_CODE_TYPE_BINARY_EXT = VkShaderCodeTypeEXT.VK_SHADER_CODE_TYPE_BINARY_EXT;
        
        public const vulkan.VkShaderCodeTypeEXT VK_SHADER_CODE_TYPE_SPIRV_EXT = VkShaderCodeTypeEXT.VK_SHADER_CODE_TYPE_SPIRV_EXT;
        
        public const vulkan.VkShaderCodeTypeEXT VK_SHADER_CODE_TYPE_MAX_ENUM_EXT = VkShaderCodeTypeEXT.VK_SHADER_CODE_TYPE_MAX_ENUM_EXT;
        
        public enum VkShaderCreateFlagBitsEXT : uint
        {
            VK_SHADER_CREATE_LINK_STAGE_BIT_EXT = unchecked((uint)1),
            
            VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = unchecked((uint)2),
            
            VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = unchecked((uint)4),
            
            VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT = unchecked((uint)8),
            
            VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT = unchecked((uint)16),
            
            VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT = unchecked((uint)32),
            
            VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = unchecked((uint)64),
            
            VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkShaderCreateFlagBitsEXT VK_SHADER_CREATE_LINK_STAGE_BIT_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_LINK_STAGE_BIT_EXT;
        
        public const vulkan.VkShaderCreateFlagBitsEXT VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT;
        
        public const vulkan.VkShaderCreateFlagBitsEXT VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT;
        
        public const vulkan.VkShaderCreateFlagBitsEXT VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT;
        
        public const vulkan.VkShaderCreateFlagBitsEXT VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT;
        
        public const vulkan.VkShaderCreateFlagBitsEXT VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT;
        
        public const vulkan.VkShaderCreateFlagBitsEXT VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT;
        
        public const vulkan.VkShaderCreateFlagBitsEXT VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT = VkShaderCreateFlagBitsEXT.VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT;
        
        public enum VkRayTracingInvocationReorderModeNV : uint
        {
            VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = unchecked((uint)0),
            
            VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = unchecked((uint)1),
            
            VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkRayTracingInvocationReorderModeNV VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = VkRayTracingInvocationReorderModeNV.VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV;
        
        public const vulkan.VkRayTracingInvocationReorderModeNV VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = VkRayTracingInvocationReorderModeNV.VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV;
        
        public const vulkan.VkRayTracingInvocationReorderModeNV VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV = VkRayTracingInvocationReorderModeNV.VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV;
        
        public enum VkBuildAccelerationStructureModeKHR : uint
        {
            VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = unchecked((uint)0),
            
            VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = unchecked((uint)1),
            
            VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkBuildAccelerationStructureModeKHR VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = VkBuildAccelerationStructureModeKHR.VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR;
        
        public const vulkan.VkBuildAccelerationStructureModeKHR VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = VkBuildAccelerationStructureModeKHR.VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR;
        
        public const vulkan.VkBuildAccelerationStructureModeKHR VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = VkBuildAccelerationStructureModeKHR.VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR;
        
        public enum VkAccelerationStructureCreateFlagBitsKHR : uint
        {
            VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = unchecked((uint)1),
            
            VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = unchecked((uint)8),
            
            VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = unchecked((uint)4),
            
            VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkAccelerationStructureCreateFlagBitsKHR VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VkAccelerationStructureCreateFlagBitsKHR.VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR;
        
        public const vulkan.VkAccelerationStructureCreateFlagBitsKHR VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = VkAccelerationStructureCreateFlagBitsKHR.VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT;
        
        public const vulkan.VkAccelerationStructureCreateFlagBitsKHR VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = VkAccelerationStructureCreateFlagBitsKHR.VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV;
        
        public const vulkan.VkAccelerationStructureCreateFlagBitsKHR VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = VkAccelerationStructureCreateFlagBitsKHR.VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR;
        
        public enum VkShaderGroupShaderKHR : uint
        {
            VK_SHADER_GROUP_SHADER_GENERAL_KHR = unchecked((uint)0),
            
            VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = unchecked((uint)1),
            
            VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = unchecked((uint)2),
            
            VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = unchecked((uint)3),
            
            VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkShaderGroupShaderKHR VK_SHADER_GROUP_SHADER_GENERAL_KHR = VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_GENERAL_KHR;
        
        public const vulkan.VkShaderGroupShaderKHR VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR;
        
        public const vulkan.VkShaderGroupShaderKHR VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_ANY_HIT_KHR;
        
        public const vulkan.VkShaderGroupShaderKHR VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_INTERSECTION_KHR;
        
        public const vulkan.VkShaderGroupShaderKHR VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR;
        
        public partial struct VkExtent2D
        {
            public uint width;
            
            public uint height;
        }
        
        public partial struct VkExtent3D
        {
            public uint width;
            
            public uint height;
            
            public uint depth;
        }
        
        public partial struct VkOffset2D
        {
            public int x;
            
            public int y;
        }
        
        public partial struct VkOffset3D
        {
            public int x;
            
            public int y;
            
            public int z;
        }
        
        public partial struct VkRect2D
        {
            public vulkan.VkOffset2D offset;
            
            public vulkan.VkExtent2D extent;
        }
        
        public partial struct VkBaseInStructure
        {
            public vulkan.VkStructureType sType;
            
            public vulkan.VkBaseInStructure* pNext;
        }
        
        public partial struct VkBaseOutStructure
        {
            public vulkan.VkStructureType sType;
            
            public vulkan.VkBaseOutStructure* pNext;
        }
        
        public partial struct VkBufferMemoryBarrier
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAccessFlags srcAccessMask;
            
            public vulkan.VkAccessFlags dstAccessMask;
            
            public uint srcQueueFamilyIndex;
            
            public uint dstQueueFamilyIndex;
            
            public vulkan.VkBuffer buffer;
            
            public vulkan.VkDeviceSize offset;
            
            public vulkan.VkDeviceSize size;
        }
        
        public readonly partial struct VkFlags : IEquatable<VkFlags>
        {
            public VkFlags(uint value) => this.Value = value;
            
            public uint Value { get; }
            
            public override bool Equals(object obj) => obj is VkFlags other && Equals(other);
            
            public bool Equals(VkFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator uint (vulkan.VkFlags from) => from.Value;
            
            public static implicit operator vulkan.VkFlags (uint from) => new vulkan.VkFlags(from);
            
            public static bool operator ==(VkFlags left, VkFlags right) => left.Equals(right);
            
            public static bool operator !=(VkFlags left, VkFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkAccessFlags : IEquatable<VkAccessFlags>
        {
            public VkAccessFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkAccessFlags other && Equals(other);
            
            public bool Equals(VkAccessFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkAccessFlags from) => from.Value;
            
            public static implicit operator vulkan.VkAccessFlags (vulkan.VkFlags from) => new vulkan.VkAccessFlags(from);
            
            public static bool operator ==(VkAccessFlags left, VkAccessFlags right) => left.Equals(right);
            
            public static bool operator !=(VkAccessFlags left, VkAccessFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBuffer : IEquatable<VkBuffer>
        {
            public VkBuffer(vulkan.VkBuffer_T value) => this.Value = value;
            
            public vulkan.VkBuffer_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkBuffer other && Equals(other);
            
            public bool Equals(VkBuffer other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBuffer_T (vulkan.VkBuffer from) => from.Value;
            
            public static implicit operator vulkan.VkBuffer (vulkan.VkBuffer_T from) => new vulkan.VkBuffer(from);
            
            public static bool operator ==(VkBuffer left, VkBuffer right) => left.Equals(right);
            
            public static bool operator !=(VkBuffer left, VkBuffer right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDeviceSize : IEquatable<VkDeviceSize>
        {
            public VkDeviceSize(ulong value) => this.Value = value;
            
            public ulong Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceSize other && Equals(other);
            
            public bool Equals(VkDeviceSize other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ulong (vulkan.VkDeviceSize from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceSize (ulong from) => new vulkan.VkDeviceSize(from);
            
            public static bool operator ==(VkDeviceSize left, VkDeviceSize right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceSize left, VkDeviceSize right) => !left.Equals(right);
        }
        
        public partial struct VkDispatchIndirectCommand
        {
            public uint x;
            
            public uint y;
            
            public uint z;
        }
        
        public partial struct VkDrawIndexedIndirectCommand
        {
            public uint indexCount;
            
            public uint instanceCount;
            
            public uint firstIndex;
            
            public int vertexOffset;
            
            public uint firstInstance;
        }
        
        public partial struct VkDrawIndirectCommand
        {
            public uint vertexCount;
            
            public uint instanceCount;
            
            public uint firstVertex;
            
            public uint firstInstance;
        }
        
        public partial struct VkImageSubresourceRange
        {
            public vulkan.VkImageAspectFlags aspectMask;
            
            public uint baseMipLevel;
            
            public uint levelCount;
            
            public uint baseArrayLayer;
            
            public uint layerCount;
        }
        
        public readonly partial struct VkImageAspectFlags : IEquatable<VkImageAspectFlags>
        {
            public VkImageAspectFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageAspectFlags other && Equals(other);
            
            public bool Equals(VkImageAspectFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkImageAspectFlags from) => from.Value;
            
            public static implicit operator vulkan.VkImageAspectFlags (vulkan.VkFlags from) => new vulkan.VkImageAspectFlags(from);
            
            public static bool operator ==(VkImageAspectFlags left, VkImageAspectFlags right) => left.Equals(right);
            
            public static bool operator !=(VkImageAspectFlags left, VkImageAspectFlags right) => !left.Equals(right);
        }
        
        public partial struct VkImageMemoryBarrier
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAccessFlags srcAccessMask;
            
            public vulkan.VkAccessFlags dstAccessMask;
            
            public vulkan.VkImageLayout oldLayout;
            
            public vulkan.VkImageLayout newLayout;
            
            public uint srcQueueFamilyIndex;
            
            public uint dstQueueFamilyIndex;
            
            public vulkan.VkImage image;
            
            public vulkan.VkImageSubresourceRange subresourceRange;
        }
        
        public readonly partial struct VkImage : IEquatable<VkImage>
        {
            public VkImage(vulkan.VkImage_T value) => this.Value = value;
            
            public vulkan.VkImage_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkImage other && Equals(other);
            
            public bool Equals(VkImage other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkImage_T (vulkan.VkImage from) => from.Value;
            
            public static implicit operator vulkan.VkImage (vulkan.VkImage_T from) => new vulkan.VkImage(from);
            
            public static bool operator ==(VkImage left, VkImage right) => left.Equals(right);
            
            public static bool operator !=(VkImage left, VkImage right) => !left.Equals(right);
        }
        
        public partial struct VkMemoryBarrier
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAccessFlags srcAccessMask;
            
            public vulkan.VkAccessFlags dstAccessMask;
        }
        
        public unsafe partial struct VkPipelineCacheHeaderVersionOne
        {
            public uint headerSize;
            
            public vulkan.VkPipelineCacheHeaderVersion headerVersion;
            
            public uint vendorID;
            
            public uint deviceID;
            
            public fixed byte pipelineCacheUUID[16];
        }
        
        public partial struct VkAllocationCallbacks
        {
            public void* pUserData;
            
            public vulkan.PFN_vkAllocationFunction pfnAllocation;
            
            public vulkan.PFN_vkReallocationFunction pfnReallocation;
            
            public vulkan.PFN_vkFreeFunction pfnFree;
            
            public vulkan.PFN_vkInternalAllocationNotification pfnInternalAllocation;
            
            public vulkan.PFN_vkInternalFreeNotification pfnInternalFree;
        }
        
        public readonly partial struct PFN_vkAllocationFunction : IEquatable<PFN_vkAllocationFunction>
        {
            public PFN_vkAllocationFunction(delegate*unmanaged[Stdcall]<void*, nuint, nuint, vulkan.VkSystemAllocationScope, void*> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<void*, nuint, nuint, vulkan.VkSystemAllocationScope, void*> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkAllocationFunction other && Equals(other);
            
            public bool Equals(PFN_vkAllocationFunction other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<void*, nuint, nuint, vulkan.VkSystemAllocationScope, void*> (vulkan.PFN_vkAllocationFunction from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkAllocationFunction (delegate*unmanaged[Stdcall]<void*, nuint, nuint, vulkan.VkSystemAllocationScope, void*> from) => new vulkan.PFN_vkAllocationFunction(from);
            
            public static bool operator ==(PFN_vkAllocationFunction left, PFN_vkAllocationFunction right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkAllocationFunction left, PFN_vkAllocationFunction right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkReallocationFunction : IEquatable<PFN_vkReallocationFunction>
        {
            public PFN_vkReallocationFunction(delegate*unmanaged[Stdcall]<void*, void*, nuint, nuint, vulkan.VkSystemAllocationScope, void*> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<void*, void*, nuint, nuint, vulkan.VkSystemAllocationScope, void*> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkReallocationFunction other && Equals(other);
            
            public bool Equals(PFN_vkReallocationFunction other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<void*, void*, nuint, nuint, vulkan.VkSystemAllocationScope, void*> (vulkan.PFN_vkReallocationFunction from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkReallocationFunction (delegate*unmanaged[Stdcall]<void*, void*, nuint, nuint, vulkan.VkSystemAllocationScope, void*> from) => new vulkan.PFN_vkReallocationFunction(from);
            
            public static bool operator ==(PFN_vkReallocationFunction left, PFN_vkReallocationFunction right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkReallocationFunction left, PFN_vkReallocationFunction right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkFreeFunction : IEquatable<PFN_vkFreeFunction>
        {
            public PFN_vkFreeFunction(delegate*unmanaged[Stdcall]<void*, void*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<void*, void*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkFreeFunction other && Equals(other);
            
            public bool Equals(PFN_vkFreeFunction other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<void*, void*, void> (vulkan.PFN_vkFreeFunction from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkFreeFunction (delegate*unmanaged[Stdcall]<void*, void*, void> from) => new vulkan.PFN_vkFreeFunction(from);
            
            public static bool operator ==(PFN_vkFreeFunction left, PFN_vkFreeFunction right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkFreeFunction left, PFN_vkFreeFunction right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkInternalAllocationNotification : IEquatable<PFN_vkInternalAllocationNotification>
        {
            public PFN_vkInternalAllocationNotification(delegate*unmanaged[Stdcall]<void*, nuint, vulkan.VkInternalAllocationType, vulkan.VkSystemAllocationScope, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<void*, nuint, vulkan.VkInternalAllocationType, vulkan.VkSystemAllocationScope, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkInternalAllocationNotification other && Equals(other);
            
            public bool Equals(PFN_vkInternalAllocationNotification other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<void*, nuint, vulkan.VkInternalAllocationType, vulkan.VkSystemAllocationScope, void> (vulkan.PFN_vkInternalAllocationNotification from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkInternalAllocationNotification (delegate*unmanaged[Stdcall]<void*, nuint, vulkan.VkInternalAllocationType, vulkan.VkSystemAllocationScope, void> from) => new vulkan.PFN_vkInternalAllocationNotification(from);
            
            public static bool operator ==(PFN_vkInternalAllocationNotification left, PFN_vkInternalAllocationNotification right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkInternalAllocationNotification left, PFN_vkInternalAllocationNotification right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkInternalFreeNotification : IEquatable<PFN_vkInternalFreeNotification>
        {
            public PFN_vkInternalFreeNotification(delegate*unmanaged[Stdcall]<void*, nuint, vulkan.VkInternalAllocationType, vulkan.VkSystemAllocationScope, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<void*, nuint, vulkan.VkInternalAllocationType, vulkan.VkSystemAllocationScope, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkInternalFreeNotification other && Equals(other);
            
            public bool Equals(PFN_vkInternalFreeNotification other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<void*, nuint, vulkan.VkInternalAllocationType, vulkan.VkSystemAllocationScope, void> (vulkan.PFN_vkInternalFreeNotification from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkInternalFreeNotification (delegate*unmanaged[Stdcall]<void*, nuint, vulkan.VkInternalAllocationType, vulkan.VkSystemAllocationScope, void> from) => new vulkan.PFN_vkInternalFreeNotification(from);
            
            public static bool operator ==(PFN_vkInternalFreeNotification left, PFN_vkInternalFreeNotification right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkInternalFreeNotification left, PFN_vkInternalFreeNotification right) => !left.Equals(right);
        }
        
        public partial struct VkApplicationInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public byte* pApplicationName;
            
            public uint applicationVersion;
            
            public byte* pEngineName;
            
            public uint engineVersion;
            
            public uint apiVersion;
        }
        
        public partial struct VkFormatProperties
        {
            public vulkan.VkFormatFeatureFlags linearTilingFeatures;
            
            public vulkan.VkFormatFeatureFlags optimalTilingFeatures;
            
            public vulkan.VkFormatFeatureFlags bufferFeatures;
        }
        
        public readonly partial struct VkFormatFeatureFlags : IEquatable<VkFormatFeatureFlags>
        {
            public VkFormatFeatureFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkFormatFeatureFlags other && Equals(other);
            
            public bool Equals(VkFormatFeatureFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkFormatFeatureFlags from) => from.Value;
            
            public static implicit operator vulkan.VkFormatFeatureFlags (vulkan.VkFlags from) => new vulkan.VkFormatFeatureFlags(from);
            
            public static bool operator ==(VkFormatFeatureFlags left, VkFormatFeatureFlags right) => left.Equals(right);
            
            public static bool operator !=(VkFormatFeatureFlags left, VkFormatFeatureFlags right) => !left.Equals(right);
        }
        
        public partial struct VkImageFormatProperties
        {
            public vulkan.VkExtent3D maxExtent;
            
            public uint maxMipLevels;
            
            public uint maxArrayLayers;
            
            public vulkan.VkSampleCountFlags sampleCounts;
            
            public vulkan.VkDeviceSize maxResourceSize;
        }
        
        public readonly partial struct VkSampleCountFlags : IEquatable<VkSampleCountFlags>
        {
            public VkSampleCountFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkSampleCountFlags other && Equals(other);
            
            public bool Equals(VkSampleCountFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkSampleCountFlags from) => from.Value;
            
            public static implicit operator vulkan.VkSampleCountFlags (vulkan.VkFlags from) => new vulkan.VkSampleCountFlags(from);
            
            public static bool operator ==(VkSampleCountFlags left, VkSampleCountFlags right) => left.Equals(right);
            
            public static bool operator !=(VkSampleCountFlags left, VkSampleCountFlags right) => !left.Equals(right);
        }
        
        public partial struct VkInstanceCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkInstanceCreateFlags flags;
            
            public vulkan.VkApplicationInfo* pApplicationInfo;
            
            public uint enabledLayerCount;
            
            public byte** ppEnabledLayerNames;
            
            public uint enabledExtensionCount;
            
            public byte** ppEnabledExtensionNames;
        }
        
        public readonly partial struct VkInstanceCreateFlags : IEquatable<VkInstanceCreateFlags>
        {
            public VkInstanceCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkInstanceCreateFlags other && Equals(other);
            
            public bool Equals(VkInstanceCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkInstanceCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkInstanceCreateFlags (vulkan.VkFlags from) => new vulkan.VkInstanceCreateFlags(from);
            
            public static bool operator ==(VkInstanceCreateFlags left, VkInstanceCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkInstanceCreateFlags left, VkInstanceCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkMemoryHeap
        {
            public vulkan.VkDeviceSize size;
            
            public vulkan.VkMemoryHeapFlags flags;
        }
        
        public readonly partial struct VkMemoryHeapFlags : IEquatable<VkMemoryHeapFlags>
        {
            public VkMemoryHeapFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkMemoryHeapFlags other && Equals(other);
            
            public bool Equals(VkMemoryHeapFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkMemoryHeapFlags from) => from.Value;
            
            public static implicit operator vulkan.VkMemoryHeapFlags (vulkan.VkFlags from) => new vulkan.VkMemoryHeapFlags(from);
            
            public static bool operator ==(VkMemoryHeapFlags left, VkMemoryHeapFlags right) => left.Equals(right);
            
            public static bool operator !=(VkMemoryHeapFlags left, VkMemoryHeapFlags right) => !left.Equals(right);
        }
        
        public partial struct VkMemoryType
        {
            public vulkan.VkMemoryPropertyFlags propertyFlags;
            
            public uint heapIndex;
        }
        
        public readonly partial struct VkMemoryPropertyFlags : IEquatable<VkMemoryPropertyFlags>
        {
            public VkMemoryPropertyFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkMemoryPropertyFlags other && Equals(other);
            
            public bool Equals(VkMemoryPropertyFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkMemoryPropertyFlags from) => from.Value;
            
            public static implicit operator vulkan.VkMemoryPropertyFlags (vulkan.VkFlags from) => new vulkan.VkMemoryPropertyFlags(from);
            
            public static bool operator ==(VkMemoryPropertyFlags left, VkMemoryPropertyFlags right) => left.Equals(right);
            
            public static bool operator !=(VkMemoryPropertyFlags left, VkMemoryPropertyFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceFeatures
        {
            public vulkan.VkBool32 robustBufferAccess;
            
            public vulkan.VkBool32 fullDrawIndexUint32;
            
            public vulkan.VkBool32 imageCubeArray;
            
            public vulkan.VkBool32 independentBlend;
            
            public vulkan.VkBool32 geometryShader;
            
            public vulkan.VkBool32 tessellationShader;
            
            public vulkan.VkBool32 sampleRateShading;
            
            public vulkan.VkBool32 dualSrcBlend;
            
            public vulkan.VkBool32 logicOp;
            
            public vulkan.VkBool32 multiDrawIndirect;
            
            public vulkan.VkBool32 drawIndirectFirstInstance;
            
            public vulkan.VkBool32 depthClamp;
            
            public vulkan.VkBool32 depthBiasClamp;
            
            public vulkan.VkBool32 fillModeNonSolid;
            
            public vulkan.VkBool32 depthBounds;
            
            public vulkan.VkBool32 wideLines;
            
            public vulkan.VkBool32 largePoints;
            
            public vulkan.VkBool32 alphaToOne;
            
            public vulkan.VkBool32 multiViewport;
            
            public vulkan.VkBool32 samplerAnisotropy;
            
            public vulkan.VkBool32 textureCompressionETC2;
            
            public vulkan.VkBool32 textureCompressionASTC_LDR;
            
            public vulkan.VkBool32 textureCompressionBC;
            
            public vulkan.VkBool32 occlusionQueryPrecise;
            
            public vulkan.VkBool32 pipelineStatisticsQuery;
            
            public vulkan.VkBool32 vertexPipelineStoresAndAtomics;
            
            public vulkan.VkBool32 fragmentStoresAndAtomics;
            
            public vulkan.VkBool32 shaderTessellationAndGeometryPointSize;
            
            public vulkan.VkBool32 shaderImageGatherExtended;
            
            public vulkan.VkBool32 shaderStorageImageExtendedFormats;
            
            public vulkan.VkBool32 shaderStorageImageMultisample;
            
            public vulkan.VkBool32 shaderStorageImageReadWithoutFormat;
            
            public vulkan.VkBool32 shaderStorageImageWriteWithoutFormat;
            
            public vulkan.VkBool32 shaderUniformBufferArrayDynamicIndexing;
            
            public vulkan.VkBool32 shaderSampledImageArrayDynamicIndexing;
            
            public vulkan.VkBool32 shaderStorageBufferArrayDynamicIndexing;
            
            public vulkan.VkBool32 shaderStorageImageArrayDynamicIndexing;
            
            public vulkan.VkBool32 shaderClipDistance;
            
            public vulkan.VkBool32 shaderCullDistance;
            
            public vulkan.VkBool32 shaderFloat64;
            
            public vulkan.VkBool32 shaderInt64;
            
            public vulkan.VkBool32 shaderInt16;
            
            public vulkan.VkBool32 shaderResourceResidency;
            
            public vulkan.VkBool32 shaderResourceMinLod;
            
            public vulkan.VkBool32 sparseBinding;
            
            public vulkan.VkBool32 sparseResidencyBuffer;
            
            public vulkan.VkBool32 sparseResidencyImage2D;
            
            public vulkan.VkBool32 sparseResidencyImage3D;
            
            public vulkan.VkBool32 sparseResidency2Samples;
            
            public vulkan.VkBool32 sparseResidency4Samples;
            
            public vulkan.VkBool32 sparseResidency8Samples;
            
            public vulkan.VkBool32 sparseResidency16Samples;
            
            public vulkan.VkBool32 sparseResidencyAliased;
            
            public vulkan.VkBool32 variableMultisampleRate;
            
            public vulkan.VkBool32 inheritedQueries;
        }
        
        public readonly partial struct VkBool32 : IEquatable<VkBool32>
        {
            public VkBool32(uint value) => this.Value = value;
            
            public uint Value { get; }
            
            public override bool Equals(object obj) => obj is VkBool32 other && Equals(other);
            
            public bool Equals(VkBool32 other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator uint (vulkan.VkBool32 from) => from.Value;
            
            public static implicit operator vulkan.VkBool32 (uint from) => new vulkan.VkBool32(from);
            
            public static bool operator ==(VkBool32 left, VkBool32 right) => left.Equals(right);
            
            public static bool operator !=(VkBool32 left, VkBool32 right) => !left.Equals(right);
        }
        
        public unsafe partial struct VkPhysicalDeviceLimits
        {
            public uint maxImageDimension1D;
            
            public uint maxImageDimension2D;
            
            public uint maxImageDimension3D;
            
            public uint maxImageDimensionCube;
            
            public uint maxImageArrayLayers;
            
            public uint maxTexelBufferElements;
            
            public uint maxUniformBufferRange;
            
            public uint maxStorageBufferRange;
            
            public uint maxPushConstantsSize;
            
            public uint maxMemoryAllocationCount;
            
            public uint maxSamplerAllocationCount;
            
            public vulkan.VkDeviceSize bufferImageGranularity;
            
            public vulkan.VkDeviceSize sparseAddressSpaceSize;
            
            public uint maxBoundDescriptorSets;
            
            public uint maxPerStageDescriptorSamplers;
            
            public uint maxPerStageDescriptorUniformBuffers;
            
            public uint maxPerStageDescriptorStorageBuffers;
            
            public uint maxPerStageDescriptorSampledImages;
            
            public uint maxPerStageDescriptorStorageImages;
            
            public uint maxPerStageDescriptorInputAttachments;
            
            public uint maxPerStageResources;
            
            public uint maxDescriptorSetSamplers;
            
            public uint maxDescriptorSetUniformBuffers;
            
            public uint maxDescriptorSetUniformBuffersDynamic;
            
            public uint maxDescriptorSetStorageBuffers;
            
            public uint maxDescriptorSetStorageBuffersDynamic;
            
            public uint maxDescriptorSetSampledImages;
            
            public uint maxDescriptorSetStorageImages;
            
            public uint maxDescriptorSetInputAttachments;
            
            public uint maxVertexInputAttributes;
            
            public uint maxVertexInputBindings;
            
            public uint maxVertexInputAttributeOffset;
            
            public uint maxVertexInputBindingStride;
            
            public uint maxVertexOutputComponents;
            
            public uint maxTessellationGenerationLevel;
            
            public uint maxTessellationPatchSize;
            
            public uint maxTessellationControlPerVertexInputComponents;
            
            public uint maxTessellationControlPerVertexOutputComponents;
            
            public uint maxTessellationControlPerPatchOutputComponents;
            
            public uint maxTessellationControlTotalOutputComponents;
            
            public uint maxTessellationEvaluationInputComponents;
            
            public uint maxTessellationEvaluationOutputComponents;
            
            public uint maxGeometryShaderInvocations;
            
            public uint maxGeometryInputComponents;
            
            public uint maxGeometryOutputComponents;
            
            public uint maxGeometryOutputVertices;
            
            public uint maxGeometryTotalOutputComponents;
            
            public uint maxFragmentInputComponents;
            
            public uint maxFragmentOutputAttachments;
            
            public uint maxFragmentDualSrcAttachments;
            
            public uint maxFragmentCombinedOutputResources;
            
            public uint maxComputeSharedMemorySize;
            
            public fixed uint maxComputeWorkGroupCount[3];
            
            public uint maxComputeWorkGroupInvocations;
            
            public fixed uint maxComputeWorkGroupSize[3];
            
            public uint subPixelPrecisionBits;
            
            public uint subTexelPrecisionBits;
            
            public uint mipmapPrecisionBits;
            
            public uint maxDrawIndexedIndexValue;
            
            public uint maxDrawIndirectCount;
            
            public float maxSamplerLodBias;
            
            public float maxSamplerAnisotropy;
            
            public uint maxViewports;
            
            public fixed uint maxViewportDimensions[2];
            
            public fixed float viewportBoundsRange[2];
            
            public uint viewportSubPixelBits;
            
            public nuint minMemoryMapAlignment;
            
            public vulkan.VkDeviceSize minTexelBufferOffsetAlignment;
            
            public vulkan.VkDeviceSize minUniformBufferOffsetAlignment;
            
            public vulkan.VkDeviceSize minStorageBufferOffsetAlignment;
            
            public int minTexelOffset;
            
            public uint maxTexelOffset;
            
            public int minTexelGatherOffset;
            
            public uint maxTexelGatherOffset;
            
            public float minInterpolationOffset;
            
            public float maxInterpolationOffset;
            
            public uint subPixelInterpolationOffsetBits;
            
            public uint maxFramebufferWidth;
            
            public uint maxFramebufferHeight;
            
            public uint maxFramebufferLayers;
            
            public vulkan.VkSampleCountFlags framebufferColorSampleCounts;
            
            public vulkan.VkSampleCountFlags framebufferDepthSampleCounts;
            
            public vulkan.VkSampleCountFlags framebufferStencilSampleCounts;
            
            public vulkan.VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
            
            public uint maxColorAttachments;
            
            public vulkan.VkSampleCountFlags sampledImageColorSampleCounts;
            
            public vulkan.VkSampleCountFlags sampledImageIntegerSampleCounts;
            
            public vulkan.VkSampleCountFlags sampledImageDepthSampleCounts;
            
            public vulkan.VkSampleCountFlags sampledImageStencilSampleCounts;
            
            public vulkan.VkSampleCountFlags storageImageSampleCounts;
            
            public uint maxSampleMaskWords;
            
            public vulkan.VkBool32 timestampComputeAndGraphics;
            
            public float timestampPeriod;
            
            public uint maxClipDistances;
            
            public uint maxCullDistances;
            
            public uint maxCombinedClipAndCullDistances;
            
            public uint discreteQueuePriorities;
            
            public fixed float pointSizeRange[2];
            
            public fixed float lineWidthRange[2];
            
            public float pointSizeGranularity;
            
            public float lineWidthGranularity;
            
            public vulkan.VkBool32 strictLines;
            
            public vulkan.VkBool32 standardSampleLocations;
            
            public vulkan.VkDeviceSize optimalBufferCopyOffsetAlignment;
            
            public vulkan.VkDeviceSize optimalBufferCopyRowPitchAlignment;
            
            public vulkan.VkDeviceSize nonCoherentAtomSize;
        }
        
        public partial struct VkPhysicalDeviceMemoryProperties
        {
            public uint memoryTypeCount;
            
            public FixedArray32<vulkan.VkMemoryType> memoryTypes;
            
            public uint memoryHeapCount;
            
            public FixedArray16<vulkan.VkMemoryHeap> memoryHeaps;
        }
        
        public partial struct VkPhysicalDeviceSparseProperties
        {
            public vulkan.VkBool32 residencyStandard2DBlockShape;
            
            public vulkan.VkBool32 residencyStandard2DMultisampleBlockShape;
            
            public vulkan.VkBool32 residencyStandard3DBlockShape;
            
            public vulkan.VkBool32 residencyAlignedMipSize;
            
            public vulkan.VkBool32 residencyNonResidentStrict;
        }
        
        public unsafe partial struct VkPhysicalDeviceProperties
        {
            public uint apiVersion;
            
            public uint driverVersion;
            
            public uint vendorID;
            
            public uint deviceID;
            
            public vulkan.VkPhysicalDeviceType deviceType;
            
            public fixed byte deviceName[256];
            
            public fixed byte pipelineCacheUUID[16];
            
            public vulkan.VkPhysicalDeviceLimits limits;
            
            public vulkan.VkPhysicalDeviceSparseProperties sparseProperties;
        }
        
        public partial struct VkQueueFamilyProperties
        {
            public vulkan.VkQueueFlags queueFlags;
            
            public uint queueCount;
            
            public uint timestampValidBits;
            
            public vulkan.VkExtent3D minImageTransferGranularity;
        }
        
        public readonly partial struct VkQueueFlags : IEquatable<VkQueueFlags>
        {
            public VkQueueFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkQueueFlags other && Equals(other);
            
            public bool Equals(VkQueueFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkQueueFlags from) => from.Value;
            
            public static implicit operator vulkan.VkQueueFlags (vulkan.VkFlags from) => new vulkan.VkQueueFlags(from);
            
            public static bool operator ==(VkQueueFlags left, VkQueueFlags right) => left.Equals(right);
            
            public static bool operator !=(VkQueueFlags left, VkQueueFlags right) => !left.Equals(right);
        }
        
        public partial struct VkDeviceQueueCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceQueueCreateFlags flags;
            
            public uint queueFamilyIndex;
            
            public uint queueCount;
            
            public float* pQueuePriorities;
        }
        
        public readonly partial struct VkDeviceQueueCreateFlags : IEquatable<VkDeviceQueueCreateFlags>
        {
            public VkDeviceQueueCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceQueueCreateFlags other && Equals(other);
            
            public bool Equals(VkDeviceQueueCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDeviceQueueCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceQueueCreateFlags (vulkan.VkFlags from) => new vulkan.VkDeviceQueueCreateFlags(from);
            
            public static bool operator ==(VkDeviceQueueCreateFlags left, VkDeviceQueueCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceQueueCreateFlags left, VkDeviceQueueCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkDeviceCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceCreateFlags flags;
            
            public uint queueCreateInfoCount;
            
            public vulkan.VkDeviceQueueCreateInfo* pQueueCreateInfos;
            
            public uint enabledLayerCount;
            
            public byte** ppEnabledLayerNames;
            
            public uint enabledExtensionCount;
            
            public byte** ppEnabledExtensionNames;
            
            public vulkan.VkPhysicalDeviceFeatures* pEnabledFeatures;
        }
        
        public readonly partial struct VkDeviceCreateFlags : IEquatable<VkDeviceCreateFlags>
        {
            public VkDeviceCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceCreateFlags other && Equals(other);
            
            public bool Equals(VkDeviceCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDeviceCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceCreateFlags (vulkan.VkFlags from) => new vulkan.VkDeviceCreateFlags(from);
            
            public static bool operator ==(VkDeviceCreateFlags left, VkDeviceCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceCreateFlags left, VkDeviceCreateFlags right) => !left.Equals(right);
        }
        
        public unsafe partial struct VkExtensionProperties
        {
            public fixed byte extensionName[256];
            
            public uint specVersion;
        }
        
        public unsafe partial struct VkLayerProperties
        {
            public fixed byte layerName[256];
            
            public uint specVersion;
            
            public uint implementationVersion;
            
            public fixed byte description[256];
        }
        
        public partial struct VkSubmitInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint waitSemaphoreCount;
            
            public vulkan.VkSemaphore* pWaitSemaphores;
            
            public vulkan.VkPipelineStageFlags* pWaitDstStageMask;
            
            public uint commandBufferCount;
            
            public vulkan.VkCommandBuffer* pCommandBuffers;
            
            public uint signalSemaphoreCount;
            
            public vulkan.VkSemaphore* pSignalSemaphores;
        }
        
        public readonly partial struct VkSemaphore : IEquatable<VkSemaphore>
        {
            public VkSemaphore(vulkan.VkSemaphore_T value) => this.Value = value;
            
            public vulkan.VkSemaphore_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkSemaphore other && Equals(other);
            
            public bool Equals(VkSemaphore other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSemaphore_T (vulkan.VkSemaphore from) => from.Value;
            
            public static implicit operator vulkan.VkSemaphore (vulkan.VkSemaphore_T from) => new vulkan.VkSemaphore(from);
            
            public static bool operator ==(VkSemaphore left, VkSemaphore right) => left.Equals(right);
            
            public static bool operator !=(VkSemaphore left, VkSemaphore right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineStageFlags : IEquatable<VkPipelineStageFlags>
        {
            public VkPipelineStageFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineStageFlags other && Equals(other);
            
            public bool Equals(VkPipelineStageFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineStageFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineStageFlags (vulkan.VkFlags from) => new vulkan.VkPipelineStageFlags(from);
            
            public static bool operator ==(VkPipelineStageFlags left, VkPipelineStageFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineStageFlags left, VkPipelineStageFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCommandBuffer : IEquatable<VkCommandBuffer>
        {
            public VkCommandBuffer(vulkan.VkCommandBuffer_T value) => this.Value = value;
            
            public vulkan.VkCommandBuffer_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkCommandBuffer other && Equals(other);
            
            public bool Equals(VkCommandBuffer other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkCommandBuffer_T (vulkan.VkCommandBuffer from) => from.Value;
            
            public static implicit operator vulkan.VkCommandBuffer (vulkan.VkCommandBuffer_T from) => new vulkan.VkCommandBuffer(from);
            
            public static bool operator ==(VkCommandBuffer left, VkCommandBuffer right) => left.Equals(right);
            
            public static bool operator !=(VkCommandBuffer left, VkCommandBuffer right) => !left.Equals(right);
        }
        
        public partial struct VkMappedMemoryRange
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceMemory memory;
            
            public vulkan.VkDeviceSize offset;
            
            public vulkan.VkDeviceSize size;
        }
        
        public readonly partial struct VkDeviceMemory : IEquatable<VkDeviceMemory>
        {
            public VkDeviceMemory(vulkan.VkDeviceMemory_T value) => this.Value = value;
            
            public vulkan.VkDeviceMemory_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceMemory other && Equals(other);
            
            public bool Equals(VkDeviceMemory other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDeviceMemory_T (vulkan.VkDeviceMemory from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceMemory (vulkan.VkDeviceMemory_T from) => new vulkan.VkDeviceMemory(from);
            
            public static bool operator ==(VkDeviceMemory left, VkDeviceMemory right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceMemory left, VkDeviceMemory right) => !left.Equals(right);
        }
        
        public partial struct VkMemoryAllocateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceSize allocationSize;
            
            public uint memoryTypeIndex;
        }
        
        public partial struct VkMemoryRequirements
        {
            public vulkan.VkDeviceSize size;
            
            public vulkan.VkDeviceSize alignment;
            
            public uint memoryTypeBits;
        }
        
        public partial struct VkSparseMemoryBind
        {
            public vulkan.VkDeviceSize resourceOffset;
            
            public vulkan.VkDeviceSize size;
            
            public vulkan.VkDeviceMemory memory;
            
            public vulkan.VkDeviceSize memoryOffset;
            
            public vulkan.VkSparseMemoryBindFlags flags;
        }
        
        public readonly partial struct VkSparseMemoryBindFlags : IEquatable<VkSparseMemoryBindFlags>
        {
            public VkSparseMemoryBindFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkSparseMemoryBindFlags other && Equals(other);
            
            public bool Equals(VkSparseMemoryBindFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkSparseMemoryBindFlags from) => from.Value;
            
            public static implicit operator vulkan.VkSparseMemoryBindFlags (vulkan.VkFlags from) => new vulkan.VkSparseMemoryBindFlags(from);
            
            public static bool operator ==(VkSparseMemoryBindFlags left, VkSparseMemoryBindFlags right) => left.Equals(right);
            
            public static bool operator !=(VkSparseMemoryBindFlags left, VkSparseMemoryBindFlags right) => !left.Equals(right);
        }
        
        public partial struct VkSparseBufferMemoryBindInfo
        {
            public vulkan.VkBuffer buffer;
            
            public uint bindCount;
            
            public vulkan.VkSparseMemoryBind* pBinds;
        }
        
        public partial struct VkSparseImageOpaqueMemoryBindInfo
        {
            public vulkan.VkImage image;
            
            public uint bindCount;
            
            public vulkan.VkSparseMemoryBind* pBinds;
        }
        
        public partial struct VkImageSubresource
        {
            public vulkan.VkImageAspectFlags aspectMask;
            
            public uint mipLevel;
            
            public uint arrayLayer;
        }
        
        public partial struct VkSparseImageMemoryBind
        {
            public vulkan.VkImageSubresource subresource;
            
            public vulkan.VkOffset3D offset;
            
            public vulkan.VkExtent3D extent;
            
            public vulkan.VkDeviceMemory memory;
            
            public vulkan.VkDeviceSize memoryOffset;
            
            public vulkan.VkSparseMemoryBindFlags flags;
        }
        
        public partial struct VkSparseImageMemoryBindInfo
        {
            public vulkan.VkImage image;
            
            public uint bindCount;
            
            public vulkan.VkSparseImageMemoryBind* pBinds;
        }
        
        public partial struct VkBindSparseInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint waitSemaphoreCount;
            
            public vulkan.VkSemaphore* pWaitSemaphores;
            
            public uint bufferBindCount;
            
            public vulkan.VkSparseBufferMemoryBindInfo* pBufferBinds;
            
            public uint imageOpaqueBindCount;
            
            public vulkan.VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds;
            
            public uint imageBindCount;
            
            public vulkan.VkSparseImageMemoryBindInfo* pImageBinds;
            
            public uint signalSemaphoreCount;
            
            public vulkan.VkSemaphore* pSignalSemaphores;
        }
        
        public partial struct VkSparseImageFormatProperties
        {
            public vulkan.VkImageAspectFlags aspectMask;
            
            public vulkan.VkExtent3D imageGranularity;
            
            public vulkan.VkSparseImageFormatFlags flags;
        }
        
        public readonly partial struct VkSparseImageFormatFlags : IEquatable<VkSparseImageFormatFlags>
        {
            public VkSparseImageFormatFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkSparseImageFormatFlags other && Equals(other);
            
            public bool Equals(VkSparseImageFormatFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkSparseImageFormatFlags from) => from.Value;
            
            public static implicit operator vulkan.VkSparseImageFormatFlags (vulkan.VkFlags from) => new vulkan.VkSparseImageFormatFlags(from);
            
            public static bool operator ==(VkSparseImageFormatFlags left, VkSparseImageFormatFlags right) => left.Equals(right);
            
            public static bool operator !=(VkSparseImageFormatFlags left, VkSparseImageFormatFlags right) => !left.Equals(right);
        }
        
        public partial struct VkSparseImageMemoryRequirements
        {
            public vulkan.VkSparseImageFormatProperties formatProperties;
            
            public uint imageMipTailFirstLod;
            
            public vulkan.VkDeviceSize imageMipTailSize;
            
            public vulkan.VkDeviceSize imageMipTailOffset;
            
            public vulkan.VkDeviceSize imageMipTailStride;
        }
        
        public partial struct VkFenceCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFenceCreateFlags flags;
        }
        
        public readonly partial struct VkFenceCreateFlags : IEquatable<VkFenceCreateFlags>
        {
            public VkFenceCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkFenceCreateFlags other && Equals(other);
            
            public bool Equals(VkFenceCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkFenceCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkFenceCreateFlags (vulkan.VkFlags from) => new vulkan.VkFenceCreateFlags(from);
            
            public static bool operator ==(VkFenceCreateFlags left, VkFenceCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkFenceCreateFlags left, VkFenceCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkSemaphoreCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSemaphoreCreateFlags flags;
        }
        
        public readonly partial struct VkSemaphoreCreateFlags : IEquatable<VkSemaphoreCreateFlags>
        {
            public VkSemaphoreCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkSemaphoreCreateFlags other && Equals(other);
            
            public bool Equals(VkSemaphoreCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkSemaphoreCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkSemaphoreCreateFlags (vulkan.VkFlags from) => new vulkan.VkSemaphoreCreateFlags(from);
            
            public static bool operator ==(VkSemaphoreCreateFlags left, VkSemaphoreCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkSemaphoreCreateFlags left, VkSemaphoreCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkEventCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkEventCreateFlags flags;
        }
        
        public readonly partial struct VkEventCreateFlags : IEquatable<VkEventCreateFlags>
        {
            public VkEventCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkEventCreateFlags other && Equals(other);
            
            public bool Equals(VkEventCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkEventCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkEventCreateFlags (vulkan.VkFlags from) => new vulkan.VkEventCreateFlags(from);
            
            public static bool operator ==(VkEventCreateFlags left, VkEventCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkEventCreateFlags left, VkEventCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkQueryPoolCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkQueryPoolCreateFlags flags;
            
            public vulkan.VkQueryType queryType;
            
            public uint queryCount;
            
            public vulkan.VkQueryPipelineStatisticFlags pipelineStatistics;
        }
        
        public readonly partial struct VkQueryPoolCreateFlags : IEquatable<VkQueryPoolCreateFlags>
        {
            public VkQueryPoolCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkQueryPoolCreateFlags other && Equals(other);
            
            public bool Equals(VkQueryPoolCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkQueryPoolCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkQueryPoolCreateFlags (vulkan.VkFlags from) => new vulkan.VkQueryPoolCreateFlags(from);
            
            public static bool operator ==(VkQueryPoolCreateFlags left, VkQueryPoolCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkQueryPoolCreateFlags left, VkQueryPoolCreateFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkQueryPipelineStatisticFlags : IEquatable<VkQueryPipelineStatisticFlags>
        {
            public VkQueryPipelineStatisticFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkQueryPipelineStatisticFlags other && Equals(other);
            
            public bool Equals(VkQueryPipelineStatisticFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkQueryPipelineStatisticFlags from) => from.Value;
            
            public static implicit operator vulkan.VkQueryPipelineStatisticFlags (vulkan.VkFlags from) => new vulkan.VkQueryPipelineStatisticFlags(from);
            
            public static bool operator ==(VkQueryPipelineStatisticFlags left, VkQueryPipelineStatisticFlags right) => left.Equals(right);
            
            public static bool operator !=(VkQueryPipelineStatisticFlags left, VkQueryPipelineStatisticFlags right) => !left.Equals(right);
        }
        
        public partial struct VkBufferCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBufferCreateFlags flags;
            
            public vulkan.VkDeviceSize size;
            
            public vulkan.VkBufferUsageFlags usage;
            
            public vulkan.VkSharingMode sharingMode;
            
            public uint queueFamilyIndexCount;
            
            public uint* pQueueFamilyIndices;
        }
        
        public readonly partial struct VkBufferCreateFlags : IEquatable<VkBufferCreateFlags>
        {
            public VkBufferCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkBufferCreateFlags other && Equals(other);
            
            public bool Equals(VkBufferCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkBufferCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkBufferCreateFlags (vulkan.VkFlags from) => new vulkan.VkBufferCreateFlags(from);
            
            public static bool operator ==(VkBufferCreateFlags left, VkBufferCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkBufferCreateFlags left, VkBufferCreateFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBufferUsageFlags : IEquatable<VkBufferUsageFlags>
        {
            public VkBufferUsageFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkBufferUsageFlags other && Equals(other);
            
            public bool Equals(VkBufferUsageFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkBufferUsageFlags from) => from.Value;
            
            public static implicit operator vulkan.VkBufferUsageFlags (vulkan.VkFlags from) => new vulkan.VkBufferUsageFlags(from);
            
            public static bool operator ==(VkBufferUsageFlags left, VkBufferUsageFlags right) => left.Equals(right);
            
            public static bool operator !=(VkBufferUsageFlags left, VkBufferUsageFlags right) => !left.Equals(right);
        }
        
        public partial struct VkBufferViewCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBufferViewCreateFlags flags;
            
            public vulkan.VkBuffer buffer;
            
            public vulkan.VkFormat format;
            
            public vulkan.VkDeviceSize offset;
            
            public vulkan.VkDeviceSize range;
        }
        
        public readonly partial struct VkBufferViewCreateFlags : IEquatable<VkBufferViewCreateFlags>
        {
            public VkBufferViewCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkBufferViewCreateFlags other && Equals(other);
            
            public bool Equals(VkBufferViewCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkBufferViewCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkBufferViewCreateFlags (vulkan.VkFlags from) => new vulkan.VkBufferViewCreateFlags(from);
            
            public static bool operator ==(VkBufferViewCreateFlags left, VkBufferViewCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkBufferViewCreateFlags left, VkBufferViewCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkImageCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageCreateFlags flags;
            
            public vulkan.VkImageType imageType;
            
            public vulkan.VkFormat format;
            
            public vulkan.VkExtent3D extent;
            
            public uint mipLevels;
            
            public uint arrayLayers;
            
            public vulkan.VkSampleCountFlagBits samples;
            
            public vulkan.VkImageTiling tiling;
            
            public vulkan.VkImageUsageFlags usage;
            
            public vulkan.VkSharingMode sharingMode;
            
            public uint queueFamilyIndexCount;
            
            public uint* pQueueFamilyIndices;
            
            public vulkan.VkImageLayout initialLayout;
        }
        
        public readonly partial struct VkImageCreateFlags : IEquatable<VkImageCreateFlags>
        {
            public VkImageCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageCreateFlags other && Equals(other);
            
            public bool Equals(VkImageCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkImageCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkImageCreateFlags (vulkan.VkFlags from) => new vulkan.VkImageCreateFlags(from);
            
            public static bool operator ==(VkImageCreateFlags left, VkImageCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkImageCreateFlags left, VkImageCreateFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImageUsageFlags : IEquatable<VkImageUsageFlags>
        {
            public VkImageUsageFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageUsageFlags other && Equals(other);
            
            public bool Equals(VkImageUsageFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkImageUsageFlags from) => from.Value;
            
            public static implicit operator vulkan.VkImageUsageFlags (vulkan.VkFlags from) => new vulkan.VkImageUsageFlags(from);
            
            public static bool operator ==(VkImageUsageFlags left, VkImageUsageFlags right) => left.Equals(right);
            
            public static bool operator !=(VkImageUsageFlags left, VkImageUsageFlags right) => !left.Equals(right);
        }
        
        public partial struct VkSubresourceLayout
        {
            public vulkan.VkDeviceSize offset;
            
            public vulkan.VkDeviceSize size;
            
            public vulkan.VkDeviceSize rowPitch;
            
            public vulkan.VkDeviceSize arrayPitch;
            
            public vulkan.VkDeviceSize depthPitch;
        }
        
        public partial struct VkComponentMapping
        {
            public vulkan.VkComponentSwizzle r;
            
            public vulkan.VkComponentSwizzle g;
            
            public vulkan.VkComponentSwizzle b;
            
            public vulkan.VkComponentSwizzle a;
        }
        
        public partial struct VkImageViewCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageViewCreateFlags flags;
            
            public vulkan.VkImage image;
            
            public vulkan.VkImageViewType viewType;
            
            public vulkan.VkFormat format;
            
            public vulkan.VkComponentMapping components;
            
            public vulkan.VkImageSubresourceRange subresourceRange;
        }
        
        public readonly partial struct VkImageViewCreateFlags : IEquatable<VkImageViewCreateFlags>
        {
            public VkImageViewCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageViewCreateFlags other && Equals(other);
            
            public bool Equals(VkImageViewCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkImageViewCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkImageViewCreateFlags (vulkan.VkFlags from) => new vulkan.VkImageViewCreateFlags(from);
            
            public static bool operator ==(VkImageViewCreateFlags left, VkImageViewCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkImageViewCreateFlags left, VkImageViewCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkShaderModuleCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkShaderModuleCreateFlags flags;
            
            public nuint codeSize;
            
            public uint* pCode;
        }
        
        public readonly partial struct VkShaderModuleCreateFlags : IEquatable<VkShaderModuleCreateFlags>
        {
            public VkShaderModuleCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkShaderModuleCreateFlags other && Equals(other);
            
            public bool Equals(VkShaderModuleCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkShaderModuleCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkShaderModuleCreateFlags (vulkan.VkFlags from) => new vulkan.VkShaderModuleCreateFlags(from);
            
            public static bool operator ==(VkShaderModuleCreateFlags left, VkShaderModuleCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkShaderModuleCreateFlags left, VkShaderModuleCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPipelineCacheCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineCacheCreateFlags flags;
            
            public nuint initialDataSize;
            
            public void* pInitialData;
        }
        
        public readonly partial struct VkPipelineCacheCreateFlags : IEquatable<VkPipelineCacheCreateFlags>
        {
            public VkPipelineCacheCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineCacheCreateFlags other && Equals(other);
            
            public bool Equals(VkPipelineCacheCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineCacheCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineCacheCreateFlags (vulkan.VkFlags from) => new vulkan.VkPipelineCacheCreateFlags(from);
            
            public static bool operator ==(VkPipelineCacheCreateFlags left, VkPipelineCacheCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineCacheCreateFlags left, VkPipelineCacheCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkSpecializationMapEntry
        {
            public uint constantID;
            
            public uint offset;
            
            public nuint size;
        }
        
        public partial struct VkSpecializationInfo
        {
            public uint mapEntryCount;
            
            public vulkan.VkSpecializationMapEntry* pMapEntries;
            
            public nuint dataSize;
            
            public void* pData;
        }
        
        public partial struct VkPipelineShaderStageCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineShaderStageCreateFlags flags;
            
            public vulkan.VkShaderStageFlagBits stage;
            
            public vulkan.VkShaderModule module;
            
            public byte* pName;
            
            public vulkan.VkSpecializationInfo* pSpecializationInfo;
        }
        
        public readonly partial struct VkPipelineShaderStageCreateFlags : IEquatable<VkPipelineShaderStageCreateFlags>
        {
            public VkPipelineShaderStageCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineShaderStageCreateFlags other && Equals(other);
            
            public bool Equals(VkPipelineShaderStageCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineShaderStageCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineShaderStageCreateFlags (vulkan.VkFlags from) => new vulkan.VkPipelineShaderStageCreateFlags(from);
            
            public static bool operator ==(VkPipelineShaderStageCreateFlags left, VkPipelineShaderStageCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineShaderStageCreateFlags left, VkPipelineShaderStageCreateFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkShaderModule : IEquatable<VkShaderModule>
        {
            public VkShaderModule(vulkan.VkShaderModule_T value) => this.Value = value;
            
            public vulkan.VkShaderModule_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkShaderModule other && Equals(other);
            
            public bool Equals(VkShaderModule other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkShaderModule_T (vulkan.VkShaderModule from) => from.Value;
            
            public static implicit operator vulkan.VkShaderModule (vulkan.VkShaderModule_T from) => new vulkan.VkShaderModule(from);
            
            public static bool operator ==(VkShaderModule left, VkShaderModule right) => left.Equals(right);
            
            public static bool operator !=(VkShaderModule left, VkShaderModule right) => !left.Equals(right);
        }
        
        public partial struct VkComputePipelineCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineCreateFlags flags;
            
            public vulkan.VkPipelineShaderStageCreateInfo stage;
            
            public vulkan.VkPipelineLayout layout;
            
            public vulkan.VkPipeline basePipelineHandle;
            
            public int basePipelineIndex;
        }
        
        public readonly partial struct VkPipelineCreateFlags : IEquatable<VkPipelineCreateFlags>
        {
            public VkPipelineCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineCreateFlags other && Equals(other);
            
            public bool Equals(VkPipelineCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineCreateFlags (vulkan.VkFlags from) => new vulkan.VkPipelineCreateFlags(from);
            
            public static bool operator ==(VkPipelineCreateFlags left, VkPipelineCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineCreateFlags left, VkPipelineCreateFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineLayout : IEquatable<VkPipelineLayout>
        {
            public VkPipelineLayout(vulkan.VkPipelineLayout_T value) => this.Value = value;
            
            public vulkan.VkPipelineLayout_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineLayout other && Equals(other);
            
            public bool Equals(VkPipelineLayout other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPipelineLayout_T (vulkan.VkPipelineLayout from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineLayout (vulkan.VkPipelineLayout_T from) => new vulkan.VkPipelineLayout(from);
            
            public static bool operator ==(VkPipelineLayout left, VkPipelineLayout right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineLayout left, VkPipelineLayout right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipeline : IEquatable<VkPipeline>
        {
            public VkPipeline(vulkan.VkPipeline_T value) => this.Value = value;
            
            public vulkan.VkPipeline_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipeline other && Equals(other);
            
            public bool Equals(VkPipeline other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPipeline_T (vulkan.VkPipeline from) => from.Value;
            
            public static implicit operator vulkan.VkPipeline (vulkan.VkPipeline_T from) => new vulkan.VkPipeline(from);
            
            public static bool operator ==(VkPipeline left, VkPipeline right) => left.Equals(right);
            
            public static bool operator !=(VkPipeline left, VkPipeline right) => !left.Equals(right);
        }
        
        public partial struct VkVertexInputBindingDescription
        {
            public uint binding;
            
            public uint stride;
            
            public vulkan.VkVertexInputRate inputRate;
        }
        
        public partial struct VkVertexInputAttributeDescription
        {
            public uint location;
            
            public uint binding;
            
            public vulkan.VkFormat format;
            
            public uint offset;
        }
        
        public partial struct VkPipelineVertexInputStateCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineVertexInputStateCreateFlags flags;
            
            public uint vertexBindingDescriptionCount;
            
            public vulkan.VkVertexInputBindingDescription* pVertexBindingDescriptions;
            
            public uint vertexAttributeDescriptionCount;
            
            public vulkan.VkVertexInputAttributeDescription* pVertexAttributeDescriptions;
        }
        
        public readonly partial struct VkPipelineVertexInputStateCreateFlags : IEquatable<VkPipelineVertexInputStateCreateFlags>
        {
            public VkPipelineVertexInputStateCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineVertexInputStateCreateFlags other && Equals(other);
            
            public bool Equals(VkPipelineVertexInputStateCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineVertexInputStateCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineVertexInputStateCreateFlags (vulkan.VkFlags from) => new vulkan.VkPipelineVertexInputStateCreateFlags(from);
            
            public static bool operator ==(VkPipelineVertexInputStateCreateFlags left, VkPipelineVertexInputStateCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineVertexInputStateCreateFlags left, VkPipelineVertexInputStateCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPipelineInputAssemblyStateCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineInputAssemblyStateCreateFlags flags;
            
            public vulkan.VkPrimitiveTopology topology;
            
            public vulkan.VkBool32 primitiveRestartEnable;
        }
        
        public readonly partial struct VkPipelineInputAssemblyStateCreateFlags : IEquatable<VkPipelineInputAssemblyStateCreateFlags>
        {
            public VkPipelineInputAssemblyStateCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineInputAssemblyStateCreateFlags other && Equals(other);
            
            public bool Equals(VkPipelineInputAssemblyStateCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineInputAssemblyStateCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineInputAssemblyStateCreateFlags (vulkan.VkFlags from) => new vulkan.VkPipelineInputAssemblyStateCreateFlags(from);
            
            public static bool operator ==(VkPipelineInputAssemblyStateCreateFlags left, VkPipelineInputAssemblyStateCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineInputAssemblyStateCreateFlags left, VkPipelineInputAssemblyStateCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPipelineTessellationStateCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineTessellationStateCreateFlags flags;
            
            public uint patchControlPoints;
        }
        
        public readonly partial struct VkPipelineTessellationStateCreateFlags : IEquatable<VkPipelineTessellationStateCreateFlags>
        {
            public VkPipelineTessellationStateCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineTessellationStateCreateFlags other && Equals(other);
            
            public bool Equals(VkPipelineTessellationStateCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineTessellationStateCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineTessellationStateCreateFlags (vulkan.VkFlags from) => new vulkan.VkPipelineTessellationStateCreateFlags(from);
            
            public static bool operator ==(VkPipelineTessellationStateCreateFlags left, VkPipelineTessellationStateCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineTessellationStateCreateFlags left, VkPipelineTessellationStateCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkViewport
        {
            public float x;
            
            public float y;
            
            public float width;
            
            public float height;
            
            public float minDepth;
            
            public float maxDepth;
        }
        
        public partial struct VkPipelineViewportStateCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineViewportStateCreateFlags flags;
            
            public uint viewportCount;
            
            public vulkan.VkViewport* pViewports;
            
            public uint scissorCount;
            
            public vulkan.VkRect2D* pScissors;
        }
        
        public readonly partial struct VkPipelineViewportStateCreateFlags : IEquatable<VkPipelineViewportStateCreateFlags>
        {
            public VkPipelineViewportStateCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineViewportStateCreateFlags other && Equals(other);
            
            public bool Equals(VkPipelineViewportStateCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineViewportStateCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineViewportStateCreateFlags (vulkan.VkFlags from) => new vulkan.VkPipelineViewportStateCreateFlags(from);
            
            public static bool operator ==(VkPipelineViewportStateCreateFlags left, VkPipelineViewportStateCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineViewportStateCreateFlags left, VkPipelineViewportStateCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPipelineRasterizationStateCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineRasterizationStateCreateFlags flags;
            
            public vulkan.VkBool32 depthClampEnable;
            
            public vulkan.VkBool32 rasterizerDiscardEnable;
            
            public vulkan.VkPolygonMode polygonMode;
            
            public vulkan.VkCullModeFlags cullMode;
            
            public vulkan.VkFrontFace frontFace;
            
            public vulkan.VkBool32 depthBiasEnable;
            
            public float depthBiasConstantFactor;
            
            public float depthBiasClamp;
            
            public float depthBiasSlopeFactor;
            
            public float lineWidth;
        }
        
        public readonly partial struct VkPipelineRasterizationStateCreateFlags : IEquatable<VkPipelineRasterizationStateCreateFlags>
        {
            public VkPipelineRasterizationStateCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineRasterizationStateCreateFlags other && Equals(other);
            
            public bool Equals(VkPipelineRasterizationStateCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineRasterizationStateCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineRasterizationStateCreateFlags (vulkan.VkFlags from) => new vulkan.VkPipelineRasterizationStateCreateFlags(from);
            
            public static bool operator ==(VkPipelineRasterizationStateCreateFlags left, VkPipelineRasterizationStateCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineRasterizationStateCreateFlags left, VkPipelineRasterizationStateCreateFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCullModeFlags : IEquatable<VkCullModeFlags>
        {
            public VkCullModeFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkCullModeFlags other && Equals(other);
            
            public bool Equals(VkCullModeFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkCullModeFlags from) => from.Value;
            
            public static implicit operator vulkan.VkCullModeFlags (vulkan.VkFlags from) => new vulkan.VkCullModeFlags(from);
            
            public static bool operator ==(VkCullModeFlags left, VkCullModeFlags right) => left.Equals(right);
            
            public static bool operator !=(VkCullModeFlags left, VkCullModeFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPipelineMultisampleStateCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineMultisampleStateCreateFlags flags;
            
            public vulkan.VkSampleCountFlagBits rasterizationSamples;
            
            public vulkan.VkBool32 sampleShadingEnable;
            
            public float minSampleShading;
            
            public vulkan.VkSampleMask* pSampleMask;
            
            public vulkan.VkBool32 alphaToCoverageEnable;
            
            public vulkan.VkBool32 alphaToOneEnable;
        }
        
        public readonly partial struct VkPipelineMultisampleStateCreateFlags : IEquatable<VkPipelineMultisampleStateCreateFlags>
        {
            public VkPipelineMultisampleStateCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineMultisampleStateCreateFlags other && Equals(other);
            
            public bool Equals(VkPipelineMultisampleStateCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineMultisampleStateCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineMultisampleStateCreateFlags (vulkan.VkFlags from) => new vulkan.VkPipelineMultisampleStateCreateFlags(from);
            
            public static bool operator ==(VkPipelineMultisampleStateCreateFlags left, VkPipelineMultisampleStateCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineMultisampleStateCreateFlags left, VkPipelineMultisampleStateCreateFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSampleMask : IEquatable<VkSampleMask>
        {
            public VkSampleMask(uint value) => this.Value = value;
            
            public uint Value { get; }
            
            public override bool Equals(object obj) => obj is VkSampleMask other && Equals(other);
            
            public bool Equals(VkSampleMask other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator uint (vulkan.VkSampleMask from) => from.Value;
            
            public static implicit operator vulkan.VkSampleMask (uint from) => new vulkan.VkSampleMask(from);
            
            public static bool operator ==(VkSampleMask left, VkSampleMask right) => left.Equals(right);
            
            public static bool operator !=(VkSampleMask left, VkSampleMask right) => !left.Equals(right);
        }
        
        public partial struct VkStencilOpState
        {
            public vulkan.VkStencilOp failOp;
            
            public vulkan.VkStencilOp passOp;
            
            public vulkan.VkStencilOp depthFailOp;
            
            public vulkan.VkCompareOp compareOp;
            
            public uint compareMask;
            
            public uint writeMask;
            
            public uint reference;
        }
        
        public partial struct VkPipelineDepthStencilStateCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineDepthStencilStateCreateFlags flags;
            
            public vulkan.VkBool32 depthTestEnable;
            
            public vulkan.VkBool32 depthWriteEnable;
            
            public vulkan.VkCompareOp depthCompareOp;
            
            public vulkan.VkBool32 depthBoundsTestEnable;
            
            public vulkan.VkBool32 stencilTestEnable;
            
            public vulkan.VkStencilOpState front;
            
            public vulkan.VkStencilOpState back;
            
            public float minDepthBounds;
            
            public float maxDepthBounds;
        }
        
        public readonly partial struct VkPipelineDepthStencilStateCreateFlags : IEquatable<VkPipelineDepthStencilStateCreateFlags>
        {
            public VkPipelineDepthStencilStateCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineDepthStencilStateCreateFlags other && Equals(other);
            
            public bool Equals(VkPipelineDepthStencilStateCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineDepthStencilStateCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineDepthStencilStateCreateFlags (vulkan.VkFlags from) => new vulkan.VkPipelineDepthStencilStateCreateFlags(from);
            
            public static bool operator ==(VkPipelineDepthStencilStateCreateFlags left, VkPipelineDepthStencilStateCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineDepthStencilStateCreateFlags left, VkPipelineDepthStencilStateCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPipelineColorBlendAttachmentState
        {
            public vulkan.VkBool32 blendEnable;
            
            public vulkan.VkBlendFactor srcColorBlendFactor;
            
            public vulkan.VkBlendFactor dstColorBlendFactor;
            
            public vulkan.VkBlendOp colorBlendOp;
            
            public vulkan.VkBlendFactor srcAlphaBlendFactor;
            
            public vulkan.VkBlendFactor dstAlphaBlendFactor;
            
            public vulkan.VkBlendOp alphaBlendOp;
            
            public vulkan.VkColorComponentFlags colorWriteMask;
        }
        
        public readonly partial struct VkColorComponentFlags : IEquatable<VkColorComponentFlags>
        {
            public VkColorComponentFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkColorComponentFlags other && Equals(other);
            
            public bool Equals(VkColorComponentFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkColorComponentFlags from) => from.Value;
            
            public static implicit operator vulkan.VkColorComponentFlags (vulkan.VkFlags from) => new vulkan.VkColorComponentFlags(from);
            
            public static bool operator ==(VkColorComponentFlags left, VkColorComponentFlags right) => left.Equals(right);
            
            public static bool operator !=(VkColorComponentFlags left, VkColorComponentFlags right) => !left.Equals(right);
        }
        
        public unsafe partial struct VkPipelineColorBlendStateCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineColorBlendStateCreateFlags flags;
            
            public vulkan.VkBool32 logicOpEnable;
            
            public vulkan.VkLogicOp logicOp;
            
            public uint attachmentCount;
            
            public vulkan.VkPipelineColorBlendAttachmentState* pAttachments;
            
            public fixed float blendConstants[4];
        }
        
        public readonly partial struct VkPipelineColorBlendStateCreateFlags : IEquatable<VkPipelineColorBlendStateCreateFlags>
        {
            public VkPipelineColorBlendStateCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineColorBlendStateCreateFlags other && Equals(other);
            
            public bool Equals(VkPipelineColorBlendStateCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineColorBlendStateCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineColorBlendStateCreateFlags (vulkan.VkFlags from) => new vulkan.VkPipelineColorBlendStateCreateFlags(from);
            
            public static bool operator ==(VkPipelineColorBlendStateCreateFlags left, VkPipelineColorBlendStateCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineColorBlendStateCreateFlags left, VkPipelineColorBlendStateCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPipelineDynamicStateCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineDynamicStateCreateFlags flags;
            
            public uint dynamicStateCount;
            
            public vulkan.VkDynamicState* pDynamicStates;
        }
        
        public readonly partial struct VkPipelineDynamicStateCreateFlags : IEquatable<VkPipelineDynamicStateCreateFlags>
        {
            public VkPipelineDynamicStateCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineDynamicStateCreateFlags other && Equals(other);
            
            public bool Equals(VkPipelineDynamicStateCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineDynamicStateCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineDynamicStateCreateFlags (vulkan.VkFlags from) => new vulkan.VkPipelineDynamicStateCreateFlags(from);
            
            public static bool operator ==(VkPipelineDynamicStateCreateFlags left, VkPipelineDynamicStateCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineDynamicStateCreateFlags left, VkPipelineDynamicStateCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkGraphicsPipelineCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineCreateFlags flags;
            
            public uint stageCount;
            
            public vulkan.VkPipelineShaderStageCreateInfo* pStages;
            
            public vulkan.VkPipelineVertexInputStateCreateInfo* pVertexInputState;
            
            public vulkan.VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState;
            
            public vulkan.VkPipelineTessellationStateCreateInfo* pTessellationState;
            
            public vulkan.VkPipelineViewportStateCreateInfo* pViewportState;
            
            public vulkan.VkPipelineRasterizationStateCreateInfo* pRasterizationState;
            
            public vulkan.VkPipelineMultisampleStateCreateInfo* pMultisampleState;
            
            public vulkan.VkPipelineDepthStencilStateCreateInfo* pDepthStencilState;
            
            public vulkan.VkPipelineColorBlendStateCreateInfo* pColorBlendState;
            
            public vulkan.VkPipelineDynamicStateCreateInfo* pDynamicState;
            
            public vulkan.VkPipelineLayout layout;
            
            public vulkan.VkRenderPass renderPass;
            
            public uint subpass;
            
            public vulkan.VkPipeline basePipelineHandle;
            
            public int basePipelineIndex;
        }
        
        public readonly partial struct VkRenderPass : IEquatable<VkRenderPass>
        {
            public VkRenderPass(vulkan.VkRenderPass_T value) => this.Value = value;
            
            public vulkan.VkRenderPass_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkRenderPass other && Equals(other);
            
            public bool Equals(VkRenderPass other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkRenderPass_T (vulkan.VkRenderPass from) => from.Value;
            
            public static implicit operator vulkan.VkRenderPass (vulkan.VkRenderPass_T from) => new vulkan.VkRenderPass(from);
            
            public static bool operator ==(VkRenderPass left, VkRenderPass right) => left.Equals(right);
            
            public static bool operator !=(VkRenderPass left, VkRenderPass right) => !left.Equals(right);
        }
        
        public partial struct VkPushConstantRange
        {
            public vulkan.VkShaderStageFlags stageFlags;
            
            public uint offset;
            
            public uint size;
        }
        
        public readonly partial struct VkShaderStageFlags : IEquatable<VkShaderStageFlags>
        {
            public VkShaderStageFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkShaderStageFlags other && Equals(other);
            
            public bool Equals(VkShaderStageFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkShaderStageFlags from) => from.Value;
            
            public static implicit operator vulkan.VkShaderStageFlags (vulkan.VkFlags from) => new vulkan.VkShaderStageFlags(from);
            
            public static bool operator ==(VkShaderStageFlags left, VkShaderStageFlags right) => left.Equals(right);
            
            public static bool operator !=(VkShaderStageFlags left, VkShaderStageFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPipelineLayoutCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineLayoutCreateFlags flags;
            
            public uint setLayoutCount;
            
            public vulkan.VkDescriptorSetLayout* pSetLayouts;
            
            public uint pushConstantRangeCount;
            
            public vulkan.VkPushConstantRange* pPushConstantRanges;
        }
        
        public readonly partial struct VkPipelineLayoutCreateFlags : IEquatable<VkPipelineLayoutCreateFlags>
        {
            public VkPipelineLayoutCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineLayoutCreateFlags other && Equals(other);
            
            public bool Equals(VkPipelineLayoutCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineLayoutCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineLayoutCreateFlags (vulkan.VkFlags from) => new vulkan.VkPipelineLayoutCreateFlags(from);
            
            public static bool operator ==(VkPipelineLayoutCreateFlags left, VkPipelineLayoutCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineLayoutCreateFlags left, VkPipelineLayoutCreateFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorSetLayout : IEquatable<VkDescriptorSetLayout>
        {
            public VkDescriptorSetLayout(vulkan.VkDescriptorSetLayout_T value) => this.Value = value;
            
            public vulkan.VkDescriptorSetLayout_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorSetLayout other && Equals(other);
            
            public bool Equals(VkDescriptorSetLayout other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDescriptorSetLayout_T (vulkan.VkDescriptorSetLayout from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorSetLayout (vulkan.VkDescriptorSetLayout_T from) => new vulkan.VkDescriptorSetLayout(from);
            
            public static bool operator ==(VkDescriptorSetLayout left, VkDescriptorSetLayout right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorSetLayout left, VkDescriptorSetLayout right) => !left.Equals(right);
        }
        
        public partial struct VkSamplerCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSamplerCreateFlags flags;
            
            public vulkan.VkFilter magFilter;
            
            public vulkan.VkFilter minFilter;
            
            public vulkan.VkSamplerMipmapMode mipmapMode;
            
            public vulkan.VkSamplerAddressMode addressModeU;
            
            public vulkan.VkSamplerAddressMode addressModeV;
            
            public vulkan.VkSamplerAddressMode addressModeW;
            
            public float mipLodBias;
            
            public vulkan.VkBool32 anisotropyEnable;
            
            public float maxAnisotropy;
            
            public vulkan.VkBool32 compareEnable;
            
            public vulkan.VkCompareOp compareOp;
            
            public float minLod;
            
            public float maxLod;
            
            public vulkan.VkBorderColor borderColor;
            
            public vulkan.VkBool32 unnormalizedCoordinates;
        }
        
        public readonly partial struct VkSamplerCreateFlags : IEquatable<VkSamplerCreateFlags>
        {
            public VkSamplerCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkSamplerCreateFlags other && Equals(other);
            
            public bool Equals(VkSamplerCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkSamplerCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkSamplerCreateFlags (vulkan.VkFlags from) => new vulkan.VkSamplerCreateFlags(from);
            
            public static bool operator ==(VkSamplerCreateFlags left, VkSamplerCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkSamplerCreateFlags left, VkSamplerCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkCopyDescriptorSet
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDescriptorSet srcSet;
            
            public uint srcBinding;
            
            public uint srcArrayElement;
            
            public vulkan.VkDescriptorSet dstSet;
            
            public uint dstBinding;
            
            public uint dstArrayElement;
            
            public uint descriptorCount;
        }
        
        public readonly partial struct VkDescriptorSet : IEquatable<VkDescriptorSet>
        {
            public VkDescriptorSet(vulkan.VkDescriptorSet_T value) => this.Value = value;
            
            public vulkan.VkDescriptorSet_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorSet other && Equals(other);
            
            public bool Equals(VkDescriptorSet other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDescriptorSet_T (vulkan.VkDescriptorSet from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorSet (vulkan.VkDescriptorSet_T from) => new vulkan.VkDescriptorSet(from);
            
            public static bool operator ==(VkDescriptorSet left, VkDescriptorSet right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorSet left, VkDescriptorSet right) => !left.Equals(right);
        }
        
        public partial struct VkDescriptorBufferInfo
        {
            public vulkan.VkBuffer buffer;
            
            public vulkan.VkDeviceSize offset;
            
            public vulkan.VkDeviceSize range;
        }
        
        public partial struct VkDescriptorImageInfo
        {
            public vulkan.VkSampler sampler;
            
            public vulkan.VkImageView imageView;
            
            public vulkan.VkImageLayout imageLayout;
        }
        
        public readonly partial struct VkSampler : IEquatable<VkSampler>
        {
            public VkSampler(vulkan.VkSampler_T value) => this.Value = value;
            
            public vulkan.VkSampler_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkSampler other && Equals(other);
            
            public bool Equals(VkSampler other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSampler_T (vulkan.VkSampler from) => from.Value;
            
            public static implicit operator vulkan.VkSampler (vulkan.VkSampler_T from) => new vulkan.VkSampler(from);
            
            public static bool operator ==(VkSampler left, VkSampler right) => left.Equals(right);
            
            public static bool operator !=(VkSampler left, VkSampler right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImageView : IEquatable<VkImageView>
        {
            public VkImageView(vulkan.VkImageView_T value) => this.Value = value;
            
            public vulkan.VkImageView_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageView other && Equals(other);
            
            public bool Equals(VkImageView other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkImageView_T (vulkan.VkImageView from) => from.Value;
            
            public static implicit operator vulkan.VkImageView (vulkan.VkImageView_T from) => new vulkan.VkImageView(from);
            
            public static bool operator ==(VkImageView left, VkImageView right) => left.Equals(right);
            
            public static bool operator !=(VkImageView left, VkImageView right) => !left.Equals(right);
        }
        
        public partial struct VkDescriptorPoolSize
        {
            public vulkan.VkDescriptorType type;
            
            public uint descriptorCount;
        }
        
        public partial struct VkDescriptorPoolCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDescriptorPoolCreateFlags flags;
            
            public uint maxSets;
            
            public uint poolSizeCount;
            
            public vulkan.VkDescriptorPoolSize* pPoolSizes;
        }
        
        public readonly partial struct VkDescriptorPoolCreateFlags : IEquatable<VkDescriptorPoolCreateFlags>
        {
            public VkDescriptorPoolCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorPoolCreateFlags other && Equals(other);
            
            public bool Equals(VkDescriptorPoolCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDescriptorPoolCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorPoolCreateFlags (vulkan.VkFlags from) => new vulkan.VkDescriptorPoolCreateFlags(from);
            
            public static bool operator ==(VkDescriptorPoolCreateFlags left, VkDescriptorPoolCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorPoolCreateFlags left, VkDescriptorPoolCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkDescriptorSetAllocateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDescriptorPool descriptorPool;
            
            public uint descriptorSetCount;
            
            public vulkan.VkDescriptorSetLayout* pSetLayouts;
        }
        
        public readonly partial struct VkDescriptorPool : IEquatable<VkDescriptorPool>
        {
            public VkDescriptorPool(vulkan.VkDescriptorPool_T value) => this.Value = value;
            
            public vulkan.VkDescriptorPool_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorPool other && Equals(other);
            
            public bool Equals(VkDescriptorPool other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDescriptorPool_T (vulkan.VkDescriptorPool from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorPool (vulkan.VkDescriptorPool_T from) => new vulkan.VkDescriptorPool(from);
            
            public static bool operator ==(VkDescriptorPool left, VkDescriptorPool right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorPool left, VkDescriptorPool right) => !left.Equals(right);
        }
        
        public partial struct VkDescriptorSetLayoutBinding
        {
            public uint binding;
            
            public vulkan.VkDescriptorType descriptorType;
            
            public uint descriptorCount;
            
            public vulkan.VkShaderStageFlags stageFlags;
            
            public vulkan.VkSampler* pImmutableSamplers;
        }
        
        public partial struct VkDescriptorSetLayoutCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDescriptorSetLayoutCreateFlags flags;
            
            public uint bindingCount;
            
            public vulkan.VkDescriptorSetLayoutBinding* pBindings;
        }
        
        public readonly partial struct VkDescriptorSetLayoutCreateFlags : IEquatable<VkDescriptorSetLayoutCreateFlags>
        {
            public VkDescriptorSetLayoutCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorSetLayoutCreateFlags other && Equals(other);
            
            public bool Equals(VkDescriptorSetLayoutCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDescriptorSetLayoutCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorSetLayoutCreateFlags (vulkan.VkFlags from) => new vulkan.VkDescriptorSetLayoutCreateFlags(from);
            
            public static bool operator ==(VkDescriptorSetLayoutCreateFlags left, VkDescriptorSetLayoutCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorSetLayoutCreateFlags left, VkDescriptorSetLayoutCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkWriteDescriptorSet
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDescriptorSet dstSet;
            
            public uint dstBinding;
            
            public uint dstArrayElement;
            
            public uint descriptorCount;
            
            public vulkan.VkDescriptorType descriptorType;
            
            public vulkan.VkDescriptorImageInfo* pImageInfo;
            
            public vulkan.VkDescriptorBufferInfo* pBufferInfo;
            
            public vulkan.VkBufferView* pTexelBufferView;
        }
        
        public readonly partial struct VkBufferView : IEquatable<VkBufferView>
        {
            public VkBufferView(vulkan.VkBufferView_T value) => this.Value = value;
            
            public vulkan.VkBufferView_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkBufferView other && Equals(other);
            
            public bool Equals(VkBufferView other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBufferView_T (vulkan.VkBufferView from) => from.Value;
            
            public static implicit operator vulkan.VkBufferView (vulkan.VkBufferView_T from) => new vulkan.VkBufferView(from);
            
            public static bool operator ==(VkBufferView left, VkBufferView right) => left.Equals(right);
            
            public static bool operator !=(VkBufferView left, VkBufferView right) => !left.Equals(right);
        }
        
        public partial struct VkAttachmentDescription
        {
            public vulkan.VkAttachmentDescriptionFlags flags;
            
            public vulkan.VkFormat format;
            
            public vulkan.VkSampleCountFlagBits samples;
            
            public vulkan.VkAttachmentLoadOp loadOp;
            
            public vulkan.VkAttachmentStoreOp storeOp;
            
            public vulkan.VkAttachmentLoadOp stencilLoadOp;
            
            public vulkan.VkAttachmentStoreOp stencilStoreOp;
            
            public vulkan.VkImageLayout initialLayout;
            
            public vulkan.VkImageLayout finalLayout;
        }
        
        public readonly partial struct VkAttachmentDescriptionFlags : IEquatable<VkAttachmentDescriptionFlags>
        {
            public VkAttachmentDescriptionFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkAttachmentDescriptionFlags other && Equals(other);
            
            public bool Equals(VkAttachmentDescriptionFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkAttachmentDescriptionFlags from) => from.Value;
            
            public static implicit operator vulkan.VkAttachmentDescriptionFlags (vulkan.VkFlags from) => new vulkan.VkAttachmentDescriptionFlags(from);
            
            public static bool operator ==(VkAttachmentDescriptionFlags left, VkAttachmentDescriptionFlags right) => left.Equals(right);
            
            public static bool operator !=(VkAttachmentDescriptionFlags left, VkAttachmentDescriptionFlags right) => !left.Equals(right);
        }
        
        public partial struct VkAttachmentReference
        {
            public uint attachment;
            
            public vulkan.VkImageLayout layout;
        }
        
        public partial struct VkFramebufferCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFramebufferCreateFlags flags;
            
            public vulkan.VkRenderPass renderPass;
            
            public uint attachmentCount;
            
            public vulkan.VkImageView* pAttachments;
            
            public uint width;
            
            public uint height;
            
            public uint layers;
        }
        
        public readonly partial struct VkFramebufferCreateFlags : IEquatable<VkFramebufferCreateFlags>
        {
            public VkFramebufferCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkFramebufferCreateFlags other && Equals(other);
            
            public bool Equals(VkFramebufferCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkFramebufferCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkFramebufferCreateFlags (vulkan.VkFlags from) => new vulkan.VkFramebufferCreateFlags(from);
            
            public static bool operator ==(VkFramebufferCreateFlags left, VkFramebufferCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkFramebufferCreateFlags left, VkFramebufferCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkSubpassDescription
        {
            public vulkan.VkSubpassDescriptionFlags flags;
            
            public vulkan.VkPipelineBindPoint pipelineBindPoint;
            
            public uint inputAttachmentCount;
            
            public vulkan.VkAttachmentReference* pInputAttachments;
            
            public uint colorAttachmentCount;
            
            public vulkan.VkAttachmentReference* pColorAttachments;
            
            public vulkan.VkAttachmentReference* pResolveAttachments;
            
            public vulkan.VkAttachmentReference* pDepthStencilAttachment;
            
            public uint preserveAttachmentCount;
            
            public uint* pPreserveAttachments;
        }
        
        public readonly partial struct VkSubpassDescriptionFlags : IEquatable<VkSubpassDescriptionFlags>
        {
            public VkSubpassDescriptionFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkSubpassDescriptionFlags other && Equals(other);
            
            public bool Equals(VkSubpassDescriptionFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkSubpassDescriptionFlags from) => from.Value;
            
            public static implicit operator vulkan.VkSubpassDescriptionFlags (vulkan.VkFlags from) => new vulkan.VkSubpassDescriptionFlags(from);
            
            public static bool operator ==(VkSubpassDescriptionFlags left, VkSubpassDescriptionFlags right) => left.Equals(right);
            
            public static bool operator !=(VkSubpassDescriptionFlags left, VkSubpassDescriptionFlags right) => !left.Equals(right);
        }
        
        public partial struct VkSubpassDependency
        {
            public uint srcSubpass;
            
            public uint dstSubpass;
            
            public vulkan.VkPipelineStageFlags srcStageMask;
            
            public vulkan.VkPipelineStageFlags dstStageMask;
            
            public vulkan.VkAccessFlags srcAccessMask;
            
            public vulkan.VkAccessFlags dstAccessMask;
            
            public vulkan.VkDependencyFlags dependencyFlags;
        }
        
        public readonly partial struct VkDependencyFlags : IEquatable<VkDependencyFlags>
        {
            public VkDependencyFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDependencyFlags other && Equals(other);
            
            public bool Equals(VkDependencyFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDependencyFlags from) => from.Value;
            
            public static implicit operator vulkan.VkDependencyFlags (vulkan.VkFlags from) => new vulkan.VkDependencyFlags(from);
            
            public static bool operator ==(VkDependencyFlags left, VkDependencyFlags right) => left.Equals(right);
            
            public static bool operator !=(VkDependencyFlags left, VkDependencyFlags right) => !left.Equals(right);
        }
        
        public partial struct VkRenderPassCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkRenderPassCreateFlags flags;
            
            public uint attachmentCount;
            
            public vulkan.VkAttachmentDescription* pAttachments;
            
            public uint subpassCount;
            
            public vulkan.VkSubpassDescription* pSubpasses;
            
            public uint dependencyCount;
            
            public vulkan.VkSubpassDependency* pDependencies;
        }
        
        public readonly partial struct VkRenderPassCreateFlags : IEquatable<VkRenderPassCreateFlags>
        {
            public VkRenderPassCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkRenderPassCreateFlags other && Equals(other);
            
            public bool Equals(VkRenderPassCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkRenderPassCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkRenderPassCreateFlags (vulkan.VkFlags from) => new vulkan.VkRenderPassCreateFlags(from);
            
            public static bool operator ==(VkRenderPassCreateFlags left, VkRenderPassCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkRenderPassCreateFlags left, VkRenderPassCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkCommandPoolCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkCommandPoolCreateFlags flags;
            
            public uint queueFamilyIndex;
        }
        
        public readonly partial struct VkCommandPoolCreateFlags : IEquatable<VkCommandPoolCreateFlags>
        {
            public VkCommandPoolCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkCommandPoolCreateFlags other && Equals(other);
            
            public bool Equals(VkCommandPoolCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkCommandPoolCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkCommandPoolCreateFlags (vulkan.VkFlags from) => new vulkan.VkCommandPoolCreateFlags(from);
            
            public static bool operator ==(VkCommandPoolCreateFlags left, VkCommandPoolCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkCommandPoolCreateFlags left, VkCommandPoolCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkCommandBufferAllocateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkCommandPool commandPool;
            
            public vulkan.VkCommandBufferLevel level;
            
            public uint commandBufferCount;
        }
        
        public readonly partial struct VkCommandPool : IEquatable<VkCommandPool>
        {
            public VkCommandPool(vulkan.VkCommandPool_T value) => this.Value = value;
            
            public vulkan.VkCommandPool_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkCommandPool other && Equals(other);
            
            public bool Equals(VkCommandPool other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkCommandPool_T (vulkan.VkCommandPool from) => from.Value;
            
            public static implicit operator vulkan.VkCommandPool (vulkan.VkCommandPool_T from) => new vulkan.VkCommandPool(from);
            
            public static bool operator ==(VkCommandPool left, VkCommandPool right) => left.Equals(right);
            
            public static bool operator !=(VkCommandPool left, VkCommandPool right) => !left.Equals(right);
        }
        
        public partial struct VkCommandBufferInheritanceInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkRenderPass renderPass;
            
            public uint subpass;
            
            public vulkan.VkFramebuffer framebuffer;
            
            public vulkan.VkBool32 occlusionQueryEnable;
            
            public vulkan.VkQueryControlFlags queryFlags;
            
            public vulkan.VkQueryPipelineStatisticFlags pipelineStatistics;
        }
        
        public readonly partial struct VkFramebuffer : IEquatable<VkFramebuffer>
        {
            public VkFramebuffer(vulkan.VkFramebuffer_T value) => this.Value = value;
            
            public vulkan.VkFramebuffer_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkFramebuffer other && Equals(other);
            
            public bool Equals(VkFramebuffer other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFramebuffer_T (vulkan.VkFramebuffer from) => from.Value;
            
            public static implicit operator vulkan.VkFramebuffer (vulkan.VkFramebuffer_T from) => new vulkan.VkFramebuffer(from);
            
            public static bool operator ==(VkFramebuffer left, VkFramebuffer right) => left.Equals(right);
            
            public static bool operator !=(VkFramebuffer left, VkFramebuffer right) => !left.Equals(right);
        }
        
        public readonly partial struct VkQueryControlFlags : IEquatable<VkQueryControlFlags>
        {
            public VkQueryControlFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkQueryControlFlags other && Equals(other);
            
            public bool Equals(VkQueryControlFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkQueryControlFlags from) => from.Value;
            
            public static implicit operator vulkan.VkQueryControlFlags (vulkan.VkFlags from) => new vulkan.VkQueryControlFlags(from);
            
            public static bool operator ==(VkQueryControlFlags left, VkQueryControlFlags right) => left.Equals(right);
            
            public static bool operator !=(VkQueryControlFlags left, VkQueryControlFlags right) => !left.Equals(right);
        }
        
        public partial struct VkCommandBufferBeginInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkCommandBufferUsageFlags flags;
            
            public vulkan.VkCommandBufferInheritanceInfo* pInheritanceInfo;
        }
        
        public readonly partial struct VkCommandBufferUsageFlags : IEquatable<VkCommandBufferUsageFlags>
        {
            public VkCommandBufferUsageFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkCommandBufferUsageFlags other && Equals(other);
            
            public bool Equals(VkCommandBufferUsageFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkCommandBufferUsageFlags from) => from.Value;
            
            public static implicit operator vulkan.VkCommandBufferUsageFlags (vulkan.VkFlags from) => new vulkan.VkCommandBufferUsageFlags(from);
            
            public static bool operator ==(VkCommandBufferUsageFlags left, VkCommandBufferUsageFlags right) => left.Equals(right);
            
            public static bool operator !=(VkCommandBufferUsageFlags left, VkCommandBufferUsageFlags right) => !left.Equals(right);
        }
        
        public partial struct VkBufferCopy
        {
            public vulkan.VkDeviceSize srcOffset;
            
            public vulkan.VkDeviceSize dstOffset;
            
            public vulkan.VkDeviceSize size;
        }
        
        public partial struct VkImageSubresourceLayers
        {
            public vulkan.VkImageAspectFlags aspectMask;
            
            public uint mipLevel;
            
            public uint baseArrayLayer;
            
            public uint layerCount;
        }
        
        public partial struct VkBufferImageCopy
        {
            public vulkan.VkDeviceSize bufferOffset;
            
            public uint bufferRowLength;
            
            public uint bufferImageHeight;
            
            public vulkan.VkImageSubresourceLayers imageSubresource;
            
            public vulkan.VkOffset3D imageOffset;
            
            public vulkan.VkExtent3D imageExtent;
        }
        
        [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
        public unsafe partial struct VkClearColorValue
        {
            [FieldOffset(0)]
            public fixed float float32[4];
            
            [FieldOffset(0)]
            public fixed int int32[4];
            
            [FieldOffset(0)]
            public fixed uint uint32[4];
        }
        
        public partial struct VkClearDepthStencilValue
        {
            public float depth;
            
            public uint stencil;
        }
        
        [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
        public partial struct VkClearValue
        {
            [FieldOffset(0)]
            public vulkan.VkClearColorValue color;
            
            [FieldOffset(0)]
            public vulkan.VkClearDepthStencilValue depthStencil;
        }
        
        public partial struct VkClearAttachment
        {
            public vulkan.VkImageAspectFlags aspectMask;
            
            public uint colorAttachment;
            
            public vulkan.VkClearValue clearValue;
        }
        
        public partial struct VkClearRect
        {
            public vulkan.VkRect2D rect;
            
            public uint baseArrayLayer;
            
            public uint layerCount;
        }
        
        public partial struct VkImageBlit
        {
            public vulkan.VkImageSubresourceLayers srcSubresource;
            
            public FixedArray2<vulkan.VkOffset3D> srcOffsets;
            
            public vulkan.VkImageSubresourceLayers dstSubresource;
            
            public FixedArray2<vulkan.VkOffset3D> dstOffsets;
        }
        
        public partial struct VkImageCopy
        {
            public vulkan.VkImageSubresourceLayers srcSubresource;
            
            public vulkan.VkOffset3D srcOffset;
            
            public vulkan.VkImageSubresourceLayers dstSubresource;
            
            public vulkan.VkOffset3D dstOffset;
            
            public vulkan.VkExtent3D extent;
        }
        
        public partial struct VkImageResolve
        {
            public vulkan.VkImageSubresourceLayers srcSubresource;
            
            public vulkan.VkOffset3D srcOffset;
            
            public vulkan.VkImageSubresourceLayers dstSubresource;
            
            public vulkan.VkOffset3D dstOffset;
            
            public vulkan.VkExtent3D extent;
        }
        
        public partial struct VkRenderPassBeginInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkRenderPass renderPass;
            
            public vulkan.VkFramebuffer framebuffer;
            
            public vulkan.VkRect2D renderArea;
            
            public uint clearValueCount;
            
            public vulkan.VkClearValue* pClearValues;
        }
        
        public partial struct VkPhysicalDeviceSubgroupProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint subgroupSize;
            
            public vulkan.VkShaderStageFlags supportedStages;
            
            public vulkan.VkSubgroupFeatureFlags supportedOperations;
            
            public vulkan.VkBool32 quadOperationsInAllStages;
        }
        
        public readonly partial struct VkSubgroupFeatureFlags : IEquatable<VkSubgroupFeatureFlags>
        {
            public VkSubgroupFeatureFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkSubgroupFeatureFlags other && Equals(other);
            
            public bool Equals(VkSubgroupFeatureFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkSubgroupFeatureFlags from) => from.Value;
            
            public static implicit operator vulkan.VkSubgroupFeatureFlags (vulkan.VkFlags from) => new vulkan.VkSubgroupFeatureFlags(from);
            
            public static bool operator ==(VkSubgroupFeatureFlags left, VkSubgroupFeatureFlags right) => left.Equals(right);
            
            public static bool operator !=(VkSubgroupFeatureFlags left, VkSubgroupFeatureFlags right) => !left.Equals(right);
        }
        
        public partial struct VkBindBufferMemoryInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBuffer buffer;
            
            public vulkan.VkDeviceMemory memory;
            
            public vulkan.VkDeviceSize memoryOffset;
        }
        
        public partial struct VkBindImageMemoryInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImage image;
            
            public vulkan.VkDeviceMemory memory;
            
            public vulkan.VkDeviceSize memoryOffset;
        }
        
        public partial struct VkPhysicalDevice16BitStorageFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 storageBuffer16BitAccess;
            
            public vulkan.VkBool32 uniformAndStorageBuffer16BitAccess;
            
            public vulkan.VkBool32 storagePushConstant16;
            
            public vulkan.VkBool32 storageInputOutput16;
        }
        
        public partial struct VkMemoryDedicatedRequirements
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 prefersDedicatedAllocation;
            
            public vulkan.VkBool32 requiresDedicatedAllocation;
        }
        
        public partial struct VkMemoryDedicatedAllocateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImage image;
            
            public vulkan.VkBuffer buffer;
        }
        
        public partial struct VkMemoryAllocateFlagsInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkMemoryAllocateFlags flags;
            
            public uint deviceMask;
        }
        
        public readonly partial struct VkMemoryAllocateFlags : IEquatable<VkMemoryAllocateFlags>
        {
            public VkMemoryAllocateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkMemoryAllocateFlags other && Equals(other);
            
            public bool Equals(VkMemoryAllocateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkMemoryAllocateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkMemoryAllocateFlags (vulkan.VkFlags from) => new vulkan.VkMemoryAllocateFlags(from);
            
            public static bool operator ==(VkMemoryAllocateFlags left, VkMemoryAllocateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkMemoryAllocateFlags left, VkMemoryAllocateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkDeviceGroupRenderPassBeginInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint deviceMask;
            
            public uint deviceRenderAreaCount;
            
            public vulkan.VkRect2D* pDeviceRenderAreas;
        }
        
        public partial struct VkDeviceGroupCommandBufferBeginInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint deviceMask;
        }
        
        public partial struct VkDeviceGroupSubmitInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint waitSemaphoreCount;
            
            public uint* pWaitSemaphoreDeviceIndices;
            
            public uint commandBufferCount;
            
            public uint* pCommandBufferDeviceMasks;
            
            public uint signalSemaphoreCount;
            
            public uint* pSignalSemaphoreDeviceIndices;
        }
        
        public partial struct VkDeviceGroupBindSparseInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint resourceDeviceIndex;
            
            public uint memoryDeviceIndex;
        }
        
        public partial struct VkBindBufferMemoryDeviceGroupInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint deviceIndexCount;
            
            public uint* pDeviceIndices;
        }
        
        public partial struct VkBindImageMemoryDeviceGroupInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint deviceIndexCount;
            
            public uint* pDeviceIndices;
            
            public uint splitInstanceBindRegionCount;
            
            public vulkan.VkRect2D* pSplitInstanceBindRegions;
        }
        
        public partial struct VkPhysicalDeviceGroupProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint physicalDeviceCount;
            
            public FixedArray32<nint> physicalDevices;
            
            public vulkan.VkBool32 subsetAllocation;
        }
        
        public partial struct VkDeviceGroupDeviceCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint physicalDeviceCount;
            
            public vulkan.VkPhysicalDevice* pPhysicalDevices;
        }
        
        public readonly partial struct VkPhysicalDevice : IEquatable<VkPhysicalDevice>
        {
            public VkPhysicalDevice(vulkan.VkPhysicalDevice_T value) => this.Value = value;
            
            public vulkan.VkPhysicalDevice_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDevice other && Equals(other);
            
            public bool Equals(VkPhysicalDevice other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDevice_T (vulkan.VkPhysicalDevice from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDevice (vulkan.VkPhysicalDevice_T from) => new vulkan.VkPhysicalDevice(from);
            
            public static bool operator ==(VkPhysicalDevice left, VkPhysicalDevice right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDevice left, VkPhysicalDevice right) => !left.Equals(right);
        }
        
        public partial struct VkBufferMemoryRequirementsInfo2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBuffer buffer;
        }
        
        public partial struct VkImageMemoryRequirementsInfo2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImage image;
        }
        
        public partial struct VkImageSparseMemoryRequirementsInfo2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImage image;
        }
        
        public partial struct VkMemoryRequirements2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkMemoryRequirements memoryRequirements;
        }
        
        public partial struct VkSparseImageMemoryRequirements2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSparseImageMemoryRequirements memoryRequirements;
        }
        
        public partial struct VkPhysicalDeviceFeatures2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPhysicalDeviceFeatures features;
        }
        
        public partial struct VkPhysicalDeviceProperties2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPhysicalDeviceProperties properties;
        }
        
        public partial struct VkFormatProperties2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFormatProperties formatProperties;
        }
        
        public partial struct VkImageFormatProperties2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageFormatProperties imageFormatProperties;
        }
        
        public partial struct VkPhysicalDeviceImageFormatInfo2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFormat format;
            
            public vulkan.VkImageType type;
            
            public vulkan.VkImageTiling tiling;
            
            public vulkan.VkImageUsageFlags usage;
            
            public vulkan.VkImageCreateFlags flags;
        }
        
        public partial struct VkQueueFamilyProperties2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkQueueFamilyProperties queueFamilyProperties;
        }
        
        public partial struct VkPhysicalDeviceMemoryProperties2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPhysicalDeviceMemoryProperties memoryProperties;
        }
        
        public partial struct VkSparseImageFormatProperties2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSparseImageFormatProperties properties;
        }
        
        public partial struct VkPhysicalDeviceSparseImageFormatInfo2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFormat format;
            
            public vulkan.VkImageType type;
            
            public vulkan.VkSampleCountFlagBits samples;
            
            public vulkan.VkImageUsageFlags usage;
            
            public vulkan.VkImageTiling tiling;
        }
        
        public partial struct VkPhysicalDevicePointClippingProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPointClippingBehavior pointClippingBehavior;
        }
        
        public partial struct VkInputAttachmentAspectReference
        {
            public uint subpass;
            
            public uint inputAttachmentIndex;
            
            public vulkan.VkImageAspectFlags aspectMask;
        }
        
        public partial struct VkRenderPassInputAttachmentAspectCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint aspectReferenceCount;
            
            public vulkan.VkInputAttachmentAspectReference* pAspectReferences;
        }
        
        public partial struct VkImageViewUsageCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageUsageFlags usage;
        }
        
        public partial struct VkPipelineTessellationDomainOriginStateCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkTessellationDomainOrigin domainOrigin;
        }
        
        public partial struct VkRenderPassMultiviewCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint subpassCount;
            
            public uint* pViewMasks;
            
            public uint dependencyCount;
            
            public int* pViewOffsets;
            
            public uint correlationMaskCount;
            
            public uint* pCorrelationMasks;
        }
        
        public partial struct VkPhysicalDeviceMultiviewFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 multiview;
            
            public vulkan.VkBool32 multiviewGeometryShader;
            
            public vulkan.VkBool32 multiviewTessellationShader;
        }
        
        public partial struct VkPhysicalDeviceMultiviewProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxMultiviewViewCount;
            
            public uint maxMultiviewInstanceIndex;
        }
        
        public partial struct VkPhysicalDeviceVariablePointersFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 variablePointersStorageBuffer;
            
            public vulkan.VkBool32 variablePointers;
        }
        
        public partial struct VkPhysicalDeviceProtectedMemoryFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 protectedMemory;
        }
        
        public partial struct VkPhysicalDeviceProtectedMemoryProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 protectedNoFault;
        }
        
        public partial struct VkDeviceQueueInfo2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceQueueCreateFlags flags;
            
            public uint queueFamilyIndex;
            
            public uint queueIndex;
        }
        
        public partial struct VkProtectedSubmitInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 protectedSubmit;
        }
        
        public partial struct VkSamplerYcbcrConversionCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFormat format;
            
            public vulkan.VkSamplerYcbcrModelConversion ycbcrModel;
            
            public vulkan.VkSamplerYcbcrRange ycbcrRange;
            
            public vulkan.VkComponentMapping components;
            
            public vulkan.VkChromaLocation xChromaOffset;
            
            public vulkan.VkChromaLocation yChromaOffset;
            
            public vulkan.VkFilter chromaFilter;
            
            public vulkan.VkBool32 forceExplicitReconstruction;
        }
        
        public partial struct VkSamplerYcbcrConversionInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSamplerYcbcrConversion conversion;
        }
        
        public readonly partial struct VkSamplerYcbcrConversion : IEquatable<VkSamplerYcbcrConversion>
        {
            public VkSamplerYcbcrConversion(vulkan.VkSamplerYcbcrConversion_T value) => this.Value = value;
            
            public vulkan.VkSamplerYcbcrConversion_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkSamplerYcbcrConversion other && Equals(other);
            
            public bool Equals(VkSamplerYcbcrConversion other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSamplerYcbcrConversion_T (vulkan.VkSamplerYcbcrConversion from) => from.Value;
            
            public static implicit operator vulkan.VkSamplerYcbcrConversion (vulkan.VkSamplerYcbcrConversion_T from) => new vulkan.VkSamplerYcbcrConversion(from);
            
            public static bool operator ==(VkSamplerYcbcrConversion left, VkSamplerYcbcrConversion right) => left.Equals(right);
            
            public static bool operator !=(VkSamplerYcbcrConversion left, VkSamplerYcbcrConversion right) => !left.Equals(right);
        }
        
        public partial struct VkBindImagePlaneMemoryInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageAspectFlagBits planeAspect;
        }
        
        public partial struct VkImagePlaneMemoryRequirementsInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageAspectFlagBits planeAspect;
        }
        
        public partial struct VkPhysicalDeviceSamplerYcbcrConversionFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 samplerYcbcrConversion;
        }
        
        public partial struct VkSamplerYcbcrConversionImageFormatProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint combinedImageSamplerDescriptorCount;
        }
        
        public partial struct VkDescriptorUpdateTemplateEntry
        {
            public uint dstBinding;
            
            public uint dstArrayElement;
            
            public uint descriptorCount;
            
            public vulkan.VkDescriptorType descriptorType;
            
            public nuint offset;
            
            public nuint stride;
        }
        
        public partial struct VkDescriptorUpdateTemplateCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDescriptorUpdateTemplateCreateFlags flags;
            
            public uint descriptorUpdateEntryCount;
            
            public vulkan.VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries;
            
            public vulkan.VkDescriptorUpdateTemplateType templateType;
            
            public vulkan.VkDescriptorSetLayout descriptorSetLayout;
            
            public vulkan.VkPipelineBindPoint pipelineBindPoint;
            
            public vulkan.VkPipelineLayout pipelineLayout;
            
            public uint set;
        }
        
        public readonly partial struct VkDescriptorUpdateTemplateCreateFlags : IEquatable<VkDescriptorUpdateTemplateCreateFlags>
        {
            public VkDescriptorUpdateTemplateCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorUpdateTemplateCreateFlags other && Equals(other);
            
            public bool Equals(VkDescriptorUpdateTemplateCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDescriptorUpdateTemplateCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorUpdateTemplateCreateFlags (vulkan.VkFlags from) => new vulkan.VkDescriptorUpdateTemplateCreateFlags(from);
            
            public static bool operator ==(VkDescriptorUpdateTemplateCreateFlags left, VkDescriptorUpdateTemplateCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorUpdateTemplateCreateFlags left, VkDescriptorUpdateTemplateCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkExternalMemoryProperties
        {
            public vulkan.VkExternalMemoryFeatureFlags externalMemoryFeatures;
            
            public vulkan.VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes;
            
            public vulkan.VkExternalMemoryHandleTypeFlags compatibleHandleTypes;
        }
        
        public readonly partial struct VkExternalMemoryFeatureFlags : IEquatable<VkExternalMemoryFeatureFlags>
        {
            public VkExternalMemoryFeatureFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalMemoryFeatureFlags other && Equals(other);
            
            public bool Equals(VkExternalMemoryFeatureFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkExternalMemoryFeatureFlags from) => from.Value;
            
            public static implicit operator vulkan.VkExternalMemoryFeatureFlags (vulkan.VkFlags from) => new vulkan.VkExternalMemoryFeatureFlags(from);
            
            public static bool operator ==(VkExternalMemoryFeatureFlags left, VkExternalMemoryFeatureFlags right) => left.Equals(right);
            
            public static bool operator !=(VkExternalMemoryFeatureFlags left, VkExternalMemoryFeatureFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalMemoryHandleTypeFlags : IEquatable<VkExternalMemoryHandleTypeFlags>
        {
            public VkExternalMemoryHandleTypeFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalMemoryHandleTypeFlags other && Equals(other);
            
            public bool Equals(VkExternalMemoryHandleTypeFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkExternalMemoryHandleTypeFlags from) => from.Value;
            
            public static implicit operator vulkan.VkExternalMemoryHandleTypeFlags (vulkan.VkFlags from) => new vulkan.VkExternalMemoryHandleTypeFlags(from);
            
            public static bool operator ==(VkExternalMemoryHandleTypeFlags left, VkExternalMemoryHandleTypeFlags right) => left.Equals(right);
            
            public static bool operator !=(VkExternalMemoryHandleTypeFlags left, VkExternalMemoryHandleTypeFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceExternalImageFormatInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalMemoryHandleTypeFlagBits handleType;
        }
        
        public partial struct VkExternalImageFormatProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalMemoryProperties externalMemoryProperties;
        }
        
        public partial struct VkPhysicalDeviceExternalBufferInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBufferCreateFlags flags;
            
            public vulkan.VkBufferUsageFlags usage;
            
            public vulkan.VkExternalMemoryHandleTypeFlagBits handleType;
        }
        
        public partial struct VkExternalBufferProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalMemoryProperties externalMemoryProperties;
        }
        
        public unsafe partial struct VkPhysicalDeviceIDProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public fixed byte deviceUUID[16];
            
            public fixed byte driverUUID[16];
            
            public fixed byte deviceLUID[8];
            
            public uint deviceNodeMask;
            
            public vulkan.VkBool32 deviceLUIDValid;
        }
        
        public partial struct VkExternalMemoryImageCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalMemoryHandleTypeFlags handleTypes;
        }
        
        public partial struct VkExternalMemoryBufferCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalMemoryHandleTypeFlags handleTypes;
        }
        
        public partial struct VkExportMemoryAllocateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalMemoryHandleTypeFlags handleTypes;
        }
        
        public partial struct VkPhysicalDeviceExternalFenceInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalFenceHandleTypeFlagBits handleType;
        }
        
        public partial struct VkExternalFenceProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes;
            
            public vulkan.VkExternalFenceHandleTypeFlags compatibleHandleTypes;
            
            public vulkan.VkExternalFenceFeatureFlags externalFenceFeatures;
        }
        
        public readonly partial struct VkExternalFenceHandleTypeFlags : IEquatable<VkExternalFenceHandleTypeFlags>
        {
            public VkExternalFenceHandleTypeFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalFenceHandleTypeFlags other && Equals(other);
            
            public bool Equals(VkExternalFenceHandleTypeFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkExternalFenceHandleTypeFlags from) => from.Value;
            
            public static implicit operator vulkan.VkExternalFenceHandleTypeFlags (vulkan.VkFlags from) => new vulkan.VkExternalFenceHandleTypeFlags(from);
            
            public static bool operator ==(VkExternalFenceHandleTypeFlags left, VkExternalFenceHandleTypeFlags right) => left.Equals(right);
            
            public static bool operator !=(VkExternalFenceHandleTypeFlags left, VkExternalFenceHandleTypeFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalFenceFeatureFlags : IEquatable<VkExternalFenceFeatureFlags>
        {
            public VkExternalFenceFeatureFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalFenceFeatureFlags other && Equals(other);
            
            public bool Equals(VkExternalFenceFeatureFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkExternalFenceFeatureFlags from) => from.Value;
            
            public static implicit operator vulkan.VkExternalFenceFeatureFlags (vulkan.VkFlags from) => new vulkan.VkExternalFenceFeatureFlags(from);
            
            public static bool operator ==(VkExternalFenceFeatureFlags left, VkExternalFenceFeatureFlags right) => left.Equals(right);
            
            public static bool operator !=(VkExternalFenceFeatureFlags left, VkExternalFenceFeatureFlags right) => !left.Equals(right);
        }
        
        public partial struct VkExportFenceCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalFenceHandleTypeFlags handleTypes;
        }
        
        public partial struct VkExportSemaphoreCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalSemaphoreHandleTypeFlags handleTypes;
        }
        
        public readonly partial struct VkExternalSemaphoreHandleTypeFlags : IEquatable<VkExternalSemaphoreHandleTypeFlags>
        {
            public VkExternalSemaphoreHandleTypeFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalSemaphoreHandleTypeFlags other && Equals(other);
            
            public bool Equals(VkExternalSemaphoreHandleTypeFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkExternalSemaphoreHandleTypeFlags from) => from.Value;
            
            public static implicit operator vulkan.VkExternalSemaphoreHandleTypeFlags (vulkan.VkFlags from) => new vulkan.VkExternalSemaphoreHandleTypeFlags(from);
            
            public static bool operator ==(VkExternalSemaphoreHandleTypeFlags left, VkExternalSemaphoreHandleTypeFlags right) => left.Equals(right);
            
            public static bool operator !=(VkExternalSemaphoreHandleTypeFlags left, VkExternalSemaphoreHandleTypeFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceExternalSemaphoreInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalSemaphoreHandleTypeFlagBits handleType;
        }
        
        public partial struct VkExternalSemaphoreProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes;
            
            public vulkan.VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes;
            
            public vulkan.VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures;
        }
        
        public readonly partial struct VkExternalSemaphoreFeatureFlags : IEquatable<VkExternalSemaphoreFeatureFlags>
        {
            public VkExternalSemaphoreFeatureFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalSemaphoreFeatureFlags other && Equals(other);
            
            public bool Equals(VkExternalSemaphoreFeatureFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkExternalSemaphoreFeatureFlags from) => from.Value;
            
            public static implicit operator vulkan.VkExternalSemaphoreFeatureFlags (vulkan.VkFlags from) => new vulkan.VkExternalSemaphoreFeatureFlags(from);
            
            public static bool operator ==(VkExternalSemaphoreFeatureFlags left, VkExternalSemaphoreFeatureFlags right) => left.Equals(right);
            
            public static bool operator !=(VkExternalSemaphoreFeatureFlags left, VkExternalSemaphoreFeatureFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceMaintenance3Properties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxPerSetDescriptors;
            
            public vulkan.VkDeviceSize maxMemoryAllocationSize;
        }
        
        public partial struct VkDescriptorSetLayoutSupport
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 supported;
        }
        
        public partial struct VkPhysicalDeviceShaderDrawParametersFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderDrawParameters;
        }
        
        public partial struct VkPhysicalDeviceVulkan11Features
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 storageBuffer16BitAccess;
            
            public vulkan.VkBool32 uniformAndStorageBuffer16BitAccess;
            
            public vulkan.VkBool32 storagePushConstant16;
            
            public vulkan.VkBool32 storageInputOutput16;
            
            public vulkan.VkBool32 multiview;
            
            public vulkan.VkBool32 multiviewGeometryShader;
            
            public vulkan.VkBool32 multiviewTessellationShader;
            
            public vulkan.VkBool32 variablePointersStorageBuffer;
            
            public vulkan.VkBool32 variablePointers;
            
            public vulkan.VkBool32 protectedMemory;
            
            public vulkan.VkBool32 samplerYcbcrConversion;
            
            public vulkan.VkBool32 shaderDrawParameters;
        }
        
        public unsafe partial struct VkPhysicalDeviceVulkan11Properties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public fixed byte deviceUUID[16];
            
            public fixed byte driverUUID[16];
            
            public fixed byte deviceLUID[8];
            
            public uint deviceNodeMask;
            
            public vulkan.VkBool32 deviceLUIDValid;
            
            public uint subgroupSize;
            
            public vulkan.VkShaderStageFlags subgroupSupportedStages;
            
            public vulkan.VkSubgroupFeatureFlags subgroupSupportedOperations;
            
            public vulkan.VkBool32 subgroupQuadOperationsInAllStages;
            
            public vulkan.VkPointClippingBehavior pointClippingBehavior;
            
            public uint maxMultiviewViewCount;
            
            public uint maxMultiviewInstanceIndex;
            
            public vulkan.VkBool32 protectedNoFault;
            
            public uint maxPerSetDescriptors;
            
            public vulkan.VkDeviceSize maxMemoryAllocationSize;
        }
        
        public partial struct VkPhysicalDeviceVulkan12Features
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 samplerMirrorClampToEdge;
            
            public vulkan.VkBool32 drawIndirectCount;
            
            public vulkan.VkBool32 storageBuffer8BitAccess;
            
            public vulkan.VkBool32 uniformAndStorageBuffer8BitAccess;
            
            public vulkan.VkBool32 storagePushConstant8;
            
            public vulkan.VkBool32 shaderBufferInt64Atomics;
            
            public vulkan.VkBool32 shaderSharedInt64Atomics;
            
            public vulkan.VkBool32 shaderFloat16;
            
            public vulkan.VkBool32 shaderInt8;
            
            public vulkan.VkBool32 descriptorIndexing;
            
            public vulkan.VkBool32 shaderInputAttachmentArrayDynamicIndexing;
            
            public vulkan.VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
            
            public vulkan.VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
            
            public vulkan.VkBool32 shaderUniformBufferArrayNonUniformIndexing;
            
            public vulkan.VkBool32 shaderSampledImageArrayNonUniformIndexing;
            
            public vulkan.VkBool32 shaderStorageBufferArrayNonUniformIndexing;
            
            public vulkan.VkBool32 shaderStorageImageArrayNonUniformIndexing;
            
            public vulkan.VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
            
            public vulkan.VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
            
            public vulkan.VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
            
            public vulkan.VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
            
            public vulkan.VkBool32 descriptorBindingSampledImageUpdateAfterBind;
            
            public vulkan.VkBool32 descriptorBindingStorageImageUpdateAfterBind;
            
            public vulkan.VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
            
            public vulkan.VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
            
            public vulkan.VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
            
            public vulkan.VkBool32 descriptorBindingUpdateUnusedWhilePending;
            
            public vulkan.VkBool32 descriptorBindingPartiallyBound;
            
            public vulkan.VkBool32 descriptorBindingVariableDescriptorCount;
            
            public vulkan.VkBool32 runtimeDescriptorArray;
            
            public vulkan.VkBool32 samplerFilterMinmax;
            
            public vulkan.VkBool32 scalarBlockLayout;
            
            public vulkan.VkBool32 imagelessFramebuffer;
            
            public vulkan.VkBool32 uniformBufferStandardLayout;
            
            public vulkan.VkBool32 shaderSubgroupExtendedTypes;
            
            public vulkan.VkBool32 separateDepthStencilLayouts;
            
            public vulkan.VkBool32 hostQueryReset;
            
            public vulkan.VkBool32 timelineSemaphore;
            
            public vulkan.VkBool32 bufferDeviceAddress;
            
            public vulkan.VkBool32 bufferDeviceAddressCaptureReplay;
            
            public vulkan.VkBool32 bufferDeviceAddressMultiDevice;
            
            public vulkan.VkBool32 vulkanMemoryModel;
            
            public vulkan.VkBool32 vulkanMemoryModelDeviceScope;
            
            public vulkan.VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
            
            public vulkan.VkBool32 shaderOutputViewportIndex;
            
            public vulkan.VkBool32 shaderOutputLayer;
            
            public vulkan.VkBool32 subgroupBroadcastDynamicId;
        }
        
        public partial struct VkConformanceVersion
        {
            public byte major;
            
            public byte minor;
            
            public byte subminor;
            
            public byte patch;
        }
        
        public unsafe partial struct VkPhysicalDeviceVulkan12Properties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDriverId driverID;
            
            public fixed byte driverName[256];
            
            public fixed byte driverInfo[256];
            
            public vulkan.VkConformanceVersion conformanceVersion;
            
            public vulkan.VkShaderFloatControlsIndependence denormBehaviorIndependence;
            
            public vulkan.VkShaderFloatControlsIndependence roundingModeIndependence;
            
            public vulkan.VkBool32 shaderSignedZeroInfNanPreserveFloat16;
            
            public vulkan.VkBool32 shaderSignedZeroInfNanPreserveFloat32;
            
            public vulkan.VkBool32 shaderSignedZeroInfNanPreserveFloat64;
            
            public vulkan.VkBool32 shaderDenormPreserveFloat16;
            
            public vulkan.VkBool32 shaderDenormPreserveFloat32;
            
            public vulkan.VkBool32 shaderDenormPreserveFloat64;
            
            public vulkan.VkBool32 shaderDenormFlushToZeroFloat16;
            
            public vulkan.VkBool32 shaderDenormFlushToZeroFloat32;
            
            public vulkan.VkBool32 shaderDenormFlushToZeroFloat64;
            
            public vulkan.VkBool32 shaderRoundingModeRTEFloat16;
            
            public vulkan.VkBool32 shaderRoundingModeRTEFloat32;
            
            public vulkan.VkBool32 shaderRoundingModeRTEFloat64;
            
            public vulkan.VkBool32 shaderRoundingModeRTZFloat16;
            
            public vulkan.VkBool32 shaderRoundingModeRTZFloat32;
            
            public vulkan.VkBool32 shaderRoundingModeRTZFloat64;
            
            public uint maxUpdateAfterBindDescriptorsInAllPools;
            
            public vulkan.VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
            
            public vulkan.VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
            
            public vulkan.VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
            
            public vulkan.VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
            
            public vulkan.VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
            
            public vulkan.VkBool32 robustBufferAccessUpdateAfterBind;
            
            public vulkan.VkBool32 quadDivergentImplicitLod;
            
            public uint maxPerStageDescriptorUpdateAfterBindSamplers;
            
            public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
            
            public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
            
            public uint maxPerStageDescriptorUpdateAfterBindSampledImages;
            
            public uint maxPerStageDescriptorUpdateAfterBindStorageImages;
            
            public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
            
            public uint maxPerStageUpdateAfterBindResources;
            
            public uint maxDescriptorSetUpdateAfterBindSamplers;
            
            public uint maxDescriptorSetUpdateAfterBindUniformBuffers;
            
            public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
            
            public uint maxDescriptorSetUpdateAfterBindStorageBuffers;
            
            public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
            
            public uint maxDescriptorSetUpdateAfterBindSampledImages;
            
            public uint maxDescriptorSetUpdateAfterBindStorageImages;
            
            public uint maxDescriptorSetUpdateAfterBindInputAttachments;
            
            public vulkan.VkResolveModeFlags supportedDepthResolveModes;
            
            public vulkan.VkResolveModeFlags supportedStencilResolveModes;
            
            public vulkan.VkBool32 independentResolveNone;
            
            public vulkan.VkBool32 independentResolve;
            
            public vulkan.VkBool32 filterMinmaxSingleComponentFormats;
            
            public vulkan.VkBool32 filterMinmaxImageComponentMapping;
            
            public ulong maxTimelineSemaphoreValueDifference;
            
            public vulkan.VkSampleCountFlags framebufferIntegerColorSampleCounts;
        }
        
        public readonly partial struct VkResolveModeFlags : IEquatable<VkResolveModeFlags>
        {
            public VkResolveModeFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkResolveModeFlags other && Equals(other);
            
            public bool Equals(VkResolveModeFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkResolveModeFlags from) => from.Value;
            
            public static implicit operator vulkan.VkResolveModeFlags (vulkan.VkFlags from) => new vulkan.VkResolveModeFlags(from);
            
            public static bool operator ==(VkResolveModeFlags left, VkResolveModeFlags right) => left.Equals(right);
            
            public static bool operator !=(VkResolveModeFlags left, VkResolveModeFlags right) => !left.Equals(right);
        }
        
        public partial struct VkImageFormatListCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint viewFormatCount;
            
            public vulkan.VkFormat* pViewFormats;
        }
        
        public partial struct VkAttachmentDescription2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAttachmentDescriptionFlags flags;
            
            public vulkan.VkFormat format;
            
            public vulkan.VkSampleCountFlagBits samples;
            
            public vulkan.VkAttachmentLoadOp loadOp;
            
            public vulkan.VkAttachmentStoreOp storeOp;
            
            public vulkan.VkAttachmentLoadOp stencilLoadOp;
            
            public vulkan.VkAttachmentStoreOp stencilStoreOp;
            
            public vulkan.VkImageLayout initialLayout;
            
            public vulkan.VkImageLayout finalLayout;
        }
        
        public partial struct VkAttachmentReference2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint attachment;
            
            public vulkan.VkImageLayout layout;
            
            public vulkan.VkImageAspectFlags aspectMask;
        }
        
        public partial struct VkSubpassDescription2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSubpassDescriptionFlags flags;
            
            public vulkan.VkPipelineBindPoint pipelineBindPoint;
            
            public uint viewMask;
            
            public uint inputAttachmentCount;
            
            public vulkan.VkAttachmentReference2* pInputAttachments;
            
            public uint colorAttachmentCount;
            
            public vulkan.VkAttachmentReference2* pColorAttachments;
            
            public vulkan.VkAttachmentReference2* pResolveAttachments;
            
            public vulkan.VkAttachmentReference2* pDepthStencilAttachment;
            
            public uint preserveAttachmentCount;
            
            public uint* pPreserveAttachments;
        }
        
        public partial struct VkSubpassDependency2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint srcSubpass;
            
            public uint dstSubpass;
            
            public vulkan.VkPipelineStageFlags srcStageMask;
            
            public vulkan.VkPipelineStageFlags dstStageMask;
            
            public vulkan.VkAccessFlags srcAccessMask;
            
            public vulkan.VkAccessFlags dstAccessMask;
            
            public vulkan.VkDependencyFlags dependencyFlags;
            
            public int viewOffset;
        }
        
        public partial struct VkRenderPassCreateInfo2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkRenderPassCreateFlags flags;
            
            public uint attachmentCount;
            
            public vulkan.VkAttachmentDescription2* pAttachments;
            
            public uint subpassCount;
            
            public vulkan.VkSubpassDescription2* pSubpasses;
            
            public uint dependencyCount;
            
            public vulkan.VkSubpassDependency2* pDependencies;
            
            public uint correlatedViewMaskCount;
            
            public uint* pCorrelatedViewMasks;
        }
        
        public partial struct VkSubpassBeginInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSubpassContents contents;
        }
        
        public partial struct VkSubpassEndInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
        }
        
        public partial struct VkPhysicalDevice8BitStorageFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 storageBuffer8BitAccess;
            
            public vulkan.VkBool32 uniformAndStorageBuffer8BitAccess;
            
            public vulkan.VkBool32 storagePushConstant8;
        }
        
        public unsafe partial struct VkPhysicalDeviceDriverProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDriverId driverID;
            
            public fixed byte driverName[256];
            
            public fixed byte driverInfo[256];
            
            public vulkan.VkConformanceVersion conformanceVersion;
        }
        
        public partial struct VkPhysicalDeviceShaderAtomicInt64Features
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderBufferInt64Atomics;
            
            public vulkan.VkBool32 shaderSharedInt64Atomics;
        }
        
        public partial struct VkPhysicalDeviceShaderFloat16Int8Features
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderFloat16;
            
            public vulkan.VkBool32 shaderInt8;
        }
        
        public partial struct VkPhysicalDeviceFloatControlsProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkShaderFloatControlsIndependence denormBehaviorIndependence;
            
            public vulkan.VkShaderFloatControlsIndependence roundingModeIndependence;
            
            public vulkan.VkBool32 shaderSignedZeroInfNanPreserveFloat16;
            
            public vulkan.VkBool32 shaderSignedZeroInfNanPreserveFloat32;
            
            public vulkan.VkBool32 shaderSignedZeroInfNanPreserveFloat64;
            
            public vulkan.VkBool32 shaderDenormPreserveFloat16;
            
            public vulkan.VkBool32 shaderDenormPreserveFloat32;
            
            public vulkan.VkBool32 shaderDenormPreserveFloat64;
            
            public vulkan.VkBool32 shaderDenormFlushToZeroFloat16;
            
            public vulkan.VkBool32 shaderDenormFlushToZeroFloat32;
            
            public vulkan.VkBool32 shaderDenormFlushToZeroFloat64;
            
            public vulkan.VkBool32 shaderRoundingModeRTEFloat16;
            
            public vulkan.VkBool32 shaderRoundingModeRTEFloat32;
            
            public vulkan.VkBool32 shaderRoundingModeRTEFloat64;
            
            public vulkan.VkBool32 shaderRoundingModeRTZFloat16;
            
            public vulkan.VkBool32 shaderRoundingModeRTZFloat32;
            
            public vulkan.VkBool32 shaderRoundingModeRTZFloat64;
        }
        
        public partial struct VkDescriptorSetLayoutBindingFlagsCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint bindingCount;
            
            public vulkan.VkDescriptorBindingFlags* pBindingFlags;
        }
        
        public readonly partial struct VkDescriptorBindingFlags : IEquatable<VkDescriptorBindingFlags>
        {
            public VkDescriptorBindingFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorBindingFlags other && Equals(other);
            
            public bool Equals(VkDescriptorBindingFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDescriptorBindingFlags from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorBindingFlags (vulkan.VkFlags from) => new vulkan.VkDescriptorBindingFlags(from);
            
            public static bool operator ==(VkDescriptorBindingFlags left, VkDescriptorBindingFlags right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorBindingFlags left, VkDescriptorBindingFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceDescriptorIndexingFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderInputAttachmentArrayDynamicIndexing;
            
            public vulkan.VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
            
            public vulkan.VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
            
            public vulkan.VkBool32 shaderUniformBufferArrayNonUniformIndexing;
            
            public vulkan.VkBool32 shaderSampledImageArrayNonUniformIndexing;
            
            public vulkan.VkBool32 shaderStorageBufferArrayNonUniformIndexing;
            
            public vulkan.VkBool32 shaderStorageImageArrayNonUniformIndexing;
            
            public vulkan.VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
            
            public vulkan.VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
            
            public vulkan.VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
            
            public vulkan.VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
            
            public vulkan.VkBool32 descriptorBindingSampledImageUpdateAfterBind;
            
            public vulkan.VkBool32 descriptorBindingStorageImageUpdateAfterBind;
            
            public vulkan.VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
            
            public vulkan.VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
            
            public vulkan.VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
            
            public vulkan.VkBool32 descriptorBindingUpdateUnusedWhilePending;
            
            public vulkan.VkBool32 descriptorBindingPartiallyBound;
            
            public vulkan.VkBool32 descriptorBindingVariableDescriptorCount;
            
            public vulkan.VkBool32 runtimeDescriptorArray;
        }
        
        public partial struct VkPhysicalDeviceDescriptorIndexingProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxUpdateAfterBindDescriptorsInAllPools;
            
            public vulkan.VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
            
            public vulkan.VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
            
            public vulkan.VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
            
            public vulkan.VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
            
            public vulkan.VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
            
            public vulkan.VkBool32 robustBufferAccessUpdateAfterBind;
            
            public vulkan.VkBool32 quadDivergentImplicitLod;
            
            public uint maxPerStageDescriptorUpdateAfterBindSamplers;
            
            public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
            
            public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
            
            public uint maxPerStageDescriptorUpdateAfterBindSampledImages;
            
            public uint maxPerStageDescriptorUpdateAfterBindStorageImages;
            
            public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
            
            public uint maxPerStageUpdateAfterBindResources;
            
            public uint maxDescriptorSetUpdateAfterBindSamplers;
            
            public uint maxDescriptorSetUpdateAfterBindUniformBuffers;
            
            public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
            
            public uint maxDescriptorSetUpdateAfterBindStorageBuffers;
            
            public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
            
            public uint maxDescriptorSetUpdateAfterBindSampledImages;
            
            public uint maxDescriptorSetUpdateAfterBindStorageImages;
            
            public uint maxDescriptorSetUpdateAfterBindInputAttachments;
        }
        
        public partial struct VkDescriptorSetVariableDescriptorCountAllocateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint descriptorSetCount;
            
            public uint* pDescriptorCounts;
        }
        
        public partial struct VkDescriptorSetVariableDescriptorCountLayoutSupport
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxVariableDescriptorCount;
        }
        
        public partial struct VkSubpassDescriptionDepthStencilResolve
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkResolveModeFlagBits depthResolveMode;
            
            public vulkan.VkResolveModeFlagBits stencilResolveMode;
            
            public vulkan.VkAttachmentReference2* pDepthStencilResolveAttachment;
        }
        
        public partial struct VkPhysicalDeviceDepthStencilResolveProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkResolveModeFlags supportedDepthResolveModes;
            
            public vulkan.VkResolveModeFlags supportedStencilResolveModes;
            
            public vulkan.VkBool32 independentResolveNone;
            
            public vulkan.VkBool32 independentResolve;
        }
        
        public partial struct VkPhysicalDeviceScalarBlockLayoutFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 scalarBlockLayout;
        }
        
        public partial struct VkImageStencilUsageCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageUsageFlags stencilUsage;
        }
        
        public partial struct VkSamplerReductionModeCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSamplerReductionMode reductionMode;
        }
        
        public partial struct VkPhysicalDeviceSamplerFilterMinmaxProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 filterMinmaxSingleComponentFormats;
            
            public vulkan.VkBool32 filterMinmaxImageComponentMapping;
        }
        
        public partial struct VkPhysicalDeviceVulkanMemoryModelFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 vulkanMemoryModel;
            
            public vulkan.VkBool32 vulkanMemoryModelDeviceScope;
            
            public vulkan.VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
        }
        
        public partial struct VkPhysicalDeviceImagelessFramebufferFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 imagelessFramebuffer;
        }
        
        public partial struct VkFramebufferAttachmentImageInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageCreateFlags flags;
            
            public vulkan.VkImageUsageFlags usage;
            
            public uint width;
            
            public uint height;
            
            public uint layerCount;
            
            public uint viewFormatCount;
            
            public vulkan.VkFormat* pViewFormats;
        }
        
        public partial struct VkFramebufferAttachmentsCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint attachmentImageInfoCount;
            
            public vulkan.VkFramebufferAttachmentImageInfo* pAttachmentImageInfos;
        }
        
        public partial struct VkRenderPassAttachmentBeginInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint attachmentCount;
            
            public vulkan.VkImageView* pAttachments;
        }
        
        public partial struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 uniformBufferStandardLayout;
        }
        
        public partial struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderSubgroupExtendedTypes;
        }
        
        public partial struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 separateDepthStencilLayouts;
        }
        
        public partial struct VkAttachmentReferenceStencilLayout
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageLayout stencilLayout;
        }
        
        public partial struct VkAttachmentDescriptionStencilLayout
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageLayout stencilInitialLayout;
            
            public vulkan.VkImageLayout stencilFinalLayout;
        }
        
        public partial struct VkPhysicalDeviceHostQueryResetFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 hostQueryReset;
        }
        
        public partial struct VkPhysicalDeviceTimelineSemaphoreFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 timelineSemaphore;
        }
        
        public partial struct VkPhysicalDeviceTimelineSemaphoreProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public ulong maxTimelineSemaphoreValueDifference;
        }
        
        public partial struct VkSemaphoreTypeCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSemaphoreType semaphoreType;
            
            public ulong initialValue;
        }
        
        public partial struct VkTimelineSemaphoreSubmitInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint waitSemaphoreValueCount;
            
            public ulong* pWaitSemaphoreValues;
            
            public uint signalSemaphoreValueCount;
            
            public ulong* pSignalSemaphoreValues;
        }
        
        public partial struct VkSemaphoreWaitInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSemaphoreWaitFlags flags;
            
            public uint semaphoreCount;
            
            public vulkan.VkSemaphore* pSemaphores;
            
            public ulong* pValues;
        }
        
        public readonly partial struct VkSemaphoreWaitFlags : IEquatable<VkSemaphoreWaitFlags>
        {
            public VkSemaphoreWaitFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkSemaphoreWaitFlags other && Equals(other);
            
            public bool Equals(VkSemaphoreWaitFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkSemaphoreWaitFlags from) => from.Value;
            
            public static implicit operator vulkan.VkSemaphoreWaitFlags (vulkan.VkFlags from) => new vulkan.VkSemaphoreWaitFlags(from);
            
            public static bool operator ==(VkSemaphoreWaitFlags left, VkSemaphoreWaitFlags right) => left.Equals(right);
            
            public static bool operator !=(VkSemaphoreWaitFlags left, VkSemaphoreWaitFlags right) => !left.Equals(right);
        }
        
        public partial struct VkSemaphoreSignalInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSemaphore semaphore;
            
            public ulong value;
        }
        
        public partial struct VkPhysicalDeviceBufferDeviceAddressFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 bufferDeviceAddress;
            
            public vulkan.VkBool32 bufferDeviceAddressCaptureReplay;
            
            public vulkan.VkBool32 bufferDeviceAddressMultiDevice;
        }
        
        public partial struct VkBufferDeviceAddressInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBuffer buffer;
        }
        
        public partial struct VkBufferOpaqueCaptureAddressCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public ulong opaqueCaptureAddress;
        }
        
        public partial struct VkMemoryOpaqueCaptureAddressAllocateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public ulong opaqueCaptureAddress;
        }
        
        public partial struct VkDeviceMemoryOpaqueCaptureAddressInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceMemory memory;
        }
        
        public partial struct VkPhysicalDeviceVulkan13Features
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 robustImageAccess;
            
            public vulkan.VkBool32 inlineUniformBlock;
            
            public vulkan.VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind;
            
            public vulkan.VkBool32 pipelineCreationCacheControl;
            
            public vulkan.VkBool32 privateData;
            
            public vulkan.VkBool32 shaderDemoteToHelperInvocation;
            
            public vulkan.VkBool32 shaderTerminateInvocation;
            
            public vulkan.VkBool32 subgroupSizeControl;
            
            public vulkan.VkBool32 computeFullSubgroups;
            
            public vulkan.VkBool32 synchronization2;
            
            public vulkan.VkBool32 textureCompressionASTC_HDR;
            
            public vulkan.VkBool32 shaderZeroInitializeWorkgroupMemory;
            
            public vulkan.VkBool32 dynamicRendering;
            
            public vulkan.VkBool32 shaderIntegerDotProduct;
            
            public vulkan.VkBool32 maintenance4;
        }
        
        public partial struct VkPhysicalDeviceVulkan13Properties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint minSubgroupSize;
            
            public uint maxSubgroupSize;
            
            public uint maxComputeWorkgroupSubgroups;
            
            public vulkan.VkShaderStageFlags requiredSubgroupSizeStages;
            
            public uint maxInlineUniformBlockSize;
            
            public uint maxPerStageDescriptorInlineUniformBlocks;
            
            public uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
            
            public uint maxDescriptorSetInlineUniformBlocks;
            
            public uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
            
            public uint maxInlineUniformTotalSize;
            
            public vulkan.VkBool32 integerDotProduct8BitUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct8BitSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct8BitMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProduct4x8BitPackedUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct4x8BitPackedSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct4x8BitPackedMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProduct16BitUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct16BitSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct16BitMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProduct32BitUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct32BitSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct32BitMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProduct64BitUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct64BitSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct64BitMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating8BitSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating16BitSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating32BitSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating64BitSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
            
            public vulkan.VkDeviceSize storageTexelBufferOffsetAlignmentBytes;
            
            public vulkan.VkBool32 storageTexelBufferOffsetSingleTexelAlignment;
            
            public vulkan.VkDeviceSize uniformTexelBufferOffsetAlignmentBytes;
            
            public vulkan.VkBool32 uniformTexelBufferOffsetSingleTexelAlignment;
            
            public vulkan.VkDeviceSize maxBufferSize;
        }
        
        public partial struct VkPipelineCreationFeedback
        {
            public vulkan.VkPipelineCreationFeedbackFlags flags;
            
            public ulong duration;
        }
        
        public readonly partial struct VkPipelineCreationFeedbackFlags : IEquatable<VkPipelineCreationFeedbackFlags>
        {
            public VkPipelineCreationFeedbackFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineCreationFeedbackFlags other && Equals(other);
            
            public bool Equals(VkPipelineCreationFeedbackFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineCreationFeedbackFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineCreationFeedbackFlags (vulkan.VkFlags from) => new vulkan.VkPipelineCreationFeedbackFlags(from);
            
            public static bool operator ==(VkPipelineCreationFeedbackFlags left, VkPipelineCreationFeedbackFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineCreationFeedbackFlags left, VkPipelineCreationFeedbackFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPipelineCreationFeedbackCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineCreationFeedback* pPipelineCreationFeedback;
            
            public uint pipelineStageCreationFeedbackCount;
            
            public vulkan.VkPipelineCreationFeedback* pPipelineStageCreationFeedbacks;
        }
        
        public partial struct VkPhysicalDeviceShaderTerminateInvocationFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderTerminateInvocation;
        }
        
        public unsafe partial struct VkPhysicalDeviceToolProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public fixed byte name[256];
            
            public fixed byte version[256];
            
            public vulkan.VkToolPurposeFlags purposes;
            
            public fixed byte description[256];
            
            public fixed byte layer[256];
        }
        
        public readonly partial struct VkToolPurposeFlags : IEquatable<VkToolPurposeFlags>
        {
            public VkToolPurposeFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkToolPurposeFlags other && Equals(other);
            
            public bool Equals(VkToolPurposeFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkToolPurposeFlags from) => from.Value;
            
            public static implicit operator vulkan.VkToolPurposeFlags (vulkan.VkFlags from) => new vulkan.VkToolPurposeFlags(from);
            
            public static bool operator ==(VkToolPurposeFlags left, VkToolPurposeFlags right) => left.Equals(right);
            
            public static bool operator !=(VkToolPurposeFlags left, VkToolPurposeFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderDemoteToHelperInvocation;
        }
        
        public partial struct VkPhysicalDevicePrivateDataFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 privateData;
        }
        
        public partial struct VkDevicePrivateDataCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint privateDataSlotRequestCount;
        }
        
        public partial struct VkPrivateDataSlotCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPrivateDataSlotCreateFlags flags;
        }
        
        public readonly partial struct VkPrivateDataSlotCreateFlags : IEquatable<VkPrivateDataSlotCreateFlags>
        {
            public VkPrivateDataSlotCreateFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPrivateDataSlotCreateFlags other && Equals(other);
            
            public bool Equals(VkPrivateDataSlotCreateFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPrivateDataSlotCreateFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPrivateDataSlotCreateFlags (vulkan.VkFlags from) => new vulkan.VkPrivateDataSlotCreateFlags(from);
            
            public static bool operator ==(VkPrivateDataSlotCreateFlags left, VkPrivateDataSlotCreateFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPrivateDataSlotCreateFlags left, VkPrivateDataSlotCreateFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDevicePipelineCreationCacheControlFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 pipelineCreationCacheControl;
        }
        
        public partial struct VkMemoryBarrier2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineStageFlags2 srcStageMask;
            
            public vulkan.VkAccessFlags2 srcAccessMask;
            
            public vulkan.VkPipelineStageFlags2 dstStageMask;
            
            public vulkan.VkAccessFlags2 dstAccessMask;
        }
        
        public readonly partial struct VkFlags64 : IEquatable<VkFlags64>
        {
            public VkFlags64(ulong value) => this.Value = value;
            
            public ulong Value { get; }
            
            public override bool Equals(object obj) => obj is VkFlags64 other && Equals(other);
            
            public bool Equals(VkFlags64 other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ulong (vulkan.VkFlags64 from) => from.Value;
            
            public static implicit operator vulkan.VkFlags64 (ulong from) => new vulkan.VkFlags64(from);
            
            public static bool operator ==(VkFlags64 left, VkFlags64 right) => left.Equals(right);
            
            public static bool operator !=(VkFlags64 left, VkFlags64 right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineStageFlags2 : IEquatable<VkPipelineStageFlags2>
        {
            public VkPipelineStageFlags2(vulkan.VkFlags64 value) => this.Value = value;
            
            public vulkan.VkFlags64 Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineStageFlags2 other && Equals(other);
            
            public bool Equals(VkPipelineStageFlags2 other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags64 (vulkan.VkPipelineStageFlags2 from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineStageFlags2 (vulkan.VkFlags64 from) => new vulkan.VkPipelineStageFlags2(from);
            
            public static bool operator ==(VkPipelineStageFlags2 left, VkPipelineStageFlags2 right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineStageFlags2 left, VkPipelineStageFlags2 right) => !left.Equals(right);
        }
        
        public readonly partial struct VkAccessFlags2 : IEquatable<VkAccessFlags2>
        {
            public VkAccessFlags2(vulkan.VkFlags64 value) => this.Value = value;
            
            public vulkan.VkFlags64 Value { get; }
            
            public override bool Equals(object obj) => obj is VkAccessFlags2 other && Equals(other);
            
            public bool Equals(VkAccessFlags2 other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags64 (vulkan.VkAccessFlags2 from) => from.Value;
            
            public static implicit operator vulkan.VkAccessFlags2 (vulkan.VkFlags64 from) => new vulkan.VkAccessFlags2(from);
            
            public static bool operator ==(VkAccessFlags2 left, VkAccessFlags2 right) => left.Equals(right);
            
            public static bool operator !=(VkAccessFlags2 left, VkAccessFlags2 right) => !left.Equals(right);
        }
        
        public partial struct VkBufferMemoryBarrier2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineStageFlags2 srcStageMask;
            
            public vulkan.VkAccessFlags2 srcAccessMask;
            
            public vulkan.VkPipelineStageFlags2 dstStageMask;
            
            public vulkan.VkAccessFlags2 dstAccessMask;
            
            public uint srcQueueFamilyIndex;
            
            public uint dstQueueFamilyIndex;
            
            public vulkan.VkBuffer buffer;
            
            public vulkan.VkDeviceSize offset;
            
            public vulkan.VkDeviceSize size;
        }
        
        public partial struct VkImageMemoryBarrier2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineStageFlags2 srcStageMask;
            
            public vulkan.VkAccessFlags2 srcAccessMask;
            
            public vulkan.VkPipelineStageFlags2 dstStageMask;
            
            public vulkan.VkAccessFlags2 dstAccessMask;
            
            public vulkan.VkImageLayout oldLayout;
            
            public vulkan.VkImageLayout newLayout;
            
            public uint srcQueueFamilyIndex;
            
            public uint dstQueueFamilyIndex;
            
            public vulkan.VkImage image;
            
            public vulkan.VkImageSubresourceRange subresourceRange;
        }
        
        public partial struct VkDependencyInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDependencyFlags dependencyFlags;
            
            public uint memoryBarrierCount;
            
            public vulkan.VkMemoryBarrier2* pMemoryBarriers;
            
            public uint bufferMemoryBarrierCount;
            
            public vulkan.VkBufferMemoryBarrier2* pBufferMemoryBarriers;
            
            public uint imageMemoryBarrierCount;
            
            public vulkan.VkImageMemoryBarrier2* pImageMemoryBarriers;
        }
        
        public partial struct VkSemaphoreSubmitInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSemaphore semaphore;
            
            public ulong value;
            
            public vulkan.VkPipelineStageFlags2 stageMask;
            
            public uint deviceIndex;
        }
        
        public partial struct VkCommandBufferSubmitInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkCommandBuffer commandBuffer;
            
            public uint deviceMask;
        }
        
        public partial struct VkSubmitInfo2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSubmitFlags flags;
            
            public uint waitSemaphoreInfoCount;
            
            public vulkan.VkSemaphoreSubmitInfo* pWaitSemaphoreInfos;
            
            public uint commandBufferInfoCount;
            
            public vulkan.VkCommandBufferSubmitInfo* pCommandBufferInfos;
            
            public uint signalSemaphoreInfoCount;
            
            public vulkan.VkSemaphoreSubmitInfo* pSignalSemaphoreInfos;
        }
        
        public readonly partial struct VkSubmitFlags : IEquatable<VkSubmitFlags>
        {
            public VkSubmitFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkSubmitFlags other && Equals(other);
            
            public bool Equals(VkSubmitFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkSubmitFlags from) => from.Value;
            
            public static implicit operator vulkan.VkSubmitFlags (vulkan.VkFlags from) => new vulkan.VkSubmitFlags(from);
            
            public static bool operator ==(VkSubmitFlags left, VkSubmitFlags right) => left.Equals(right);
            
            public static bool operator !=(VkSubmitFlags left, VkSubmitFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceSynchronization2Features
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 synchronization2;
        }
        
        public partial struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderZeroInitializeWorkgroupMemory;
        }
        
        public partial struct VkPhysicalDeviceImageRobustnessFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 robustImageAccess;
        }
        
        public partial struct VkBufferCopy2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceSize srcOffset;
            
            public vulkan.VkDeviceSize dstOffset;
            
            public vulkan.VkDeviceSize size;
        }
        
        public partial struct VkCopyBufferInfo2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBuffer srcBuffer;
            
            public vulkan.VkBuffer dstBuffer;
            
            public uint regionCount;
            
            public vulkan.VkBufferCopy2* pRegions;
        }
        
        public partial struct VkImageCopy2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageSubresourceLayers srcSubresource;
            
            public vulkan.VkOffset3D srcOffset;
            
            public vulkan.VkImageSubresourceLayers dstSubresource;
            
            public vulkan.VkOffset3D dstOffset;
            
            public vulkan.VkExtent3D extent;
        }
        
        public partial struct VkCopyImageInfo2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImage srcImage;
            
            public vulkan.VkImageLayout srcImageLayout;
            
            public vulkan.VkImage dstImage;
            
            public vulkan.VkImageLayout dstImageLayout;
            
            public uint regionCount;
            
            public vulkan.VkImageCopy2* pRegions;
        }
        
        public partial struct VkBufferImageCopy2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceSize bufferOffset;
            
            public uint bufferRowLength;
            
            public uint bufferImageHeight;
            
            public vulkan.VkImageSubresourceLayers imageSubresource;
            
            public vulkan.VkOffset3D imageOffset;
            
            public vulkan.VkExtent3D imageExtent;
        }
        
        public partial struct VkCopyBufferToImageInfo2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBuffer srcBuffer;
            
            public vulkan.VkImage dstImage;
            
            public vulkan.VkImageLayout dstImageLayout;
            
            public uint regionCount;
            
            public vulkan.VkBufferImageCopy2* pRegions;
        }
        
        public partial struct VkCopyImageToBufferInfo2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImage srcImage;
            
            public vulkan.VkImageLayout srcImageLayout;
            
            public vulkan.VkBuffer dstBuffer;
            
            public uint regionCount;
            
            public vulkan.VkBufferImageCopy2* pRegions;
        }
        
        public partial struct VkImageBlit2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageSubresourceLayers srcSubresource;
            
            public FixedArray2<vulkan.VkOffset3D> srcOffsets;
            
            public vulkan.VkImageSubresourceLayers dstSubresource;
            
            public FixedArray2<vulkan.VkOffset3D> dstOffsets;
        }
        
        public partial struct VkBlitImageInfo2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImage srcImage;
            
            public vulkan.VkImageLayout srcImageLayout;
            
            public vulkan.VkImage dstImage;
            
            public vulkan.VkImageLayout dstImageLayout;
            
            public uint regionCount;
            
            public vulkan.VkImageBlit2* pRegions;
            
            public vulkan.VkFilter filter;
        }
        
        public partial struct VkImageResolve2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageSubresourceLayers srcSubresource;
            
            public vulkan.VkOffset3D srcOffset;
            
            public vulkan.VkImageSubresourceLayers dstSubresource;
            
            public vulkan.VkOffset3D dstOffset;
            
            public vulkan.VkExtent3D extent;
        }
        
        public partial struct VkResolveImageInfo2
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImage srcImage;
            
            public vulkan.VkImageLayout srcImageLayout;
            
            public vulkan.VkImage dstImage;
            
            public vulkan.VkImageLayout dstImageLayout;
            
            public uint regionCount;
            
            public vulkan.VkImageResolve2* pRegions;
        }
        
        public partial struct VkPhysicalDeviceSubgroupSizeControlFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 subgroupSizeControl;
            
            public vulkan.VkBool32 computeFullSubgroups;
        }
        
        public partial struct VkPhysicalDeviceSubgroupSizeControlProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint minSubgroupSize;
            
            public uint maxSubgroupSize;
            
            public uint maxComputeWorkgroupSubgroups;
            
            public vulkan.VkShaderStageFlags requiredSubgroupSizeStages;
        }
        
        public partial struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint requiredSubgroupSize;
        }
        
        public partial struct VkPhysicalDeviceInlineUniformBlockFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 inlineUniformBlock;
            
            public vulkan.VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind;
        }
        
        public partial struct VkPhysicalDeviceInlineUniformBlockProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxInlineUniformBlockSize;
            
            public uint maxPerStageDescriptorInlineUniformBlocks;
            
            public uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
            
            public uint maxDescriptorSetInlineUniformBlocks;
            
            public uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
        }
        
        public partial struct VkWriteDescriptorSetInlineUniformBlock
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint dataSize;
            
            public void* pData;
        }
        
        public partial struct VkDescriptorPoolInlineUniformBlockCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxInlineUniformBlockBindings;
        }
        
        public partial struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 textureCompressionASTC_HDR;
        }
        
        public partial struct VkRenderingAttachmentInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageView imageView;
            
            public vulkan.VkImageLayout imageLayout;
            
            public vulkan.VkResolveModeFlagBits resolveMode;
            
            public vulkan.VkImageView resolveImageView;
            
            public vulkan.VkImageLayout resolveImageLayout;
            
            public vulkan.VkAttachmentLoadOp loadOp;
            
            public vulkan.VkAttachmentStoreOp storeOp;
            
            public vulkan.VkClearValue clearValue;
        }
        
        public partial struct VkRenderingInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkRenderingFlags flags;
            
            public vulkan.VkRect2D renderArea;
            
            public uint layerCount;
            
            public uint viewMask;
            
            public uint colorAttachmentCount;
            
            public vulkan.VkRenderingAttachmentInfo* pColorAttachments;
            
            public vulkan.VkRenderingAttachmentInfo* pDepthAttachment;
            
            public vulkan.VkRenderingAttachmentInfo* pStencilAttachment;
        }
        
        public readonly partial struct VkRenderingFlags : IEquatable<VkRenderingFlags>
        {
            public VkRenderingFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkRenderingFlags other && Equals(other);
            
            public bool Equals(VkRenderingFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkRenderingFlags from) => from.Value;
            
            public static implicit operator vulkan.VkRenderingFlags (vulkan.VkFlags from) => new vulkan.VkRenderingFlags(from);
            
            public static bool operator ==(VkRenderingFlags left, VkRenderingFlags right) => left.Equals(right);
            
            public static bool operator !=(VkRenderingFlags left, VkRenderingFlags right) => !left.Equals(right);
        }
        
        public partial struct VkPipelineRenderingCreateInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint viewMask;
            
            public uint colorAttachmentCount;
            
            public vulkan.VkFormat* pColorAttachmentFormats;
            
            public vulkan.VkFormat depthAttachmentFormat;
            
            public vulkan.VkFormat stencilAttachmentFormat;
        }
        
        public partial struct VkPhysicalDeviceDynamicRenderingFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 dynamicRendering;
        }
        
        public partial struct VkCommandBufferInheritanceRenderingInfo
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkRenderingFlags flags;
            
            public uint viewMask;
            
            public uint colorAttachmentCount;
            
            public vulkan.VkFormat* pColorAttachmentFormats;
            
            public vulkan.VkFormat depthAttachmentFormat;
            
            public vulkan.VkFormat stencilAttachmentFormat;
            
            public vulkan.VkSampleCountFlagBits rasterizationSamples;
        }
        
        public partial struct VkPhysicalDeviceShaderIntegerDotProductFeatures
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderIntegerDotProduct;
        }
        
        public partial struct VkPhysicalDeviceShaderIntegerDotProductProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 integerDotProduct8BitUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct8BitSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct8BitMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProduct4x8BitPackedUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct4x8BitPackedSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct4x8BitPackedMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProduct16BitUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct16BitSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct16BitMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProduct32BitUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct32BitSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct32BitMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProduct64BitUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct64BitSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProduct64BitMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating8BitSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating16BitSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating32BitSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating64BitSignedAccelerated;
            
            public vulkan.VkBool32 integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
        }
        
        public partial struct VkPhysicalDeviceTexelBufferAlignmentProperties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceSize storageTexelBufferOffsetAlignmentBytes;
            
            public vulkan.VkBool32 storageTexelBufferOffsetSingleTexelAlignment;
            
            public vulkan.VkDeviceSize uniformTexelBufferOffsetAlignmentBytes;
            
            public vulkan.VkBool32 uniformTexelBufferOffsetSingleTexelAlignment;
        }
        
        public partial struct VkFormatProperties3
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFormatFeatureFlags2 linearTilingFeatures;
            
            public vulkan.VkFormatFeatureFlags2 optimalTilingFeatures;
            
            public vulkan.VkFormatFeatureFlags2 bufferFeatures;
        }
        
        public readonly partial struct VkFormatFeatureFlags2 : IEquatable<VkFormatFeatureFlags2>
        {
            public VkFormatFeatureFlags2(vulkan.VkFlags64 value) => this.Value = value;
            
            public vulkan.VkFlags64 Value { get; }
            
            public override bool Equals(object obj) => obj is VkFormatFeatureFlags2 other && Equals(other);
            
            public bool Equals(VkFormatFeatureFlags2 other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags64 (vulkan.VkFormatFeatureFlags2 from) => from.Value;
            
            public static implicit operator vulkan.VkFormatFeatureFlags2 (vulkan.VkFlags64 from) => new vulkan.VkFormatFeatureFlags2(from);
            
            public static bool operator ==(VkFormatFeatureFlags2 left, VkFormatFeatureFlags2 right) => left.Equals(right);
            
            public static bool operator !=(VkFormatFeatureFlags2 left, VkFormatFeatureFlags2 right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceMaintenance4Features
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 maintenance4;
        }
        
        public partial struct VkPhysicalDeviceMaintenance4Properties
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceSize maxBufferSize;
        }
        
        public partial struct VkDeviceBufferMemoryRequirements
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBufferCreateInfo* pCreateInfo;
        }
        
        public partial struct VkDeviceImageMemoryRequirements
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageCreateInfo* pCreateInfo;
            
            public vulkan.VkImageAspectFlagBits planeAspect;
        }
        
        public partial struct VkSurfaceCapabilitiesKHR
        {
            public uint minImageCount;
            
            public uint maxImageCount;
            
            public vulkan.VkExtent2D currentExtent;
            
            public vulkan.VkExtent2D minImageExtent;
            
            public vulkan.VkExtent2D maxImageExtent;
            
            public uint maxImageArrayLayers;
            
            public vulkan.VkSurfaceTransformFlagsKHR supportedTransforms;
            
            public vulkan.VkSurfaceTransformFlagBitsKHR currentTransform;
            
            public vulkan.VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
            
            public vulkan.VkImageUsageFlags supportedUsageFlags;
        }
        
        public readonly partial struct VkSurfaceTransformFlagsKHR : IEquatable<VkSurfaceTransformFlagsKHR>
        {
            public VkSurfaceTransformFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkSurfaceTransformFlagsKHR other && Equals(other);
            
            public bool Equals(VkSurfaceTransformFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkSurfaceTransformFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSurfaceTransformFlagsKHR (vulkan.VkFlags from) => new vulkan.VkSurfaceTransformFlagsKHR(from);
            
            public static bool operator ==(VkSurfaceTransformFlagsKHR left, VkSurfaceTransformFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSurfaceTransformFlagsKHR left, VkSurfaceTransformFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCompositeAlphaFlagsKHR : IEquatable<VkCompositeAlphaFlagsKHR>
        {
            public VkCompositeAlphaFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkCompositeAlphaFlagsKHR other && Equals(other);
            
            public bool Equals(VkCompositeAlphaFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkCompositeAlphaFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkCompositeAlphaFlagsKHR (vulkan.VkFlags from) => new vulkan.VkCompositeAlphaFlagsKHR(from);
            
            public static bool operator ==(VkCompositeAlphaFlagsKHR left, VkCompositeAlphaFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkCompositeAlphaFlagsKHR left, VkCompositeAlphaFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkSurfaceFormatKHR
        {
            public vulkan.VkFormat format;
            
            public vulkan.VkColorSpaceKHR colorSpace;
        }
        
        public partial struct VkSwapchainCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSwapchainCreateFlagsKHR flags;
            
            public vulkan.VkSurfaceKHR surface;
            
            public uint minImageCount;
            
            public vulkan.VkFormat imageFormat;
            
            public vulkan.VkColorSpaceKHR imageColorSpace;
            
            public vulkan.VkExtent2D imageExtent;
            
            public uint imageArrayLayers;
            
            public vulkan.VkImageUsageFlags imageUsage;
            
            public vulkan.VkSharingMode imageSharingMode;
            
            public uint queueFamilyIndexCount;
            
            public uint* pQueueFamilyIndices;
            
            public vulkan.VkSurfaceTransformFlagBitsKHR preTransform;
            
            public vulkan.VkCompositeAlphaFlagBitsKHR compositeAlpha;
            
            public vulkan.VkPresentModeKHR presentMode;
            
            public vulkan.VkBool32 clipped;
            
            public vulkan.VkSwapchainKHR oldSwapchain;
        }
        
        public readonly partial struct VkSwapchainCreateFlagsKHR : IEquatable<VkSwapchainCreateFlagsKHR>
        {
            public VkSwapchainCreateFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkSwapchainCreateFlagsKHR other && Equals(other);
            
            public bool Equals(VkSwapchainCreateFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkSwapchainCreateFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSwapchainCreateFlagsKHR (vulkan.VkFlags from) => new vulkan.VkSwapchainCreateFlagsKHR(from);
            
            public static bool operator ==(VkSwapchainCreateFlagsKHR left, VkSwapchainCreateFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSwapchainCreateFlagsKHR left, VkSwapchainCreateFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSurfaceKHR : IEquatable<VkSurfaceKHR>
        {
            public VkSurfaceKHR(vulkan.VkSurfaceKHR_T value) => this.Value = value;
            
            public vulkan.VkSurfaceKHR_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkSurfaceKHR other && Equals(other);
            
            public bool Equals(VkSurfaceKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSurfaceKHR_T (vulkan.VkSurfaceKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSurfaceKHR (vulkan.VkSurfaceKHR_T from) => new vulkan.VkSurfaceKHR(from);
            
            public static bool operator ==(VkSurfaceKHR left, VkSurfaceKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSurfaceKHR left, VkSurfaceKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSwapchainKHR : IEquatable<VkSwapchainKHR>
        {
            public VkSwapchainKHR(vulkan.VkSwapchainKHR_T value) => this.Value = value;
            
            public vulkan.VkSwapchainKHR_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkSwapchainKHR other && Equals(other);
            
            public bool Equals(VkSwapchainKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSwapchainKHR_T (vulkan.VkSwapchainKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSwapchainKHR (vulkan.VkSwapchainKHR_T from) => new vulkan.VkSwapchainKHR(from);
            
            public static bool operator ==(VkSwapchainKHR left, VkSwapchainKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSwapchainKHR left, VkSwapchainKHR right) => !left.Equals(right);
        }
        
        public partial struct VkPresentInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint waitSemaphoreCount;
            
            public vulkan.VkSemaphore* pWaitSemaphores;
            
            public uint swapchainCount;
            
            public vulkan.VkSwapchainKHR* pSwapchains;
            
            public uint* pImageIndices;
            
            public vulkan.VkResult* pResults;
        }
        
        public partial struct VkImageSwapchainCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSwapchainKHR swapchain;
        }
        
        public partial struct VkBindImageMemorySwapchainInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSwapchainKHR swapchain;
            
            public uint imageIndex;
        }
        
        public partial struct VkAcquireNextImageInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSwapchainKHR swapchain;
            
            public ulong timeout;
            
            public vulkan.VkSemaphore semaphore;
            
            public vulkan.VkFence fence;
            
            public uint deviceMask;
        }
        
        public readonly partial struct VkFence : IEquatable<VkFence>
        {
            public VkFence(vulkan.VkFence_T value) => this.Value = value;
            
            public vulkan.VkFence_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkFence other && Equals(other);
            
            public bool Equals(VkFence other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFence_T (vulkan.VkFence from) => from.Value;
            
            public static implicit operator vulkan.VkFence (vulkan.VkFence_T from) => new vulkan.VkFence(from);
            
            public static bool operator ==(VkFence left, VkFence right) => left.Equals(right);
            
            public static bool operator !=(VkFence left, VkFence right) => !left.Equals(right);
        }
        
        public unsafe partial struct VkDeviceGroupPresentCapabilitiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public fixed uint presentMask[32];
            
            public vulkan.VkDeviceGroupPresentModeFlagsKHR modes;
        }
        
        public readonly partial struct VkDeviceGroupPresentModeFlagsKHR : IEquatable<VkDeviceGroupPresentModeFlagsKHR>
        {
            public VkDeviceGroupPresentModeFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceGroupPresentModeFlagsKHR other && Equals(other);
            
            public bool Equals(VkDeviceGroupPresentModeFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDeviceGroupPresentModeFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceGroupPresentModeFlagsKHR (vulkan.VkFlags from) => new vulkan.VkDeviceGroupPresentModeFlagsKHR(from);
            
            public static bool operator ==(VkDeviceGroupPresentModeFlagsKHR left, VkDeviceGroupPresentModeFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceGroupPresentModeFlagsKHR left, VkDeviceGroupPresentModeFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkDeviceGroupPresentInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint swapchainCount;
            
            public uint* pDeviceMasks;
            
            public vulkan.VkDeviceGroupPresentModeFlagBitsKHR mode;
        }
        
        public partial struct VkDeviceGroupSwapchainCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceGroupPresentModeFlagsKHR modes;
        }
        
        public partial struct VkDisplayModeParametersKHR
        {
            public vulkan.VkExtent2D visibleRegion;
            
            public uint refreshRate;
        }
        
        public partial struct VkDisplayModeCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDisplayModeCreateFlagsKHR flags;
            
            public vulkan.VkDisplayModeParametersKHR parameters;
        }
        
        public readonly partial struct VkDisplayModeCreateFlagsKHR : IEquatable<VkDisplayModeCreateFlagsKHR>
        {
            public VkDisplayModeCreateFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDisplayModeCreateFlagsKHR other && Equals(other);
            
            public bool Equals(VkDisplayModeCreateFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDisplayModeCreateFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDisplayModeCreateFlagsKHR (vulkan.VkFlags from) => new vulkan.VkDisplayModeCreateFlagsKHR(from);
            
            public static bool operator ==(VkDisplayModeCreateFlagsKHR left, VkDisplayModeCreateFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDisplayModeCreateFlagsKHR left, VkDisplayModeCreateFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkDisplayModePropertiesKHR
        {
            public vulkan.VkDisplayModeKHR displayMode;
            
            public vulkan.VkDisplayModeParametersKHR parameters;
        }
        
        public readonly partial struct VkDisplayModeKHR : IEquatable<VkDisplayModeKHR>
        {
            public VkDisplayModeKHR(vulkan.VkDisplayModeKHR_T value) => this.Value = value;
            
            public vulkan.VkDisplayModeKHR_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkDisplayModeKHR other && Equals(other);
            
            public bool Equals(VkDisplayModeKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDisplayModeKHR_T (vulkan.VkDisplayModeKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDisplayModeKHR (vulkan.VkDisplayModeKHR_T from) => new vulkan.VkDisplayModeKHR(from);
            
            public static bool operator ==(VkDisplayModeKHR left, VkDisplayModeKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDisplayModeKHR left, VkDisplayModeKHR right) => !left.Equals(right);
        }
        
        public partial struct VkDisplayPlaneCapabilitiesKHR
        {
            public vulkan.VkDisplayPlaneAlphaFlagsKHR supportedAlpha;
            
            public vulkan.VkOffset2D minSrcPosition;
            
            public vulkan.VkOffset2D maxSrcPosition;
            
            public vulkan.VkExtent2D minSrcExtent;
            
            public vulkan.VkExtent2D maxSrcExtent;
            
            public vulkan.VkOffset2D minDstPosition;
            
            public vulkan.VkOffset2D maxDstPosition;
            
            public vulkan.VkExtent2D minDstExtent;
            
            public vulkan.VkExtent2D maxDstExtent;
        }
        
        public readonly partial struct VkDisplayPlaneAlphaFlagsKHR : IEquatable<VkDisplayPlaneAlphaFlagsKHR>
        {
            public VkDisplayPlaneAlphaFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDisplayPlaneAlphaFlagsKHR other && Equals(other);
            
            public bool Equals(VkDisplayPlaneAlphaFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDisplayPlaneAlphaFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDisplayPlaneAlphaFlagsKHR (vulkan.VkFlags from) => new vulkan.VkDisplayPlaneAlphaFlagsKHR(from);
            
            public static bool operator ==(VkDisplayPlaneAlphaFlagsKHR left, VkDisplayPlaneAlphaFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDisplayPlaneAlphaFlagsKHR left, VkDisplayPlaneAlphaFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkDisplayPlanePropertiesKHR
        {
            public vulkan.VkDisplayKHR currentDisplay;
            
            public uint currentStackIndex;
        }
        
        public readonly partial struct VkDisplayKHR : IEquatable<VkDisplayKHR>
        {
            public VkDisplayKHR(vulkan.VkDisplayKHR_T value) => this.Value = value;
            
            public vulkan.VkDisplayKHR_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkDisplayKHR other && Equals(other);
            
            public bool Equals(VkDisplayKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDisplayKHR_T (vulkan.VkDisplayKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDisplayKHR (vulkan.VkDisplayKHR_T from) => new vulkan.VkDisplayKHR(from);
            
            public static bool operator ==(VkDisplayKHR left, VkDisplayKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDisplayKHR left, VkDisplayKHR right) => !left.Equals(right);
        }
        
        public partial struct VkDisplayPropertiesKHR
        {
            public vulkan.VkDisplayKHR display;
            
            public byte* displayName;
            
            public vulkan.VkExtent2D physicalDimensions;
            
            public vulkan.VkExtent2D physicalResolution;
            
            public vulkan.VkSurfaceTransformFlagsKHR supportedTransforms;
            
            public vulkan.VkBool32 planeReorderPossible;
            
            public vulkan.VkBool32 persistentContent;
        }
        
        public partial struct VkDisplaySurfaceCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDisplaySurfaceCreateFlagsKHR flags;
            
            public vulkan.VkDisplayModeKHR displayMode;
            
            public uint planeIndex;
            
            public uint planeStackIndex;
            
            public vulkan.VkSurfaceTransformFlagBitsKHR transform;
            
            public float globalAlpha;
            
            public vulkan.VkDisplayPlaneAlphaFlagBitsKHR alphaMode;
            
            public vulkan.VkExtent2D imageExtent;
        }
        
        public readonly partial struct VkDisplaySurfaceCreateFlagsKHR : IEquatable<VkDisplaySurfaceCreateFlagsKHR>
        {
            public VkDisplaySurfaceCreateFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDisplaySurfaceCreateFlagsKHR other && Equals(other);
            
            public bool Equals(VkDisplaySurfaceCreateFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDisplaySurfaceCreateFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDisplaySurfaceCreateFlagsKHR (vulkan.VkFlags from) => new vulkan.VkDisplaySurfaceCreateFlagsKHR(from);
            
            public static bool operator ==(VkDisplaySurfaceCreateFlagsKHR left, VkDisplaySurfaceCreateFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDisplaySurfaceCreateFlagsKHR left, VkDisplaySurfaceCreateFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkDisplayPresentInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkRect2D srcRect;
            
            public vulkan.VkRect2D dstRect;
            
            public vulkan.VkBool32 persistent;
        }
        
        public partial struct VkQueueFamilyQueryResultStatusPropertiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 queryResultStatusSupport;
        }
        
        public partial struct VkQueueFamilyVideoPropertiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkVideoCodecOperationFlagsKHR videoCodecOperations;
        }
        
        public readonly partial struct VkVideoCodecOperationFlagsKHR : IEquatable<VkVideoCodecOperationFlagsKHR>
        {
            public VkVideoCodecOperationFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkVideoCodecOperationFlagsKHR other && Equals(other);
            
            public bool Equals(VkVideoCodecOperationFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkVideoCodecOperationFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkVideoCodecOperationFlagsKHR (vulkan.VkFlags from) => new vulkan.VkVideoCodecOperationFlagsKHR(from);
            
            public static bool operator ==(VkVideoCodecOperationFlagsKHR left, VkVideoCodecOperationFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkVideoCodecOperationFlagsKHR left, VkVideoCodecOperationFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkVideoProfileInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkVideoCodecOperationFlagBitsKHR videoCodecOperation;
            
            public vulkan.VkVideoChromaSubsamplingFlagsKHR chromaSubsampling;
            
            public vulkan.VkVideoComponentBitDepthFlagsKHR lumaBitDepth;
            
            public vulkan.VkVideoComponentBitDepthFlagsKHR chromaBitDepth;
        }
        
        public readonly partial struct VkVideoChromaSubsamplingFlagsKHR : IEquatable<VkVideoChromaSubsamplingFlagsKHR>
        {
            public VkVideoChromaSubsamplingFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkVideoChromaSubsamplingFlagsKHR other && Equals(other);
            
            public bool Equals(VkVideoChromaSubsamplingFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkVideoChromaSubsamplingFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkVideoChromaSubsamplingFlagsKHR (vulkan.VkFlags from) => new vulkan.VkVideoChromaSubsamplingFlagsKHR(from);
            
            public static bool operator ==(VkVideoChromaSubsamplingFlagsKHR left, VkVideoChromaSubsamplingFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkVideoChromaSubsamplingFlagsKHR left, VkVideoChromaSubsamplingFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkVideoComponentBitDepthFlagsKHR : IEquatable<VkVideoComponentBitDepthFlagsKHR>
        {
            public VkVideoComponentBitDepthFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkVideoComponentBitDepthFlagsKHR other && Equals(other);
            
            public bool Equals(VkVideoComponentBitDepthFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkVideoComponentBitDepthFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkVideoComponentBitDepthFlagsKHR (vulkan.VkFlags from) => new vulkan.VkVideoComponentBitDepthFlagsKHR(from);
            
            public static bool operator ==(VkVideoComponentBitDepthFlagsKHR left, VkVideoComponentBitDepthFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkVideoComponentBitDepthFlagsKHR left, VkVideoComponentBitDepthFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkVideoProfileListInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint profileCount;
            
            public vulkan.VkVideoProfileInfoKHR* pProfiles;
        }
        
        public partial struct VkVideoCapabilitiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkVideoCapabilityFlagsKHR flags;
            
            public vulkan.VkDeviceSize minBitstreamBufferOffsetAlignment;
            
            public vulkan.VkDeviceSize minBitstreamBufferSizeAlignment;
            
            public vulkan.VkExtent2D pictureAccessGranularity;
            
            public vulkan.VkExtent2D minCodedExtent;
            
            public vulkan.VkExtent2D maxCodedExtent;
            
            public uint maxDpbSlots;
            
            public uint maxActiveReferencePictures;
            
            public vulkan.VkExtensionProperties stdHeaderVersion;
        }
        
        public readonly partial struct VkVideoCapabilityFlagsKHR : IEquatable<VkVideoCapabilityFlagsKHR>
        {
            public VkVideoCapabilityFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkVideoCapabilityFlagsKHR other && Equals(other);
            
            public bool Equals(VkVideoCapabilityFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkVideoCapabilityFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkVideoCapabilityFlagsKHR (vulkan.VkFlags from) => new vulkan.VkVideoCapabilityFlagsKHR(from);
            
            public static bool operator ==(VkVideoCapabilityFlagsKHR left, VkVideoCapabilityFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkVideoCapabilityFlagsKHR left, VkVideoCapabilityFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceVideoFormatInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageUsageFlags imageUsage;
        }
        
        public partial struct VkVideoFormatPropertiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFormat format;
            
            public vulkan.VkComponentMapping componentMapping;
            
            public vulkan.VkImageCreateFlags imageCreateFlags;
            
            public vulkan.VkImageType imageType;
            
            public vulkan.VkImageTiling imageTiling;
            
            public vulkan.VkImageUsageFlags imageUsageFlags;
        }
        
        public partial struct VkVideoPictureResourceInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkOffset2D codedOffset;
            
            public vulkan.VkExtent2D codedExtent;
            
            public uint baseArrayLayer;
            
            public vulkan.VkImageView imageViewBinding;
        }
        
        public partial struct VkVideoReferenceSlotInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public int slotIndex;
            
            public vulkan.VkVideoPictureResourceInfoKHR* pPictureResource;
        }
        
        public partial struct VkVideoSessionMemoryRequirementsKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint memoryBindIndex;
            
            public vulkan.VkMemoryRequirements memoryRequirements;
        }
        
        public partial struct VkBindVideoSessionMemoryInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint memoryBindIndex;
            
            public vulkan.VkDeviceMemory memory;
            
            public vulkan.VkDeviceSize memoryOffset;
            
            public vulkan.VkDeviceSize memorySize;
        }
        
        public partial struct VkVideoSessionCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint queueFamilyIndex;
            
            public vulkan.VkVideoSessionCreateFlagsKHR flags;
            
            public vulkan.VkVideoProfileInfoKHR* pVideoProfile;
            
            public vulkan.VkFormat pictureFormat;
            
            public vulkan.VkExtent2D maxCodedExtent;
            
            public vulkan.VkFormat referencePictureFormat;
            
            public uint maxDpbSlots;
            
            public uint maxActiveReferencePictures;
            
            public vulkan.VkExtensionProperties* pStdHeaderVersion;
        }
        
        public readonly partial struct VkVideoSessionCreateFlagsKHR : IEquatable<VkVideoSessionCreateFlagsKHR>
        {
            public VkVideoSessionCreateFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkVideoSessionCreateFlagsKHR other && Equals(other);
            
            public bool Equals(VkVideoSessionCreateFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkVideoSessionCreateFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkVideoSessionCreateFlagsKHR (vulkan.VkFlags from) => new vulkan.VkVideoSessionCreateFlagsKHR(from);
            
            public static bool operator ==(VkVideoSessionCreateFlagsKHR left, VkVideoSessionCreateFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkVideoSessionCreateFlagsKHR left, VkVideoSessionCreateFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkVideoSessionParametersCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkVideoSessionParametersCreateFlagsKHR flags;
            
            public vulkan.VkVideoSessionParametersKHR videoSessionParametersTemplate;
            
            public vulkan.VkVideoSessionKHR videoSession;
        }
        
        public readonly partial struct VkVideoSessionParametersCreateFlagsKHR : IEquatable<VkVideoSessionParametersCreateFlagsKHR>
        {
            public VkVideoSessionParametersCreateFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkVideoSessionParametersCreateFlagsKHR other && Equals(other);
            
            public bool Equals(VkVideoSessionParametersCreateFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkVideoSessionParametersCreateFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkVideoSessionParametersCreateFlagsKHR (vulkan.VkFlags from) => new vulkan.VkVideoSessionParametersCreateFlagsKHR(from);
            
            public static bool operator ==(VkVideoSessionParametersCreateFlagsKHR left, VkVideoSessionParametersCreateFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkVideoSessionParametersCreateFlagsKHR left, VkVideoSessionParametersCreateFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkVideoSessionParametersKHR : IEquatable<VkVideoSessionParametersKHR>
        {
            public VkVideoSessionParametersKHR(vulkan.VkVideoSessionParametersKHR_T value) => this.Value = value;
            
            public vulkan.VkVideoSessionParametersKHR_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkVideoSessionParametersKHR other && Equals(other);
            
            public bool Equals(VkVideoSessionParametersKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkVideoSessionParametersKHR_T (vulkan.VkVideoSessionParametersKHR from) => from.Value;
            
            public static implicit operator vulkan.VkVideoSessionParametersKHR (vulkan.VkVideoSessionParametersKHR_T from) => new vulkan.VkVideoSessionParametersKHR(from);
            
            public static bool operator ==(VkVideoSessionParametersKHR left, VkVideoSessionParametersKHR right) => left.Equals(right);
            
            public static bool operator !=(VkVideoSessionParametersKHR left, VkVideoSessionParametersKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkVideoSessionKHR : IEquatable<VkVideoSessionKHR>
        {
            public VkVideoSessionKHR(vulkan.VkVideoSessionKHR_T value) => this.Value = value;
            
            public vulkan.VkVideoSessionKHR_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkVideoSessionKHR other && Equals(other);
            
            public bool Equals(VkVideoSessionKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkVideoSessionKHR_T (vulkan.VkVideoSessionKHR from) => from.Value;
            
            public static implicit operator vulkan.VkVideoSessionKHR (vulkan.VkVideoSessionKHR_T from) => new vulkan.VkVideoSessionKHR(from);
            
            public static bool operator ==(VkVideoSessionKHR left, VkVideoSessionKHR right) => left.Equals(right);
            
            public static bool operator !=(VkVideoSessionKHR left, VkVideoSessionKHR right) => !left.Equals(right);
        }
        
        public partial struct VkVideoSessionParametersUpdateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint updateSequenceCount;
        }
        
        public partial struct VkVideoBeginCodingInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkVideoBeginCodingFlagsKHR flags;
            
            public vulkan.VkVideoSessionKHR videoSession;
            
            public vulkan.VkVideoSessionParametersKHR videoSessionParameters;
            
            public uint referenceSlotCount;
            
            public vulkan.VkVideoReferenceSlotInfoKHR* pReferenceSlots;
        }
        
        public readonly partial struct VkVideoBeginCodingFlagsKHR : IEquatable<VkVideoBeginCodingFlagsKHR>
        {
            public VkVideoBeginCodingFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkVideoBeginCodingFlagsKHR other && Equals(other);
            
            public bool Equals(VkVideoBeginCodingFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkVideoBeginCodingFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkVideoBeginCodingFlagsKHR (vulkan.VkFlags from) => new vulkan.VkVideoBeginCodingFlagsKHR(from);
            
            public static bool operator ==(VkVideoBeginCodingFlagsKHR left, VkVideoBeginCodingFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkVideoBeginCodingFlagsKHR left, VkVideoBeginCodingFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkVideoEndCodingInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkVideoEndCodingFlagsKHR flags;
        }
        
        public readonly partial struct VkVideoEndCodingFlagsKHR : IEquatable<VkVideoEndCodingFlagsKHR>
        {
            public VkVideoEndCodingFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkVideoEndCodingFlagsKHR other && Equals(other);
            
            public bool Equals(VkVideoEndCodingFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkVideoEndCodingFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkVideoEndCodingFlagsKHR (vulkan.VkFlags from) => new vulkan.VkVideoEndCodingFlagsKHR(from);
            
            public static bool operator ==(VkVideoEndCodingFlagsKHR left, VkVideoEndCodingFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkVideoEndCodingFlagsKHR left, VkVideoEndCodingFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkVideoCodingControlInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkVideoCodingControlFlagsKHR flags;
        }
        
        public readonly partial struct VkVideoCodingControlFlagsKHR : IEquatable<VkVideoCodingControlFlagsKHR>
        {
            public VkVideoCodingControlFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkVideoCodingControlFlagsKHR other && Equals(other);
            
            public bool Equals(VkVideoCodingControlFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkVideoCodingControlFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkVideoCodingControlFlagsKHR (vulkan.VkFlags from) => new vulkan.VkVideoCodingControlFlagsKHR(from);
            
            public static bool operator ==(VkVideoCodingControlFlagsKHR left, VkVideoCodingControlFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkVideoCodingControlFlagsKHR left, VkVideoCodingControlFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkVideoDecodeCapabilitiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkVideoDecodeCapabilityFlagsKHR flags;
        }
        
        public readonly partial struct VkVideoDecodeCapabilityFlagsKHR : IEquatable<VkVideoDecodeCapabilityFlagsKHR>
        {
            public VkVideoDecodeCapabilityFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkVideoDecodeCapabilityFlagsKHR other && Equals(other);
            
            public bool Equals(VkVideoDecodeCapabilityFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkVideoDecodeCapabilityFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkVideoDecodeCapabilityFlagsKHR (vulkan.VkFlags from) => new vulkan.VkVideoDecodeCapabilityFlagsKHR(from);
            
            public static bool operator ==(VkVideoDecodeCapabilityFlagsKHR left, VkVideoDecodeCapabilityFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkVideoDecodeCapabilityFlagsKHR left, VkVideoDecodeCapabilityFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkVideoDecodeUsageInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkVideoDecodeUsageFlagsKHR videoUsageHints;
        }
        
        public readonly partial struct VkVideoDecodeUsageFlagsKHR : IEquatable<VkVideoDecodeUsageFlagsKHR>
        {
            public VkVideoDecodeUsageFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkVideoDecodeUsageFlagsKHR other && Equals(other);
            
            public bool Equals(VkVideoDecodeUsageFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkVideoDecodeUsageFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkVideoDecodeUsageFlagsKHR (vulkan.VkFlags from) => new vulkan.VkVideoDecodeUsageFlagsKHR(from);
            
            public static bool operator ==(VkVideoDecodeUsageFlagsKHR left, VkVideoDecodeUsageFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkVideoDecodeUsageFlagsKHR left, VkVideoDecodeUsageFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkVideoDecodeInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkVideoDecodeFlagsKHR flags;
            
            public vulkan.VkBuffer srcBuffer;
            
            public vulkan.VkDeviceSize srcBufferOffset;
            
            public vulkan.VkDeviceSize srcBufferRange;
            
            public vulkan.VkVideoPictureResourceInfoKHR dstPictureResource;
            
            public vulkan.VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot;
            
            public uint referenceSlotCount;
            
            public vulkan.VkVideoReferenceSlotInfoKHR* pReferenceSlots;
        }
        
        public readonly partial struct VkVideoDecodeFlagsKHR : IEquatable<VkVideoDecodeFlagsKHR>
        {
            public VkVideoDecodeFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkVideoDecodeFlagsKHR other && Equals(other);
            
            public bool Equals(VkVideoDecodeFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkVideoDecodeFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkVideoDecodeFlagsKHR (vulkan.VkFlags from) => new vulkan.VkVideoDecodeFlagsKHR(from);
            
            public static bool operator ==(VkVideoDecodeFlagsKHR left, VkVideoDecodeFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkVideoDecodeFlagsKHR left, VkVideoDecodeFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkVideoDecodeH264ProfileInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.StdVideoH264ProfileIdc stdProfileIdc;
            
            public vulkan.VkVideoDecodeH264PictureLayoutFlagBitsKHR pictureLayout;
        }
        
        public partial struct VkVideoDecodeH264CapabilitiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.StdVideoH264LevelIdc maxLevelIdc;
            
            public vulkan.VkOffset2D fieldOffsetGranularity;
        }
        
        public partial struct VkVideoDecodeH264SessionParametersAddInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint stdSPSCount;
            
            public vulkan.StdVideoH264SequenceParameterSet* pStdSPSs;
            
            public uint stdPPSCount;
            
            public vulkan.StdVideoH264PictureParameterSet* pStdPPSs;
        }
        
        public partial struct VkVideoDecodeH264SessionParametersCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxStdSPSCount;
            
            public uint maxStdPPSCount;
            
            public vulkan.VkVideoDecodeH264SessionParametersAddInfoKHR* pParametersAddInfo;
        }
        
        public partial struct VkVideoDecodeH264PictureInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.StdVideoDecodeH264PictureInfo* pStdPictureInfo;
            
            public uint sliceCount;
            
            public uint* pSliceOffsets;
        }
        
        public partial struct VkVideoDecodeH264DpbSlotInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.StdVideoDecodeH264ReferenceInfo* pStdReferenceInfo;
        }
        
        public partial struct VkRenderingFragmentShadingRateAttachmentInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageView imageView;
            
            public vulkan.VkImageLayout imageLayout;
            
            public vulkan.VkExtent2D shadingRateAttachmentTexelSize;
        }
        
        public partial struct VkRenderingFragmentDensityMapAttachmentInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageView imageView;
            
            public vulkan.VkImageLayout imageLayout;
        }
        
        public partial struct VkAttachmentSampleCountInfoAMD
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint colorAttachmentCount;
            
            public vulkan.VkSampleCountFlagBits* pColorAttachmentSamples;
            
            public vulkan.VkSampleCountFlagBits depthStencilAttachmentSamples;
        }
        
        public partial struct VkMultiviewPerViewAttributesInfoNVX
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 perViewAttributes;
            
            public vulkan.VkBool32 perViewAttributesPositionXOnly;
        }
        
        public partial struct VkImportMemoryFdInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalMemoryHandleTypeFlagBits handleType;
            
            public int fd;
        }
        
        public partial struct VkMemoryFdPropertiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint memoryTypeBits;
        }
        
        public partial struct VkMemoryGetFdInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceMemory memory;
            
            public vulkan.VkExternalMemoryHandleTypeFlagBits handleType;
        }
        
        public partial struct VkImportSemaphoreFdInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSemaphore semaphore;
            
            public vulkan.VkSemaphoreImportFlags flags;
            
            public vulkan.VkExternalSemaphoreHandleTypeFlagBits handleType;
            
            public int fd;
        }
        
        public readonly partial struct VkSemaphoreImportFlags : IEquatable<VkSemaphoreImportFlags>
        {
            public VkSemaphoreImportFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkSemaphoreImportFlags other && Equals(other);
            
            public bool Equals(VkSemaphoreImportFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkSemaphoreImportFlags from) => from.Value;
            
            public static implicit operator vulkan.VkSemaphoreImportFlags (vulkan.VkFlags from) => new vulkan.VkSemaphoreImportFlags(from);
            
            public static bool operator ==(VkSemaphoreImportFlags left, VkSemaphoreImportFlags right) => left.Equals(right);
            
            public static bool operator !=(VkSemaphoreImportFlags left, VkSemaphoreImportFlags right) => !left.Equals(right);
        }
        
        public partial struct VkSemaphoreGetFdInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSemaphore semaphore;
            
            public vulkan.VkExternalSemaphoreHandleTypeFlagBits handleType;
        }
        
        public partial struct VkPhysicalDevicePushDescriptorPropertiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxPushDescriptors;
        }
        
        public partial struct VkRectLayerKHR
        {
            public vulkan.VkOffset2D offset;
            
            public vulkan.VkExtent2D extent;
            
            public uint layer;
        }
        
        public partial struct VkPresentRegionKHR
        {
            public uint rectangleCount;
            
            public vulkan.VkRectLayerKHR* pRectangles;
        }
        
        public partial struct VkPresentRegionsKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint swapchainCount;
            
            public vulkan.VkPresentRegionKHR* pRegions;
        }
        
        public partial struct VkSharedPresentSurfaceCapabilitiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageUsageFlags sharedPresentSupportedUsageFlags;
        }
        
        public partial struct VkImportFenceFdInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFence fence;
            
            public vulkan.VkFenceImportFlags flags;
            
            public vulkan.VkExternalFenceHandleTypeFlagBits handleType;
            
            public int fd;
        }
        
        public readonly partial struct VkFenceImportFlags : IEquatable<VkFenceImportFlags>
        {
            public VkFenceImportFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkFenceImportFlags other && Equals(other);
            
            public bool Equals(VkFenceImportFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkFenceImportFlags from) => from.Value;
            
            public static implicit operator vulkan.VkFenceImportFlags (vulkan.VkFlags from) => new vulkan.VkFenceImportFlags(from);
            
            public static bool operator ==(VkFenceImportFlags left, VkFenceImportFlags right) => left.Equals(right);
            
            public static bool operator !=(VkFenceImportFlags left, VkFenceImportFlags right) => !left.Equals(right);
        }
        
        public partial struct VkFenceGetFdInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFence fence;
            
            public vulkan.VkExternalFenceHandleTypeFlagBits handleType;
        }
        
        public partial struct VkPhysicalDevicePerformanceQueryFeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 performanceCounterQueryPools;
            
            public vulkan.VkBool32 performanceCounterMultipleQueryPools;
        }
        
        public partial struct VkPhysicalDevicePerformanceQueryPropertiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 allowCommandBufferQueryCopies;
        }
        
        public unsafe partial struct VkPerformanceCounterKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPerformanceCounterUnitKHR unit;
            
            public vulkan.VkPerformanceCounterScopeKHR scope;
            
            public vulkan.VkPerformanceCounterStorageKHR storage;
            
            public fixed byte uuid[16];
        }
        
        public unsafe partial struct VkPerformanceCounterDescriptionKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPerformanceCounterDescriptionFlagsKHR flags;
            
            public fixed byte name[256];
            
            public fixed byte category[256];
            
            public fixed byte description[256];
        }
        
        public readonly partial struct VkPerformanceCounterDescriptionFlagsKHR : IEquatable<VkPerformanceCounterDescriptionFlagsKHR>
        {
            public VkPerformanceCounterDescriptionFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPerformanceCounterDescriptionFlagsKHR other && Equals(other);
            
            public bool Equals(VkPerformanceCounterDescriptionFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPerformanceCounterDescriptionFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPerformanceCounterDescriptionFlagsKHR (vulkan.VkFlags from) => new vulkan.VkPerformanceCounterDescriptionFlagsKHR(from);
            
            public static bool operator ==(VkPerformanceCounterDescriptionFlagsKHR left, VkPerformanceCounterDescriptionFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPerformanceCounterDescriptionFlagsKHR left, VkPerformanceCounterDescriptionFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkQueryPoolPerformanceCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint queueFamilyIndex;
            
            public uint counterIndexCount;
            
            public uint* pCounterIndices;
        }
        
        [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
        public partial struct VkPerformanceCounterResultKHR
        {
            [FieldOffset(0)]
            public int int32;
            
            [FieldOffset(0)]
            public long int64;
            
            [FieldOffset(0)]
            public uint uint32;
            
            [FieldOffset(0)]
            public ulong uint64;
            
            [FieldOffset(0)]
            public float float32;
            
            [FieldOffset(0)]
            public double float64;
        }
        
        public partial struct VkAcquireProfilingLockInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAcquireProfilingLockFlagsKHR flags;
            
            public ulong timeout;
        }
        
        public readonly partial struct VkAcquireProfilingLockFlagsKHR : IEquatable<VkAcquireProfilingLockFlagsKHR>
        {
            public VkAcquireProfilingLockFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkAcquireProfilingLockFlagsKHR other && Equals(other);
            
            public bool Equals(VkAcquireProfilingLockFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkAcquireProfilingLockFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkAcquireProfilingLockFlagsKHR (vulkan.VkFlags from) => new vulkan.VkAcquireProfilingLockFlagsKHR(from);
            
            public static bool operator ==(VkAcquireProfilingLockFlagsKHR left, VkAcquireProfilingLockFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkAcquireProfilingLockFlagsKHR left, VkAcquireProfilingLockFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkPerformanceQuerySubmitInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint counterPassIndex;
        }
        
        public partial struct VkPhysicalDeviceSurfaceInfo2KHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSurfaceKHR surface;
        }
        
        public partial struct VkSurfaceCapabilities2KHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSurfaceCapabilitiesKHR surfaceCapabilities;
        }
        
        public partial struct VkSurfaceFormat2KHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSurfaceFormatKHR surfaceFormat;
        }
        
        public partial struct VkDisplayProperties2KHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDisplayPropertiesKHR displayProperties;
        }
        
        public partial struct VkDisplayPlaneProperties2KHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDisplayPlanePropertiesKHR displayPlaneProperties;
        }
        
        public partial struct VkDisplayModeProperties2KHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDisplayModePropertiesKHR displayModeProperties;
        }
        
        public partial struct VkDisplayPlaneInfo2KHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDisplayModeKHR mode;
            
            public uint planeIndex;
        }
        
        public partial struct VkDisplayPlaneCapabilities2KHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDisplayPlaneCapabilitiesKHR capabilities;
        }
        
        public partial struct VkPhysicalDeviceShaderClockFeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderSubgroupClock;
            
            public vulkan.VkBool32 shaderDeviceClock;
        }
        
        public partial struct VkVideoDecodeH265ProfileInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.StdVideoH265ProfileIdc stdProfileIdc;
        }
        
        public partial struct VkVideoDecodeH265CapabilitiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.StdVideoH265LevelIdc maxLevelIdc;
        }
        
        public partial struct VkVideoDecodeH265SessionParametersAddInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint stdVPSCount;
            
            public vulkan.StdVideoH265VideoParameterSet* pStdVPSs;
            
            public uint stdSPSCount;
            
            public vulkan.StdVideoH265SequenceParameterSet* pStdSPSs;
            
            public uint stdPPSCount;
            
            public vulkan.StdVideoH265PictureParameterSet* pStdPPSs;
        }
        
        public partial struct VkVideoDecodeH265SessionParametersCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxStdVPSCount;
            
            public uint maxStdSPSCount;
            
            public uint maxStdPPSCount;
            
            public vulkan.VkVideoDecodeH265SessionParametersAddInfoKHR* pParametersAddInfo;
        }
        
        public partial struct VkVideoDecodeH265PictureInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.StdVideoDecodeH265PictureInfo* pStdPictureInfo;
            
            public uint sliceSegmentCount;
            
            public uint* pSliceSegmentOffsets;
        }
        
        public partial struct VkVideoDecodeH265DpbSlotInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.StdVideoDecodeH265ReferenceInfo* pStdReferenceInfo;
        }
        
        public partial struct VkDeviceQueueGlobalPriorityCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkQueueGlobalPriorityKHR globalPriority;
        }
        
        public partial struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 globalPriorityQuery;
        }
        
        public unsafe partial struct VkQueueFamilyGlobalPriorityPropertiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint priorityCount;
            
            public fixed uint priorities[16];
        }
        
        public partial struct VkFragmentShadingRateAttachmentInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAttachmentReference2* pFragmentShadingRateAttachment;
            
            public vulkan.VkExtent2D shadingRateAttachmentTexelSize;
        }
        
        public unsafe partial struct VkPipelineFragmentShadingRateStateCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExtent2D fragmentSize;
            
            public fixed uint combinerOps[2];
        }
        
        public partial struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 pipelineFragmentShadingRate;
            
            public vulkan.VkBool32 primitiveFragmentShadingRate;
            
            public vulkan.VkBool32 attachmentFragmentShadingRate;
        }
        
        public partial struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExtent2D minFragmentShadingRateAttachmentTexelSize;
            
            public vulkan.VkExtent2D maxFragmentShadingRateAttachmentTexelSize;
            
            public uint maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
            
            public vulkan.VkBool32 primitiveFragmentShadingRateWithMultipleViewports;
            
            public vulkan.VkBool32 layeredShadingRateAttachments;
            
            public vulkan.VkBool32 fragmentShadingRateNonTrivialCombinerOps;
            
            public vulkan.VkExtent2D maxFragmentSize;
            
            public uint maxFragmentSizeAspectRatio;
            
            public uint maxFragmentShadingRateCoverageSamples;
            
            public vulkan.VkSampleCountFlagBits maxFragmentShadingRateRasterizationSamples;
            
            public vulkan.VkBool32 fragmentShadingRateWithShaderDepthStencilWrites;
            
            public vulkan.VkBool32 fragmentShadingRateWithSampleMask;
            
            public vulkan.VkBool32 fragmentShadingRateWithShaderSampleMask;
            
            public vulkan.VkBool32 fragmentShadingRateWithConservativeRasterization;
            
            public vulkan.VkBool32 fragmentShadingRateWithFragmentShaderInterlock;
            
            public vulkan.VkBool32 fragmentShadingRateWithCustomSampleLocations;
            
            public vulkan.VkBool32 fragmentShadingRateStrictMultiplyCombiner;
        }
        
        public partial struct VkPhysicalDeviceFragmentShadingRateKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSampleCountFlags sampleCounts;
            
            public vulkan.VkExtent2D fragmentSize;
        }
        
        public partial struct VkSurfaceProtectedCapabilitiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 supportsProtected;
        }
        
        public partial struct VkPhysicalDevicePresentWaitFeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 presentWait;
        }
        
        public partial struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 pipelineExecutableInfo;
        }
        
        public partial struct VkPipelineInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipeline pipeline;
        }
        
        public unsafe partial struct VkPipelineExecutablePropertiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkShaderStageFlags stages;
            
            public fixed byte name[256];
            
            public fixed byte description[256];
            
            public uint subgroupSize;
        }
        
        public partial struct VkPipelineExecutableInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipeline pipeline;
            
            public uint executableIndex;
        }
        
        [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
        public partial struct VkPipelineExecutableStatisticValueKHR
        {
            [FieldOffset(0)]
            public vulkan.VkBool32 b32;
            
            [FieldOffset(0)]
            public long i64;
            
            [FieldOffset(0)]
            public ulong u64;
            
            [FieldOffset(0)]
            public double f64;
        }
        
        public unsafe partial struct VkPipelineExecutableStatisticKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public fixed byte name[256];
            
            public fixed byte description[256];
            
            public vulkan.VkPipelineExecutableStatisticFormatKHR format;
            
            public vulkan.VkPipelineExecutableStatisticValueKHR value;
        }
        
        public unsafe partial struct VkPipelineExecutableInternalRepresentationKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public fixed byte name[256];
            
            public fixed byte description[256];
            
            public vulkan.VkBool32 isText;
            
            public nuint dataSize;
            
            public void* pData;
        }
        
        public partial struct VkMemoryMapInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkMemoryMapFlags flags;
            
            public vulkan.VkDeviceMemory memory;
            
            public vulkan.VkDeviceSize offset;
            
            public vulkan.VkDeviceSize size;
        }
        
        public readonly partial struct VkMemoryMapFlags : IEquatable<VkMemoryMapFlags>
        {
            public VkMemoryMapFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkMemoryMapFlags other && Equals(other);
            
            public bool Equals(VkMemoryMapFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkMemoryMapFlags from) => from.Value;
            
            public static implicit operator vulkan.VkMemoryMapFlags (vulkan.VkFlags from) => new vulkan.VkMemoryMapFlags(from);
            
            public static bool operator ==(VkMemoryMapFlags left, VkMemoryMapFlags right) => left.Equals(right);
            
            public static bool operator !=(VkMemoryMapFlags left, VkMemoryMapFlags right) => !left.Equals(right);
        }
        
        public partial struct VkMemoryUnmapInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkMemoryUnmapFlagsKHR flags;
            
            public vulkan.VkDeviceMemory memory;
        }
        
        public readonly partial struct VkMemoryUnmapFlagsKHR : IEquatable<VkMemoryUnmapFlagsKHR>
        {
            public VkMemoryUnmapFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkMemoryUnmapFlagsKHR other && Equals(other);
            
            public bool Equals(VkMemoryUnmapFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkMemoryUnmapFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkMemoryUnmapFlagsKHR (vulkan.VkFlags from) => new vulkan.VkMemoryUnmapFlagsKHR(from);
            
            public static bool operator ==(VkMemoryUnmapFlagsKHR left, VkMemoryUnmapFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkMemoryUnmapFlagsKHR left, VkMemoryUnmapFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkPipelineLibraryCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint libraryCount;
            
            public vulkan.VkPipeline* pLibraries;
        }
        
        public partial struct VkPresentIdKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint swapchainCount;
            
            public ulong* pPresentIds;
        }
        
        public partial struct VkPhysicalDevicePresentIdFeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 presentId;
        }
        
        public partial struct VkQueueFamilyCheckpointProperties2NV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineStageFlags2 checkpointExecutionStageMask;
        }
        
        public partial struct VkCheckpointData2NV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineStageFlags2 stage;
            
            public void* pCheckpointMarker;
        }
        
        public partial struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 fragmentShaderBarycentric;
        }
        
        public partial struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 triStripVertexOrderIndependentOfProvokingVertex;
        }
        
        public partial struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderSubgroupUniformControlFlow;
        }
        
        public partial struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 workgroupMemoryExplicitLayout;
            
            public vulkan.VkBool32 workgroupMemoryExplicitLayoutScalarBlockLayout;
            
            public vulkan.VkBool32 workgroupMemoryExplicitLayout8BitAccess;
            
            public vulkan.VkBool32 workgroupMemoryExplicitLayout16BitAccess;
        }
        
        public partial struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 rayTracingMaintenance1;
            
            public vulkan.VkBool32 rayTracingPipelineTraceRaysIndirect2;
        }
        
        public partial struct VkTraceRaysIndirectCommand2KHR
        {
            public vulkan.VkDeviceAddress raygenShaderRecordAddress;
            
            public vulkan.VkDeviceSize raygenShaderRecordSize;
            
            public vulkan.VkDeviceAddress missShaderBindingTableAddress;
            
            public vulkan.VkDeviceSize missShaderBindingTableSize;
            
            public vulkan.VkDeviceSize missShaderBindingTableStride;
            
            public vulkan.VkDeviceAddress hitShaderBindingTableAddress;
            
            public vulkan.VkDeviceSize hitShaderBindingTableSize;
            
            public vulkan.VkDeviceSize hitShaderBindingTableStride;
            
            public vulkan.VkDeviceAddress callableShaderBindingTableAddress;
            
            public vulkan.VkDeviceSize callableShaderBindingTableSize;
            
            public vulkan.VkDeviceSize callableShaderBindingTableStride;
            
            public uint width;
            
            public uint height;
            
            public uint depth;
        }
        
        public readonly partial struct VkDeviceAddress : IEquatable<VkDeviceAddress>
        {
            public VkDeviceAddress(ulong value) => this.Value = value;
            
            public ulong Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceAddress other && Equals(other);
            
            public bool Equals(VkDeviceAddress other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ulong (vulkan.VkDeviceAddress from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceAddress (ulong from) => new vulkan.VkDeviceAddress(from);
            
            public static bool operator ==(VkDeviceAddress left, VkDeviceAddress right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceAddress left, VkDeviceAddress right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceMaintenance5FeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 maintenance5;
        }
        
        public partial struct VkPhysicalDeviceMaintenance5PropertiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 earlyFragmentMultisampleCoverageAfterSampleCounting;
            
            public vulkan.VkBool32 earlyFragmentSampleMaskTestBeforeSampleCounting;
            
            public vulkan.VkBool32 depthStencilSwizzleOneSupport;
            
            public vulkan.VkBool32 polygonModePointSize;
            
            public vulkan.VkBool32 nonStrictSinglePixelWideLinesUseParallelogram;
            
            public vulkan.VkBool32 nonStrictWideLinesUseParallelogram;
        }
        
        public partial struct VkRenderingAreaInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint viewMask;
            
            public uint colorAttachmentCount;
            
            public vulkan.VkFormat* pColorAttachmentFormats;
            
            public vulkan.VkFormat depthAttachmentFormat;
            
            public vulkan.VkFormat stencilAttachmentFormat;
        }
        
        public partial struct VkImageSubresource2KHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageSubresource imageSubresource;
        }
        
        public partial struct VkDeviceImageSubresourceInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageCreateInfo* pCreateInfo;
            
            public vulkan.VkImageSubresource2KHR* pSubresource;
        }
        
        public partial struct VkSubresourceLayout2KHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSubresourceLayout subresourceLayout;
        }
        
        public partial struct VkPipelineCreateFlags2CreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineCreateFlags2KHR flags;
        }
        
        public readonly partial struct VkPipelineCreateFlags2KHR : IEquatable<VkPipelineCreateFlags2KHR>
        {
            public VkPipelineCreateFlags2KHR(vulkan.VkFlags64 value) => this.Value = value;
            
            public vulkan.VkFlags64 Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineCreateFlags2KHR other && Equals(other);
            
            public bool Equals(VkPipelineCreateFlags2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags64 (vulkan.VkPipelineCreateFlags2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineCreateFlags2KHR (vulkan.VkFlags64 from) => new vulkan.VkPipelineCreateFlags2KHR(from);
            
            public static bool operator ==(VkPipelineCreateFlags2KHR left, VkPipelineCreateFlags2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineCreateFlags2KHR left, VkPipelineCreateFlags2KHR right) => !left.Equals(right);
        }
        
        public partial struct VkBufferUsageFlags2CreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBufferUsageFlags2KHR usage;
        }
        
        public readonly partial struct VkBufferUsageFlags2KHR : IEquatable<VkBufferUsageFlags2KHR>
        {
            public VkBufferUsageFlags2KHR(vulkan.VkFlags64 value) => this.Value = value;
            
            public vulkan.VkFlags64 Value { get; }
            
            public override bool Equals(object obj) => obj is VkBufferUsageFlags2KHR other && Equals(other);
            
            public bool Equals(VkBufferUsageFlags2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags64 (vulkan.VkBufferUsageFlags2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkBufferUsageFlags2KHR (vulkan.VkFlags64 from) => new vulkan.VkBufferUsageFlags2KHR(from);
            
            public static bool operator ==(VkBufferUsageFlags2KHR left, VkBufferUsageFlags2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkBufferUsageFlags2KHR left, VkBufferUsageFlags2KHR right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 rayTracingPositionFetch;
        }
        
        public partial struct VkCooperativeMatrixPropertiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint MSize;
            
            public uint NSize;
            
            public uint KSize;
            
            public vulkan.VkComponentTypeKHR AType;
            
            public vulkan.VkComponentTypeKHR BType;
            
            public vulkan.VkComponentTypeKHR CType;
            
            public vulkan.VkComponentTypeKHR ResultType;
            
            public vulkan.VkBool32 saturatingAccumulation;
            
            public vulkan.VkScopeKHR scope;
        }
        
        public partial struct VkPhysicalDeviceCooperativeMatrixFeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 cooperativeMatrix;
            
            public vulkan.VkBool32 cooperativeMatrixRobustBufferAccess;
        }
        
        public partial struct VkPhysicalDeviceCooperativeMatrixPropertiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkShaderStageFlags cooperativeMatrixSupportedStages;
        }
        
        public partial struct VkDebugReportCallbackCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDebugReportFlagsEXT flags;
            
            public vulkan.PFN_vkDebugReportCallbackEXT pfnCallback;
            
            public void* pUserData;
        }
        
        public readonly partial struct VkDebugReportFlagsEXT : IEquatable<VkDebugReportFlagsEXT>
        {
            public VkDebugReportFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDebugReportFlagsEXT other && Equals(other);
            
            public bool Equals(VkDebugReportFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDebugReportFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDebugReportFlagsEXT (vulkan.VkFlags from) => new vulkan.VkDebugReportFlagsEXT(from);
            
            public static bool operator ==(VkDebugReportFlagsEXT left, VkDebugReportFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDebugReportFlagsEXT left, VkDebugReportFlagsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDebugReportCallbackEXT : IEquatable<PFN_vkDebugReportCallbackEXT>
        {
            public PFN_vkDebugReportCallbackEXT(delegate*unmanaged[Stdcall]<vulkan.VkDebugReportFlagsEXT, vulkan.VkDebugReportObjectTypeEXT, ulong, nuint, int, byte*, byte*, void*, vulkan.VkBool32> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDebugReportFlagsEXT, vulkan.VkDebugReportObjectTypeEXT, ulong, nuint, int, byte*, byte*, void*, vulkan.VkBool32> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDebugReportCallbackEXT other && Equals(other);
            
            public bool Equals(PFN_vkDebugReportCallbackEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDebugReportFlagsEXT, vulkan.VkDebugReportObjectTypeEXT, ulong, nuint, int, byte*, byte*, void*, vulkan.VkBool32> (vulkan.PFN_vkDebugReportCallbackEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDebugReportCallbackEXT (delegate*unmanaged[Stdcall]<vulkan.VkDebugReportFlagsEXT, vulkan.VkDebugReportObjectTypeEXT, ulong, nuint, int, byte*, byte*, void*, vulkan.VkBool32> from) => new vulkan.PFN_vkDebugReportCallbackEXT(from);
            
            public static bool operator ==(PFN_vkDebugReportCallbackEXT left, PFN_vkDebugReportCallbackEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDebugReportCallbackEXT left, PFN_vkDebugReportCallbackEXT right) => !left.Equals(right);
        }
        
        public partial struct VkPipelineRasterizationStateRasterizationOrderAMD
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkRasterizationOrderAMD rasterizationOrder;
        }
        
        public partial struct VkDebugMarkerObjectNameInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDebugReportObjectTypeEXT objectType;
            
            public ulong @object;
            
            public byte* pObjectName;
        }
        
        public partial struct VkDebugMarkerObjectTagInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDebugReportObjectTypeEXT objectType;
            
            public ulong @object;
            
            public ulong tagName;
            
            public nuint tagSize;
            
            public void* pTag;
        }
        
        public unsafe partial struct VkDebugMarkerMarkerInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public byte* pMarkerName;
            
            public fixed float color[4];
        }
        
        public partial struct VkDedicatedAllocationImageCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 dedicatedAllocation;
        }
        
        public partial struct VkDedicatedAllocationBufferCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 dedicatedAllocation;
        }
        
        public partial struct VkDedicatedAllocationMemoryAllocateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImage image;
            
            public vulkan.VkBuffer buffer;
        }
        
        public partial struct VkPhysicalDeviceTransformFeedbackFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 transformFeedback;
            
            public vulkan.VkBool32 geometryStreams;
        }
        
        public partial struct VkPhysicalDeviceTransformFeedbackPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxTransformFeedbackStreams;
            
            public uint maxTransformFeedbackBuffers;
            
            public vulkan.VkDeviceSize maxTransformFeedbackBufferSize;
            
            public uint maxTransformFeedbackStreamDataSize;
            
            public uint maxTransformFeedbackBufferDataSize;
            
            public uint maxTransformFeedbackBufferDataStride;
            
            public vulkan.VkBool32 transformFeedbackQueries;
            
            public vulkan.VkBool32 transformFeedbackStreamsLinesTriangles;
            
            public vulkan.VkBool32 transformFeedbackRasterizationStreamSelect;
            
            public vulkan.VkBool32 transformFeedbackDraw;
        }
        
        public partial struct VkPipelineRasterizationStateStreamCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineRasterizationStateStreamCreateFlagsEXT flags;
            
            public uint rasterizationStream;
        }
        
        public readonly partial struct VkPipelineRasterizationStateStreamCreateFlagsEXT : IEquatable<VkPipelineRasterizationStateStreamCreateFlagsEXT>
        {
            public VkPipelineRasterizationStateStreamCreateFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineRasterizationStateStreamCreateFlagsEXT other && Equals(other);
            
            public bool Equals(VkPipelineRasterizationStateStreamCreateFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineRasterizationStateStreamCreateFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineRasterizationStateStreamCreateFlagsEXT (vulkan.VkFlags from) => new vulkan.VkPipelineRasterizationStateStreamCreateFlagsEXT(from);
            
            public static bool operator ==(VkPipelineRasterizationStateStreamCreateFlagsEXT left, VkPipelineRasterizationStateStreamCreateFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineRasterizationStateStreamCreateFlagsEXT left, VkPipelineRasterizationStateStreamCreateFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkCuModuleCreateInfoNVX
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public nuint dataSize;
            
            public void* pData;
        }
        
        public partial struct VkCuFunctionCreateInfoNVX
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkCuModuleNVX module;
            
            public byte* pName;
        }
        
        public readonly partial struct VkCuModuleNVX : IEquatable<VkCuModuleNVX>
        {
            public VkCuModuleNVX(vulkan.VkCuModuleNVX_T value) => this.Value = value;
            
            public vulkan.VkCuModuleNVX_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkCuModuleNVX other && Equals(other);
            
            public bool Equals(VkCuModuleNVX other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkCuModuleNVX_T (vulkan.VkCuModuleNVX from) => from.Value;
            
            public static implicit operator vulkan.VkCuModuleNVX (vulkan.VkCuModuleNVX_T from) => new vulkan.VkCuModuleNVX(from);
            
            public static bool operator ==(VkCuModuleNVX left, VkCuModuleNVX right) => left.Equals(right);
            
            public static bool operator !=(VkCuModuleNVX left, VkCuModuleNVX right) => !left.Equals(right);
        }
        
        public partial struct VkCuLaunchInfoNVX
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkCuFunctionNVX function;
            
            public uint gridDimX;
            
            public uint gridDimY;
            
            public uint gridDimZ;
            
            public uint blockDimX;
            
            public uint blockDimY;
            
            public uint blockDimZ;
            
            public uint sharedMemBytes;
            
            public nuint paramCount;
            
            public void** pParams;
            
            public nuint extraCount;
            
            public void** pExtras;
        }
        
        public readonly partial struct VkCuFunctionNVX : IEquatable<VkCuFunctionNVX>
        {
            public VkCuFunctionNVX(vulkan.VkCuFunctionNVX_T value) => this.Value = value;
            
            public vulkan.VkCuFunctionNVX_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkCuFunctionNVX other && Equals(other);
            
            public bool Equals(VkCuFunctionNVX other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkCuFunctionNVX_T (vulkan.VkCuFunctionNVX from) => from.Value;
            
            public static implicit operator vulkan.VkCuFunctionNVX (vulkan.VkCuFunctionNVX_T from) => new vulkan.VkCuFunctionNVX(from);
            
            public static bool operator ==(VkCuFunctionNVX left, VkCuFunctionNVX right) => left.Equals(right);
            
            public static bool operator !=(VkCuFunctionNVX left, VkCuFunctionNVX right) => !left.Equals(right);
        }
        
        public partial struct VkImageViewHandleInfoNVX
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageView imageView;
            
            public vulkan.VkDescriptorType descriptorType;
            
            public vulkan.VkSampler sampler;
        }
        
        public partial struct VkImageViewAddressPropertiesNVX
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceAddress deviceAddress;
            
            public vulkan.VkDeviceSize size;
        }
        
        public partial struct VkTextureLODGatherFormatPropertiesAMD
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 supportsTextureGatherLODBiasAMD;
        }
        
        public partial struct VkShaderResourceUsageAMD
        {
            public uint numUsedVgprs;
            
            public uint numUsedSgprs;
            
            public uint ldsSizePerLocalWorkGroup;
            
            public nuint ldsUsageSizeInBytes;
            
            public nuint scratchMemUsageInBytes;
        }
        
        public unsafe partial struct VkShaderStatisticsInfoAMD
        {
            public vulkan.VkShaderStageFlags shaderStageMask;
            
            public vulkan.VkShaderResourceUsageAMD resourceUsage;
            
            public uint numPhysicalVgprs;
            
            public uint numPhysicalSgprs;
            
            public uint numAvailableVgprs;
            
            public uint numAvailableSgprs;
            
            public fixed uint computeWorkGroupSize[3];
        }
        
        public partial struct VkPhysicalDeviceCornerSampledImageFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 cornerSampledImage;
        }
        
        public partial struct VkExternalImageFormatPropertiesNV
        {
            public vulkan.VkImageFormatProperties imageFormatProperties;
            
            public vulkan.VkExternalMemoryFeatureFlagsNV externalMemoryFeatures;
            
            public vulkan.VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes;
            
            public vulkan.VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes;
        }
        
        public readonly partial struct VkExternalMemoryFeatureFlagsNV : IEquatable<VkExternalMemoryFeatureFlagsNV>
        {
            public VkExternalMemoryFeatureFlagsNV(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalMemoryFeatureFlagsNV other && Equals(other);
            
            public bool Equals(VkExternalMemoryFeatureFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkExternalMemoryFeatureFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkExternalMemoryFeatureFlagsNV (vulkan.VkFlags from) => new vulkan.VkExternalMemoryFeatureFlagsNV(from);
            
            public static bool operator ==(VkExternalMemoryFeatureFlagsNV left, VkExternalMemoryFeatureFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkExternalMemoryFeatureFlagsNV left, VkExternalMemoryFeatureFlagsNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalMemoryHandleTypeFlagsNV : IEquatable<VkExternalMemoryHandleTypeFlagsNV>
        {
            public VkExternalMemoryHandleTypeFlagsNV(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalMemoryHandleTypeFlagsNV other && Equals(other);
            
            public bool Equals(VkExternalMemoryHandleTypeFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkExternalMemoryHandleTypeFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkExternalMemoryHandleTypeFlagsNV (vulkan.VkFlags from) => new vulkan.VkExternalMemoryHandleTypeFlagsNV(from);
            
            public static bool operator ==(VkExternalMemoryHandleTypeFlagsNV left, VkExternalMemoryHandleTypeFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkExternalMemoryHandleTypeFlagsNV left, VkExternalMemoryHandleTypeFlagsNV right) => !left.Equals(right);
        }
        
        public partial struct VkExternalMemoryImageCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalMemoryHandleTypeFlagsNV handleTypes;
        }
        
        public partial struct VkExportMemoryAllocateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalMemoryHandleTypeFlagsNV handleTypes;
        }
        
        public partial struct VkValidationFlagsEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint disabledValidationCheckCount;
            
            public vulkan.VkValidationCheckEXT* pDisabledValidationChecks;
        }
        
        public partial struct VkImageViewASTCDecodeModeEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFormat decodeMode;
        }
        
        public partial struct VkPhysicalDeviceASTCDecodeFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 decodeModeSharedExponent;
        }
        
        public partial struct VkPhysicalDevicePipelineRobustnessFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 pipelineRobustness;
        }
        
        public partial struct VkPhysicalDevicePipelineRobustnessPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessStorageBuffers;
            
            public vulkan.VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessUniformBuffers;
            
            public vulkan.VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessVertexInputs;
            
            public vulkan.VkPipelineRobustnessImageBehaviorEXT defaultRobustnessImages;
        }
        
        public partial struct VkPipelineRobustnessCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineRobustnessBufferBehaviorEXT storageBuffers;
            
            public vulkan.VkPipelineRobustnessBufferBehaviorEXT uniformBuffers;
            
            public vulkan.VkPipelineRobustnessBufferBehaviorEXT vertexInputs;
            
            public vulkan.VkPipelineRobustnessImageBehaviorEXT images;
        }
        
        public partial struct VkConditionalRenderingBeginInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBuffer buffer;
            
            public vulkan.VkDeviceSize offset;
            
            public vulkan.VkConditionalRenderingFlagsEXT flags;
        }
        
        public readonly partial struct VkConditionalRenderingFlagsEXT : IEquatable<VkConditionalRenderingFlagsEXT>
        {
            public VkConditionalRenderingFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkConditionalRenderingFlagsEXT other && Equals(other);
            
            public bool Equals(VkConditionalRenderingFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkConditionalRenderingFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkConditionalRenderingFlagsEXT (vulkan.VkFlags from) => new vulkan.VkConditionalRenderingFlagsEXT(from);
            
            public static bool operator ==(VkConditionalRenderingFlagsEXT left, VkConditionalRenderingFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkConditionalRenderingFlagsEXT left, VkConditionalRenderingFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceConditionalRenderingFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 conditionalRendering;
            
            public vulkan.VkBool32 inheritedConditionalRendering;
        }
        
        public partial struct VkCommandBufferInheritanceConditionalRenderingInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 conditionalRenderingEnable;
        }
        
        public partial struct VkViewportWScalingNV
        {
            public float xcoeff;
            
            public float ycoeff;
        }
        
        public partial struct VkPipelineViewportWScalingStateCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 viewportWScalingEnable;
            
            public uint viewportCount;
            
            public vulkan.VkViewportWScalingNV* pViewportWScalings;
        }
        
        public partial struct VkSurfaceCapabilities2EXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint minImageCount;
            
            public uint maxImageCount;
            
            public vulkan.VkExtent2D currentExtent;
            
            public vulkan.VkExtent2D minImageExtent;
            
            public vulkan.VkExtent2D maxImageExtent;
            
            public uint maxImageArrayLayers;
            
            public vulkan.VkSurfaceTransformFlagsKHR supportedTransforms;
            
            public vulkan.VkSurfaceTransformFlagBitsKHR currentTransform;
            
            public vulkan.VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
            
            public vulkan.VkImageUsageFlags supportedUsageFlags;
            
            public vulkan.VkSurfaceCounterFlagsEXT supportedSurfaceCounters;
        }
        
        public readonly partial struct VkSurfaceCounterFlagsEXT : IEquatable<VkSurfaceCounterFlagsEXT>
        {
            public VkSurfaceCounterFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkSurfaceCounterFlagsEXT other && Equals(other);
            
            public bool Equals(VkSurfaceCounterFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkSurfaceCounterFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkSurfaceCounterFlagsEXT (vulkan.VkFlags from) => new vulkan.VkSurfaceCounterFlagsEXT(from);
            
            public static bool operator ==(VkSurfaceCounterFlagsEXT left, VkSurfaceCounterFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkSurfaceCounterFlagsEXT left, VkSurfaceCounterFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkDisplayPowerInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDisplayPowerStateEXT powerState;
        }
        
        public partial struct VkDeviceEventInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceEventTypeEXT deviceEvent;
        }
        
        public partial struct VkDisplayEventInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDisplayEventTypeEXT displayEvent;
        }
        
        public partial struct VkSwapchainCounterCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSurfaceCounterFlagsEXT surfaceCounters;
        }
        
        public partial struct VkRefreshCycleDurationGOOGLE
        {
            public ulong refreshDuration;
        }
        
        public partial struct VkPastPresentationTimingGOOGLE
        {
            public uint presentID;
            
            public ulong desiredPresentTime;
            
            public ulong actualPresentTime;
            
            public ulong earliestPresentTime;
            
            public ulong presentMargin;
        }
        
        public partial struct VkPresentTimeGOOGLE
        {
            public uint presentID;
            
            public ulong desiredPresentTime;
        }
        
        public partial struct VkPresentTimesInfoGOOGLE
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint swapchainCount;
            
            public vulkan.VkPresentTimeGOOGLE* pTimes;
        }
        
        public partial struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 perViewPositionAllComponents;
        }
        
        public partial struct VkViewportSwizzleNV
        {
            public vulkan.VkViewportCoordinateSwizzleNV x;
            
            public vulkan.VkViewportCoordinateSwizzleNV y;
            
            public vulkan.VkViewportCoordinateSwizzleNV z;
            
            public vulkan.VkViewportCoordinateSwizzleNV w;
        }
        
        public partial struct VkPipelineViewportSwizzleStateCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineViewportSwizzleStateCreateFlagsNV flags;
            
            public uint viewportCount;
            
            public vulkan.VkViewportSwizzleNV* pViewportSwizzles;
        }
        
        public readonly partial struct VkPipelineViewportSwizzleStateCreateFlagsNV : IEquatable<VkPipelineViewportSwizzleStateCreateFlagsNV>
        {
            public VkPipelineViewportSwizzleStateCreateFlagsNV(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineViewportSwizzleStateCreateFlagsNV other && Equals(other);
            
            public bool Equals(VkPipelineViewportSwizzleStateCreateFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineViewportSwizzleStateCreateFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineViewportSwizzleStateCreateFlagsNV (vulkan.VkFlags from) => new vulkan.VkPipelineViewportSwizzleStateCreateFlagsNV(from);
            
            public static bool operator ==(VkPipelineViewportSwizzleStateCreateFlagsNV left, VkPipelineViewportSwizzleStateCreateFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineViewportSwizzleStateCreateFlagsNV left, VkPipelineViewportSwizzleStateCreateFlagsNV right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceDiscardRectanglePropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxDiscardRectangles;
        }
        
        public partial struct VkPipelineDiscardRectangleStateCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineDiscardRectangleStateCreateFlagsEXT flags;
            
            public vulkan.VkDiscardRectangleModeEXT discardRectangleMode;
            
            public uint discardRectangleCount;
            
            public vulkan.VkRect2D* pDiscardRectangles;
        }
        
        public readonly partial struct VkPipelineDiscardRectangleStateCreateFlagsEXT : IEquatable<VkPipelineDiscardRectangleStateCreateFlagsEXT>
        {
            public VkPipelineDiscardRectangleStateCreateFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineDiscardRectangleStateCreateFlagsEXT other && Equals(other);
            
            public bool Equals(VkPipelineDiscardRectangleStateCreateFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineDiscardRectangleStateCreateFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineDiscardRectangleStateCreateFlagsEXT (vulkan.VkFlags from) => new vulkan.VkPipelineDiscardRectangleStateCreateFlagsEXT(from);
            
            public static bool operator ==(VkPipelineDiscardRectangleStateCreateFlagsEXT left, VkPipelineDiscardRectangleStateCreateFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineDiscardRectangleStateCreateFlagsEXT left, VkPipelineDiscardRectangleStateCreateFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public float primitiveOverestimationSize;
            
            public float maxExtraPrimitiveOverestimationSize;
            
            public float extraPrimitiveOverestimationSizeGranularity;
            
            public vulkan.VkBool32 primitiveUnderestimation;
            
            public vulkan.VkBool32 conservativePointAndLineRasterization;
            
            public vulkan.VkBool32 degenerateTrianglesRasterized;
            
            public vulkan.VkBool32 degenerateLinesRasterized;
            
            public vulkan.VkBool32 fullyCoveredFragmentShaderInputVariable;
            
            public vulkan.VkBool32 conservativeRasterizationPostDepthCoverage;
        }
        
        public partial struct VkPipelineRasterizationConservativeStateCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineRasterizationConservativeStateCreateFlagsEXT flags;
            
            public vulkan.VkConservativeRasterizationModeEXT conservativeRasterizationMode;
            
            public float extraPrimitiveOverestimationSize;
        }
        
        public readonly partial struct VkPipelineRasterizationConservativeStateCreateFlagsEXT : IEquatable<VkPipelineRasterizationConservativeStateCreateFlagsEXT>
        {
            public VkPipelineRasterizationConservativeStateCreateFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineRasterizationConservativeStateCreateFlagsEXT other && Equals(other);
            
            public bool Equals(VkPipelineRasterizationConservativeStateCreateFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineRasterizationConservativeStateCreateFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineRasterizationConservativeStateCreateFlagsEXT (vulkan.VkFlags from) => new vulkan.VkPipelineRasterizationConservativeStateCreateFlagsEXT(from);
            
            public static bool operator ==(VkPipelineRasterizationConservativeStateCreateFlagsEXT left, VkPipelineRasterizationConservativeStateCreateFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineRasterizationConservativeStateCreateFlagsEXT left, VkPipelineRasterizationConservativeStateCreateFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceDepthClipEnableFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 depthClipEnable;
        }
        
        public partial struct VkPipelineRasterizationDepthClipStateCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags;
            
            public vulkan.VkBool32 depthClipEnable;
        }
        
        public readonly partial struct VkPipelineRasterizationDepthClipStateCreateFlagsEXT : IEquatable<VkPipelineRasterizationDepthClipStateCreateFlagsEXT>
        {
            public VkPipelineRasterizationDepthClipStateCreateFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineRasterizationDepthClipStateCreateFlagsEXT other && Equals(other);
            
            public bool Equals(VkPipelineRasterizationDepthClipStateCreateFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineRasterizationDepthClipStateCreateFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineRasterizationDepthClipStateCreateFlagsEXT (vulkan.VkFlags from) => new vulkan.VkPipelineRasterizationDepthClipStateCreateFlagsEXT(from);
            
            public static bool operator ==(VkPipelineRasterizationDepthClipStateCreateFlagsEXT left, VkPipelineRasterizationDepthClipStateCreateFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineRasterizationDepthClipStateCreateFlagsEXT left, VkPipelineRasterizationDepthClipStateCreateFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkXYColorEXT
        {
            public float x;
            
            public float y;
        }
        
        public partial struct VkHdrMetadataEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkXYColorEXT displayPrimaryRed;
            
            public vulkan.VkXYColorEXT displayPrimaryGreen;
            
            public vulkan.VkXYColorEXT displayPrimaryBlue;
            
            public vulkan.VkXYColorEXT whitePoint;
            
            public float maxLuminance;
            
            public float minLuminance;
            
            public float maxContentLightLevel;
            
            public float maxFrameAverageLightLevel;
        }
        
        public unsafe partial struct VkDebugUtilsLabelEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public byte* pLabelName;
            
            public fixed float color[4];
        }
        
        public partial struct VkDebugUtilsObjectNameInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkObjectType objectType;
            
            public ulong objectHandle;
            
            public byte* pObjectName;
        }
        
        public partial struct VkDebugUtilsMessengerCallbackDataEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDebugUtilsMessengerCallbackDataFlagsEXT flags;
            
            public byte* pMessageIdName;
            
            public int messageIdNumber;
            
            public byte* pMessage;
            
            public uint queueLabelCount;
            
            public vulkan.VkDebugUtilsLabelEXT* pQueueLabels;
            
            public uint cmdBufLabelCount;
            
            public vulkan.VkDebugUtilsLabelEXT* pCmdBufLabels;
            
            public uint objectCount;
            
            public vulkan.VkDebugUtilsObjectNameInfoEXT* pObjects;
        }
        
        public readonly partial struct VkDebugUtilsMessengerCallbackDataFlagsEXT : IEquatable<VkDebugUtilsMessengerCallbackDataFlagsEXT>
        {
            public VkDebugUtilsMessengerCallbackDataFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDebugUtilsMessengerCallbackDataFlagsEXT other && Equals(other);
            
            public bool Equals(VkDebugUtilsMessengerCallbackDataFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDebugUtilsMessengerCallbackDataFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDebugUtilsMessengerCallbackDataFlagsEXT (vulkan.VkFlags from) => new vulkan.VkDebugUtilsMessengerCallbackDataFlagsEXT(from);
            
            public static bool operator ==(VkDebugUtilsMessengerCallbackDataFlagsEXT left, VkDebugUtilsMessengerCallbackDataFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDebugUtilsMessengerCallbackDataFlagsEXT left, VkDebugUtilsMessengerCallbackDataFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkDebugUtilsMessengerCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDebugUtilsMessengerCreateFlagsEXT flags;
            
            public vulkan.VkDebugUtilsMessageSeverityFlagsEXT messageSeverity;
            
            public vulkan.VkDebugUtilsMessageTypeFlagsEXT messageType;
            
            public vulkan.PFN_vkDebugUtilsMessengerCallbackEXT pfnUserCallback;
            
            public void* pUserData;
        }
        
        public readonly partial struct VkDebugUtilsMessengerCreateFlagsEXT : IEquatable<VkDebugUtilsMessengerCreateFlagsEXT>
        {
            public VkDebugUtilsMessengerCreateFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDebugUtilsMessengerCreateFlagsEXT other && Equals(other);
            
            public bool Equals(VkDebugUtilsMessengerCreateFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDebugUtilsMessengerCreateFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDebugUtilsMessengerCreateFlagsEXT (vulkan.VkFlags from) => new vulkan.VkDebugUtilsMessengerCreateFlagsEXT(from);
            
            public static bool operator ==(VkDebugUtilsMessengerCreateFlagsEXT left, VkDebugUtilsMessengerCreateFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDebugUtilsMessengerCreateFlagsEXT left, VkDebugUtilsMessengerCreateFlagsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDebugUtilsMessageSeverityFlagsEXT : IEquatable<VkDebugUtilsMessageSeverityFlagsEXT>
        {
            public VkDebugUtilsMessageSeverityFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDebugUtilsMessageSeverityFlagsEXT other && Equals(other);
            
            public bool Equals(VkDebugUtilsMessageSeverityFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDebugUtilsMessageSeverityFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDebugUtilsMessageSeverityFlagsEXT (vulkan.VkFlags from) => new vulkan.VkDebugUtilsMessageSeverityFlagsEXT(from);
            
            public static bool operator ==(VkDebugUtilsMessageSeverityFlagsEXT left, VkDebugUtilsMessageSeverityFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDebugUtilsMessageSeverityFlagsEXT left, VkDebugUtilsMessageSeverityFlagsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDebugUtilsMessageTypeFlagsEXT : IEquatable<VkDebugUtilsMessageTypeFlagsEXT>
        {
            public VkDebugUtilsMessageTypeFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDebugUtilsMessageTypeFlagsEXT other && Equals(other);
            
            public bool Equals(VkDebugUtilsMessageTypeFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDebugUtilsMessageTypeFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDebugUtilsMessageTypeFlagsEXT (vulkan.VkFlags from) => new vulkan.VkDebugUtilsMessageTypeFlagsEXT(from);
            
            public static bool operator ==(VkDebugUtilsMessageTypeFlagsEXT left, VkDebugUtilsMessageTypeFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDebugUtilsMessageTypeFlagsEXT left, VkDebugUtilsMessageTypeFlagsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDebugUtilsMessengerCallbackEXT : IEquatable<PFN_vkDebugUtilsMessengerCallbackEXT>
        {
            public PFN_vkDebugUtilsMessengerCallbackEXT(delegate*unmanaged[Stdcall]<vulkan.VkDebugUtilsMessageSeverityFlagBitsEXT, vulkan.VkDebugUtilsMessageTypeFlagsEXT, vulkan.VkDebugUtilsMessengerCallbackDataEXT*, void*, vulkan.VkBool32> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDebugUtilsMessageSeverityFlagBitsEXT, vulkan.VkDebugUtilsMessageTypeFlagsEXT, vulkan.VkDebugUtilsMessengerCallbackDataEXT*, void*, vulkan.VkBool32> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDebugUtilsMessengerCallbackEXT other && Equals(other);
            
            public bool Equals(PFN_vkDebugUtilsMessengerCallbackEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDebugUtilsMessageSeverityFlagBitsEXT, vulkan.VkDebugUtilsMessageTypeFlagsEXT, vulkan.VkDebugUtilsMessengerCallbackDataEXT*, void*, vulkan.VkBool32> (vulkan.PFN_vkDebugUtilsMessengerCallbackEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDebugUtilsMessengerCallbackEXT (delegate*unmanaged[Stdcall]<vulkan.VkDebugUtilsMessageSeverityFlagBitsEXT, vulkan.VkDebugUtilsMessageTypeFlagsEXT, vulkan.VkDebugUtilsMessengerCallbackDataEXT*, void*, vulkan.VkBool32> from) => new vulkan.PFN_vkDebugUtilsMessengerCallbackEXT(from);
            
            public static bool operator ==(PFN_vkDebugUtilsMessengerCallbackEXT left, PFN_vkDebugUtilsMessengerCallbackEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDebugUtilsMessengerCallbackEXT left, PFN_vkDebugUtilsMessengerCallbackEXT right) => !left.Equals(right);
        }
        
        public partial struct VkDebugUtilsObjectTagInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkObjectType objectType;
            
            public ulong objectHandle;
            
            public ulong tagName;
            
            public nuint tagSize;
            
            public void* pTag;
        }
        
        public partial struct VkSampleLocationEXT
        {
            public float x;
            
            public float y;
        }
        
        public partial struct VkSampleLocationsInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSampleCountFlagBits sampleLocationsPerPixel;
            
            public vulkan.VkExtent2D sampleLocationGridSize;
            
            public uint sampleLocationsCount;
            
            public vulkan.VkSampleLocationEXT* pSampleLocations;
        }
        
        public partial struct VkAttachmentSampleLocationsEXT
        {
            public uint attachmentIndex;
            
            public vulkan.VkSampleLocationsInfoEXT sampleLocationsInfo;
        }
        
        public partial struct VkSubpassSampleLocationsEXT
        {
            public uint subpassIndex;
            
            public vulkan.VkSampleLocationsInfoEXT sampleLocationsInfo;
        }
        
        public partial struct VkRenderPassSampleLocationsBeginInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint attachmentInitialSampleLocationsCount;
            
            public vulkan.VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations;
            
            public uint postSubpassSampleLocationsCount;
            
            public vulkan.VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations;
        }
        
        public partial struct VkPipelineSampleLocationsStateCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 sampleLocationsEnable;
            
            public vulkan.VkSampleLocationsInfoEXT sampleLocationsInfo;
        }
        
        public unsafe partial struct VkPhysicalDeviceSampleLocationsPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSampleCountFlags sampleLocationSampleCounts;
            
            public vulkan.VkExtent2D maxSampleLocationGridSize;
            
            public fixed float sampleLocationCoordinateRange[2];
            
            public uint sampleLocationSubPixelBits;
            
            public vulkan.VkBool32 variableSampleLocations;
        }
        
        public partial struct VkMultisamplePropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExtent2D maxSampleLocationGridSize;
        }
        
        public partial struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 advancedBlendCoherentOperations;
        }
        
        public partial struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint advancedBlendMaxColorAttachments;
            
            public vulkan.VkBool32 advancedBlendIndependentBlend;
            
            public vulkan.VkBool32 advancedBlendNonPremultipliedSrcColor;
            
            public vulkan.VkBool32 advancedBlendNonPremultipliedDstColor;
            
            public vulkan.VkBool32 advancedBlendCorrelatedOverlap;
            
            public vulkan.VkBool32 advancedBlendAllOperations;
        }
        
        public partial struct VkPipelineColorBlendAdvancedStateCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 srcPremultiplied;
            
            public vulkan.VkBool32 dstPremultiplied;
            
            public vulkan.VkBlendOverlapEXT blendOverlap;
        }
        
        public partial struct VkPipelineCoverageToColorStateCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineCoverageToColorStateCreateFlagsNV flags;
            
            public vulkan.VkBool32 coverageToColorEnable;
            
            public uint coverageToColorLocation;
        }
        
        public readonly partial struct VkPipelineCoverageToColorStateCreateFlagsNV : IEquatable<VkPipelineCoverageToColorStateCreateFlagsNV>
        {
            public VkPipelineCoverageToColorStateCreateFlagsNV(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineCoverageToColorStateCreateFlagsNV other && Equals(other);
            
            public bool Equals(VkPipelineCoverageToColorStateCreateFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineCoverageToColorStateCreateFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineCoverageToColorStateCreateFlagsNV (vulkan.VkFlags from) => new vulkan.VkPipelineCoverageToColorStateCreateFlagsNV(from);
            
            public static bool operator ==(VkPipelineCoverageToColorStateCreateFlagsNV left, VkPipelineCoverageToColorStateCreateFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineCoverageToColorStateCreateFlagsNV left, VkPipelineCoverageToColorStateCreateFlagsNV right) => !left.Equals(right);
        }
        
        public partial struct VkPipelineCoverageModulationStateCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineCoverageModulationStateCreateFlagsNV flags;
            
            public vulkan.VkCoverageModulationModeNV coverageModulationMode;
            
            public vulkan.VkBool32 coverageModulationTableEnable;
            
            public uint coverageModulationTableCount;
            
            public float* pCoverageModulationTable;
        }
        
        public readonly partial struct VkPipelineCoverageModulationStateCreateFlagsNV : IEquatable<VkPipelineCoverageModulationStateCreateFlagsNV>
        {
            public VkPipelineCoverageModulationStateCreateFlagsNV(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineCoverageModulationStateCreateFlagsNV other && Equals(other);
            
            public bool Equals(VkPipelineCoverageModulationStateCreateFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineCoverageModulationStateCreateFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineCoverageModulationStateCreateFlagsNV (vulkan.VkFlags from) => new vulkan.VkPipelineCoverageModulationStateCreateFlagsNV(from);
            
            public static bool operator ==(VkPipelineCoverageModulationStateCreateFlagsNV left, VkPipelineCoverageModulationStateCreateFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineCoverageModulationStateCreateFlagsNV left, VkPipelineCoverageModulationStateCreateFlagsNV right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint shaderSMCount;
            
            public uint shaderWarpsPerSM;
        }
        
        public partial struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderSMBuiltins;
        }
        
        public partial struct VkDrmFormatModifierPropertiesEXT
        {
            public ulong drmFormatModifier;
            
            public uint drmFormatModifierPlaneCount;
            
            public vulkan.VkFormatFeatureFlags drmFormatModifierTilingFeatures;
        }
        
        public partial struct VkDrmFormatModifierPropertiesListEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint drmFormatModifierCount;
            
            public vulkan.VkDrmFormatModifierPropertiesEXT* pDrmFormatModifierProperties;
        }
        
        public partial struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public ulong drmFormatModifier;
            
            public vulkan.VkSharingMode sharingMode;
            
            public uint queueFamilyIndexCount;
            
            public uint* pQueueFamilyIndices;
        }
        
        public partial struct VkImageDrmFormatModifierListCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint drmFormatModifierCount;
            
            public ulong* pDrmFormatModifiers;
        }
        
        public partial struct VkImageDrmFormatModifierExplicitCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public ulong drmFormatModifier;
            
            public uint drmFormatModifierPlaneCount;
            
            public vulkan.VkSubresourceLayout* pPlaneLayouts;
        }
        
        public partial struct VkImageDrmFormatModifierPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public ulong drmFormatModifier;
        }
        
        public partial struct VkDrmFormatModifierProperties2EXT
        {
            public ulong drmFormatModifier;
            
            public uint drmFormatModifierPlaneCount;
            
            public vulkan.VkFormatFeatureFlags2 drmFormatModifierTilingFeatures;
        }
        
        public partial struct VkDrmFormatModifierPropertiesList2EXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint drmFormatModifierCount;
            
            public vulkan.VkDrmFormatModifierProperties2EXT* pDrmFormatModifierProperties;
        }
        
        public partial struct VkValidationCacheCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkValidationCacheCreateFlagsEXT flags;
            
            public nuint initialDataSize;
            
            public void* pInitialData;
        }
        
        public readonly partial struct VkValidationCacheCreateFlagsEXT : IEquatable<VkValidationCacheCreateFlagsEXT>
        {
            public VkValidationCacheCreateFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkValidationCacheCreateFlagsEXT other && Equals(other);
            
            public bool Equals(VkValidationCacheCreateFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkValidationCacheCreateFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkValidationCacheCreateFlagsEXT (vulkan.VkFlags from) => new vulkan.VkValidationCacheCreateFlagsEXT(from);
            
            public static bool operator ==(VkValidationCacheCreateFlagsEXT left, VkValidationCacheCreateFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkValidationCacheCreateFlagsEXT left, VkValidationCacheCreateFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkShaderModuleValidationCacheCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkValidationCacheEXT validationCache;
        }
        
        public readonly partial struct VkValidationCacheEXT : IEquatable<VkValidationCacheEXT>
        {
            public VkValidationCacheEXT(vulkan.VkValidationCacheEXT_T value) => this.Value = value;
            
            public vulkan.VkValidationCacheEXT_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkValidationCacheEXT other && Equals(other);
            
            public bool Equals(VkValidationCacheEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkValidationCacheEXT_T (vulkan.VkValidationCacheEXT from) => from.Value;
            
            public static implicit operator vulkan.VkValidationCacheEXT (vulkan.VkValidationCacheEXT_T from) => new vulkan.VkValidationCacheEXT(from);
            
            public static bool operator ==(VkValidationCacheEXT left, VkValidationCacheEXT right) => left.Equals(right);
            
            public static bool operator !=(VkValidationCacheEXT left, VkValidationCacheEXT right) => !left.Equals(right);
        }
        
        public partial struct VkShadingRatePaletteNV
        {
            public uint shadingRatePaletteEntryCount;
            
            public vulkan.VkShadingRatePaletteEntryNV* pShadingRatePaletteEntries;
        }
        
        public partial struct VkPipelineViewportShadingRateImageStateCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shadingRateImageEnable;
            
            public uint viewportCount;
            
            public vulkan.VkShadingRatePaletteNV* pShadingRatePalettes;
        }
        
        public partial struct VkPhysicalDeviceShadingRateImageFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shadingRateImage;
            
            public vulkan.VkBool32 shadingRateCoarseSampleOrder;
        }
        
        public partial struct VkPhysicalDeviceShadingRateImagePropertiesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExtent2D shadingRateTexelSize;
            
            public uint shadingRatePaletteSize;
            
            public uint shadingRateMaxCoarseSamples;
        }
        
        public partial struct VkCoarseSampleLocationNV
        {
            public uint pixelX;
            
            public uint pixelY;
            
            public uint sample;
        }
        
        public partial struct VkCoarseSampleOrderCustomNV
        {
            public vulkan.VkShadingRatePaletteEntryNV shadingRate;
            
            public uint sampleCount;
            
            public uint sampleLocationCount;
            
            public vulkan.VkCoarseSampleLocationNV* pSampleLocations;
        }
        
        public partial struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkCoarseSampleOrderTypeNV sampleOrderType;
            
            public uint customSampleOrderCount;
            
            public vulkan.VkCoarseSampleOrderCustomNV* pCustomSampleOrders;
        }
        
        public partial struct VkRayTracingShaderGroupCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkRayTracingShaderGroupTypeKHR type;
            
            public uint generalShader;
            
            public uint closestHitShader;
            
            public uint anyHitShader;
            
            public uint intersectionShader;
        }
        
        public partial struct VkRayTracingPipelineCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineCreateFlags flags;
            
            public uint stageCount;
            
            public vulkan.VkPipelineShaderStageCreateInfo* pStages;
            
            public uint groupCount;
            
            public vulkan.VkRayTracingShaderGroupCreateInfoNV* pGroups;
            
            public uint maxRecursionDepth;
            
            public vulkan.VkPipelineLayout layout;
            
            public vulkan.VkPipeline basePipelineHandle;
            
            public int basePipelineIndex;
        }
        
        public partial struct VkGeometryTrianglesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBuffer vertexData;
            
            public vulkan.VkDeviceSize vertexOffset;
            
            public uint vertexCount;
            
            public vulkan.VkDeviceSize vertexStride;
            
            public vulkan.VkFormat vertexFormat;
            
            public vulkan.VkBuffer indexData;
            
            public vulkan.VkDeviceSize indexOffset;
            
            public uint indexCount;
            
            public vulkan.VkIndexType indexType;
            
            public vulkan.VkBuffer transformData;
            
            public vulkan.VkDeviceSize transformOffset;
        }
        
        public partial struct VkGeometryAABBNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBuffer aabbData;
            
            public uint numAABBs;
            
            public uint stride;
            
            public vulkan.VkDeviceSize offset;
        }
        
        public partial struct VkGeometryDataNV
        {
            public vulkan.VkGeometryTrianglesNV triangles;
            
            public vulkan.VkGeometryAABBNV aabbs;
        }
        
        public partial struct VkGeometryNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkGeometryTypeKHR geometryType;
            
            public vulkan.VkGeometryDataNV geometry;
            
            public vulkan.VkGeometryFlagsKHR flags;
        }
        
        public readonly partial struct VkGeometryFlagsKHR : IEquatable<VkGeometryFlagsKHR>
        {
            public VkGeometryFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkGeometryFlagsKHR other && Equals(other);
            
            public bool Equals(VkGeometryFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkGeometryFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkGeometryFlagsKHR (vulkan.VkFlags from) => new vulkan.VkGeometryFlagsKHR(from);
            
            public static bool operator ==(VkGeometryFlagsKHR left, VkGeometryFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkGeometryFlagsKHR left, VkGeometryFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkAccelerationStructureInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAccelerationStructureTypeNV type;
            
            public vulkan.VkBuildAccelerationStructureFlagsNV flags;
            
            public uint instanceCount;
            
            public uint geometryCount;
            
            public vulkan.VkGeometryNV* pGeometries;
        }
        
        public readonly partial struct VkAccelerationStructureTypeNV : IEquatable<VkAccelerationStructureTypeNV>
        {
            public VkAccelerationStructureTypeNV(vulkan.VkAccelerationStructureTypeKHR value) => this.Value = value;
            
            public vulkan.VkAccelerationStructureTypeKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkAccelerationStructureTypeNV other && Equals(other);
            
            public bool Equals(VkAccelerationStructureTypeNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkAccelerationStructureTypeKHR (vulkan.VkAccelerationStructureTypeNV from) => from.Value;
            
            public static implicit operator vulkan.VkAccelerationStructureTypeNV (vulkan.VkAccelerationStructureTypeKHR from) => new vulkan.VkAccelerationStructureTypeNV(from);
            
            public static bool operator ==(VkAccelerationStructureTypeNV left, VkAccelerationStructureTypeNV right) => left.Equals(right);
            
            public static bool operator !=(VkAccelerationStructureTypeNV left, VkAccelerationStructureTypeNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBuildAccelerationStructureFlagsKHR : IEquatable<VkBuildAccelerationStructureFlagsKHR>
        {
            public VkBuildAccelerationStructureFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkBuildAccelerationStructureFlagsKHR other && Equals(other);
            
            public bool Equals(VkBuildAccelerationStructureFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkBuildAccelerationStructureFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkBuildAccelerationStructureFlagsKHR (vulkan.VkFlags from) => new vulkan.VkBuildAccelerationStructureFlagsKHR(from);
            
            public static bool operator ==(VkBuildAccelerationStructureFlagsKHR left, VkBuildAccelerationStructureFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkBuildAccelerationStructureFlagsKHR left, VkBuildAccelerationStructureFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBuildAccelerationStructureFlagsNV : IEquatable<VkBuildAccelerationStructureFlagsNV>
        {
            public VkBuildAccelerationStructureFlagsNV(vulkan.VkBuildAccelerationStructureFlagsKHR value) => this.Value = value;
            
            public vulkan.VkBuildAccelerationStructureFlagsKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkBuildAccelerationStructureFlagsNV other && Equals(other);
            
            public bool Equals(VkBuildAccelerationStructureFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBuildAccelerationStructureFlagsKHR (vulkan.VkBuildAccelerationStructureFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkBuildAccelerationStructureFlagsNV (vulkan.VkBuildAccelerationStructureFlagsKHR from) => new vulkan.VkBuildAccelerationStructureFlagsNV(from);
            
            public static bool operator ==(VkBuildAccelerationStructureFlagsNV left, VkBuildAccelerationStructureFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkBuildAccelerationStructureFlagsNV left, VkBuildAccelerationStructureFlagsNV right) => !left.Equals(right);
        }
        
        public partial struct VkAccelerationStructureCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceSize compactedSize;
            
            public vulkan.VkAccelerationStructureInfoNV info;
        }
        
        public partial struct VkBindAccelerationStructureMemoryInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAccelerationStructureNV accelerationStructure;
            
            public vulkan.VkDeviceMemory memory;
            
            public vulkan.VkDeviceSize memoryOffset;
            
            public uint deviceIndexCount;
            
            public uint* pDeviceIndices;
        }
        
        public readonly partial struct VkAccelerationStructureNV : IEquatable<VkAccelerationStructureNV>
        {
            public VkAccelerationStructureNV(vulkan.VkAccelerationStructureNV_T value) => this.Value = value;
            
            public vulkan.VkAccelerationStructureNV_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkAccelerationStructureNV other && Equals(other);
            
            public bool Equals(VkAccelerationStructureNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkAccelerationStructureNV_T (vulkan.VkAccelerationStructureNV from) => from.Value;
            
            public static implicit operator vulkan.VkAccelerationStructureNV (vulkan.VkAccelerationStructureNV_T from) => new vulkan.VkAccelerationStructureNV(from);
            
            public static bool operator ==(VkAccelerationStructureNV left, VkAccelerationStructureNV right) => left.Equals(right);
            
            public static bool operator !=(VkAccelerationStructureNV left, VkAccelerationStructureNV right) => !left.Equals(right);
        }
        
        public partial struct VkWriteDescriptorSetAccelerationStructureNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint accelerationStructureCount;
            
            public vulkan.VkAccelerationStructureNV* pAccelerationStructures;
        }
        
        public partial struct VkAccelerationStructureMemoryRequirementsInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAccelerationStructureMemoryRequirementsTypeNV type;
            
            public vulkan.VkAccelerationStructureNV accelerationStructure;
        }
        
        public partial struct VkPhysicalDeviceRayTracingPropertiesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint shaderGroupHandleSize;
            
            public uint maxRecursionDepth;
            
            public uint maxShaderGroupStride;
            
            public uint shaderGroupBaseAlignment;
            
            public ulong maxGeometryCount;
            
            public ulong maxInstanceCount;
            
            public ulong maxTriangleCount;
            
            public uint maxDescriptorSetAccelerationStructures;
        }
        
        public partial struct VkTransformMatrixKHR
        {
            public FixedArray3<FixedArray4<float>> matrix;
        }
        
        public partial struct VkAabbPositionsKHR
        {
            public float minX;
            
            public float minY;
            
            public float minZ;
            
            public float maxX;
            
            public float maxY;
            
            public float maxZ;
        }
        
        public partial struct VkAccelerationStructureInstanceKHR
        {
            public vulkan.VkTransformMatrixKHR transform;
            
            private uint __bitfield__1;
            
            public uint instanceCustomIndex
            {
                get
                {
                    return unchecked((uint)((__bitfield__1 >> 0) & 0b111111111111111111111111));
                }
                set
                {
                    __bitfield__1 = (__bitfield__1 & unchecked((uint)0b11111111000000000000000000000000)) | ((((uint)value) & (unchecked((uint)0b111111111111111111111111)) << 0));
                }
            }
            
            public uint mask
            {
                get
                {
                    return unchecked((uint)((__bitfield__1 >> 24) & 0b11111111));
                }
                set
                {
                    __bitfield__1 = (__bitfield__1 & unchecked((uint)0b00000000111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b11111111)) << 24));
                }
            }
            
            private uint __bitfield__4;
            
            public uint instanceShaderBindingTableRecordOffset
            {
                get
                {
                    return unchecked((uint)((__bitfield__4 >> 0) & 0b111111111111111111111111));
                }
                set
                {
                    __bitfield__4 = (__bitfield__4 & unchecked((uint)0b11111111000000000000000000000000)) | ((((uint)value) & (unchecked((uint)0b111111111111111111111111)) << 0));
                }
            }
            
            public vulkan.VkGeometryInstanceFlagsKHR flags
            {
                get
                {
                    return unchecked((vulkan.VkGeometryInstanceFlagsKHR)((__bitfield__4 >> 24) & 0b11111111));
                }
                set
                {
                    __bitfield__4 = (__bitfield__4 & unchecked((uint)0b00000000111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b11111111)) << 24));
                }
            }
            
            public ulong accelerationStructureReference;
        }
        
        public readonly partial struct VkGeometryInstanceFlagsKHR : IEquatable<VkGeometryInstanceFlagsKHR>
        {
            public VkGeometryInstanceFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkGeometryInstanceFlagsKHR other && Equals(other);
            
            public bool Equals(VkGeometryInstanceFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkGeometryInstanceFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkGeometryInstanceFlagsKHR (vulkan.VkFlags from) => new vulkan.VkGeometryInstanceFlagsKHR(from);
            
            public static bool operator ==(VkGeometryInstanceFlagsKHR left, VkGeometryInstanceFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkGeometryInstanceFlagsKHR left, VkGeometryInstanceFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 representativeFragmentTest;
        }
        
        public partial struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 representativeFragmentTestEnable;
        }
        
        public partial struct VkPhysicalDeviceImageViewImageFormatInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageViewType imageViewType;
        }
        
        public partial struct VkFilterCubicImageViewImageFormatPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 filterCubic;
            
            public vulkan.VkBool32 filterCubicMinmax;
        }
        
        public partial struct VkImportMemoryHostPointerInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalMemoryHandleTypeFlagBits handleType;
            
            public void* pHostPointer;
        }
        
        public partial struct VkMemoryHostPointerPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint memoryTypeBits;
        }
        
        public partial struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceSize minImportedHostPointerAlignment;
        }
        
        public partial struct VkPipelineCompilerControlCreateInfoAMD
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineCompilerControlFlagsAMD compilerControlFlags;
        }
        
        public readonly partial struct VkPipelineCompilerControlFlagsAMD : IEquatable<VkPipelineCompilerControlFlagsAMD>
        {
            public VkPipelineCompilerControlFlagsAMD(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineCompilerControlFlagsAMD other && Equals(other);
            
            public bool Equals(VkPipelineCompilerControlFlagsAMD other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineCompilerControlFlagsAMD from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineCompilerControlFlagsAMD (vulkan.VkFlags from) => new vulkan.VkPipelineCompilerControlFlagsAMD(from);
            
            public static bool operator ==(VkPipelineCompilerControlFlagsAMD left, VkPipelineCompilerControlFlagsAMD right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineCompilerControlFlagsAMD left, VkPipelineCompilerControlFlagsAMD right) => !left.Equals(right);
        }
        
        public partial struct VkCalibratedTimestampInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkTimeDomainEXT timeDomain;
        }
        
        public partial struct VkPhysicalDeviceShaderCorePropertiesAMD
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint shaderEngineCount;
            
            public uint shaderArraysPerEngineCount;
            
            public uint computeUnitsPerShaderArray;
            
            public uint simdPerComputeUnit;
            
            public uint wavefrontsPerSimd;
            
            public uint wavefrontSize;
            
            public uint sgprsPerSimd;
            
            public uint minSgprAllocation;
            
            public uint maxSgprAllocation;
            
            public uint sgprAllocationGranularity;
            
            public uint vgprsPerSimd;
            
            public uint minVgprAllocation;
            
            public uint maxVgprAllocation;
            
            public uint vgprAllocationGranularity;
        }
        
        public partial struct VkDeviceMemoryOverallocationCreateInfoAMD
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkMemoryOverallocationBehaviorAMD overallocationBehavior;
        }
        
        public partial struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxVertexAttribDivisor;
        }
        
        public partial struct VkVertexInputBindingDivisorDescriptionEXT
        {
            public uint binding;
            
            public uint divisor;
        }
        
        public partial struct VkPipelineVertexInputDivisorStateCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint vertexBindingDivisorCount;
            
            public vulkan.VkVertexInputBindingDivisorDescriptionEXT* pVertexBindingDivisors;
        }
        
        public partial struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 vertexAttributeInstanceRateDivisor;
            
            public vulkan.VkBool32 vertexAttributeInstanceRateZeroDivisor;
        }
        
        public partial struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 computeDerivativeGroupQuads;
            
            public vulkan.VkBool32 computeDerivativeGroupLinear;
        }
        
        public partial struct VkPhysicalDeviceMeshShaderFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 taskShader;
            
            public vulkan.VkBool32 meshShader;
        }
        
        public unsafe partial struct VkPhysicalDeviceMeshShaderPropertiesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxDrawMeshTasksCount;
            
            public uint maxTaskWorkGroupInvocations;
            
            public fixed uint maxTaskWorkGroupSize[3];
            
            public uint maxTaskTotalMemorySize;
            
            public uint maxTaskOutputCount;
            
            public uint maxMeshWorkGroupInvocations;
            
            public fixed uint maxMeshWorkGroupSize[3];
            
            public uint maxMeshTotalMemorySize;
            
            public uint maxMeshOutputVertices;
            
            public uint maxMeshOutputPrimitives;
            
            public uint maxMeshMultiviewViewCount;
            
            public uint meshOutputPerVertexGranularity;
            
            public uint meshOutputPerPrimitiveGranularity;
        }
        
        public partial struct VkDrawMeshTasksIndirectCommandNV
        {
            public uint taskCount;
            
            public uint firstTask;
        }
        
        public partial struct VkPhysicalDeviceShaderImageFootprintFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 imageFootprint;
        }
        
        public partial struct VkPipelineViewportExclusiveScissorStateCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint exclusiveScissorCount;
            
            public vulkan.VkRect2D* pExclusiveScissors;
        }
        
        public partial struct VkPhysicalDeviceExclusiveScissorFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 exclusiveScissor;
        }
        
        public partial struct VkQueueFamilyCheckpointPropertiesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineStageFlags checkpointExecutionStageMask;
        }
        
        public partial struct VkCheckpointDataNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineStageFlagBits stage;
            
            public void* pCheckpointMarker;
        }
        
        public partial struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderIntegerFunctions2;
        }
        
        [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
        public partial struct VkPerformanceValueDataINTEL
        {
            [FieldOffset(0)]
            public uint value32;
            
            [FieldOffset(0)]
            public ulong value64;
            
            [FieldOffset(0)]
            public float valueFloat;
            
            [FieldOffset(0)]
            public vulkan.VkBool32 valueBool;
            
            [FieldOffset(0)]
            public byte* valueString;
        }
        
        public partial struct VkPerformanceValueINTEL
        {
            public vulkan.VkPerformanceValueTypeINTEL type;
            
            public vulkan.VkPerformanceValueDataINTEL data;
        }
        
        public partial struct VkInitializePerformanceApiInfoINTEL
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public void* pUserData;
        }
        
        public partial struct VkQueryPoolPerformanceQueryCreateInfoINTEL
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkQueryPoolSamplingModeINTEL performanceCountersSampling;
        }
        
        public partial struct VkPerformanceMarkerInfoINTEL
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public ulong marker;
        }
        
        public partial struct VkPerformanceStreamMarkerInfoINTEL
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint marker;
        }
        
        public partial struct VkPerformanceOverrideInfoINTEL
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPerformanceOverrideTypeINTEL type;
            
            public vulkan.VkBool32 enable;
            
            public ulong parameter;
        }
        
        public partial struct VkPerformanceConfigurationAcquireInfoINTEL
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPerformanceConfigurationTypeINTEL type;
        }
        
        public partial struct VkPhysicalDevicePCIBusInfoPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint pciDomain;
            
            public uint pciBus;
            
            public uint pciDevice;
            
            public uint pciFunction;
        }
        
        public partial struct VkDisplayNativeHdrSurfaceCapabilitiesAMD
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 localDimmingSupport;
        }
        
        public partial struct VkSwapchainDisplayNativeHdrCreateInfoAMD
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 localDimmingEnable;
        }
        
        public partial struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 fragmentDensityMap;
            
            public vulkan.VkBool32 fragmentDensityMapDynamic;
            
            public vulkan.VkBool32 fragmentDensityMapNonSubsampledImages;
        }
        
        public partial struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExtent2D minFragmentDensityTexelSize;
            
            public vulkan.VkExtent2D maxFragmentDensityTexelSize;
            
            public vulkan.VkBool32 fragmentDensityInvocations;
        }
        
        public partial struct VkRenderPassFragmentDensityMapCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAttachmentReference fragmentDensityMapAttachment;
        }
        
        public partial struct VkPhysicalDeviceShaderCoreProperties2AMD
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkShaderCorePropertiesFlagsAMD shaderCoreFeatures;
            
            public uint activeComputeUnitCount;
        }
        
        public readonly partial struct VkShaderCorePropertiesFlagsAMD : IEquatable<VkShaderCorePropertiesFlagsAMD>
        {
            public VkShaderCorePropertiesFlagsAMD(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkShaderCorePropertiesFlagsAMD other && Equals(other);
            
            public bool Equals(VkShaderCorePropertiesFlagsAMD other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkShaderCorePropertiesFlagsAMD from) => from.Value;
            
            public static implicit operator vulkan.VkShaderCorePropertiesFlagsAMD (vulkan.VkFlags from) => new vulkan.VkShaderCorePropertiesFlagsAMD(from);
            
            public static bool operator ==(VkShaderCorePropertiesFlagsAMD left, VkShaderCorePropertiesFlagsAMD right) => left.Equals(right);
            
            public static bool operator !=(VkShaderCorePropertiesFlagsAMD left, VkShaderCorePropertiesFlagsAMD right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceCoherentMemoryFeaturesAMD
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 deviceCoherentMemory;
        }
        
        public partial struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderImageInt64Atomics;
            
            public vulkan.VkBool32 sparseImageInt64Atomics;
        }
        
        public partial struct VkPhysicalDeviceMemoryBudgetPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public FixedArray16<vulkan.VkDeviceSize> heapBudget;
            
            public FixedArray16<vulkan.VkDeviceSize> heapUsage;
        }
        
        public partial struct VkPhysicalDeviceMemoryPriorityFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 memoryPriority;
        }
        
        public partial struct VkMemoryPriorityAllocateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public float priority;
        }
        
        public partial struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 dedicatedAllocationImageAliasing;
        }
        
        public partial struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 bufferDeviceAddress;
            
            public vulkan.VkBool32 bufferDeviceAddressCaptureReplay;
            
            public vulkan.VkBool32 bufferDeviceAddressMultiDevice;
        }
        
        public partial struct VkBufferDeviceAddressCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceAddress deviceAddress;
        }
        
        public partial struct VkValidationFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint enabledValidationFeatureCount;
            
            public vulkan.VkValidationFeatureEnableEXT* pEnabledValidationFeatures;
            
            public uint disabledValidationFeatureCount;
            
            public vulkan.VkValidationFeatureDisableEXT* pDisabledValidationFeatures;
        }
        
        public partial struct VkCooperativeMatrixPropertiesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint MSize;
            
            public uint NSize;
            
            public uint KSize;
            
            public vulkan.VkComponentTypeNV AType;
            
            public vulkan.VkComponentTypeNV BType;
            
            public vulkan.VkComponentTypeNV CType;
            
            public vulkan.VkComponentTypeNV DType;
            
            public vulkan.VkScopeNV scope;
        }
        
        public readonly partial struct VkComponentTypeNV : IEquatable<VkComponentTypeNV>
        {
            public VkComponentTypeNV(vulkan.VkComponentTypeKHR value) => this.Value = value;
            
            public vulkan.VkComponentTypeKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkComponentTypeNV other && Equals(other);
            
            public bool Equals(VkComponentTypeNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkComponentTypeKHR (vulkan.VkComponentTypeNV from) => from.Value;
            
            public static implicit operator vulkan.VkComponentTypeNV (vulkan.VkComponentTypeKHR from) => new vulkan.VkComponentTypeNV(from);
            
            public static bool operator ==(VkComponentTypeNV left, VkComponentTypeNV right) => left.Equals(right);
            
            public static bool operator !=(VkComponentTypeNV left, VkComponentTypeNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkScopeNV : IEquatable<VkScopeNV>
        {
            public VkScopeNV(vulkan.VkScopeKHR value) => this.Value = value;
            
            public vulkan.VkScopeKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkScopeNV other && Equals(other);
            
            public bool Equals(VkScopeNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkScopeKHR (vulkan.VkScopeNV from) => from.Value;
            
            public static implicit operator vulkan.VkScopeNV (vulkan.VkScopeKHR from) => new vulkan.VkScopeNV(from);
            
            public static bool operator ==(VkScopeNV left, VkScopeNV right) => left.Equals(right);
            
            public static bool operator !=(VkScopeNV left, VkScopeNV right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceCooperativeMatrixFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 cooperativeMatrix;
            
            public vulkan.VkBool32 cooperativeMatrixRobustBufferAccess;
        }
        
        public partial struct VkPhysicalDeviceCooperativeMatrixPropertiesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkShaderStageFlags cooperativeMatrixSupportedStages;
        }
        
        public partial struct VkPhysicalDeviceCoverageReductionModeFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 coverageReductionMode;
        }
        
        public partial struct VkPipelineCoverageReductionStateCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineCoverageReductionStateCreateFlagsNV flags;
            
            public vulkan.VkCoverageReductionModeNV coverageReductionMode;
        }
        
        public readonly partial struct VkPipelineCoverageReductionStateCreateFlagsNV : IEquatable<VkPipelineCoverageReductionStateCreateFlagsNV>
        {
            public VkPipelineCoverageReductionStateCreateFlagsNV(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineCoverageReductionStateCreateFlagsNV other && Equals(other);
            
            public bool Equals(VkPipelineCoverageReductionStateCreateFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPipelineCoverageReductionStateCreateFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineCoverageReductionStateCreateFlagsNV (vulkan.VkFlags from) => new vulkan.VkPipelineCoverageReductionStateCreateFlagsNV(from);
            
            public static bool operator ==(VkPipelineCoverageReductionStateCreateFlagsNV left, VkPipelineCoverageReductionStateCreateFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineCoverageReductionStateCreateFlagsNV left, VkPipelineCoverageReductionStateCreateFlagsNV right) => !left.Equals(right);
        }
        
        public partial struct VkFramebufferMixedSamplesCombinationNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkCoverageReductionModeNV coverageReductionMode;
            
            public vulkan.VkSampleCountFlagBits rasterizationSamples;
            
            public vulkan.VkSampleCountFlags depthStencilSamples;
            
            public vulkan.VkSampleCountFlags colorSamples;
        }
        
        public partial struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 fragmentShaderSampleInterlock;
            
            public vulkan.VkBool32 fragmentShaderPixelInterlock;
            
            public vulkan.VkBool32 fragmentShaderShadingRateInterlock;
        }
        
        public partial struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 ycbcrImageArrays;
        }
        
        public partial struct VkPhysicalDeviceProvokingVertexFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 provokingVertexLast;
            
            public vulkan.VkBool32 transformFeedbackPreservesProvokingVertex;
        }
        
        public partial struct VkPhysicalDeviceProvokingVertexPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 provokingVertexModePerPipeline;
            
            public vulkan.VkBool32 transformFeedbackPreservesTriangleFanProvokingVertex;
        }
        
        public partial struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkProvokingVertexModeEXT provokingVertexMode;
        }
        
        public partial struct VkHeadlessSurfaceCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkHeadlessSurfaceCreateFlagsEXT flags;
        }
        
        public readonly partial struct VkHeadlessSurfaceCreateFlagsEXT : IEquatable<VkHeadlessSurfaceCreateFlagsEXT>
        {
            public VkHeadlessSurfaceCreateFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkHeadlessSurfaceCreateFlagsEXT other && Equals(other);
            
            public bool Equals(VkHeadlessSurfaceCreateFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkHeadlessSurfaceCreateFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkHeadlessSurfaceCreateFlagsEXT (vulkan.VkFlags from) => new vulkan.VkHeadlessSurfaceCreateFlagsEXT(from);
            
            public static bool operator ==(VkHeadlessSurfaceCreateFlagsEXT left, VkHeadlessSurfaceCreateFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkHeadlessSurfaceCreateFlagsEXT left, VkHeadlessSurfaceCreateFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceLineRasterizationFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 rectangularLines;
            
            public vulkan.VkBool32 bresenhamLines;
            
            public vulkan.VkBool32 smoothLines;
            
            public vulkan.VkBool32 stippledRectangularLines;
            
            public vulkan.VkBool32 stippledBresenhamLines;
            
            public vulkan.VkBool32 stippledSmoothLines;
        }
        
        public partial struct VkPhysicalDeviceLineRasterizationPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint lineSubPixelPrecisionBits;
        }
        
        public partial struct VkPipelineRasterizationLineStateCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkLineRasterizationModeEXT lineRasterizationMode;
            
            public vulkan.VkBool32 stippledLineEnable;
            
            public uint lineStippleFactor;
            
            public ushort lineStipplePattern;
        }
        
        public partial struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderBufferFloat32Atomics;
            
            public vulkan.VkBool32 shaderBufferFloat32AtomicAdd;
            
            public vulkan.VkBool32 shaderBufferFloat64Atomics;
            
            public vulkan.VkBool32 shaderBufferFloat64AtomicAdd;
            
            public vulkan.VkBool32 shaderSharedFloat32Atomics;
            
            public vulkan.VkBool32 shaderSharedFloat32AtomicAdd;
            
            public vulkan.VkBool32 shaderSharedFloat64Atomics;
            
            public vulkan.VkBool32 shaderSharedFloat64AtomicAdd;
            
            public vulkan.VkBool32 shaderImageFloat32Atomics;
            
            public vulkan.VkBool32 shaderImageFloat32AtomicAdd;
            
            public vulkan.VkBool32 sparseImageFloat32Atomics;
            
            public vulkan.VkBool32 sparseImageFloat32AtomicAdd;
        }
        
        public partial struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 indexTypeUint8;
        }
        
        public partial struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 extendedDynamicState;
        }
        
        public partial struct VkPhysicalDeviceHostImageCopyFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 hostImageCopy;
        }
        
        public unsafe partial struct VkPhysicalDeviceHostImageCopyPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint copySrcLayoutCount;
            
            public vulkan.VkImageLayout* pCopySrcLayouts;
            
            public uint copyDstLayoutCount;
            
            public vulkan.VkImageLayout* pCopyDstLayouts;
            
            public fixed byte optimalTilingLayoutUUID[16];
            
            public vulkan.VkBool32 identicalMemoryTypeRequirements;
        }
        
        public partial struct VkMemoryToImageCopyEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public void* pHostPointer;
            
            public uint memoryRowLength;
            
            public uint memoryImageHeight;
            
            public vulkan.VkImageSubresourceLayers imageSubresource;
            
            public vulkan.VkOffset3D imageOffset;
            
            public vulkan.VkExtent3D imageExtent;
        }
        
        public partial struct VkImageToMemoryCopyEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public void* pHostPointer;
            
            public uint memoryRowLength;
            
            public uint memoryImageHeight;
            
            public vulkan.VkImageSubresourceLayers imageSubresource;
            
            public vulkan.VkOffset3D imageOffset;
            
            public vulkan.VkExtent3D imageExtent;
        }
        
        public partial struct VkCopyMemoryToImageInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkHostImageCopyFlagsEXT flags;
            
            public vulkan.VkImage dstImage;
            
            public vulkan.VkImageLayout dstImageLayout;
            
            public uint regionCount;
            
            public vulkan.VkMemoryToImageCopyEXT* pRegions;
        }
        
        public readonly partial struct VkHostImageCopyFlagsEXT : IEquatable<VkHostImageCopyFlagsEXT>
        {
            public VkHostImageCopyFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkHostImageCopyFlagsEXT other && Equals(other);
            
            public bool Equals(VkHostImageCopyFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkHostImageCopyFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkHostImageCopyFlagsEXT (vulkan.VkFlags from) => new vulkan.VkHostImageCopyFlagsEXT(from);
            
            public static bool operator ==(VkHostImageCopyFlagsEXT left, VkHostImageCopyFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkHostImageCopyFlagsEXT left, VkHostImageCopyFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkCopyImageToMemoryInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkHostImageCopyFlagsEXT flags;
            
            public vulkan.VkImage srcImage;
            
            public vulkan.VkImageLayout srcImageLayout;
            
            public uint regionCount;
            
            public vulkan.VkImageToMemoryCopyEXT* pRegions;
        }
        
        public partial struct VkCopyImageToImageInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkHostImageCopyFlagsEXT flags;
            
            public vulkan.VkImage srcImage;
            
            public vulkan.VkImageLayout srcImageLayout;
            
            public vulkan.VkImage dstImage;
            
            public vulkan.VkImageLayout dstImageLayout;
            
            public uint regionCount;
            
            public vulkan.VkImageCopy2* pRegions;
        }
        
        public partial struct VkHostImageLayoutTransitionInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImage image;
            
            public vulkan.VkImageLayout oldLayout;
            
            public vulkan.VkImageLayout newLayout;
            
            public vulkan.VkImageSubresourceRange subresourceRange;
        }
        
        public partial struct VkSubresourceHostMemcpySizeEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceSize size;
        }
        
        public partial struct VkHostImageCopyDevicePerformanceQueryEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 optimalDeviceAccess;
            
            public vulkan.VkBool32 identicalMemoryLayout;
        }
        
        public partial struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderBufferFloat16Atomics;
            
            public vulkan.VkBool32 shaderBufferFloat16AtomicAdd;
            
            public vulkan.VkBool32 shaderBufferFloat16AtomicMinMax;
            
            public vulkan.VkBool32 shaderBufferFloat32AtomicMinMax;
            
            public vulkan.VkBool32 shaderBufferFloat64AtomicMinMax;
            
            public vulkan.VkBool32 shaderSharedFloat16Atomics;
            
            public vulkan.VkBool32 shaderSharedFloat16AtomicAdd;
            
            public vulkan.VkBool32 shaderSharedFloat16AtomicMinMax;
            
            public vulkan.VkBool32 shaderSharedFloat32AtomicMinMax;
            
            public vulkan.VkBool32 shaderSharedFloat64AtomicMinMax;
            
            public vulkan.VkBool32 shaderImageFloat32AtomicMinMax;
            
            public vulkan.VkBool32 sparseImageFloat32AtomicMinMax;
        }
        
        public partial struct VkSurfacePresentModeEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPresentModeKHR presentMode;
        }
        
        public partial struct VkSurfacePresentScalingCapabilitiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPresentScalingFlagsEXT supportedPresentScaling;
            
            public vulkan.VkPresentGravityFlagsEXT supportedPresentGravityX;
            
            public vulkan.VkPresentGravityFlagsEXT supportedPresentGravityY;
            
            public vulkan.VkExtent2D minScaledImageExtent;
            
            public vulkan.VkExtent2D maxScaledImageExtent;
        }
        
        public readonly partial struct VkPresentScalingFlagsEXT : IEquatable<VkPresentScalingFlagsEXT>
        {
            public VkPresentScalingFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPresentScalingFlagsEXT other && Equals(other);
            
            public bool Equals(VkPresentScalingFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPresentScalingFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPresentScalingFlagsEXT (vulkan.VkFlags from) => new vulkan.VkPresentScalingFlagsEXT(from);
            
            public static bool operator ==(VkPresentScalingFlagsEXT left, VkPresentScalingFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPresentScalingFlagsEXT left, VkPresentScalingFlagsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPresentGravityFlagsEXT : IEquatable<VkPresentGravityFlagsEXT>
        {
            public VkPresentGravityFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPresentGravityFlagsEXT other && Equals(other);
            
            public bool Equals(VkPresentGravityFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPresentGravityFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPresentGravityFlagsEXT (vulkan.VkFlags from) => new vulkan.VkPresentGravityFlagsEXT(from);
            
            public static bool operator ==(VkPresentGravityFlagsEXT left, VkPresentGravityFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPresentGravityFlagsEXT left, VkPresentGravityFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkSurfacePresentModeCompatibilityEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint presentModeCount;
            
            public vulkan.VkPresentModeKHR* pPresentModes;
        }
        
        public partial struct VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 swapchainMaintenance1;
        }
        
        public partial struct VkSwapchainPresentFenceInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint swapchainCount;
            
            public vulkan.VkFence* pFences;
        }
        
        public partial struct VkSwapchainPresentModesCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint presentModeCount;
            
            public vulkan.VkPresentModeKHR* pPresentModes;
        }
        
        public partial struct VkSwapchainPresentModeInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint swapchainCount;
            
            public vulkan.VkPresentModeKHR* pPresentModes;
        }
        
        public partial struct VkSwapchainPresentScalingCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPresentScalingFlagsEXT scalingBehavior;
            
            public vulkan.VkPresentGravityFlagsEXT presentGravityX;
            
            public vulkan.VkPresentGravityFlagsEXT presentGravityY;
        }
        
        public partial struct VkReleaseSwapchainImagesInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSwapchainKHR swapchain;
            
            public uint imageIndexCount;
            
            public uint* pImageIndices;
        }
        
        public partial struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxGraphicsShaderGroupCount;
            
            public uint maxIndirectSequenceCount;
            
            public uint maxIndirectCommandsTokenCount;
            
            public uint maxIndirectCommandsStreamCount;
            
            public uint maxIndirectCommandsTokenOffset;
            
            public uint maxIndirectCommandsStreamStride;
            
            public uint minSequencesCountBufferOffsetAlignment;
            
            public uint minSequencesIndexBufferOffsetAlignment;
            
            public uint minIndirectCommandsBufferOffsetAlignment;
        }
        
        public partial struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 deviceGeneratedCommands;
        }
        
        public partial struct VkGraphicsShaderGroupCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint stageCount;
            
            public vulkan.VkPipelineShaderStageCreateInfo* pStages;
            
            public vulkan.VkPipelineVertexInputStateCreateInfo* pVertexInputState;
            
            public vulkan.VkPipelineTessellationStateCreateInfo* pTessellationState;
        }
        
        public partial struct VkGraphicsPipelineShaderGroupsCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint groupCount;
            
            public vulkan.VkGraphicsShaderGroupCreateInfoNV* pGroups;
            
            public uint pipelineCount;
            
            public vulkan.VkPipeline* pPipelines;
        }
        
        public partial struct VkBindShaderGroupIndirectCommandNV
        {
            public uint groupIndex;
        }
        
        public partial struct VkBindIndexBufferIndirectCommandNV
        {
            public vulkan.VkDeviceAddress bufferAddress;
            
            public uint size;
            
            public vulkan.VkIndexType indexType;
        }
        
        public partial struct VkBindVertexBufferIndirectCommandNV
        {
            public vulkan.VkDeviceAddress bufferAddress;
            
            public uint size;
            
            public uint stride;
        }
        
        public partial struct VkSetStateFlagsIndirectCommandNV
        {
            public uint data;
        }
        
        public partial struct VkIndirectCommandsStreamNV
        {
            public vulkan.VkBuffer buffer;
            
            public vulkan.VkDeviceSize offset;
        }
        
        public partial struct VkIndirectCommandsLayoutTokenNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkIndirectCommandsTokenTypeNV tokenType;
            
            public uint stream;
            
            public uint offset;
            
            public uint vertexBindingUnit;
            
            public vulkan.VkBool32 vertexDynamicStride;
            
            public vulkan.VkPipelineLayout pushconstantPipelineLayout;
            
            public vulkan.VkShaderStageFlags pushconstantShaderStageFlags;
            
            public uint pushconstantOffset;
            
            public uint pushconstantSize;
            
            public vulkan.VkIndirectStateFlagsNV indirectStateFlags;
            
            public uint indexTypeCount;
            
            public vulkan.VkIndexType* pIndexTypes;
            
            public uint* pIndexTypeValues;
        }
        
        public readonly partial struct VkIndirectStateFlagsNV : IEquatable<VkIndirectStateFlagsNV>
        {
            public VkIndirectStateFlagsNV(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkIndirectStateFlagsNV other && Equals(other);
            
            public bool Equals(VkIndirectStateFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkIndirectStateFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkIndirectStateFlagsNV (vulkan.VkFlags from) => new vulkan.VkIndirectStateFlagsNV(from);
            
            public static bool operator ==(VkIndirectStateFlagsNV left, VkIndirectStateFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkIndirectStateFlagsNV left, VkIndirectStateFlagsNV right) => !left.Equals(right);
        }
        
        public partial struct VkIndirectCommandsLayoutCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkIndirectCommandsLayoutUsageFlagsNV flags;
            
            public vulkan.VkPipelineBindPoint pipelineBindPoint;
            
            public uint tokenCount;
            
            public vulkan.VkIndirectCommandsLayoutTokenNV* pTokens;
            
            public uint streamCount;
            
            public uint* pStreamStrides;
        }
        
        public readonly partial struct VkIndirectCommandsLayoutUsageFlagsNV : IEquatable<VkIndirectCommandsLayoutUsageFlagsNV>
        {
            public VkIndirectCommandsLayoutUsageFlagsNV(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkIndirectCommandsLayoutUsageFlagsNV other && Equals(other);
            
            public bool Equals(VkIndirectCommandsLayoutUsageFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkIndirectCommandsLayoutUsageFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkIndirectCommandsLayoutUsageFlagsNV (vulkan.VkFlags from) => new vulkan.VkIndirectCommandsLayoutUsageFlagsNV(from);
            
            public static bool operator ==(VkIndirectCommandsLayoutUsageFlagsNV left, VkIndirectCommandsLayoutUsageFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkIndirectCommandsLayoutUsageFlagsNV left, VkIndirectCommandsLayoutUsageFlagsNV right) => !left.Equals(right);
        }
        
        public partial struct VkGeneratedCommandsInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineBindPoint pipelineBindPoint;
            
            public vulkan.VkPipeline pipeline;
            
            public vulkan.VkIndirectCommandsLayoutNV indirectCommandsLayout;
            
            public uint streamCount;
            
            public vulkan.VkIndirectCommandsStreamNV* pStreams;
            
            public uint sequencesCount;
            
            public vulkan.VkBuffer preprocessBuffer;
            
            public vulkan.VkDeviceSize preprocessOffset;
            
            public vulkan.VkDeviceSize preprocessSize;
            
            public vulkan.VkBuffer sequencesCountBuffer;
            
            public vulkan.VkDeviceSize sequencesCountOffset;
            
            public vulkan.VkBuffer sequencesIndexBuffer;
            
            public vulkan.VkDeviceSize sequencesIndexOffset;
        }
        
        public readonly partial struct VkIndirectCommandsLayoutNV : IEquatable<VkIndirectCommandsLayoutNV>
        {
            public VkIndirectCommandsLayoutNV(vulkan.VkIndirectCommandsLayoutNV_T value) => this.Value = value;
            
            public vulkan.VkIndirectCommandsLayoutNV_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkIndirectCommandsLayoutNV other && Equals(other);
            
            public bool Equals(VkIndirectCommandsLayoutNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkIndirectCommandsLayoutNV_T (vulkan.VkIndirectCommandsLayoutNV from) => from.Value;
            
            public static implicit operator vulkan.VkIndirectCommandsLayoutNV (vulkan.VkIndirectCommandsLayoutNV_T from) => new vulkan.VkIndirectCommandsLayoutNV(from);
            
            public static bool operator ==(VkIndirectCommandsLayoutNV left, VkIndirectCommandsLayoutNV right) => left.Equals(right);
            
            public static bool operator !=(VkIndirectCommandsLayoutNV left, VkIndirectCommandsLayoutNV right) => !left.Equals(right);
        }
        
        public partial struct VkGeneratedCommandsMemoryRequirementsInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineBindPoint pipelineBindPoint;
            
            public vulkan.VkPipeline pipeline;
            
            public vulkan.VkIndirectCommandsLayoutNV indirectCommandsLayout;
            
            public uint maxSequencesCount;
        }
        
        public partial struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 inheritedViewportScissor2D;
        }
        
        public partial struct VkCommandBufferInheritanceViewportScissorInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 viewportScissor2D;
            
            public uint viewportDepthCount;
            
            public vulkan.VkViewport* pViewportDepths;
        }
        
        public partial struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 texelBufferAlignment;
        }
        
        public partial struct VkRenderPassTransformBeginInfoQCOM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSurfaceTransformFlagBitsKHR transform;
        }
        
        public partial struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSurfaceTransformFlagBitsKHR transform;
            
            public vulkan.VkRect2D renderArea;
        }
        
        public partial struct VkPhysicalDeviceDepthBiasControlFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 depthBiasControl;
            
            public vulkan.VkBool32 leastRepresentableValueForceUnormRepresentation;
            
            public vulkan.VkBool32 floatRepresentation;
            
            public vulkan.VkBool32 depthBiasExact;
        }
        
        public partial struct VkDepthBiasInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public float depthBiasConstantFactor;
            
            public float depthBiasClamp;
            
            public float depthBiasSlopeFactor;
        }
        
        public partial struct VkDepthBiasRepresentationInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDepthBiasRepresentationEXT depthBiasRepresentation;
            
            public vulkan.VkBool32 depthBiasExact;
        }
        
        public partial struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 deviceMemoryReport;
        }
        
        public partial struct VkDeviceMemoryReportCallbackDataEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceMemoryReportFlagsEXT flags;
            
            public vulkan.VkDeviceMemoryReportEventTypeEXT type;
            
            public ulong memoryObjectId;
            
            public vulkan.VkDeviceSize size;
            
            public vulkan.VkObjectType objectType;
            
            public ulong objectHandle;
            
            public uint heapIndex;
        }
        
        public readonly partial struct VkDeviceMemoryReportFlagsEXT : IEquatable<VkDeviceMemoryReportFlagsEXT>
        {
            public VkDeviceMemoryReportFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceMemoryReportFlagsEXT other && Equals(other);
            
            public bool Equals(VkDeviceMemoryReportFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDeviceMemoryReportFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceMemoryReportFlagsEXT (vulkan.VkFlags from) => new vulkan.VkDeviceMemoryReportFlagsEXT(from);
            
            public static bool operator ==(VkDeviceMemoryReportFlagsEXT left, VkDeviceMemoryReportFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceMemoryReportFlagsEXT left, VkDeviceMemoryReportFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkDeviceDeviceMemoryReportCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceMemoryReportFlagsEXT flags;
            
            public vulkan.PFN_vkDeviceMemoryReportCallbackEXT pfnUserCallback;
            
            public void* pUserData;
        }
        
        public readonly partial struct PFN_vkDeviceMemoryReportCallbackEXT : IEquatable<PFN_vkDeviceMemoryReportCallbackEXT>
        {
            public PFN_vkDeviceMemoryReportCallbackEXT(delegate*unmanaged[Stdcall]<vulkan.VkDeviceMemoryReportCallbackDataEXT*, void*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDeviceMemoryReportCallbackDataEXT*, void*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDeviceMemoryReportCallbackEXT other && Equals(other);
            
            public bool Equals(PFN_vkDeviceMemoryReportCallbackEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDeviceMemoryReportCallbackDataEXT*, void*, void> (vulkan.PFN_vkDeviceMemoryReportCallbackEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDeviceMemoryReportCallbackEXT (delegate*unmanaged[Stdcall]<vulkan.VkDeviceMemoryReportCallbackDataEXT*, void*, void> from) => new vulkan.PFN_vkDeviceMemoryReportCallbackEXT(from);
            
            public static bool operator ==(PFN_vkDeviceMemoryReportCallbackEXT left, PFN_vkDeviceMemoryReportCallbackEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDeviceMemoryReportCallbackEXT left, PFN_vkDeviceMemoryReportCallbackEXT right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceRobustness2FeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 robustBufferAccess2;
            
            public vulkan.VkBool32 robustImageAccess2;
            
            public vulkan.VkBool32 nullDescriptor;
        }
        
        public partial struct VkPhysicalDeviceRobustness2PropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceSize robustStorageBufferAccessSizeAlignment;
            
            public vulkan.VkDeviceSize robustUniformBufferAccessSizeAlignment;
        }
        
        public partial struct VkSamplerCustomBorderColorCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkClearColorValue customBorderColor;
            
            public vulkan.VkFormat format;
        }
        
        public partial struct VkPhysicalDeviceCustomBorderColorPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxCustomBorderColorSamplers;
        }
        
        public partial struct VkPhysicalDeviceCustomBorderColorFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 customBorderColors;
            
            public vulkan.VkBool32 customBorderColorWithoutFormat;
        }
        
        public partial struct VkPhysicalDevicePresentBarrierFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 presentBarrier;
        }
        
        public partial struct VkSurfaceCapabilitiesPresentBarrierNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 presentBarrierSupported;
        }
        
        public partial struct VkSwapchainPresentBarrierCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 presentBarrierEnable;
        }
        
        public partial struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 diagnosticsConfig;
        }
        
        public partial struct VkDeviceDiagnosticsConfigCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceDiagnosticsConfigFlagsNV flags;
        }
        
        public readonly partial struct VkDeviceDiagnosticsConfigFlagsNV : IEquatable<VkDeviceDiagnosticsConfigFlagsNV>
        {
            public VkDeviceDiagnosticsConfigFlagsNV(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceDiagnosticsConfigFlagsNV other && Equals(other);
            
            public bool Equals(VkDeviceDiagnosticsConfigFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDeviceDiagnosticsConfigFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceDiagnosticsConfigFlagsNV (vulkan.VkFlags from) => new vulkan.VkDeviceDiagnosticsConfigFlagsNV(from);
            
            public static bool operator ==(VkDeviceDiagnosticsConfigFlagsNV left, VkDeviceDiagnosticsConfigFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceDiagnosticsConfigFlagsNV left, VkDeviceDiagnosticsConfigFlagsNV right) => !left.Equals(right);
        }
        
        public partial struct VkQueryLowLatencySupportNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public void* pQueriedLowLatencyData;
        }
        
        public partial struct VkPhysicalDeviceDescriptorBufferPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 combinedImageSamplerDescriptorSingleArray;
            
            public vulkan.VkBool32 bufferlessPushDescriptors;
            
            public vulkan.VkBool32 allowSamplerImageViewPostSubmitCreation;
            
            public vulkan.VkDeviceSize descriptorBufferOffsetAlignment;
            
            public uint maxDescriptorBufferBindings;
            
            public uint maxResourceDescriptorBufferBindings;
            
            public uint maxSamplerDescriptorBufferBindings;
            
            public uint maxEmbeddedImmutableSamplerBindings;
            
            public uint maxEmbeddedImmutableSamplers;
            
            public nuint bufferCaptureReplayDescriptorDataSize;
            
            public nuint imageCaptureReplayDescriptorDataSize;
            
            public nuint imageViewCaptureReplayDescriptorDataSize;
            
            public nuint samplerCaptureReplayDescriptorDataSize;
            
            public nuint accelerationStructureCaptureReplayDescriptorDataSize;
            
            public nuint samplerDescriptorSize;
            
            public nuint combinedImageSamplerDescriptorSize;
            
            public nuint sampledImageDescriptorSize;
            
            public nuint storageImageDescriptorSize;
            
            public nuint uniformTexelBufferDescriptorSize;
            
            public nuint robustUniformTexelBufferDescriptorSize;
            
            public nuint storageTexelBufferDescriptorSize;
            
            public nuint robustStorageTexelBufferDescriptorSize;
            
            public nuint uniformBufferDescriptorSize;
            
            public nuint robustUniformBufferDescriptorSize;
            
            public nuint storageBufferDescriptorSize;
            
            public nuint robustStorageBufferDescriptorSize;
            
            public nuint inputAttachmentDescriptorSize;
            
            public nuint accelerationStructureDescriptorSize;
            
            public vulkan.VkDeviceSize maxSamplerDescriptorBufferRange;
            
            public vulkan.VkDeviceSize maxResourceDescriptorBufferRange;
            
            public vulkan.VkDeviceSize samplerDescriptorBufferAddressSpaceSize;
            
            public vulkan.VkDeviceSize resourceDescriptorBufferAddressSpaceSize;
            
            public vulkan.VkDeviceSize descriptorBufferAddressSpaceSize;
        }
        
        public partial struct VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public nuint combinedImageSamplerDensityMapDescriptorSize;
        }
        
        public partial struct VkPhysicalDeviceDescriptorBufferFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 descriptorBuffer;
            
            public vulkan.VkBool32 descriptorBufferCaptureReplay;
            
            public vulkan.VkBool32 descriptorBufferImageLayoutIgnored;
            
            public vulkan.VkBool32 descriptorBufferPushDescriptors;
        }
        
        public partial struct VkDescriptorAddressInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceAddress address;
            
            public vulkan.VkDeviceSize range;
            
            public vulkan.VkFormat format;
        }
        
        public partial struct VkDescriptorBufferBindingInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceAddress address;
            
            public vulkan.VkBufferUsageFlags usage;
        }
        
        public partial struct VkDescriptorBufferBindingPushDescriptorBufferHandleEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBuffer buffer;
        }
        
        [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
        public partial struct VkDescriptorDataEXT
        {
            [FieldOffset(0)]
            public vulkan.VkSampler* pSampler;
            
            [FieldOffset(0)]
            public vulkan.VkDescriptorImageInfo* pCombinedImageSampler;
            
            [FieldOffset(0)]
            public vulkan.VkDescriptorImageInfo* pInputAttachmentImage;
            
            [FieldOffset(0)]
            public vulkan.VkDescriptorImageInfo* pSampledImage;
            
            [FieldOffset(0)]
            public vulkan.VkDescriptorImageInfo* pStorageImage;
            
            [FieldOffset(0)]
            public vulkan.VkDescriptorAddressInfoEXT* pUniformTexelBuffer;
            
            [FieldOffset(0)]
            public vulkan.VkDescriptorAddressInfoEXT* pStorageTexelBuffer;
            
            [FieldOffset(0)]
            public vulkan.VkDescriptorAddressInfoEXT* pUniformBuffer;
            
            [FieldOffset(0)]
            public vulkan.VkDescriptorAddressInfoEXT* pStorageBuffer;
            
            [FieldOffset(0)]
            public vulkan.VkDeviceAddress accelerationStructure;
        }
        
        public partial struct VkDescriptorGetInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDescriptorType type;
            
            public vulkan.VkDescriptorDataEXT data;
        }
        
        public partial struct VkBufferCaptureDescriptorDataInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBuffer buffer;
        }
        
        public partial struct VkImageCaptureDescriptorDataInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImage image;
        }
        
        public partial struct VkImageViewCaptureDescriptorDataInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageView imageView;
        }
        
        public partial struct VkSamplerCaptureDescriptorDataInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSampler sampler;
        }
        
        public partial struct VkOpaqueCaptureDescriptorDataCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public void* opaqueCaptureDescriptorData;
        }
        
        public partial struct VkAccelerationStructureCaptureDescriptorDataInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAccelerationStructureKHR accelerationStructure;
            
            public vulkan.VkAccelerationStructureNV accelerationStructureNV;
        }
        
        public readonly partial struct VkAccelerationStructureKHR : IEquatable<VkAccelerationStructureKHR>
        {
            public VkAccelerationStructureKHR(vulkan.VkAccelerationStructureKHR_T value) => this.Value = value;
            
            public vulkan.VkAccelerationStructureKHR_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkAccelerationStructureKHR other && Equals(other);
            
            public bool Equals(VkAccelerationStructureKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkAccelerationStructureKHR_T (vulkan.VkAccelerationStructureKHR from) => from.Value;
            
            public static implicit operator vulkan.VkAccelerationStructureKHR (vulkan.VkAccelerationStructureKHR_T from) => new vulkan.VkAccelerationStructureKHR(from);
            
            public static bool operator ==(VkAccelerationStructureKHR left, VkAccelerationStructureKHR right) => left.Equals(right);
            
            public static bool operator !=(VkAccelerationStructureKHR left, VkAccelerationStructureKHR right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 graphicsPipelineLibrary;
        }
        
        public partial struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 graphicsPipelineLibraryFastLinking;
            
            public vulkan.VkBool32 graphicsPipelineLibraryIndependentInterpolationDecoration;
        }
        
        public partial struct VkGraphicsPipelineLibraryCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkGraphicsPipelineLibraryFlagsEXT flags;
        }
        
        public readonly partial struct VkGraphicsPipelineLibraryFlagsEXT : IEquatable<VkGraphicsPipelineLibraryFlagsEXT>
        {
            public VkGraphicsPipelineLibraryFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkGraphicsPipelineLibraryFlagsEXT other && Equals(other);
            
            public bool Equals(VkGraphicsPipelineLibraryFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkGraphicsPipelineLibraryFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkGraphicsPipelineLibraryFlagsEXT (vulkan.VkFlags from) => new vulkan.VkGraphicsPipelineLibraryFlagsEXT(from);
            
            public static bool operator ==(VkGraphicsPipelineLibraryFlagsEXT left, VkGraphicsPipelineLibraryFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkGraphicsPipelineLibraryFlagsEXT left, VkGraphicsPipelineLibraryFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderEarlyAndLateFragmentTests;
        }
        
        public partial struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 fragmentShadingRateEnums;
            
            public vulkan.VkBool32 supersampleFragmentShadingRates;
            
            public vulkan.VkBool32 noInvocationFragmentShadingRates;
        }
        
        public partial struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSampleCountFlagBits maxFragmentShadingRateInvocationCount;
        }
        
        public unsafe partial struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFragmentShadingRateTypeNV shadingRateType;
            
            public vulkan.VkFragmentShadingRateNV shadingRate;
            
            public fixed uint combinerOps[2];
        }
        
        [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
        public partial struct VkDeviceOrHostAddressConstKHR
        {
            [FieldOffset(0)]
            public vulkan.VkDeviceAddress deviceAddress;
            
            [FieldOffset(0)]
            public void* hostAddress;
        }
        
        public partial struct VkAccelerationStructureGeometryMotionTrianglesDataNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceOrHostAddressConstKHR vertexData;
        }
        
        public partial struct VkAccelerationStructureMotionInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxInstances;
            
            public vulkan.VkAccelerationStructureMotionInfoFlagsNV flags;
        }
        
        public readonly partial struct VkAccelerationStructureMotionInfoFlagsNV : IEquatable<VkAccelerationStructureMotionInfoFlagsNV>
        {
            public VkAccelerationStructureMotionInfoFlagsNV(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkAccelerationStructureMotionInfoFlagsNV other && Equals(other);
            
            public bool Equals(VkAccelerationStructureMotionInfoFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkAccelerationStructureMotionInfoFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkAccelerationStructureMotionInfoFlagsNV (vulkan.VkFlags from) => new vulkan.VkAccelerationStructureMotionInfoFlagsNV(from);
            
            public static bool operator ==(VkAccelerationStructureMotionInfoFlagsNV left, VkAccelerationStructureMotionInfoFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkAccelerationStructureMotionInfoFlagsNV left, VkAccelerationStructureMotionInfoFlagsNV right) => !left.Equals(right);
        }
        
        public partial struct VkAccelerationStructureMatrixMotionInstanceNV
        {
            public vulkan.VkTransformMatrixKHR transformT0;
            
            public vulkan.VkTransformMatrixKHR transformT1;
            
            private uint __bitfield__2;
            
            public uint instanceCustomIndex
            {
                get
                {
                    return unchecked((uint)((__bitfield__2 >> 0) & 0b111111111111111111111111));
                }
                set
                {
                    __bitfield__2 = (__bitfield__2 & unchecked((uint)0b11111111000000000000000000000000)) | ((((uint)value) & (unchecked((uint)0b111111111111111111111111)) << 0));
                }
            }
            
            public uint mask
            {
                get
                {
                    return unchecked((uint)((__bitfield__2 >> 24) & 0b11111111));
                }
                set
                {
                    __bitfield__2 = (__bitfield__2 & unchecked((uint)0b00000000111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b11111111)) << 24));
                }
            }
            
            private uint __bitfield__5;
            
            public uint instanceShaderBindingTableRecordOffset
            {
                get
                {
                    return unchecked((uint)((__bitfield__5 >> 0) & 0b111111111111111111111111));
                }
                set
                {
                    __bitfield__5 = (__bitfield__5 & unchecked((uint)0b11111111000000000000000000000000)) | ((((uint)value) & (unchecked((uint)0b111111111111111111111111)) << 0));
                }
            }
            
            public vulkan.VkGeometryInstanceFlagsKHR flags
            {
                get
                {
                    return unchecked((vulkan.VkGeometryInstanceFlagsKHR)((__bitfield__5 >> 24) & 0b11111111));
                }
                set
                {
                    __bitfield__5 = (__bitfield__5 & unchecked((uint)0b00000000111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b11111111)) << 24));
                }
            }
            
            public ulong accelerationStructureReference;
        }
        
        public partial struct VkSRTDataNV
        {
            public float sx;
            
            public float a;
            
            public float b;
            
            public float pvx;
            
            public float sy;
            
            public float c;
            
            public float pvy;
            
            public float sz;
            
            public float pvz;
            
            public float qx;
            
            public float qy;
            
            public float qz;
            
            public float qw;
            
            public float tx;
            
            public float ty;
            
            public float tz;
        }
        
        public partial struct VkAccelerationStructureSRTMotionInstanceNV
        {
            public vulkan.VkSRTDataNV transformT0;
            
            public vulkan.VkSRTDataNV transformT1;
            
            private uint __bitfield__2;
            
            public uint instanceCustomIndex
            {
                get
                {
                    return unchecked((uint)((__bitfield__2 >> 0) & 0b111111111111111111111111));
                }
                set
                {
                    __bitfield__2 = (__bitfield__2 & unchecked((uint)0b11111111000000000000000000000000)) | ((((uint)value) & (unchecked((uint)0b111111111111111111111111)) << 0));
                }
            }
            
            public uint mask
            {
                get
                {
                    return unchecked((uint)((__bitfield__2 >> 24) & 0b11111111));
                }
                set
                {
                    __bitfield__2 = (__bitfield__2 & unchecked((uint)0b00000000111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b11111111)) << 24));
                }
            }
            
            private uint __bitfield__5;
            
            public uint instanceShaderBindingTableRecordOffset
            {
                get
                {
                    return unchecked((uint)((__bitfield__5 >> 0) & 0b111111111111111111111111));
                }
                set
                {
                    __bitfield__5 = (__bitfield__5 & unchecked((uint)0b11111111000000000000000000000000)) | ((((uint)value) & (unchecked((uint)0b111111111111111111111111)) << 0));
                }
            }
            
            public vulkan.VkGeometryInstanceFlagsKHR flags
            {
                get
                {
                    return unchecked((vulkan.VkGeometryInstanceFlagsKHR)((__bitfield__5 >> 24) & 0b11111111));
                }
                set
                {
                    __bitfield__5 = (__bitfield__5 & unchecked((uint)0b00000000111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b11111111)) << 24));
                }
            }
            
            public ulong accelerationStructureReference;
        }
        
        [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
        public partial struct VkAccelerationStructureMotionInstanceDataNV
        {
            [FieldOffset(0)]
            public vulkan.VkAccelerationStructureInstanceKHR staticInstance;
            
            [FieldOffset(0)]
            public vulkan.VkAccelerationStructureMatrixMotionInstanceNV matrixMotionInstance;
            
            [FieldOffset(0)]
            public vulkan.VkAccelerationStructureSRTMotionInstanceNV srtMotionInstance;
        }
        
        public partial struct VkAccelerationStructureMotionInstanceNV
        {
            public vulkan.VkAccelerationStructureMotionInstanceTypeNV type;
            
            public vulkan.VkAccelerationStructureMotionInstanceFlagsNV flags;
            
            public vulkan.VkAccelerationStructureMotionInstanceDataNV data;
        }
        
        public readonly partial struct VkAccelerationStructureMotionInstanceFlagsNV : IEquatable<VkAccelerationStructureMotionInstanceFlagsNV>
        {
            public VkAccelerationStructureMotionInstanceFlagsNV(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkAccelerationStructureMotionInstanceFlagsNV other && Equals(other);
            
            public bool Equals(VkAccelerationStructureMotionInstanceFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkAccelerationStructureMotionInstanceFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkAccelerationStructureMotionInstanceFlagsNV (vulkan.VkFlags from) => new vulkan.VkAccelerationStructureMotionInstanceFlagsNV(from);
            
            public static bool operator ==(VkAccelerationStructureMotionInstanceFlagsNV left, VkAccelerationStructureMotionInstanceFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkAccelerationStructureMotionInstanceFlagsNV left, VkAccelerationStructureMotionInstanceFlagsNV right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 rayTracingMotionBlur;
            
            public vulkan.VkBool32 rayTracingMotionBlurPipelineTraceRaysIndirect;
        }
        
        public partial struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 ycbcr2plane444Formats;
        }
        
        public partial struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 fragmentDensityMapDeferred;
        }
        
        public partial struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 subsampledLoads;
            
            public vulkan.VkBool32 subsampledCoarseReconstructionEarlyAccess;
            
            public uint maxSubsampledArrayLayers;
            
            public uint maxDescriptorSetSubsampledSamplers;
        }
        
        public partial struct VkCopyCommandTransformInfoQCOM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSurfaceTransformFlagBitsKHR transform;
        }
        
        public partial struct VkPhysicalDeviceImageCompressionControlFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 imageCompressionControl;
        }
        
        public partial struct VkImageCompressionControlEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageCompressionFlagsEXT flags;
            
            public uint compressionControlPlaneCount;
            
            public vulkan.VkImageCompressionFixedRateFlagsEXT* pFixedRateFlags;
        }
        
        public readonly partial struct VkImageCompressionFlagsEXT : IEquatable<VkImageCompressionFlagsEXT>
        {
            public VkImageCompressionFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageCompressionFlagsEXT other && Equals(other);
            
            public bool Equals(VkImageCompressionFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkImageCompressionFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkImageCompressionFlagsEXT (vulkan.VkFlags from) => new vulkan.VkImageCompressionFlagsEXT(from);
            
            public static bool operator ==(VkImageCompressionFlagsEXT left, VkImageCompressionFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkImageCompressionFlagsEXT left, VkImageCompressionFlagsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImageCompressionFixedRateFlagsEXT : IEquatable<VkImageCompressionFixedRateFlagsEXT>
        {
            public VkImageCompressionFixedRateFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageCompressionFixedRateFlagsEXT other && Equals(other);
            
            public bool Equals(VkImageCompressionFixedRateFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkImageCompressionFixedRateFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkImageCompressionFixedRateFlagsEXT (vulkan.VkFlags from) => new vulkan.VkImageCompressionFixedRateFlagsEXT(from);
            
            public static bool operator ==(VkImageCompressionFixedRateFlagsEXT left, VkImageCompressionFixedRateFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkImageCompressionFixedRateFlagsEXT left, VkImageCompressionFixedRateFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkImageCompressionPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageCompressionFlagsEXT imageCompressionFlags;
            
            public vulkan.VkImageCompressionFixedRateFlagsEXT imageCompressionFixedRateFlags;
        }
        
        public partial struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 attachmentFeedbackLoopLayout;
        }
        
        public partial struct VkPhysicalDevice4444FormatsFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 formatA4R4G4B4;
            
            public vulkan.VkBool32 formatA4B4G4R4;
        }
        
        public partial struct VkPhysicalDeviceFaultFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 deviceFault;
            
            public vulkan.VkBool32 deviceFaultVendorBinary;
        }
        
        public partial struct VkDeviceFaultCountsEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint addressInfoCount;
            
            public uint vendorInfoCount;
            
            public vulkan.VkDeviceSize vendorBinarySize;
        }
        
        public partial struct VkDeviceFaultAddressInfoEXT
        {
            public vulkan.VkDeviceFaultAddressTypeEXT addressType;
            
            public vulkan.VkDeviceAddress reportedAddress;
            
            public vulkan.VkDeviceSize addressPrecision;
        }
        
        public unsafe partial struct VkDeviceFaultVendorInfoEXT
        {
            public fixed byte description[256];
            
            public ulong vendorFaultCode;
            
            public ulong vendorFaultData;
        }
        
        public unsafe partial struct VkDeviceFaultInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public fixed byte description[256];
            
            public vulkan.VkDeviceFaultAddressInfoEXT* pAddressInfos;
            
            public vulkan.VkDeviceFaultVendorInfoEXT* pVendorInfos;
            
            public void* pVendorBinaryData;
        }
        
        public unsafe partial struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT
        {
            public uint headerSize;
            
            public vulkan.VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion;
            
            public uint vendorID;
            
            public uint deviceID;
            
            public uint driverVersion;
            
            public fixed byte pipelineCacheUUID[16];
            
            public uint applicationNameOffset;
            
            public uint applicationVersion;
            
            public uint engineNameOffset;
            
            public uint engineVersion;
            
            public uint apiVersion;
        }
        
        public partial struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 rasterizationOrderColorAttachmentAccess;
            
            public vulkan.VkBool32 rasterizationOrderDepthAttachmentAccess;
            
            public vulkan.VkBool32 rasterizationOrderStencilAttachmentAccess;
        }
        
        public partial struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 formatRgba10x6WithoutYCbCrSampler;
        }
        
        public partial struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 mutableDescriptorType;
        }
        
        public partial struct VkMutableDescriptorTypeListEXT
        {
            public uint descriptorTypeCount;
            
            public vulkan.VkDescriptorType* pDescriptorTypes;
        }
        
        public partial struct VkMutableDescriptorTypeCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint mutableDescriptorTypeListCount;
            
            public vulkan.VkMutableDescriptorTypeListEXT* pMutableDescriptorTypeLists;
        }
        
        public partial struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 vertexInputDynamicState;
        }
        
        public partial struct VkVertexInputBindingDescription2EXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint binding;
            
            public uint stride;
            
            public vulkan.VkVertexInputRate inputRate;
            
            public uint divisor;
        }
        
        public partial struct VkVertexInputAttributeDescription2EXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint location;
            
            public uint binding;
            
            public vulkan.VkFormat format;
            
            public uint offset;
        }
        
        public partial struct VkPhysicalDeviceDrmPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 hasPrimary;
            
            public vulkan.VkBool32 hasRender;
            
            public long primaryMajor;
            
            public long primaryMinor;
            
            public long renderMajor;
            
            public long renderMinor;
        }
        
        public partial struct VkPhysicalDeviceAddressBindingReportFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 reportAddressBinding;
        }
        
        public partial struct VkDeviceAddressBindingCallbackDataEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceAddressBindingFlagsEXT flags;
            
            public vulkan.VkDeviceAddress baseAddress;
            
            public vulkan.VkDeviceSize size;
            
            public vulkan.VkDeviceAddressBindingTypeEXT bindingType;
        }
        
        public readonly partial struct VkDeviceAddressBindingFlagsEXT : IEquatable<VkDeviceAddressBindingFlagsEXT>
        {
            public VkDeviceAddressBindingFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceAddressBindingFlagsEXT other && Equals(other);
            
            public bool Equals(VkDeviceAddressBindingFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDeviceAddressBindingFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceAddressBindingFlagsEXT (vulkan.VkFlags from) => new vulkan.VkDeviceAddressBindingFlagsEXT(from);
            
            public static bool operator ==(VkDeviceAddressBindingFlagsEXT left, VkDeviceAddressBindingFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceAddressBindingFlagsEXT left, VkDeviceAddressBindingFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceDepthClipControlFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 depthClipControl;
        }
        
        public partial struct VkPipelineViewportDepthClipControlCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 negativeOneToOne;
        }
        
        public partial struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 primitiveTopologyListRestart;
            
            public vulkan.VkBool32 primitiveTopologyPatchListRestart;
        }
        
        public partial struct VkSubpassShadingPipelineCreateInfoHUAWEI
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkRenderPass renderPass;
            
            public uint subpass;
        }
        
        public partial struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 subpassShading;
        }
        
        public partial struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxSubpassShadingWorkgroupSizeAspectRatio;
        }
        
        public partial struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 invocationMask;
        }
        
        public partial struct VkMemoryGetRemoteAddressInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceMemory memory;
            
            public vulkan.VkExternalMemoryHandleTypeFlagBits handleType;
        }
        
        public partial struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 externalMemoryRDMA;
        }
        
        public unsafe partial struct VkPipelinePropertiesIdentifierEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public fixed byte pipelineIdentifier[16];
        }
        
        public partial struct VkPhysicalDevicePipelinePropertiesFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 pipelinePropertiesIdentifier;
        }
        
        public partial struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 multisampledRenderToSingleSampled;
        }
        
        public partial struct VkSubpassResolvePerformanceQueryEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 optimal;
        }
        
        public partial struct VkMultisampledRenderToSingleSampledInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 multisampledRenderToSingleSampledEnable;
            
            public vulkan.VkSampleCountFlagBits rasterizationSamples;
        }
        
        public partial struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 extendedDynamicState2;
            
            public vulkan.VkBool32 extendedDynamicState2LogicOp;
            
            public vulkan.VkBool32 extendedDynamicState2PatchControlPoints;
        }
        
        public partial struct VkPhysicalDeviceColorWriteEnableFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 colorWriteEnable;
        }
        
        public partial struct VkPipelineColorWriteCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint attachmentCount;
            
            public vulkan.VkBool32* pColorWriteEnables;
        }
        
        public partial struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 primitivesGeneratedQuery;
            
            public vulkan.VkBool32 primitivesGeneratedQueryWithRasterizerDiscard;
            
            public vulkan.VkBool32 primitivesGeneratedQueryWithNonZeroStreams;
        }
        
        public partial struct VkPhysicalDeviceImageViewMinLodFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 minLod;
        }
        
        public partial struct VkImageViewMinLodCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public float minLod;
        }
        
        public partial struct VkPhysicalDeviceMultiDrawFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 multiDraw;
        }
        
        public partial struct VkPhysicalDeviceMultiDrawPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxMultiDrawCount;
        }
        
        public partial struct VkMultiDrawInfoEXT
        {
            public uint firstVertex;
            
            public uint vertexCount;
        }
        
        public partial struct VkMultiDrawIndexedInfoEXT
        {
            public uint firstIndex;
            
            public uint indexCount;
            
            public int vertexOffset;
        }
        
        public partial struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 image2DViewOf3D;
            
            public vulkan.VkBool32 sampler2DViewOf3D;
        }
        
        public partial struct VkPhysicalDeviceShaderTileImageFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderTileImageColorReadAccess;
            
            public vulkan.VkBool32 shaderTileImageDepthReadAccess;
            
            public vulkan.VkBool32 shaderTileImageStencilReadAccess;
        }
        
        public partial struct VkPhysicalDeviceShaderTileImagePropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderTileImageCoherentReadAccelerated;
            
            public vulkan.VkBool32 shaderTileImageReadSampleFromPixelRateInvocation;
            
            public vulkan.VkBool32 shaderTileImageReadFromHelperInvocation;
        }
        
        public partial struct VkMicromapUsageEXT
        {
            public uint count;
            
            public uint subdivisionLevel;
            
            public uint format;
        }
        
        [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
        public partial struct VkDeviceOrHostAddressKHR
        {
            [FieldOffset(0)]
            public vulkan.VkDeviceAddress deviceAddress;
            
            [FieldOffset(0)]
            public void* hostAddress;
        }
        
        public partial struct VkMicromapBuildInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkMicromapTypeEXT type;
            
            public vulkan.VkBuildMicromapFlagsEXT flags;
            
            public vulkan.VkBuildMicromapModeEXT mode;
            
            public vulkan.VkMicromapEXT dstMicromap;
            
            public uint usageCountsCount;
            
            public vulkan.VkMicromapUsageEXT* pUsageCounts;
            
            public vulkan.VkMicromapUsageEXT** ppUsageCounts;
            
            public vulkan.VkDeviceOrHostAddressConstKHR data;
            
            public vulkan.VkDeviceOrHostAddressKHR scratchData;
            
            public vulkan.VkDeviceOrHostAddressConstKHR triangleArray;
            
            public vulkan.VkDeviceSize triangleArrayStride;
        }
        
        public readonly partial struct VkBuildMicromapFlagsEXT : IEquatable<VkBuildMicromapFlagsEXT>
        {
            public VkBuildMicromapFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkBuildMicromapFlagsEXT other && Equals(other);
            
            public bool Equals(VkBuildMicromapFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkBuildMicromapFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkBuildMicromapFlagsEXT (vulkan.VkFlags from) => new vulkan.VkBuildMicromapFlagsEXT(from);
            
            public static bool operator ==(VkBuildMicromapFlagsEXT left, VkBuildMicromapFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkBuildMicromapFlagsEXT left, VkBuildMicromapFlagsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkMicromapEXT : IEquatable<VkMicromapEXT>
        {
            public VkMicromapEXT(vulkan.VkMicromapEXT_T value) => this.Value = value;
            
            public vulkan.VkMicromapEXT_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkMicromapEXT other && Equals(other);
            
            public bool Equals(VkMicromapEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkMicromapEXT_T (vulkan.VkMicromapEXT from) => from.Value;
            
            public static implicit operator vulkan.VkMicromapEXT (vulkan.VkMicromapEXT_T from) => new vulkan.VkMicromapEXT(from);
            
            public static bool operator ==(VkMicromapEXT left, VkMicromapEXT right) => left.Equals(right);
            
            public static bool operator !=(VkMicromapEXT left, VkMicromapEXT right) => !left.Equals(right);
        }
        
        public partial struct VkMicromapCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkMicromapCreateFlagsEXT createFlags;
            
            public vulkan.VkBuffer buffer;
            
            public vulkan.VkDeviceSize offset;
            
            public vulkan.VkDeviceSize size;
            
            public vulkan.VkMicromapTypeEXT type;
            
            public vulkan.VkDeviceAddress deviceAddress;
        }
        
        public readonly partial struct VkMicromapCreateFlagsEXT : IEquatable<VkMicromapCreateFlagsEXT>
        {
            public VkMicromapCreateFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkMicromapCreateFlagsEXT other && Equals(other);
            
            public bool Equals(VkMicromapCreateFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkMicromapCreateFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkMicromapCreateFlagsEXT (vulkan.VkFlags from) => new vulkan.VkMicromapCreateFlagsEXT(from);
            
            public static bool operator ==(VkMicromapCreateFlagsEXT left, VkMicromapCreateFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkMicromapCreateFlagsEXT left, VkMicromapCreateFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceOpacityMicromapFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 micromap;
            
            public vulkan.VkBool32 micromapCaptureReplay;
            
            public vulkan.VkBool32 micromapHostCommands;
        }
        
        public partial struct VkPhysicalDeviceOpacityMicromapPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxOpacity2StateSubdivisionLevel;
            
            public uint maxOpacity4StateSubdivisionLevel;
        }
        
        public partial struct VkMicromapVersionInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public byte* pVersionData;
        }
        
        public partial struct VkCopyMicromapToMemoryInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkMicromapEXT src;
            
            public vulkan.VkDeviceOrHostAddressKHR dst;
            
            public vulkan.VkCopyMicromapModeEXT mode;
        }
        
        public partial struct VkCopyMemoryToMicromapInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceOrHostAddressConstKHR src;
            
            public vulkan.VkMicromapEXT dst;
            
            public vulkan.VkCopyMicromapModeEXT mode;
        }
        
        public partial struct VkCopyMicromapInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkMicromapEXT src;
            
            public vulkan.VkMicromapEXT dst;
            
            public vulkan.VkCopyMicromapModeEXT mode;
        }
        
        public partial struct VkMicromapBuildSizesInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceSize micromapSize;
            
            public vulkan.VkDeviceSize buildScratchSize;
            
            public vulkan.VkBool32 discardable;
        }
        
        public partial struct VkAccelerationStructureTrianglesOpacityMicromapEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkIndexType indexType;
            
            public vulkan.VkDeviceOrHostAddressConstKHR indexBuffer;
            
            public vulkan.VkDeviceSize indexStride;
            
            public uint baseTriangle;
            
            public uint usageCountsCount;
            
            public vulkan.VkMicromapUsageEXT* pUsageCounts;
            
            public vulkan.VkMicromapUsageEXT** ppUsageCounts;
            
            public vulkan.VkMicromapEXT micromap;
        }
        
        public partial struct VkMicromapTriangleEXT
        {
            public uint dataOffset;
            
            public ushort subdivisionLevel;
            
            public ushort format;
        }
        
        public partial struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 clustercullingShader;
            
            public vulkan.VkBool32 multiviewClusterCullingShader;
        }
        
        public unsafe partial struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public fixed uint maxWorkGroupCount[3];
            
            public fixed uint maxWorkGroupSize[3];
            
            public uint maxOutputClusterCount;
            
            public vulkan.VkDeviceSize indirectBufferOffsetAlignment;
        }
        
        public partial struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 borderColorSwizzle;
            
            public vulkan.VkBool32 borderColorSwizzleFromImage;
        }
        
        public partial struct VkSamplerBorderColorComponentMappingCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkComponentMapping components;
            
            public vulkan.VkBool32 srgb;
        }
        
        public partial struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 pageableDeviceLocalMemory;
        }
        
        public partial struct VkPhysicalDeviceShaderCorePropertiesARM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint pixelRate;
            
            public uint texelRate;
            
            public uint fmaRate;
        }
        
        public partial struct VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 imageSlicedViewOf3D;
        }
        
        public partial struct VkImageViewSlicedCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint sliceOffset;
            
            public uint sliceCount;
        }
        
        public partial struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 descriptorSetHostMapping;
        }
        
        public partial struct VkDescriptorSetBindingReferenceVALVE
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDescriptorSetLayout descriptorSetLayout;
            
            public uint binding;
        }
        
        public partial struct VkDescriptorSetLayoutHostMappingInfoVALVE
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public nuint descriptorOffset;
            
            public uint descriptorSize;
        }
        
        public partial struct VkPhysicalDeviceDepthClampZeroOneFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 depthClampZeroOne;
        }
        
        public partial struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 nonSeamlessCubeMap;
        }
        
        public partial struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 fragmentDensityMapOffset;
        }
        
        public partial struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExtent2D fragmentDensityOffsetGranularity;
        }
        
        public partial struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint fragmentDensityOffsetCount;
            
            public vulkan.VkOffset2D* pFragmentDensityOffsets;
        }
        
        public partial struct VkCopyMemoryIndirectCommandNV
        {
            public vulkan.VkDeviceAddress srcAddress;
            
            public vulkan.VkDeviceAddress dstAddress;
            
            public vulkan.VkDeviceSize size;
        }
        
        public partial struct VkCopyMemoryToImageIndirectCommandNV
        {
            public vulkan.VkDeviceAddress srcAddress;
            
            public uint bufferRowLength;
            
            public uint bufferImageHeight;
            
            public vulkan.VkImageSubresourceLayers imageSubresource;
            
            public vulkan.VkOffset3D imageOffset;
            
            public vulkan.VkExtent3D imageExtent;
        }
        
        public partial struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 indirectCopy;
        }
        
        public partial struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkQueueFlags supportedQueues;
        }
        
        public partial struct VkDecompressMemoryRegionNV
        {
            public vulkan.VkDeviceAddress srcAddress;
            
            public vulkan.VkDeviceAddress dstAddress;
            
            public vulkan.VkDeviceSize compressedSize;
            
            public vulkan.VkDeviceSize decompressedSize;
            
            public vulkan.VkMemoryDecompressionMethodFlagsNV decompressionMethod;
        }
        
        public readonly partial struct VkMemoryDecompressionMethodFlagsNV : IEquatable<VkMemoryDecompressionMethodFlagsNV>
        {
            public VkMemoryDecompressionMethodFlagsNV(vulkan.VkFlags64 value) => this.Value = value;
            
            public vulkan.VkFlags64 Value { get; }
            
            public override bool Equals(object obj) => obj is VkMemoryDecompressionMethodFlagsNV other && Equals(other);
            
            public bool Equals(VkMemoryDecompressionMethodFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags64 (vulkan.VkMemoryDecompressionMethodFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkMemoryDecompressionMethodFlagsNV (vulkan.VkFlags64 from) => new vulkan.VkMemoryDecompressionMethodFlagsNV(from);
            
            public static bool operator ==(VkMemoryDecompressionMethodFlagsNV left, VkMemoryDecompressionMethodFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkMemoryDecompressionMethodFlagsNV left, VkMemoryDecompressionMethodFlagsNV right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceMemoryDecompressionFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 memoryDecompression;
        }
        
        public partial struct VkPhysicalDeviceMemoryDecompressionPropertiesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkMemoryDecompressionMethodFlagsNV decompressionMethods;
            
            public ulong maxDecompressionIndirectCount;
        }
        
        public partial struct VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 deviceGeneratedCompute;
            
            public vulkan.VkBool32 deviceGeneratedComputePipelines;
            
            public vulkan.VkBool32 deviceGeneratedComputeCaptureReplay;
        }
        
        public partial struct VkComputePipelineIndirectBufferInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceAddress deviceAddress;
            
            public vulkan.VkDeviceSize size;
            
            public vulkan.VkDeviceAddress pipelineDeviceAddressCaptureReplay;
        }
        
        public partial struct VkPipelineIndirectDeviceAddressInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineBindPoint pipelineBindPoint;
            
            public vulkan.VkPipeline pipeline;
        }
        
        public partial struct VkBindPipelineIndirectCommandNV
        {
            public vulkan.VkDeviceAddress pipelineAddress;
        }
        
        public partial struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 linearColorAttachment;
        }
        
        public partial struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 imageCompressionControlSwapchain;
        }
        
        public partial struct VkImageViewSampleWeightCreateInfoQCOM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkOffset2D filterCenter;
            
            public vulkan.VkExtent2D filterSize;
            
            public uint numPhases;
        }
        
        public partial struct VkPhysicalDeviceImageProcessingFeaturesQCOM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 textureSampleWeighted;
            
            public vulkan.VkBool32 textureBoxFilter;
            
            public vulkan.VkBool32 textureBlockMatch;
        }
        
        public partial struct VkPhysicalDeviceImageProcessingPropertiesQCOM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxWeightFilterPhases;
            
            public vulkan.VkExtent2D maxWeightFilterDimension;
            
            public vulkan.VkExtent2D maxBlockMatchRegion;
            
            public vulkan.VkExtent2D maxBoxFilterBlockSize;
        }
        
        public partial struct VkExternalMemoryAcquireUnmodifiedEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 acquireUnmodifiedMemory;
        }
        
        public partial struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 extendedDynamicState3TessellationDomainOrigin;
            
            public vulkan.VkBool32 extendedDynamicState3DepthClampEnable;
            
            public vulkan.VkBool32 extendedDynamicState3PolygonMode;
            
            public vulkan.VkBool32 extendedDynamicState3RasterizationSamples;
            
            public vulkan.VkBool32 extendedDynamicState3SampleMask;
            
            public vulkan.VkBool32 extendedDynamicState3AlphaToCoverageEnable;
            
            public vulkan.VkBool32 extendedDynamicState3AlphaToOneEnable;
            
            public vulkan.VkBool32 extendedDynamicState3LogicOpEnable;
            
            public vulkan.VkBool32 extendedDynamicState3ColorBlendEnable;
            
            public vulkan.VkBool32 extendedDynamicState3ColorBlendEquation;
            
            public vulkan.VkBool32 extendedDynamicState3ColorWriteMask;
            
            public vulkan.VkBool32 extendedDynamicState3RasterizationStream;
            
            public vulkan.VkBool32 extendedDynamicState3ConservativeRasterizationMode;
            
            public vulkan.VkBool32 extendedDynamicState3ExtraPrimitiveOverestimationSize;
            
            public vulkan.VkBool32 extendedDynamicState3DepthClipEnable;
            
            public vulkan.VkBool32 extendedDynamicState3SampleLocationsEnable;
            
            public vulkan.VkBool32 extendedDynamicState3ColorBlendAdvanced;
            
            public vulkan.VkBool32 extendedDynamicState3ProvokingVertexMode;
            
            public vulkan.VkBool32 extendedDynamicState3LineRasterizationMode;
            
            public vulkan.VkBool32 extendedDynamicState3LineStippleEnable;
            
            public vulkan.VkBool32 extendedDynamicState3DepthClipNegativeOneToOne;
            
            public vulkan.VkBool32 extendedDynamicState3ViewportWScalingEnable;
            
            public vulkan.VkBool32 extendedDynamicState3ViewportSwizzle;
            
            public vulkan.VkBool32 extendedDynamicState3CoverageToColorEnable;
            
            public vulkan.VkBool32 extendedDynamicState3CoverageToColorLocation;
            
            public vulkan.VkBool32 extendedDynamicState3CoverageModulationMode;
            
            public vulkan.VkBool32 extendedDynamicState3CoverageModulationTableEnable;
            
            public vulkan.VkBool32 extendedDynamicState3CoverageModulationTable;
            
            public vulkan.VkBool32 extendedDynamicState3CoverageReductionMode;
            
            public vulkan.VkBool32 extendedDynamicState3RepresentativeFragmentTestEnable;
            
            public vulkan.VkBool32 extendedDynamicState3ShadingRateImageEnable;
        }
        
        public partial struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 dynamicPrimitiveTopologyUnrestricted;
        }
        
        public partial struct VkColorBlendEquationEXT
        {
            public vulkan.VkBlendFactor srcColorBlendFactor;
            
            public vulkan.VkBlendFactor dstColorBlendFactor;
            
            public vulkan.VkBlendOp colorBlendOp;
            
            public vulkan.VkBlendFactor srcAlphaBlendFactor;
            
            public vulkan.VkBlendFactor dstAlphaBlendFactor;
            
            public vulkan.VkBlendOp alphaBlendOp;
        }
        
        public partial struct VkColorBlendAdvancedEXT
        {
            public vulkan.VkBlendOp advancedBlendOp;
            
            public vulkan.VkBool32 srcPremultiplied;
            
            public vulkan.VkBool32 dstPremultiplied;
            
            public vulkan.VkBlendOverlapEXT blendOverlap;
            
            public vulkan.VkBool32 clampResults;
        }
        
        public partial struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 subpassMergeFeedback;
        }
        
        public partial struct VkRenderPassCreationControlEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 disallowMerging;
        }
        
        public partial struct VkRenderPassCreationFeedbackInfoEXT
        {
            public uint postMergeSubpassCount;
        }
        
        public partial struct VkRenderPassCreationFeedbackCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkRenderPassCreationFeedbackInfoEXT* pRenderPassFeedback;
        }
        
        public unsafe partial struct VkRenderPassSubpassFeedbackInfoEXT
        {
            public vulkan.VkSubpassMergeStatusEXT subpassMergeStatus;
            
            public fixed byte description[256];
            
            public uint postMergeIndex;
        }
        
        public partial struct VkRenderPassSubpassFeedbackCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkRenderPassSubpassFeedbackInfoEXT* pSubpassFeedback;
        }
        
        public partial struct VkDirectDriverLoadingInfoLUNARG
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDirectDriverLoadingFlagsLUNARG flags;
            
            public vulkan.PFN_vkGetInstanceProcAddrLUNARG pfnGetInstanceProcAddr;
        }
        
        public readonly partial struct VkDirectDriverLoadingFlagsLUNARG : IEquatable<VkDirectDriverLoadingFlagsLUNARG>
        {
            public VkDirectDriverLoadingFlagsLUNARG(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDirectDriverLoadingFlagsLUNARG other && Equals(other);
            
            public bool Equals(VkDirectDriverLoadingFlagsLUNARG other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDirectDriverLoadingFlagsLUNARG from) => from.Value;
            
            public static implicit operator vulkan.VkDirectDriverLoadingFlagsLUNARG (vulkan.VkFlags from) => new vulkan.VkDirectDriverLoadingFlagsLUNARG(from);
            
            public static bool operator ==(VkDirectDriverLoadingFlagsLUNARG left, VkDirectDriverLoadingFlagsLUNARG right) => left.Equals(right);
            
            public static bool operator !=(VkDirectDriverLoadingFlagsLUNARG left, VkDirectDriverLoadingFlagsLUNARG right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkVoidFunction : IEquatable<PFN_vkVoidFunction>
        {
            public PFN_vkVoidFunction(delegate*unmanaged[Stdcall]<void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkVoidFunction other && Equals(other);
            
            public bool Equals(PFN_vkVoidFunction other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<void> (vulkan.PFN_vkVoidFunction from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkVoidFunction (delegate*unmanaged[Stdcall]<void> from) => new vulkan.PFN_vkVoidFunction(from);
            
            public static bool operator ==(PFN_vkVoidFunction left, PFN_vkVoidFunction right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkVoidFunction left, PFN_vkVoidFunction right) => !left.Equals(right);
        }
        
        public readonly partial struct VkInstance : IEquatable<VkInstance>
        {
            public VkInstance(vulkan.VkInstance_T value) => this.Value = value;
            
            public vulkan.VkInstance_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkInstance other && Equals(other);
            
            public bool Equals(VkInstance other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkInstance_T (vulkan.VkInstance from) => from.Value;
            
            public static implicit operator vulkan.VkInstance (vulkan.VkInstance_T from) => new vulkan.VkInstance(from);
            
            public static bool operator ==(VkInstance left, VkInstance right) => left.Equals(right);
            
            public static bool operator !=(VkInstance left, VkInstance right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetInstanceProcAddrLUNARG : IEquatable<PFN_vkGetInstanceProcAddrLUNARG>
        {
            public PFN_vkGetInstanceProcAddrLUNARG(delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetInstanceProcAddrLUNARG other && Equals(other);
            
            public bool Equals(PFN_vkGetInstanceProcAddrLUNARG other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> (vulkan.PFN_vkGetInstanceProcAddrLUNARG from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetInstanceProcAddrLUNARG (delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> from) => new vulkan.PFN_vkGetInstanceProcAddrLUNARG(from);
            
            public static bool operator ==(PFN_vkGetInstanceProcAddrLUNARG left, PFN_vkGetInstanceProcAddrLUNARG right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetInstanceProcAddrLUNARG left, PFN_vkGetInstanceProcAddrLUNARG right) => !left.Equals(right);
        }
        
        public partial struct VkDirectDriverLoadingListLUNARG
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDirectDriverLoadingModeLUNARG mode;
            
            public uint driverCount;
            
            public vulkan.VkDirectDriverLoadingInfoLUNARG* pDrivers;
        }
        
        public partial struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderModuleIdentifier;
        }
        
        public unsafe partial struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public fixed byte shaderModuleIdentifierAlgorithmUUID[16];
        }
        
        public partial struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint identifierSize;
            
            public byte* pIdentifier;
        }
        
        public unsafe partial struct VkShaderModuleIdentifierEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint identifierSize;
            
            public fixed byte identifier[32];
        }
        
        public partial struct VkPhysicalDeviceOpticalFlowFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 opticalFlow;
        }
        
        public partial struct VkPhysicalDeviceOpticalFlowPropertiesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes;
            
            public vulkan.VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes;
            
            public vulkan.VkBool32 hintSupported;
            
            public vulkan.VkBool32 costSupported;
            
            public vulkan.VkBool32 bidirectionalFlowSupported;
            
            public vulkan.VkBool32 globalFlowSupported;
            
            public uint minWidth;
            
            public uint minHeight;
            
            public uint maxWidth;
            
            public uint maxHeight;
            
            public uint maxNumRegionsOfInterest;
        }
        
        public readonly partial struct VkOpticalFlowGridSizeFlagsNV : IEquatable<VkOpticalFlowGridSizeFlagsNV>
        {
            public VkOpticalFlowGridSizeFlagsNV(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkOpticalFlowGridSizeFlagsNV other && Equals(other);
            
            public bool Equals(VkOpticalFlowGridSizeFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkOpticalFlowGridSizeFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkOpticalFlowGridSizeFlagsNV (vulkan.VkFlags from) => new vulkan.VkOpticalFlowGridSizeFlagsNV(from);
            
            public static bool operator ==(VkOpticalFlowGridSizeFlagsNV left, VkOpticalFlowGridSizeFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkOpticalFlowGridSizeFlagsNV left, VkOpticalFlowGridSizeFlagsNV right) => !left.Equals(right);
        }
        
        public partial struct VkOpticalFlowImageFormatInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkOpticalFlowUsageFlagsNV usage;
        }
        
        public readonly partial struct VkOpticalFlowUsageFlagsNV : IEquatable<VkOpticalFlowUsageFlagsNV>
        {
            public VkOpticalFlowUsageFlagsNV(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkOpticalFlowUsageFlagsNV other && Equals(other);
            
            public bool Equals(VkOpticalFlowUsageFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkOpticalFlowUsageFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkOpticalFlowUsageFlagsNV (vulkan.VkFlags from) => new vulkan.VkOpticalFlowUsageFlagsNV(from);
            
            public static bool operator ==(VkOpticalFlowUsageFlagsNV left, VkOpticalFlowUsageFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkOpticalFlowUsageFlagsNV left, VkOpticalFlowUsageFlagsNV right) => !left.Equals(right);
        }
        
        public partial struct VkOpticalFlowImageFormatPropertiesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFormat format;
        }
        
        public partial struct VkOpticalFlowSessionCreateInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint width;
            
            public uint height;
            
            public vulkan.VkFormat imageFormat;
            
            public vulkan.VkFormat flowVectorFormat;
            
            public vulkan.VkFormat costFormat;
            
            public vulkan.VkOpticalFlowGridSizeFlagsNV outputGridSize;
            
            public vulkan.VkOpticalFlowGridSizeFlagsNV hintGridSize;
            
            public vulkan.VkOpticalFlowPerformanceLevelNV performanceLevel;
            
            public vulkan.VkOpticalFlowSessionCreateFlagsNV flags;
        }
        
        public readonly partial struct VkOpticalFlowSessionCreateFlagsNV : IEquatable<VkOpticalFlowSessionCreateFlagsNV>
        {
            public VkOpticalFlowSessionCreateFlagsNV(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkOpticalFlowSessionCreateFlagsNV other && Equals(other);
            
            public bool Equals(VkOpticalFlowSessionCreateFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkOpticalFlowSessionCreateFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkOpticalFlowSessionCreateFlagsNV (vulkan.VkFlags from) => new vulkan.VkOpticalFlowSessionCreateFlagsNV(from);
            
            public static bool operator ==(VkOpticalFlowSessionCreateFlagsNV left, VkOpticalFlowSessionCreateFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkOpticalFlowSessionCreateFlagsNV left, VkOpticalFlowSessionCreateFlagsNV right) => !left.Equals(right);
        }
        
        public partial struct VkOpticalFlowSessionCreatePrivateDataInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint id;
            
            public uint size;
            
            public void* pPrivateData;
        }
        
        public partial struct VkOpticalFlowExecuteInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkOpticalFlowExecuteFlagsNV flags;
            
            public uint regionCount;
            
            public vulkan.VkRect2D* pRegions;
        }
        
        public readonly partial struct VkOpticalFlowExecuteFlagsNV : IEquatable<VkOpticalFlowExecuteFlagsNV>
        {
            public VkOpticalFlowExecuteFlagsNV(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkOpticalFlowExecuteFlagsNV other && Equals(other);
            
            public bool Equals(VkOpticalFlowExecuteFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkOpticalFlowExecuteFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkOpticalFlowExecuteFlagsNV (vulkan.VkFlags from) => new vulkan.VkOpticalFlowExecuteFlagsNV(from);
            
            public static bool operator ==(VkOpticalFlowExecuteFlagsNV left, VkOpticalFlowExecuteFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkOpticalFlowExecuteFlagsNV left, VkOpticalFlowExecuteFlagsNV right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceLegacyDitheringFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 legacyDithering;
        }
        
        public partial struct VkPhysicalDevicePipelineProtectedAccessFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 pipelineProtectedAccess;
        }
        
        public partial struct VkPhysicalDeviceShaderObjectFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderObject;
        }
        
        public unsafe partial struct VkPhysicalDeviceShaderObjectPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public fixed byte shaderBinaryUUID[16];
            
            public uint shaderBinaryVersion;
        }
        
        public partial struct VkShaderCreateInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkShaderCreateFlagsEXT flags;
            
            public vulkan.VkShaderStageFlagBits stage;
            
            public vulkan.VkShaderStageFlags nextStage;
            
            public vulkan.VkShaderCodeTypeEXT codeType;
            
            public nuint codeSize;
            
            public void* pCode;
            
            public byte* pName;
            
            public uint setLayoutCount;
            
            public vulkan.VkDescriptorSetLayout* pSetLayouts;
            
            public uint pushConstantRangeCount;
            
            public vulkan.VkPushConstantRange* pPushConstantRanges;
            
            public vulkan.VkSpecializationInfo* pSpecializationInfo;
        }
        
        public readonly partial struct VkShaderCreateFlagsEXT : IEquatable<VkShaderCreateFlagsEXT>
        {
            public VkShaderCreateFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkShaderCreateFlagsEXT other && Equals(other);
            
            public bool Equals(VkShaderCreateFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkShaderCreateFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkShaderCreateFlagsEXT (vulkan.VkFlags from) => new vulkan.VkShaderCreateFlagsEXT(from);
            
            public static bool operator ==(VkShaderCreateFlagsEXT left, VkShaderCreateFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkShaderCreateFlagsEXT left, VkShaderCreateFlagsEXT right) => !left.Equals(right);
        }
        
        public partial struct VkPhysicalDeviceTilePropertiesFeaturesQCOM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 tileProperties;
        }
        
        public partial struct VkTilePropertiesQCOM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExtent3D tileSize;
            
            public vulkan.VkExtent2D apronSize;
            
            public vulkan.VkOffset2D origin;
        }
        
        public partial struct VkPhysicalDeviceAmigoProfilingFeaturesSEC
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 amigoProfiling;
        }
        
        public partial struct VkAmigoProfilingSubmitInfoSEC
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public ulong firstDrawTimestamp;
            
            public ulong swapBufferTimestamp;
        }
        
        public partial struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 multiviewPerViewViewports;
        }
        
        public partial struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkRayTracingInvocationReorderModeNV rayTracingInvocationReorderReorderingHint;
        }
        
        public partial struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 rayTracingInvocationReorder;
        }
        
        public partial struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 shaderCoreBuiltins;
        }
        
        public partial struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public ulong shaderCoreMask;
            
            public uint shaderCoreCount;
            
            public uint shaderWarpsPerCore;
        }
        
        public partial struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 pipelineLibraryGroupHandles;
        }
        
        public partial struct VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 dynamicRenderingUnusedAttachments;
        }
        
        public partial struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 multiviewPerViewRenderAreas;
        }
        
        public partial struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint perViewRenderAreaCount;
            
            public vulkan.VkRect2D* pPerViewRenderAreas;
        }
        
        public partial struct VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 attachmentFeedbackLoopDynamicState;
        }
        
        public partial struct VkAccelerationStructureBuildRangeInfoKHR
        {
            public uint primitiveCount;
            
            public uint primitiveOffset;
            
            public uint firstVertex;
            
            public uint transformOffset;
        }
        
        public partial struct VkAccelerationStructureGeometryTrianglesDataKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFormat vertexFormat;
            
            public vulkan.VkDeviceOrHostAddressConstKHR vertexData;
            
            public vulkan.VkDeviceSize vertexStride;
            
            public uint maxVertex;
            
            public vulkan.VkIndexType indexType;
            
            public vulkan.VkDeviceOrHostAddressConstKHR indexData;
            
            public vulkan.VkDeviceOrHostAddressConstKHR transformData;
        }
        
        public partial struct VkAccelerationStructureGeometryAabbsDataKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceOrHostAddressConstKHR data;
            
            public vulkan.VkDeviceSize stride;
        }
        
        public partial struct VkAccelerationStructureGeometryInstancesDataKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 arrayOfPointers;
            
            public vulkan.VkDeviceOrHostAddressConstKHR data;
        }
        
        [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
        public partial struct VkAccelerationStructureGeometryDataKHR
        {
            [FieldOffset(0)]
            public vulkan.VkAccelerationStructureGeometryTrianglesDataKHR triangles;
            
            [FieldOffset(0)]
            public vulkan.VkAccelerationStructureGeometryAabbsDataKHR aabbs;
            
            [FieldOffset(0)]
            public vulkan.VkAccelerationStructureGeometryInstancesDataKHR instances;
        }
        
        public partial struct VkAccelerationStructureGeometryKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkGeometryTypeKHR geometryType;
            
            public vulkan.VkAccelerationStructureGeometryDataKHR geometry;
            
            public vulkan.VkGeometryFlagsKHR flags;
        }
        
        public partial struct VkAccelerationStructureBuildGeometryInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAccelerationStructureTypeKHR type;
            
            public vulkan.VkBuildAccelerationStructureFlagsKHR flags;
            
            public vulkan.VkBuildAccelerationStructureModeKHR mode;
            
            public vulkan.VkAccelerationStructureKHR srcAccelerationStructure;
            
            public vulkan.VkAccelerationStructureKHR dstAccelerationStructure;
            
            public uint geometryCount;
            
            public vulkan.VkAccelerationStructureGeometryKHR* pGeometries;
            
            public vulkan.VkAccelerationStructureGeometryKHR** ppGeometries;
            
            public vulkan.VkDeviceOrHostAddressKHR scratchData;
        }
        
        public partial struct VkAccelerationStructureCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAccelerationStructureCreateFlagsKHR createFlags;
            
            public vulkan.VkBuffer buffer;
            
            public vulkan.VkDeviceSize offset;
            
            public vulkan.VkDeviceSize size;
            
            public vulkan.VkAccelerationStructureTypeKHR type;
            
            public vulkan.VkDeviceAddress deviceAddress;
        }
        
        public readonly partial struct VkAccelerationStructureCreateFlagsKHR : IEquatable<VkAccelerationStructureCreateFlagsKHR>
        {
            public VkAccelerationStructureCreateFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkAccelerationStructureCreateFlagsKHR other && Equals(other);
            
            public bool Equals(VkAccelerationStructureCreateFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkAccelerationStructureCreateFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkAccelerationStructureCreateFlagsKHR (vulkan.VkFlags from) => new vulkan.VkAccelerationStructureCreateFlagsKHR(from);
            
            public static bool operator ==(VkAccelerationStructureCreateFlagsKHR left, VkAccelerationStructureCreateFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkAccelerationStructureCreateFlagsKHR left, VkAccelerationStructureCreateFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkWriteDescriptorSetAccelerationStructureKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint accelerationStructureCount;
            
            public vulkan.VkAccelerationStructureKHR* pAccelerationStructures;
        }
        
        public partial struct VkPhysicalDeviceAccelerationStructureFeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 accelerationStructure;
            
            public vulkan.VkBool32 accelerationStructureCaptureReplay;
            
            public vulkan.VkBool32 accelerationStructureIndirectBuild;
            
            public vulkan.VkBool32 accelerationStructureHostCommands;
            
            public vulkan.VkBool32 descriptorBindingAccelerationStructureUpdateAfterBind;
        }
        
        public partial struct VkPhysicalDeviceAccelerationStructurePropertiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public ulong maxGeometryCount;
            
            public ulong maxInstanceCount;
            
            public ulong maxPrimitiveCount;
            
            public uint maxPerStageDescriptorAccelerationStructures;
            
            public uint maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
            
            public uint maxDescriptorSetAccelerationStructures;
            
            public uint maxDescriptorSetUpdateAfterBindAccelerationStructures;
            
            public uint minAccelerationStructureScratchOffsetAlignment;
        }
        
        public partial struct VkAccelerationStructureDeviceAddressInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAccelerationStructureKHR accelerationStructure;
        }
        
        public partial struct VkAccelerationStructureVersionInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public byte* pVersionData;
        }
        
        public partial struct VkCopyAccelerationStructureToMemoryInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAccelerationStructureKHR src;
            
            public vulkan.VkDeviceOrHostAddressKHR dst;
            
            public vulkan.VkCopyAccelerationStructureModeKHR mode;
        }
        
        public partial struct VkCopyMemoryToAccelerationStructureInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceOrHostAddressConstKHR src;
            
            public vulkan.VkAccelerationStructureKHR dst;
            
            public vulkan.VkCopyAccelerationStructureModeKHR mode;
        }
        
        public partial struct VkCopyAccelerationStructureInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAccelerationStructureKHR src;
            
            public vulkan.VkAccelerationStructureKHR dst;
            
            public vulkan.VkCopyAccelerationStructureModeKHR mode;
        }
        
        public partial struct VkAccelerationStructureBuildSizesInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceSize accelerationStructureSize;
            
            public vulkan.VkDeviceSize updateScratchSize;
            
            public vulkan.VkDeviceSize buildScratchSize;
        }
        
        public partial struct VkRayTracingShaderGroupCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkRayTracingShaderGroupTypeKHR type;
            
            public uint generalShader;
            
            public uint closestHitShader;
            
            public uint anyHitShader;
            
            public uint intersectionShader;
            
            public void* pShaderGroupCaptureReplayHandle;
        }
        
        public partial struct VkRayTracingPipelineInterfaceCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxPipelineRayPayloadSize;
            
            public uint maxPipelineRayHitAttributeSize;
        }
        
        public partial struct VkRayTracingPipelineCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkPipelineCreateFlags flags;
            
            public uint stageCount;
            
            public vulkan.VkPipelineShaderStageCreateInfo* pStages;
            
            public uint groupCount;
            
            public vulkan.VkRayTracingShaderGroupCreateInfoKHR* pGroups;
            
            public uint maxPipelineRayRecursionDepth;
            
            public vulkan.VkPipelineLibraryCreateInfoKHR* pLibraryInfo;
            
            public vulkan.VkRayTracingPipelineInterfaceCreateInfoKHR* pLibraryInterface;
            
            public vulkan.VkPipelineDynamicStateCreateInfo* pDynamicState;
            
            public vulkan.VkPipelineLayout layout;
            
            public vulkan.VkPipeline basePipelineHandle;
            
            public int basePipelineIndex;
        }
        
        public partial struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 rayTracingPipeline;
            
            public vulkan.VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplay;
            
            public vulkan.VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplayMixed;
            
            public vulkan.VkBool32 rayTracingPipelineTraceRaysIndirect;
            
            public vulkan.VkBool32 rayTraversalPrimitiveCulling;
        }
        
        public partial struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint shaderGroupHandleSize;
            
            public uint maxRayRecursionDepth;
            
            public uint maxShaderGroupStride;
            
            public uint shaderGroupBaseAlignment;
            
            public uint shaderGroupHandleCaptureReplaySize;
            
            public uint maxRayDispatchInvocationCount;
            
            public uint shaderGroupHandleAlignment;
            
            public uint maxRayHitAttributeSize;
        }
        
        public partial struct VkStridedDeviceAddressRegionKHR
        {
            public vulkan.VkDeviceAddress deviceAddress;
            
            public vulkan.VkDeviceSize stride;
            
            public vulkan.VkDeviceSize size;
        }
        
        public partial struct VkTraceRaysIndirectCommandKHR
        {
            public uint width;
            
            public uint height;
            
            public uint depth;
        }
        
        public partial struct VkPhysicalDeviceRayQueryFeaturesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 rayQuery;
        }
        
        public partial struct VkPhysicalDeviceMeshShaderFeaturesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 taskShader;
            
            public vulkan.VkBool32 meshShader;
            
            public vulkan.VkBool32 multiviewMeshShader;
            
            public vulkan.VkBool32 primitiveFragmentShadingRateMeshShader;
            
            public vulkan.VkBool32 meshShaderQueries;
        }
        
        public unsafe partial struct VkPhysicalDeviceMeshShaderPropertiesEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint maxTaskWorkGroupTotalCount;
            
            public fixed uint maxTaskWorkGroupCount[3];
            
            public uint maxTaskWorkGroupInvocations;
            
            public fixed uint maxTaskWorkGroupSize[3];
            
            public uint maxTaskPayloadSize;
            
            public uint maxTaskSharedMemorySize;
            
            public uint maxTaskPayloadAndSharedMemorySize;
            
            public uint maxMeshWorkGroupTotalCount;
            
            public fixed uint maxMeshWorkGroupCount[3];
            
            public uint maxMeshWorkGroupInvocations;
            
            public fixed uint maxMeshWorkGroupSize[3];
            
            public uint maxMeshSharedMemorySize;
            
            public uint maxMeshPayloadAndSharedMemorySize;
            
            public uint maxMeshOutputMemorySize;
            
            public uint maxMeshPayloadAndOutputMemorySize;
            
            public uint maxMeshOutputComponents;
            
            public uint maxMeshOutputVertices;
            
            public uint maxMeshOutputPrimitives;
            
            public uint maxMeshOutputLayers;
            
            public uint maxMeshMultiviewViewCount;
            
            public uint meshOutputPerVertexGranularity;
            
            public uint meshOutputPerPrimitiveGranularity;
            
            public uint maxPreferredTaskWorkGroupInvocations;
            
            public uint maxPreferredMeshWorkGroupInvocations;
            
            public vulkan.VkBool32 prefersLocalInvocationVertexOutput;
            
            public vulkan.VkBool32 prefersLocalInvocationPrimitiveOutput;
            
            public vulkan.VkBool32 prefersCompactVertexOutput;
            
            public vulkan.VkBool32 prefersCompactPrimitiveOutput;
        }
        
        public partial struct VkDrawMeshTasksIndirectCommandEXT
        {
            public uint groupCountX;
            
            public uint groupCountY;
            
            public uint groupCountZ;
        }
        
        public readonly partial struct VkQueue : IEquatable<VkQueue>
        {
            public VkQueue(vulkan.VkQueue_T value) => this.Value = value;
            
            public vulkan.VkQueue_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkQueue other && Equals(other);
            
            public bool Equals(VkQueue other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkQueue_T (vulkan.VkQueue from) => from.Value;
            
            public static implicit operator vulkan.VkQueue (vulkan.VkQueue_T from) => new vulkan.VkQueue(from);
            
            public static bool operator ==(VkQueue left, VkQueue right) => left.Equals(right);
            
            public static bool operator !=(VkQueue left, VkQueue right) => !left.Equals(right);
        }
        
        public readonly partial struct VkEvent : IEquatable<VkEvent>
        {
            public VkEvent(vulkan.VkEvent_T value) => this.Value = value;
            
            public vulkan.VkEvent_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkEvent other && Equals(other);
            
            public bool Equals(VkEvent other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkEvent_T (vulkan.VkEvent from) => from.Value;
            
            public static implicit operator vulkan.VkEvent (vulkan.VkEvent_T from) => new vulkan.VkEvent(from);
            
            public static bool operator ==(VkEvent left, VkEvent right) => left.Equals(right);
            
            public static bool operator !=(VkEvent left, VkEvent right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDevice : IEquatable<VkDevice>
        {
            public VkDevice(vulkan.VkDevice_T value) => this.Value = value;
            
            public vulkan.VkDevice_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkDevice other && Equals(other);
            
            public bool Equals(VkDevice other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDevice_T (vulkan.VkDevice from) => from.Value;
            
            public static implicit operator vulkan.VkDevice (vulkan.VkDevice_T from) => new vulkan.VkDevice(from);
            
            public static bool operator ==(VkDevice left, VkDevice right) => left.Equals(right);
            
            public static bool operator !=(VkDevice left, VkDevice right) => !left.Equals(right);
        }
        
        public readonly partial struct VkQueryPool : IEquatable<VkQueryPool>
        {
            public VkQueryPool(vulkan.VkQueryPool_T value) => this.Value = value;
            
            public vulkan.VkQueryPool_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkQueryPool other && Equals(other);
            
            public bool Equals(VkQueryPool other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkQueryPool_T (vulkan.VkQueryPool from) => from.Value;
            
            public static implicit operator vulkan.VkQueryPool (vulkan.VkQueryPool_T from) => new vulkan.VkQueryPool(from);
            
            public static bool operator ==(VkQueryPool left, VkQueryPool right) => left.Equals(right);
            
            public static bool operator !=(VkQueryPool left, VkQueryPool right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineCache : IEquatable<VkPipelineCache>
        {
            public VkPipelineCache(vulkan.VkPipelineCache_T value) => this.Value = value;
            
            public vulkan.VkPipelineCache_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineCache other && Equals(other);
            
            public bool Equals(VkPipelineCache other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPipelineCache_T (vulkan.VkPipelineCache from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineCache (vulkan.VkPipelineCache_T from) => new vulkan.VkPipelineCache(from);
            
            public static bool operator ==(VkPipelineCache left, VkPipelineCache right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineCache left, VkPipelineCache right) => !left.Equals(right);
        }
        
        public readonly partial struct VkQueryResultFlags : IEquatable<VkQueryResultFlags>
        {
            public VkQueryResultFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkQueryResultFlags other && Equals(other);
            
            public bool Equals(VkQueryResultFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkQueryResultFlags from) => from.Value;
            
            public static implicit operator vulkan.VkQueryResultFlags (vulkan.VkFlags from) => new vulkan.VkQueryResultFlags(from);
            
            public static bool operator ==(VkQueryResultFlags left, VkQueryResultFlags right) => left.Equals(right);
            
            public static bool operator !=(VkQueryResultFlags left, VkQueryResultFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorPoolResetFlags : IEquatable<VkDescriptorPoolResetFlags>
        {
            public VkDescriptorPoolResetFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorPoolResetFlags other && Equals(other);
            
            public bool Equals(VkDescriptorPoolResetFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDescriptorPoolResetFlags from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorPoolResetFlags (vulkan.VkFlags from) => new vulkan.VkDescriptorPoolResetFlags(from);
            
            public static bool operator ==(VkDescriptorPoolResetFlags left, VkDescriptorPoolResetFlags right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorPoolResetFlags left, VkDescriptorPoolResetFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCommandPoolResetFlags : IEquatable<VkCommandPoolResetFlags>
        {
            public VkCommandPoolResetFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkCommandPoolResetFlags other && Equals(other);
            
            public bool Equals(VkCommandPoolResetFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkCommandPoolResetFlags from) => from.Value;
            
            public static implicit operator vulkan.VkCommandPoolResetFlags (vulkan.VkFlags from) => new vulkan.VkCommandPoolResetFlags(from);
            
            public static bool operator ==(VkCommandPoolResetFlags left, VkCommandPoolResetFlags right) => left.Equals(right);
            
            public static bool operator !=(VkCommandPoolResetFlags left, VkCommandPoolResetFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCommandBufferResetFlags : IEquatable<VkCommandBufferResetFlags>
        {
            public VkCommandBufferResetFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkCommandBufferResetFlags other && Equals(other);
            
            public bool Equals(VkCommandBufferResetFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkCommandBufferResetFlags from) => from.Value;
            
            public static implicit operator vulkan.VkCommandBufferResetFlags (vulkan.VkFlags from) => new vulkan.VkCommandBufferResetFlags(from);
            
            public static bool operator ==(VkCommandBufferResetFlags left, VkCommandBufferResetFlags right) => left.Equals(right);
            
            public static bool operator !=(VkCommandBufferResetFlags left, VkCommandBufferResetFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkStencilFaceFlags : IEquatable<VkStencilFaceFlags>
        {
            public VkStencilFaceFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkStencilFaceFlags other && Equals(other);
            
            public bool Equals(VkStencilFaceFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkStencilFaceFlags from) => from.Value;
            
            public static implicit operator vulkan.VkStencilFaceFlags (vulkan.VkFlags from) => new vulkan.VkStencilFaceFlags(from);
            
            public static bool operator ==(VkStencilFaceFlags left, VkStencilFaceFlags right) => left.Equals(right);
            
            public static bool operator !=(VkStencilFaceFlags left, VkStencilFaceFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateInstance : IEquatable<PFN_vkCreateInstance>
        {
            public PFN_vkCreateInstance(delegate*unmanaged[Stdcall]<vulkan.VkInstanceCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkInstance*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstanceCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkInstance*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateInstance other && Equals(other);
            
            public bool Equals(PFN_vkCreateInstance other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstanceCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkInstance*, vulkan.VkResult> (vulkan.PFN_vkCreateInstance from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateInstance (delegate*unmanaged[Stdcall]<vulkan.VkInstanceCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkInstance*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateInstance(from);
            
            public static bool operator ==(PFN_vkCreateInstance left, PFN_vkCreateInstance right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateInstance left, PFN_vkCreateInstance right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyInstance : IEquatable<PFN_vkDestroyInstance>
        {
            public PFN_vkDestroyInstance(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyInstance other && Equals(other);
            
            public bool Equals(PFN_vkDestroyInstance other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyInstance from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyInstance (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyInstance(from);
            
            public static bool operator ==(PFN_vkDestroyInstance left, PFN_vkDestroyInstance right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyInstance left, PFN_vkDestroyInstance right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkEnumeratePhysicalDevices : IEquatable<PFN_vkEnumeratePhysicalDevices>
        {
            public PFN_vkEnumeratePhysicalDevices(delegate*unmanaged[Stdcall]<vulkan.VkInstance, uint*, vulkan.VkPhysicalDevice*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, uint*, vulkan.VkPhysicalDevice*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkEnumeratePhysicalDevices other && Equals(other);
            
            public bool Equals(PFN_vkEnumeratePhysicalDevices other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, uint*, vulkan.VkPhysicalDevice*, vulkan.VkResult> (vulkan.PFN_vkEnumeratePhysicalDevices from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkEnumeratePhysicalDevices (delegate*unmanaged[Stdcall]<vulkan.VkInstance, uint*, vulkan.VkPhysicalDevice*, vulkan.VkResult> from) => new vulkan.PFN_vkEnumeratePhysicalDevices(from);
            
            public static bool operator ==(PFN_vkEnumeratePhysicalDevices left, PFN_vkEnumeratePhysicalDevices right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkEnumeratePhysicalDevices left, PFN_vkEnumeratePhysicalDevices right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceFeatures : IEquatable<PFN_vkGetPhysicalDeviceFeatures>
        {
            public PFN_vkGetPhysicalDeviceFeatures(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceFeatures*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceFeatures*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceFeatures other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceFeatures other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceFeatures*, void> (vulkan.PFN_vkGetPhysicalDeviceFeatures from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceFeatures (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceFeatures*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceFeatures(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceFeatures left, PFN_vkGetPhysicalDeviceFeatures right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceFeatures left, PFN_vkGetPhysicalDeviceFeatures right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceFormatProperties : IEquatable<PFN_vkGetPhysicalDeviceFormatProperties>
        {
            public PFN_vkGetPhysicalDeviceFormatProperties(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkFormatProperties*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkFormatProperties*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceFormatProperties other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceFormatProperties other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkFormatProperties*, void> (vulkan.PFN_vkGetPhysicalDeviceFormatProperties from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceFormatProperties (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkFormatProperties*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceFormatProperties(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceFormatProperties left, PFN_vkGetPhysicalDeviceFormatProperties right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceFormatProperties left, PFN_vkGetPhysicalDeviceFormatProperties right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceImageFormatProperties : IEquatable<PFN_vkGetPhysicalDeviceImageFormatProperties>
        {
            public PFN_vkGetPhysicalDeviceImageFormatProperties(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkImageType, vulkan.VkImageTiling, vulkan.VkImageUsageFlags, vulkan.VkImageCreateFlags, vulkan.VkImageFormatProperties*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkImageType, vulkan.VkImageTiling, vulkan.VkImageUsageFlags, vulkan.VkImageCreateFlags, vulkan.VkImageFormatProperties*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceImageFormatProperties other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceImageFormatProperties other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkImageType, vulkan.VkImageTiling, vulkan.VkImageUsageFlags, vulkan.VkImageCreateFlags, vulkan.VkImageFormatProperties*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceImageFormatProperties from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceImageFormatProperties (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkImageType, vulkan.VkImageTiling, vulkan.VkImageUsageFlags, vulkan.VkImageCreateFlags, vulkan.VkImageFormatProperties*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceImageFormatProperties(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceImageFormatProperties left, PFN_vkGetPhysicalDeviceImageFormatProperties right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceImageFormatProperties left, PFN_vkGetPhysicalDeviceImageFormatProperties right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceProperties : IEquatable<PFN_vkGetPhysicalDeviceProperties>
        {
            public PFN_vkGetPhysicalDeviceProperties(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceProperties*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceProperties*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceProperties other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceProperties other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceProperties*, void> (vulkan.PFN_vkGetPhysicalDeviceProperties from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceProperties (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceProperties*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceProperties(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceProperties left, PFN_vkGetPhysicalDeviceProperties right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceProperties left, PFN_vkGetPhysicalDeviceProperties right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceQueueFamilyProperties : IEquatable<PFN_vkGetPhysicalDeviceQueueFamilyProperties>
        {
            public PFN_vkGetPhysicalDeviceQueueFamilyProperties(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkQueueFamilyProperties*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkQueueFamilyProperties*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceQueueFamilyProperties other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceQueueFamilyProperties other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkQueueFamilyProperties*, void> (vulkan.PFN_vkGetPhysicalDeviceQueueFamilyProperties from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceQueueFamilyProperties (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkQueueFamilyProperties*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceQueueFamilyProperties(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceQueueFamilyProperties left, PFN_vkGetPhysicalDeviceQueueFamilyProperties right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceQueueFamilyProperties left, PFN_vkGetPhysicalDeviceQueueFamilyProperties right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceMemoryProperties : IEquatable<PFN_vkGetPhysicalDeviceMemoryProperties>
        {
            public PFN_vkGetPhysicalDeviceMemoryProperties(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceMemoryProperties*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceMemoryProperties*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceMemoryProperties other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceMemoryProperties other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceMemoryProperties*, void> (vulkan.PFN_vkGetPhysicalDeviceMemoryProperties from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceMemoryProperties (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceMemoryProperties*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceMemoryProperties(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceMemoryProperties left, PFN_vkGetPhysicalDeviceMemoryProperties right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceMemoryProperties left, PFN_vkGetPhysicalDeviceMemoryProperties right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetInstanceProcAddr : IEquatable<PFN_vkGetInstanceProcAddr>
        {
            public PFN_vkGetInstanceProcAddr(delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetInstanceProcAddr other && Equals(other);
            
            public bool Equals(PFN_vkGetInstanceProcAddr other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> (vulkan.PFN_vkGetInstanceProcAddr from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetInstanceProcAddr (delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> from) => new vulkan.PFN_vkGetInstanceProcAddr(from);
            
            public static bool operator ==(PFN_vkGetInstanceProcAddr left, PFN_vkGetInstanceProcAddr right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetInstanceProcAddr left, PFN_vkGetInstanceProcAddr right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceProcAddr : IEquatable<PFN_vkGetDeviceProcAddr>
        {
            public PFN_vkGetDeviceProcAddr(delegate*unmanaged[Stdcall]<vulkan.VkDevice, byte*, vulkan.PFN_vkVoidFunction> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, byte*, vulkan.PFN_vkVoidFunction> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceProcAddr other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceProcAddr other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, byte*, vulkan.PFN_vkVoidFunction> (vulkan.PFN_vkGetDeviceProcAddr from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceProcAddr (delegate*unmanaged[Stdcall]<vulkan.VkDevice, byte*, vulkan.PFN_vkVoidFunction> from) => new vulkan.PFN_vkGetDeviceProcAddr(from);
            
            public static bool operator ==(PFN_vkGetDeviceProcAddr left, PFN_vkGetDeviceProcAddr right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceProcAddr left, PFN_vkGetDeviceProcAddr right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateDevice : IEquatable<PFN_vkCreateDevice>
        {
            public PFN_vkCreateDevice(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDeviceCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDevice*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDeviceCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDevice*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateDevice other && Equals(other);
            
            public bool Equals(PFN_vkCreateDevice other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDeviceCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDevice*, vulkan.VkResult> (vulkan.PFN_vkCreateDevice from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateDevice (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDeviceCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDevice*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateDevice(from);
            
            public static bool operator ==(PFN_vkCreateDevice left, PFN_vkCreateDevice right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateDevice left, PFN_vkCreateDevice right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyDevice : IEquatable<PFN_vkDestroyDevice>
        {
            public PFN_vkDestroyDevice(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyDevice other && Equals(other);
            
            public bool Equals(PFN_vkDestroyDevice other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyDevice from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyDevice (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyDevice(from);
            
            public static bool operator ==(PFN_vkDestroyDevice left, PFN_vkDestroyDevice right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyDevice left, PFN_vkDestroyDevice right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkEnumerateInstanceExtensionProperties : IEquatable<PFN_vkEnumerateInstanceExtensionProperties>
        {
            public PFN_vkEnumerateInstanceExtensionProperties(delegate*unmanaged[Stdcall]<byte*, uint*, vulkan.VkExtensionProperties*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<byte*, uint*, vulkan.VkExtensionProperties*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkEnumerateInstanceExtensionProperties other && Equals(other);
            
            public bool Equals(PFN_vkEnumerateInstanceExtensionProperties other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<byte*, uint*, vulkan.VkExtensionProperties*, vulkan.VkResult> (vulkan.PFN_vkEnumerateInstanceExtensionProperties from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkEnumerateInstanceExtensionProperties (delegate*unmanaged[Stdcall]<byte*, uint*, vulkan.VkExtensionProperties*, vulkan.VkResult> from) => new vulkan.PFN_vkEnumerateInstanceExtensionProperties(from);
            
            public static bool operator ==(PFN_vkEnumerateInstanceExtensionProperties left, PFN_vkEnumerateInstanceExtensionProperties right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkEnumerateInstanceExtensionProperties left, PFN_vkEnumerateInstanceExtensionProperties right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkEnumerateDeviceExtensionProperties : IEquatable<PFN_vkEnumerateDeviceExtensionProperties>
        {
            public PFN_vkEnumerateDeviceExtensionProperties(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, byte*, uint*, vulkan.VkExtensionProperties*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, byte*, uint*, vulkan.VkExtensionProperties*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkEnumerateDeviceExtensionProperties other && Equals(other);
            
            public bool Equals(PFN_vkEnumerateDeviceExtensionProperties other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, byte*, uint*, vulkan.VkExtensionProperties*, vulkan.VkResult> (vulkan.PFN_vkEnumerateDeviceExtensionProperties from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkEnumerateDeviceExtensionProperties (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, byte*, uint*, vulkan.VkExtensionProperties*, vulkan.VkResult> from) => new vulkan.PFN_vkEnumerateDeviceExtensionProperties(from);
            
            public static bool operator ==(PFN_vkEnumerateDeviceExtensionProperties left, PFN_vkEnumerateDeviceExtensionProperties right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkEnumerateDeviceExtensionProperties left, PFN_vkEnumerateDeviceExtensionProperties right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkEnumerateInstanceLayerProperties : IEquatable<PFN_vkEnumerateInstanceLayerProperties>
        {
            public PFN_vkEnumerateInstanceLayerProperties(delegate*unmanaged[Stdcall]<uint*, vulkan.VkLayerProperties*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<uint*, vulkan.VkLayerProperties*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkEnumerateInstanceLayerProperties other && Equals(other);
            
            public bool Equals(PFN_vkEnumerateInstanceLayerProperties other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<uint*, vulkan.VkLayerProperties*, vulkan.VkResult> (vulkan.PFN_vkEnumerateInstanceLayerProperties from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkEnumerateInstanceLayerProperties (delegate*unmanaged[Stdcall]<uint*, vulkan.VkLayerProperties*, vulkan.VkResult> from) => new vulkan.PFN_vkEnumerateInstanceLayerProperties(from);
            
            public static bool operator ==(PFN_vkEnumerateInstanceLayerProperties left, PFN_vkEnumerateInstanceLayerProperties right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkEnumerateInstanceLayerProperties left, PFN_vkEnumerateInstanceLayerProperties right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkEnumerateDeviceLayerProperties : IEquatable<PFN_vkEnumerateDeviceLayerProperties>
        {
            public PFN_vkEnumerateDeviceLayerProperties(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkLayerProperties*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkLayerProperties*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkEnumerateDeviceLayerProperties other && Equals(other);
            
            public bool Equals(PFN_vkEnumerateDeviceLayerProperties other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkLayerProperties*, vulkan.VkResult> (vulkan.PFN_vkEnumerateDeviceLayerProperties from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkEnumerateDeviceLayerProperties (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkLayerProperties*, vulkan.VkResult> from) => new vulkan.PFN_vkEnumerateDeviceLayerProperties(from);
            
            public static bool operator ==(PFN_vkEnumerateDeviceLayerProperties left, PFN_vkEnumerateDeviceLayerProperties right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkEnumerateDeviceLayerProperties left, PFN_vkEnumerateDeviceLayerProperties right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceQueue : IEquatable<PFN_vkGetDeviceQueue>
        {
            public PFN_vkGetDeviceQueue(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, uint, vulkan.VkQueue*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, uint, vulkan.VkQueue*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceQueue other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceQueue other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, uint, vulkan.VkQueue*, void> (vulkan.PFN_vkGetDeviceQueue from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceQueue (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, uint, vulkan.VkQueue*, void> from) => new vulkan.PFN_vkGetDeviceQueue(from);
            
            public static bool operator ==(PFN_vkGetDeviceQueue left, PFN_vkGetDeviceQueue right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceQueue left, PFN_vkGetDeviceQueue right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkQueueSubmit : IEquatable<PFN_vkQueueSubmit>
        {
            public PFN_vkQueueSubmit(delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint, vulkan.VkSubmitInfo*, vulkan.VkFence, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint, vulkan.VkSubmitInfo*, vulkan.VkFence, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkQueueSubmit other && Equals(other);
            
            public bool Equals(PFN_vkQueueSubmit other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint, vulkan.VkSubmitInfo*, vulkan.VkFence, vulkan.VkResult> (vulkan.PFN_vkQueueSubmit from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkQueueSubmit (delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint, vulkan.VkSubmitInfo*, vulkan.VkFence, vulkan.VkResult> from) => new vulkan.PFN_vkQueueSubmit(from);
            
            public static bool operator ==(PFN_vkQueueSubmit left, PFN_vkQueueSubmit right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkQueueSubmit left, PFN_vkQueueSubmit right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkQueueWaitIdle : IEquatable<PFN_vkQueueWaitIdle>
        {
            public PFN_vkQueueWaitIdle(delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkQueueWaitIdle other && Equals(other);
            
            public bool Equals(PFN_vkQueueWaitIdle other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkResult> (vulkan.PFN_vkQueueWaitIdle from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkQueueWaitIdle (delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkResult> from) => new vulkan.PFN_vkQueueWaitIdle(from);
            
            public static bool operator ==(PFN_vkQueueWaitIdle left, PFN_vkQueueWaitIdle right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkQueueWaitIdle left, PFN_vkQueueWaitIdle right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDeviceWaitIdle : IEquatable<PFN_vkDeviceWaitIdle>
        {
            public PFN_vkDeviceWaitIdle(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDeviceWaitIdle other && Equals(other);
            
            public bool Equals(PFN_vkDeviceWaitIdle other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkResult> (vulkan.PFN_vkDeviceWaitIdle from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDeviceWaitIdle (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkResult> from) => new vulkan.PFN_vkDeviceWaitIdle(from);
            
            public static bool operator ==(PFN_vkDeviceWaitIdle left, PFN_vkDeviceWaitIdle right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDeviceWaitIdle left, PFN_vkDeviceWaitIdle right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkAllocateMemory : IEquatable<PFN_vkAllocateMemory>
        {
            public PFN_vkAllocateMemory(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryAllocateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDeviceMemory*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryAllocateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDeviceMemory*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkAllocateMemory other && Equals(other);
            
            public bool Equals(PFN_vkAllocateMemory other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryAllocateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDeviceMemory*, vulkan.VkResult> (vulkan.PFN_vkAllocateMemory from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkAllocateMemory (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryAllocateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDeviceMemory*, vulkan.VkResult> from) => new vulkan.PFN_vkAllocateMemory(from);
            
            public static bool operator ==(PFN_vkAllocateMemory left, PFN_vkAllocateMemory right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkAllocateMemory left, PFN_vkAllocateMemory right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkFreeMemory : IEquatable<PFN_vkFreeMemory>
        {
            public PFN_vkFreeMemory(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkFreeMemory other && Equals(other);
            
            public bool Equals(PFN_vkFreeMemory other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkFreeMemory from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkFreeMemory (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkFreeMemory(from);
            
            public static bool operator ==(PFN_vkFreeMemory left, PFN_vkFreeMemory right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkFreeMemory left, PFN_vkFreeMemory right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkMapMemory : IEquatable<PFN_vkMapMemory>
        {
            public PFN_vkMapMemory(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkMemoryMapFlags, void**, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkMemoryMapFlags, void**, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkMapMemory other && Equals(other);
            
            public bool Equals(PFN_vkMapMemory other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkMemoryMapFlags, void**, vulkan.VkResult> (vulkan.PFN_vkMapMemory from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkMapMemory (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkMemoryMapFlags, void**, vulkan.VkResult> from) => new vulkan.PFN_vkMapMemory(from);
            
            public static bool operator ==(PFN_vkMapMemory left, PFN_vkMapMemory right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkMapMemory left, PFN_vkMapMemory right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkUnmapMemory : IEquatable<PFN_vkUnmapMemory>
        {
            public PFN_vkUnmapMemory(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkUnmapMemory other && Equals(other);
            
            public bool Equals(PFN_vkUnmapMemory other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, void> (vulkan.PFN_vkUnmapMemory from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkUnmapMemory (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, void> from) => new vulkan.PFN_vkUnmapMemory(from);
            
            public static bool operator ==(PFN_vkUnmapMemory left, PFN_vkUnmapMemory right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkUnmapMemory left, PFN_vkUnmapMemory right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkFlushMappedMemoryRanges : IEquatable<PFN_vkFlushMappedMemoryRanges>
        {
            public PFN_vkFlushMappedMemoryRanges(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkMappedMemoryRange*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkMappedMemoryRange*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkFlushMappedMemoryRanges other && Equals(other);
            
            public bool Equals(PFN_vkFlushMappedMemoryRanges other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkMappedMemoryRange*, vulkan.VkResult> (vulkan.PFN_vkFlushMappedMemoryRanges from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkFlushMappedMemoryRanges (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkMappedMemoryRange*, vulkan.VkResult> from) => new vulkan.PFN_vkFlushMappedMemoryRanges(from);
            
            public static bool operator ==(PFN_vkFlushMappedMemoryRanges left, PFN_vkFlushMappedMemoryRanges right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkFlushMappedMemoryRanges left, PFN_vkFlushMappedMemoryRanges right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkInvalidateMappedMemoryRanges : IEquatable<PFN_vkInvalidateMappedMemoryRanges>
        {
            public PFN_vkInvalidateMappedMemoryRanges(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkMappedMemoryRange*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkMappedMemoryRange*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkInvalidateMappedMemoryRanges other && Equals(other);
            
            public bool Equals(PFN_vkInvalidateMappedMemoryRanges other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkMappedMemoryRange*, vulkan.VkResult> (vulkan.PFN_vkInvalidateMappedMemoryRanges from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkInvalidateMappedMemoryRanges (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkMappedMemoryRange*, vulkan.VkResult> from) => new vulkan.PFN_vkInvalidateMappedMemoryRanges(from);
            
            public static bool operator ==(PFN_vkInvalidateMappedMemoryRanges left, PFN_vkInvalidateMappedMemoryRanges right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkInvalidateMappedMemoryRanges left, PFN_vkInvalidateMappedMemoryRanges right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceMemoryCommitment : IEquatable<PFN_vkGetDeviceMemoryCommitment>
        {
            public PFN_vkGetDeviceMemoryCommitment(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, vulkan.VkDeviceSize*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, vulkan.VkDeviceSize*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceMemoryCommitment other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceMemoryCommitment other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, vulkan.VkDeviceSize*, void> (vulkan.PFN_vkGetDeviceMemoryCommitment from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceMemoryCommitment (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, vulkan.VkDeviceSize*, void> from) => new vulkan.PFN_vkGetDeviceMemoryCommitment(from);
            
            public static bool operator ==(PFN_vkGetDeviceMemoryCommitment left, PFN_vkGetDeviceMemoryCommitment right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceMemoryCommitment left, PFN_vkGetDeviceMemoryCommitment right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkBindBufferMemory : IEquatable<PFN_vkBindBufferMemory>
        {
            public PFN_vkBindBufferMemory(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBuffer, vulkan.VkDeviceMemory, vulkan.VkDeviceSize, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBuffer, vulkan.VkDeviceMemory, vulkan.VkDeviceSize, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkBindBufferMemory other && Equals(other);
            
            public bool Equals(PFN_vkBindBufferMemory other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBuffer, vulkan.VkDeviceMemory, vulkan.VkDeviceSize, vulkan.VkResult> (vulkan.PFN_vkBindBufferMemory from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkBindBufferMemory (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBuffer, vulkan.VkDeviceMemory, vulkan.VkDeviceSize, vulkan.VkResult> from) => new vulkan.PFN_vkBindBufferMemory(from);
            
            public static bool operator ==(PFN_vkBindBufferMemory left, PFN_vkBindBufferMemory right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkBindBufferMemory left, PFN_vkBindBufferMemory right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkBindImageMemory : IEquatable<PFN_vkBindImageMemory>
        {
            public PFN_vkBindImageMemory(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkDeviceMemory, vulkan.VkDeviceSize, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkDeviceMemory, vulkan.VkDeviceSize, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkBindImageMemory other && Equals(other);
            
            public bool Equals(PFN_vkBindImageMemory other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkDeviceMemory, vulkan.VkDeviceSize, vulkan.VkResult> (vulkan.PFN_vkBindImageMemory from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkBindImageMemory (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkDeviceMemory, vulkan.VkDeviceSize, vulkan.VkResult> from) => new vulkan.PFN_vkBindImageMemory(from);
            
            public static bool operator ==(PFN_vkBindImageMemory left, PFN_vkBindImageMemory right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkBindImageMemory left, PFN_vkBindImageMemory right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetBufferMemoryRequirements : IEquatable<PFN_vkGetBufferMemoryRequirements>
        {
            public PFN_vkGetBufferMemoryRequirements(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBuffer, vulkan.VkMemoryRequirements*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBuffer, vulkan.VkMemoryRequirements*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetBufferMemoryRequirements other && Equals(other);
            
            public bool Equals(PFN_vkGetBufferMemoryRequirements other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBuffer, vulkan.VkMemoryRequirements*, void> (vulkan.PFN_vkGetBufferMemoryRequirements from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetBufferMemoryRequirements (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBuffer, vulkan.VkMemoryRequirements*, void> from) => new vulkan.PFN_vkGetBufferMemoryRequirements(from);
            
            public static bool operator ==(PFN_vkGetBufferMemoryRequirements left, PFN_vkGetBufferMemoryRequirements right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetBufferMemoryRequirements left, PFN_vkGetBufferMemoryRequirements right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetImageMemoryRequirements : IEquatable<PFN_vkGetImageMemoryRequirements>
        {
            public PFN_vkGetImageMemoryRequirements(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkMemoryRequirements*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkMemoryRequirements*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetImageMemoryRequirements other && Equals(other);
            
            public bool Equals(PFN_vkGetImageMemoryRequirements other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkMemoryRequirements*, void> (vulkan.PFN_vkGetImageMemoryRequirements from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetImageMemoryRequirements (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkMemoryRequirements*, void> from) => new vulkan.PFN_vkGetImageMemoryRequirements(from);
            
            public static bool operator ==(PFN_vkGetImageMemoryRequirements left, PFN_vkGetImageMemoryRequirements right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetImageMemoryRequirements left, PFN_vkGetImageMemoryRequirements right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetImageSparseMemoryRequirements : IEquatable<PFN_vkGetImageSparseMemoryRequirements>
        {
            public PFN_vkGetImageSparseMemoryRequirements(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, uint*, vulkan.VkSparseImageMemoryRequirements*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, uint*, vulkan.VkSparseImageMemoryRequirements*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetImageSparseMemoryRequirements other && Equals(other);
            
            public bool Equals(PFN_vkGetImageSparseMemoryRequirements other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, uint*, vulkan.VkSparseImageMemoryRequirements*, void> (vulkan.PFN_vkGetImageSparseMemoryRequirements from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetImageSparseMemoryRequirements (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, uint*, vulkan.VkSparseImageMemoryRequirements*, void> from) => new vulkan.PFN_vkGetImageSparseMemoryRequirements(from);
            
            public static bool operator ==(PFN_vkGetImageSparseMemoryRequirements left, PFN_vkGetImageSparseMemoryRequirements right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetImageSparseMemoryRequirements left, PFN_vkGetImageSparseMemoryRequirements right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceSparseImageFormatProperties : IEquatable<PFN_vkGetPhysicalDeviceSparseImageFormatProperties>
        {
            public PFN_vkGetPhysicalDeviceSparseImageFormatProperties(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkImageType, vulkan.VkSampleCountFlagBits, vulkan.VkImageUsageFlags, vulkan.VkImageTiling, uint*, vulkan.VkSparseImageFormatProperties*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkImageType, vulkan.VkSampleCountFlagBits, vulkan.VkImageUsageFlags, vulkan.VkImageTiling, uint*, vulkan.VkSparseImageFormatProperties*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceSparseImageFormatProperties other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceSparseImageFormatProperties other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkImageType, vulkan.VkSampleCountFlagBits, vulkan.VkImageUsageFlags, vulkan.VkImageTiling, uint*, vulkan.VkSparseImageFormatProperties*, void> (vulkan.PFN_vkGetPhysicalDeviceSparseImageFormatProperties from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceSparseImageFormatProperties (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkImageType, vulkan.VkSampleCountFlagBits, vulkan.VkImageUsageFlags, vulkan.VkImageTiling, uint*, vulkan.VkSparseImageFormatProperties*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceSparseImageFormatProperties(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceSparseImageFormatProperties left, PFN_vkGetPhysicalDeviceSparseImageFormatProperties right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceSparseImageFormatProperties left, PFN_vkGetPhysicalDeviceSparseImageFormatProperties right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkQueueBindSparse : IEquatable<PFN_vkQueueBindSparse>
        {
            public PFN_vkQueueBindSparse(delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint, vulkan.VkBindSparseInfo*, vulkan.VkFence, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint, vulkan.VkBindSparseInfo*, vulkan.VkFence, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkQueueBindSparse other && Equals(other);
            
            public bool Equals(PFN_vkQueueBindSparse other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint, vulkan.VkBindSparseInfo*, vulkan.VkFence, vulkan.VkResult> (vulkan.PFN_vkQueueBindSparse from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkQueueBindSparse (delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint, vulkan.VkBindSparseInfo*, vulkan.VkFence, vulkan.VkResult> from) => new vulkan.PFN_vkQueueBindSparse(from);
            
            public static bool operator ==(PFN_vkQueueBindSparse left, PFN_vkQueueBindSparse right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkQueueBindSparse left, PFN_vkQueueBindSparse right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateFence : IEquatable<PFN_vkCreateFence>
        {
            public PFN_vkCreateFence(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFenceCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkFence*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFenceCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkFence*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateFence other && Equals(other);
            
            public bool Equals(PFN_vkCreateFence other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFenceCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkFence*, vulkan.VkResult> (vulkan.PFN_vkCreateFence from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateFence (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFenceCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkFence*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateFence(from);
            
            public static bool operator ==(PFN_vkCreateFence left, PFN_vkCreateFence right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateFence left, PFN_vkCreateFence right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyFence : IEquatable<PFN_vkDestroyFence>
        {
            public PFN_vkDestroyFence(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFence, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFence, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyFence other && Equals(other);
            
            public bool Equals(PFN_vkDestroyFence other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFence, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyFence from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyFence (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFence, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyFence(from);
            
            public static bool operator ==(PFN_vkDestroyFence left, PFN_vkDestroyFence right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyFence left, PFN_vkDestroyFence right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkResetFences : IEquatable<PFN_vkResetFences>
        {
            public PFN_vkResetFences(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkFence*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkFence*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkResetFences other && Equals(other);
            
            public bool Equals(PFN_vkResetFences other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkFence*, vulkan.VkResult> (vulkan.PFN_vkResetFences from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkResetFences (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkFence*, vulkan.VkResult> from) => new vulkan.PFN_vkResetFences(from);
            
            public static bool operator ==(PFN_vkResetFences left, PFN_vkResetFences right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkResetFences left, PFN_vkResetFences right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetFenceStatus : IEquatable<PFN_vkGetFenceStatus>
        {
            public PFN_vkGetFenceStatus(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFence, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFence, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetFenceStatus other && Equals(other);
            
            public bool Equals(PFN_vkGetFenceStatus other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFence, vulkan.VkResult> (vulkan.PFN_vkGetFenceStatus from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetFenceStatus (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFence, vulkan.VkResult> from) => new vulkan.PFN_vkGetFenceStatus(from);
            
            public static bool operator ==(PFN_vkGetFenceStatus left, PFN_vkGetFenceStatus right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetFenceStatus left, PFN_vkGetFenceStatus right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkWaitForFences : IEquatable<PFN_vkWaitForFences>
        {
            public PFN_vkWaitForFences(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkFence*, vulkan.VkBool32, ulong, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkFence*, vulkan.VkBool32, ulong, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkWaitForFences other && Equals(other);
            
            public bool Equals(PFN_vkWaitForFences other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkFence*, vulkan.VkBool32, ulong, vulkan.VkResult> (vulkan.PFN_vkWaitForFences from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkWaitForFences (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkFence*, vulkan.VkBool32, ulong, vulkan.VkResult> from) => new vulkan.PFN_vkWaitForFences(from);
            
            public static bool operator ==(PFN_vkWaitForFences left, PFN_vkWaitForFences right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkWaitForFences left, PFN_vkWaitForFences right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateSemaphore : IEquatable<PFN_vkCreateSemaphore>
        {
            public PFN_vkCreateSemaphore(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkSemaphore*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkSemaphore*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateSemaphore other && Equals(other);
            
            public bool Equals(PFN_vkCreateSemaphore other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkSemaphore*, vulkan.VkResult> (vulkan.PFN_vkCreateSemaphore from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateSemaphore (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkSemaphore*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateSemaphore(from);
            
            public static bool operator ==(PFN_vkCreateSemaphore left, PFN_vkCreateSemaphore right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateSemaphore left, PFN_vkCreateSemaphore right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroySemaphore : IEquatable<PFN_vkDestroySemaphore>
        {
            public PFN_vkDestroySemaphore(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphore, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphore, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroySemaphore other && Equals(other);
            
            public bool Equals(PFN_vkDestroySemaphore other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphore, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroySemaphore from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroySemaphore (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphore, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroySemaphore(from);
            
            public static bool operator ==(PFN_vkDestroySemaphore left, PFN_vkDestroySemaphore right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroySemaphore left, PFN_vkDestroySemaphore right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateEvent : IEquatable<PFN_vkCreateEvent>
        {
            public PFN_vkCreateEvent(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEventCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkEvent*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEventCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkEvent*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateEvent other && Equals(other);
            
            public bool Equals(PFN_vkCreateEvent other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEventCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkEvent*, vulkan.VkResult> (vulkan.PFN_vkCreateEvent from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateEvent (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEventCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkEvent*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateEvent(from);
            
            public static bool operator ==(PFN_vkCreateEvent left, PFN_vkCreateEvent right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateEvent left, PFN_vkCreateEvent right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyEvent : IEquatable<PFN_vkDestroyEvent>
        {
            public PFN_vkDestroyEvent(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEvent, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEvent, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyEvent other && Equals(other);
            
            public bool Equals(PFN_vkDestroyEvent other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEvent, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyEvent from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyEvent (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEvent, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyEvent(from);
            
            public static bool operator ==(PFN_vkDestroyEvent left, PFN_vkDestroyEvent right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyEvent left, PFN_vkDestroyEvent right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetEventStatus : IEquatable<PFN_vkGetEventStatus>
        {
            public PFN_vkGetEventStatus(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEvent, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEvent, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetEventStatus other && Equals(other);
            
            public bool Equals(PFN_vkGetEventStatus other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEvent, vulkan.VkResult> (vulkan.PFN_vkGetEventStatus from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetEventStatus (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEvent, vulkan.VkResult> from) => new vulkan.PFN_vkGetEventStatus(from);
            
            public static bool operator ==(PFN_vkGetEventStatus left, PFN_vkGetEventStatus right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetEventStatus left, PFN_vkGetEventStatus right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkSetEvent : IEquatable<PFN_vkSetEvent>
        {
            public PFN_vkSetEvent(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEvent, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEvent, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkSetEvent other && Equals(other);
            
            public bool Equals(PFN_vkSetEvent other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEvent, vulkan.VkResult> (vulkan.PFN_vkSetEvent from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkSetEvent (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEvent, vulkan.VkResult> from) => new vulkan.PFN_vkSetEvent(from);
            
            public static bool operator ==(PFN_vkSetEvent left, PFN_vkSetEvent right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkSetEvent left, PFN_vkSetEvent right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkResetEvent : IEquatable<PFN_vkResetEvent>
        {
            public PFN_vkResetEvent(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEvent, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEvent, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkResetEvent other && Equals(other);
            
            public bool Equals(PFN_vkResetEvent other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEvent, vulkan.VkResult> (vulkan.PFN_vkResetEvent from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkResetEvent (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkEvent, vulkan.VkResult> from) => new vulkan.PFN_vkResetEvent(from);
            
            public static bool operator ==(PFN_vkResetEvent left, PFN_vkResetEvent right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkResetEvent left, PFN_vkResetEvent right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateQueryPool : IEquatable<PFN_vkCreateQueryPool>
        {
            public PFN_vkCreateQueryPool(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPoolCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkQueryPool*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPoolCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkQueryPool*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateQueryPool other && Equals(other);
            
            public bool Equals(PFN_vkCreateQueryPool other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPoolCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkQueryPool*, vulkan.VkResult> (vulkan.PFN_vkCreateQueryPool from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateQueryPool (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPoolCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkQueryPool*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateQueryPool(from);
            
            public static bool operator ==(PFN_vkCreateQueryPool left, PFN_vkCreateQueryPool right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateQueryPool left, PFN_vkCreateQueryPool right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyQueryPool : IEquatable<PFN_vkDestroyQueryPool>
        {
            public PFN_vkDestroyQueryPool(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPool, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPool, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyQueryPool other && Equals(other);
            
            public bool Equals(PFN_vkDestroyQueryPool other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPool, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyQueryPool from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyQueryPool (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPool, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyQueryPool(from);
            
            public static bool operator ==(PFN_vkDestroyQueryPool left, PFN_vkDestroyQueryPool right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyQueryPool left, PFN_vkDestroyQueryPool right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetQueryPoolResults : IEquatable<PFN_vkGetQueryPoolResults>
        {
            public PFN_vkGetQueryPoolResults(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPool, uint, uint, nuint, void*, vulkan.VkDeviceSize, vulkan.VkQueryResultFlags, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPool, uint, uint, nuint, void*, vulkan.VkDeviceSize, vulkan.VkQueryResultFlags, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetQueryPoolResults other && Equals(other);
            
            public bool Equals(PFN_vkGetQueryPoolResults other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPool, uint, uint, nuint, void*, vulkan.VkDeviceSize, vulkan.VkQueryResultFlags, vulkan.VkResult> (vulkan.PFN_vkGetQueryPoolResults from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetQueryPoolResults (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPool, uint, uint, nuint, void*, vulkan.VkDeviceSize, vulkan.VkQueryResultFlags, vulkan.VkResult> from) => new vulkan.PFN_vkGetQueryPoolResults(from);
            
            public static bool operator ==(PFN_vkGetQueryPoolResults left, PFN_vkGetQueryPoolResults right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetQueryPoolResults left, PFN_vkGetQueryPoolResults right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateBuffer : IEquatable<PFN_vkCreateBuffer>
        {
            public PFN_vkCreateBuffer(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkBuffer*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkBuffer*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateBuffer other && Equals(other);
            
            public bool Equals(PFN_vkCreateBuffer other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkBuffer*, vulkan.VkResult> (vulkan.PFN_vkCreateBuffer from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateBuffer (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkBuffer*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateBuffer(from);
            
            public static bool operator ==(PFN_vkCreateBuffer left, PFN_vkCreateBuffer right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateBuffer left, PFN_vkCreateBuffer right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyBuffer : IEquatable<PFN_vkDestroyBuffer>
        {
            public PFN_vkDestroyBuffer(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBuffer, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBuffer, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyBuffer other && Equals(other);
            
            public bool Equals(PFN_vkDestroyBuffer other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBuffer, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyBuffer from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyBuffer (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBuffer, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyBuffer(from);
            
            public static bool operator ==(PFN_vkDestroyBuffer left, PFN_vkDestroyBuffer right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyBuffer left, PFN_vkDestroyBuffer right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateBufferView : IEquatable<PFN_vkCreateBufferView>
        {
            public PFN_vkCreateBufferView(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferViewCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkBufferView*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferViewCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkBufferView*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateBufferView other && Equals(other);
            
            public bool Equals(PFN_vkCreateBufferView other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferViewCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkBufferView*, vulkan.VkResult> (vulkan.PFN_vkCreateBufferView from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateBufferView (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferViewCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkBufferView*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateBufferView(from);
            
            public static bool operator ==(PFN_vkCreateBufferView left, PFN_vkCreateBufferView right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateBufferView left, PFN_vkCreateBufferView right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyBufferView : IEquatable<PFN_vkDestroyBufferView>
        {
            public PFN_vkDestroyBufferView(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferView, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferView, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyBufferView other && Equals(other);
            
            public bool Equals(PFN_vkDestroyBufferView other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferView, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyBufferView from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyBufferView (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferView, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyBufferView(from);
            
            public static bool operator ==(PFN_vkDestroyBufferView left, PFN_vkDestroyBufferView right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyBufferView left, PFN_vkDestroyBufferView right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateImage : IEquatable<PFN_vkCreateImage>
        {
            public PFN_vkCreateImage(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkImage*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkImage*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateImage other && Equals(other);
            
            public bool Equals(PFN_vkCreateImage other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkImage*, vulkan.VkResult> (vulkan.PFN_vkCreateImage from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateImage (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkImage*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateImage(from);
            
            public static bool operator ==(PFN_vkCreateImage left, PFN_vkCreateImage right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateImage left, PFN_vkCreateImage right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyImage : IEquatable<PFN_vkDestroyImage>
        {
            public PFN_vkDestroyImage(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyImage other && Equals(other);
            
            public bool Equals(PFN_vkDestroyImage other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyImage from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyImage (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyImage(from);
            
            public static bool operator ==(PFN_vkDestroyImage left, PFN_vkDestroyImage right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyImage left, PFN_vkDestroyImage right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetImageSubresourceLayout : IEquatable<PFN_vkGetImageSubresourceLayout>
        {
            public PFN_vkGetImageSubresourceLayout(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkImageSubresource*, vulkan.VkSubresourceLayout*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkImageSubresource*, vulkan.VkSubresourceLayout*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetImageSubresourceLayout other && Equals(other);
            
            public bool Equals(PFN_vkGetImageSubresourceLayout other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkImageSubresource*, vulkan.VkSubresourceLayout*, void> (vulkan.PFN_vkGetImageSubresourceLayout from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetImageSubresourceLayout (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkImageSubresource*, vulkan.VkSubresourceLayout*, void> from) => new vulkan.PFN_vkGetImageSubresourceLayout(from);
            
            public static bool operator ==(PFN_vkGetImageSubresourceLayout left, PFN_vkGetImageSubresourceLayout right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetImageSubresourceLayout left, PFN_vkGetImageSubresourceLayout right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateImageView : IEquatable<PFN_vkCreateImageView>
        {
            public PFN_vkCreateImageView(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageViewCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkImageView*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageViewCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkImageView*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateImageView other && Equals(other);
            
            public bool Equals(PFN_vkCreateImageView other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageViewCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkImageView*, vulkan.VkResult> (vulkan.PFN_vkCreateImageView from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateImageView (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageViewCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkImageView*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateImageView(from);
            
            public static bool operator ==(PFN_vkCreateImageView left, PFN_vkCreateImageView right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateImageView left, PFN_vkCreateImageView right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyImageView : IEquatable<PFN_vkDestroyImageView>
        {
            public PFN_vkDestroyImageView(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageView, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageView, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyImageView other && Equals(other);
            
            public bool Equals(PFN_vkDestroyImageView other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageView, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyImageView from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyImageView (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageView, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyImageView(from);
            
            public static bool operator ==(PFN_vkDestroyImageView left, PFN_vkDestroyImageView right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyImageView left, PFN_vkDestroyImageView right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateShaderModule : IEquatable<PFN_vkCreateShaderModule>
        {
            public PFN_vkCreateShaderModule(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderModuleCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkShaderModule*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderModuleCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkShaderModule*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateShaderModule other && Equals(other);
            
            public bool Equals(PFN_vkCreateShaderModule other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderModuleCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkShaderModule*, vulkan.VkResult> (vulkan.PFN_vkCreateShaderModule from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateShaderModule (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderModuleCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkShaderModule*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateShaderModule(from);
            
            public static bool operator ==(PFN_vkCreateShaderModule left, PFN_vkCreateShaderModule right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateShaderModule left, PFN_vkCreateShaderModule right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyShaderModule : IEquatable<PFN_vkDestroyShaderModule>
        {
            public PFN_vkDestroyShaderModule(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderModule, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderModule, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyShaderModule other && Equals(other);
            
            public bool Equals(PFN_vkDestroyShaderModule other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderModule, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyShaderModule from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyShaderModule (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderModule, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyShaderModule(from);
            
            public static bool operator ==(PFN_vkDestroyShaderModule left, PFN_vkDestroyShaderModule right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyShaderModule left, PFN_vkDestroyShaderModule right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreatePipelineCache : IEquatable<PFN_vkCreatePipelineCache>
        {
            public PFN_vkCreatePipelineCache(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCacheCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPipelineCache*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCacheCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPipelineCache*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreatePipelineCache other && Equals(other);
            
            public bool Equals(PFN_vkCreatePipelineCache other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCacheCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPipelineCache*, vulkan.VkResult> (vulkan.PFN_vkCreatePipelineCache from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreatePipelineCache (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCacheCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPipelineCache*, vulkan.VkResult> from) => new vulkan.PFN_vkCreatePipelineCache(from);
            
            public static bool operator ==(PFN_vkCreatePipelineCache left, PFN_vkCreatePipelineCache right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreatePipelineCache left, PFN_vkCreatePipelineCache right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyPipelineCache : IEquatable<PFN_vkDestroyPipelineCache>
        {
            public PFN_vkDestroyPipelineCache(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyPipelineCache other && Equals(other);
            
            public bool Equals(PFN_vkDestroyPipelineCache other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyPipelineCache from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyPipelineCache (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyPipelineCache(from);
            
            public static bool operator ==(PFN_vkDestroyPipelineCache left, PFN_vkDestroyPipelineCache right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyPipelineCache left, PFN_vkDestroyPipelineCache right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPipelineCacheData : IEquatable<PFN_vkGetPipelineCacheData>
        {
            public PFN_vkGetPipelineCacheData(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, nuint*, void*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, nuint*, void*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPipelineCacheData other && Equals(other);
            
            public bool Equals(PFN_vkGetPipelineCacheData other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, nuint*, void*, vulkan.VkResult> (vulkan.PFN_vkGetPipelineCacheData from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPipelineCacheData (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, nuint*, void*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPipelineCacheData(from);
            
            public static bool operator ==(PFN_vkGetPipelineCacheData left, PFN_vkGetPipelineCacheData right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPipelineCacheData left, PFN_vkGetPipelineCacheData right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkMergePipelineCaches : IEquatable<PFN_vkMergePipelineCaches>
        {
            public PFN_vkMergePipelineCaches(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, uint, vulkan.VkPipelineCache*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, uint, vulkan.VkPipelineCache*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkMergePipelineCaches other && Equals(other);
            
            public bool Equals(PFN_vkMergePipelineCaches other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, uint, vulkan.VkPipelineCache*, vulkan.VkResult> (vulkan.PFN_vkMergePipelineCaches from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkMergePipelineCaches (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, uint, vulkan.VkPipelineCache*, vulkan.VkResult> from) => new vulkan.PFN_vkMergePipelineCaches(from);
            
            public static bool operator ==(PFN_vkMergePipelineCaches left, PFN_vkMergePipelineCaches right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkMergePipelineCaches left, PFN_vkMergePipelineCaches right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateGraphicsPipelines : IEquatable<PFN_vkCreateGraphicsPipelines>
        {
            public PFN_vkCreateGraphicsPipelines(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, uint, vulkan.VkGraphicsPipelineCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPipeline*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, uint, vulkan.VkGraphicsPipelineCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPipeline*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateGraphicsPipelines other && Equals(other);
            
            public bool Equals(PFN_vkCreateGraphicsPipelines other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, uint, vulkan.VkGraphicsPipelineCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPipeline*, vulkan.VkResult> (vulkan.PFN_vkCreateGraphicsPipelines from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateGraphicsPipelines (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, uint, vulkan.VkGraphicsPipelineCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPipeline*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateGraphicsPipelines(from);
            
            public static bool operator ==(PFN_vkCreateGraphicsPipelines left, PFN_vkCreateGraphicsPipelines right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateGraphicsPipelines left, PFN_vkCreateGraphicsPipelines right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateComputePipelines : IEquatable<PFN_vkCreateComputePipelines>
        {
            public PFN_vkCreateComputePipelines(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, uint, vulkan.VkComputePipelineCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPipeline*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, uint, vulkan.VkComputePipelineCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPipeline*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateComputePipelines other && Equals(other);
            
            public bool Equals(PFN_vkCreateComputePipelines other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, uint, vulkan.VkComputePipelineCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPipeline*, vulkan.VkResult> (vulkan.PFN_vkCreateComputePipelines from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateComputePipelines (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, uint, vulkan.VkComputePipelineCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPipeline*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateComputePipelines(from);
            
            public static bool operator ==(PFN_vkCreateComputePipelines left, PFN_vkCreateComputePipelines right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateComputePipelines left, PFN_vkCreateComputePipelines right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyPipeline : IEquatable<PFN_vkDestroyPipeline>
        {
            public PFN_vkDestroyPipeline(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyPipeline other && Equals(other);
            
            public bool Equals(PFN_vkDestroyPipeline other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyPipeline from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyPipeline (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyPipeline(from);
            
            public static bool operator ==(PFN_vkDestroyPipeline left, PFN_vkDestroyPipeline right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyPipeline left, PFN_vkDestroyPipeline right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreatePipelineLayout : IEquatable<PFN_vkCreatePipelineLayout>
        {
            public PFN_vkCreatePipelineLayout(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineLayoutCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPipelineLayout*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineLayoutCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPipelineLayout*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreatePipelineLayout other && Equals(other);
            
            public bool Equals(PFN_vkCreatePipelineLayout other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineLayoutCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPipelineLayout*, vulkan.VkResult> (vulkan.PFN_vkCreatePipelineLayout from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreatePipelineLayout (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineLayoutCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPipelineLayout*, vulkan.VkResult> from) => new vulkan.PFN_vkCreatePipelineLayout(from);
            
            public static bool operator ==(PFN_vkCreatePipelineLayout left, PFN_vkCreatePipelineLayout right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreatePipelineLayout left, PFN_vkCreatePipelineLayout right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyPipelineLayout : IEquatable<PFN_vkDestroyPipelineLayout>
        {
            public PFN_vkDestroyPipelineLayout(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineLayout, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineLayout, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyPipelineLayout other && Equals(other);
            
            public bool Equals(PFN_vkDestroyPipelineLayout other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineLayout, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyPipelineLayout from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyPipelineLayout (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineLayout, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyPipelineLayout(from);
            
            public static bool operator ==(PFN_vkDestroyPipelineLayout left, PFN_vkDestroyPipelineLayout right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyPipelineLayout left, PFN_vkDestroyPipelineLayout right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateSampler : IEquatable<PFN_vkCreateSampler>
        {
            public PFN_vkCreateSampler(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkSampler*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkSampler*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateSampler other && Equals(other);
            
            public bool Equals(PFN_vkCreateSampler other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkSampler*, vulkan.VkResult> (vulkan.PFN_vkCreateSampler from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateSampler (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkSampler*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateSampler(from);
            
            public static bool operator ==(PFN_vkCreateSampler left, PFN_vkCreateSampler right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateSampler left, PFN_vkCreateSampler right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroySampler : IEquatable<PFN_vkDestroySampler>
        {
            public PFN_vkDestroySampler(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSampler, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSampler, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroySampler other && Equals(other);
            
            public bool Equals(PFN_vkDestroySampler other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSampler, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroySampler from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroySampler (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSampler, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroySampler(from);
            
            public static bool operator ==(PFN_vkDestroySampler left, PFN_vkDestroySampler right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroySampler left, PFN_vkDestroySampler right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateDescriptorSetLayout : IEquatable<PFN_vkCreateDescriptorSetLayout>
        {
            public PFN_vkCreateDescriptorSetLayout(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayoutCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDescriptorSetLayout*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayoutCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDescriptorSetLayout*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateDescriptorSetLayout other && Equals(other);
            
            public bool Equals(PFN_vkCreateDescriptorSetLayout other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayoutCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDescriptorSetLayout*, vulkan.VkResult> (vulkan.PFN_vkCreateDescriptorSetLayout from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateDescriptorSetLayout (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayoutCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDescriptorSetLayout*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateDescriptorSetLayout(from);
            
            public static bool operator ==(PFN_vkCreateDescriptorSetLayout left, PFN_vkCreateDescriptorSetLayout right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateDescriptorSetLayout left, PFN_vkCreateDescriptorSetLayout right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyDescriptorSetLayout : IEquatable<PFN_vkDestroyDescriptorSetLayout>
        {
            public PFN_vkDestroyDescriptorSetLayout(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayout, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayout, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyDescriptorSetLayout other && Equals(other);
            
            public bool Equals(PFN_vkDestroyDescriptorSetLayout other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayout, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyDescriptorSetLayout from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyDescriptorSetLayout (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayout, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyDescriptorSetLayout(from);
            
            public static bool operator ==(PFN_vkDestroyDescriptorSetLayout left, PFN_vkDestroyDescriptorSetLayout right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyDescriptorSetLayout left, PFN_vkDestroyDescriptorSetLayout right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateDescriptorPool : IEquatable<PFN_vkCreateDescriptorPool>
        {
            public PFN_vkCreateDescriptorPool(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorPoolCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDescriptorPool*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorPoolCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDescriptorPool*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateDescriptorPool other && Equals(other);
            
            public bool Equals(PFN_vkCreateDescriptorPool other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorPoolCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDescriptorPool*, vulkan.VkResult> (vulkan.PFN_vkCreateDescriptorPool from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateDescriptorPool (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorPoolCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDescriptorPool*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateDescriptorPool(from);
            
            public static bool operator ==(PFN_vkCreateDescriptorPool left, PFN_vkCreateDescriptorPool right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateDescriptorPool left, PFN_vkCreateDescriptorPool right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyDescriptorPool : IEquatable<PFN_vkDestroyDescriptorPool>
        {
            public PFN_vkDestroyDescriptorPool(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorPool, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorPool, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyDescriptorPool other && Equals(other);
            
            public bool Equals(PFN_vkDestroyDescriptorPool other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorPool, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyDescriptorPool from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyDescriptorPool (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorPool, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyDescriptorPool(from);
            
            public static bool operator ==(PFN_vkDestroyDescriptorPool left, PFN_vkDestroyDescriptorPool right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyDescriptorPool left, PFN_vkDestroyDescriptorPool right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkResetDescriptorPool : IEquatable<PFN_vkResetDescriptorPool>
        {
            public PFN_vkResetDescriptorPool(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorPool, vulkan.VkDescriptorPoolResetFlags, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorPool, vulkan.VkDescriptorPoolResetFlags, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkResetDescriptorPool other && Equals(other);
            
            public bool Equals(PFN_vkResetDescriptorPool other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorPool, vulkan.VkDescriptorPoolResetFlags, vulkan.VkResult> (vulkan.PFN_vkResetDescriptorPool from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkResetDescriptorPool (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorPool, vulkan.VkDescriptorPoolResetFlags, vulkan.VkResult> from) => new vulkan.PFN_vkResetDescriptorPool(from);
            
            public static bool operator ==(PFN_vkResetDescriptorPool left, PFN_vkResetDescriptorPool right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkResetDescriptorPool left, PFN_vkResetDescriptorPool right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkAllocateDescriptorSets : IEquatable<PFN_vkAllocateDescriptorSets>
        {
            public PFN_vkAllocateDescriptorSets(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetAllocateInfo*, vulkan.VkDescriptorSet*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetAllocateInfo*, vulkan.VkDescriptorSet*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkAllocateDescriptorSets other && Equals(other);
            
            public bool Equals(PFN_vkAllocateDescriptorSets other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetAllocateInfo*, vulkan.VkDescriptorSet*, vulkan.VkResult> (vulkan.PFN_vkAllocateDescriptorSets from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkAllocateDescriptorSets (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetAllocateInfo*, vulkan.VkDescriptorSet*, vulkan.VkResult> from) => new vulkan.PFN_vkAllocateDescriptorSets(from);
            
            public static bool operator ==(PFN_vkAllocateDescriptorSets left, PFN_vkAllocateDescriptorSets right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkAllocateDescriptorSets left, PFN_vkAllocateDescriptorSets right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkFreeDescriptorSets : IEquatable<PFN_vkFreeDescriptorSets>
        {
            public PFN_vkFreeDescriptorSets(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorPool, uint, vulkan.VkDescriptorSet*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorPool, uint, vulkan.VkDescriptorSet*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkFreeDescriptorSets other && Equals(other);
            
            public bool Equals(PFN_vkFreeDescriptorSets other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorPool, uint, vulkan.VkDescriptorSet*, vulkan.VkResult> (vulkan.PFN_vkFreeDescriptorSets from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkFreeDescriptorSets (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorPool, uint, vulkan.VkDescriptorSet*, vulkan.VkResult> from) => new vulkan.PFN_vkFreeDescriptorSets(from);
            
            public static bool operator ==(PFN_vkFreeDescriptorSets left, PFN_vkFreeDescriptorSets right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkFreeDescriptorSets left, PFN_vkFreeDescriptorSets right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkUpdateDescriptorSets : IEquatable<PFN_vkUpdateDescriptorSets>
        {
            public PFN_vkUpdateDescriptorSets(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkWriteDescriptorSet*, uint, vulkan.VkCopyDescriptorSet*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkWriteDescriptorSet*, uint, vulkan.VkCopyDescriptorSet*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkUpdateDescriptorSets other && Equals(other);
            
            public bool Equals(PFN_vkUpdateDescriptorSets other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkWriteDescriptorSet*, uint, vulkan.VkCopyDescriptorSet*, void> (vulkan.PFN_vkUpdateDescriptorSets from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkUpdateDescriptorSets (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkWriteDescriptorSet*, uint, vulkan.VkCopyDescriptorSet*, void> from) => new vulkan.PFN_vkUpdateDescriptorSets(from);
            
            public static bool operator ==(PFN_vkUpdateDescriptorSets left, PFN_vkUpdateDescriptorSets right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkUpdateDescriptorSets left, PFN_vkUpdateDescriptorSets right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateFramebuffer : IEquatable<PFN_vkCreateFramebuffer>
        {
            public PFN_vkCreateFramebuffer(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFramebufferCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkFramebuffer*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFramebufferCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkFramebuffer*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateFramebuffer other && Equals(other);
            
            public bool Equals(PFN_vkCreateFramebuffer other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFramebufferCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkFramebuffer*, vulkan.VkResult> (vulkan.PFN_vkCreateFramebuffer from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateFramebuffer (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFramebufferCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkFramebuffer*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateFramebuffer(from);
            
            public static bool operator ==(PFN_vkCreateFramebuffer left, PFN_vkCreateFramebuffer right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateFramebuffer left, PFN_vkCreateFramebuffer right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyFramebuffer : IEquatable<PFN_vkDestroyFramebuffer>
        {
            public PFN_vkDestroyFramebuffer(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFramebuffer, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFramebuffer, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyFramebuffer other && Equals(other);
            
            public bool Equals(PFN_vkDestroyFramebuffer other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFramebuffer, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyFramebuffer from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyFramebuffer (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFramebuffer, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyFramebuffer(from);
            
            public static bool operator ==(PFN_vkDestroyFramebuffer left, PFN_vkDestroyFramebuffer right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyFramebuffer left, PFN_vkDestroyFramebuffer right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateRenderPass : IEquatable<PFN_vkCreateRenderPass>
        {
            public PFN_vkCreateRenderPass(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPassCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkRenderPass*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPassCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkRenderPass*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateRenderPass other && Equals(other);
            
            public bool Equals(PFN_vkCreateRenderPass other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPassCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkRenderPass*, vulkan.VkResult> (vulkan.PFN_vkCreateRenderPass from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateRenderPass (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPassCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkRenderPass*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateRenderPass(from);
            
            public static bool operator ==(PFN_vkCreateRenderPass left, PFN_vkCreateRenderPass right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateRenderPass left, PFN_vkCreateRenderPass right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyRenderPass : IEquatable<PFN_vkDestroyRenderPass>
        {
            public PFN_vkDestroyRenderPass(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPass, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPass, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyRenderPass other && Equals(other);
            
            public bool Equals(PFN_vkDestroyRenderPass other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPass, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyRenderPass from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyRenderPass (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPass, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyRenderPass(from);
            
            public static bool operator ==(PFN_vkDestroyRenderPass left, PFN_vkDestroyRenderPass right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyRenderPass left, PFN_vkDestroyRenderPass right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetRenderAreaGranularity : IEquatable<PFN_vkGetRenderAreaGranularity>
        {
            public PFN_vkGetRenderAreaGranularity(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPass, vulkan.VkExtent2D*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPass, vulkan.VkExtent2D*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetRenderAreaGranularity other && Equals(other);
            
            public bool Equals(PFN_vkGetRenderAreaGranularity other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPass, vulkan.VkExtent2D*, void> (vulkan.PFN_vkGetRenderAreaGranularity from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetRenderAreaGranularity (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPass, vulkan.VkExtent2D*, void> from) => new vulkan.PFN_vkGetRenderAreaGranularity(from);
            
            public static bool operator ==(PFN_vkGetRenderAreaGranularity left, PFN_vkGetRenderAreaGranularity right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetRenderAreaGranularity left, PFN_vkGetRenderAreaGranularity right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateCommandPool : IEquatable<PFN_vkCreateCommandPool>
        {
            public PFN_vkCreateCommandPool(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPoolCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkCommandPool*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPoolCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkCommandPool*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateCommandPool other && Equals(other);
            
            public bool Equals(PFN_vkCreateCommandPool other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPoolCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkCommandPool*, vulkan.VkResult> (vulkan.PFN_vkCreateCommandPool from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateCommandPool (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPoolCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkCommandPool*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateCommandPool(from);
            
            public static bool operator ==(PFN_vkCreateCommandPool left, PFN_vkCreateCommandPool right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateCommandPool left, PFN_vkCreateCommandPool right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyCommandPool : IEquatable<PFN_vkDestroyCommandPool>
        {
            public PFN_vkDestroyCommandPool(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyCommandPool other && Equals(other);
            
            public bool Equals(PFN_vkDestroyCommandPool other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyCommandPool from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyCommandPool (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyCommandPool(from);
            
            public static bool operator ==(PFN_vkDestroyCommandPool left, PFN_vkDestroyCommandPool right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyCommandPool left, PFN_vkDestroyCommandPool right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkResetCommandPool : IEquatable<PFN_vkResetCommandPool>
        {
            public PFN_vkResetCommandPool(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, vulkan.VkCommandPoolResetFlags, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, vulkan.VkCommandPoolResetFlags, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkResetCommandPool other && Equals(other);
            
            public bool Equals(PFN_vkResetCommandPool other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, vulkan.VkCommandPoolResetFlags, vulkan.VkResult> (vulkan.PFN_vkResetCommandPool from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkResetCommandPool (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, vulkan.VkCommandPoolResetFlags, vulkan.VkResult> from) => new vulkan.PFN_vkResetCommandPool(from);
            
            public static bool operator ==(PFN_vkResetCommandPool left, PFN_vkResetCommandPool right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkResetCommandPool left, PFN_vkResetCommandPool right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkAllocateCommandBuffers : IEquatable<PFN_vkAllocateCommandBuffers>
        {
            public PFN_vkAllocateCommandBuffers(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandBufferAllocateInfo*, vulkan.VkCommandBuffer*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandBufferAllocateInfo*, vulkan.VkCommandBuffer*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkAllocateCommandBuffers other && Equals(other);
            
            public bool Equals(PFN_vkAllocateCommandBuffers other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandBufferAllocateInfo*, vulkan.VkCommandBuffer*, vulkan.VkResult> (vulkan.PFN_vkAllocateCommandBuffers from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkAllocateCommandBuffers (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandBufferAllocateInfo*, vulkan.VkCommandBuffer*, vulkan.VkResult> from) => new vulkan.PFN_vkAllocateCommandBuffers(from);
            
            public static bool operator ==(PFN_vkAllocateCommandBuffers left, PFN_vkAllocateCommandBuffers right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkAllocateCommandBuffers left, PFN_vkAllocateCommandBuffers right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkFreeCommandBuffers : IEquatable<PFN_vkFreeCommandBuffers>
        {
            public PFN_vkFreeCommandBuffers(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, uint, vulkan.VkCommandBuffer*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, uint, vulkan.VkCommandBuffer*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkFreeCommandBuffers other && Equals(other);
            
            public bool Equals(PFN_vkFreeCommandBuffers other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, uint, vulkan.VkCommandBuffer*, void> (vulkan.PFN_vkFreeCommandBuffers from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkFreeCommandBuffers (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, uint, vulkan.VkCommandBuffer*, void> from) => new vulkan.PFN_vkFreeCommandBuffers(from);
            
            public static bool operator ==(PFN_vkFreeCommandBuffers left, PFN_vkFreeCommandBuffers right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkFreeCommandBuffers left, PFN_vkFreeCommandBuffers right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkBeginCommandBuffer : IEquatable<PFN_vkBeginCommandBuffer>
        {
            public PFN_vkBeginCommandBuffer(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCommandBufferBeginInfo*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCommandBufferBeginInfo*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkBeginCommandBuffer other && Equals(other);
            
            public bool Equals(PFN_vkBeginCommandBuffer other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCommandBufferBeginInfo*, vulkan.VkResult> (vulkan.PFN_vkBeginCommandBuffer from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkBeginCommandBuffer (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCommandBufferBeginInfo*, vulkan.VkResult> from) => new vulkan.PFN_vkBeginCommandBuffer(from);
            
            public static bool operator ==(PFN_vkBeginCommandBuffer left, PFN_vkBeginCommandBuffer right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkBeginCommandBuffer left, PFN_vkBeginCommandBuffer right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkEndCommandBuffer : IEquatable<PFN_vkEndCommandBuffer>
        {
            public PFN_vkEndCommandBuffer(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkEndCommandBuffer other && Equals(other);
            
            public bool Equals(PFN_vkEndCommandBuffer other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkResult> (vulkan.PFN_vkEndCommandBuffer from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkEndCommandBuffer (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkResult> from) => new vulkan.PFN_vkEndCommandBuffer(from);
            
            public static bool operator ==(PFN_vkEndCommandBuffer left, PFN_vkEndCommandBuffer right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkEndCommandBuffer left, PFN_vkEndCommandBuffer right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkResetCommandBuffer : IEquatable<PFN_vkResetCommandBuffer>
        {
            public PFN_vkResetCommandBuffer(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCommandBufferResetFlags, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCommandBufferResetFlags, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkResetCommandBuffer other && Equals(other);
            
            public bool Equals(PFN_vkResetCommandBuffer other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCommandBufferResetFlags, vulkan.VkResult> (vulkan.PFN_vkResetCommandBuffer from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkResetCommandBuffer (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCommandBufferResetFlags, vulkan.VkResult> from) => new vulkan.PFN_vkResetCommandBuffer(from);
            
            public static bool operator ==(PFN_vkResetCommandBuffer left, PFN_vkResetCommandBuffer right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkResetCommandBuffer left, PFN_vkResetCommandBuffer right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBindPipeline : IEquatable<PFN_vkCmdBindPipeline>
        {
            public PFN_vkCmdBindPipeline(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipeline, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipeline, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBindPipeline other && Equals(other);
            
            public bool Equals(PFN_vkCmdBindPipeline other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipeline, void> (vulkan.PFN_vkCmdBindPipeline from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBindPipeline (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipeline, void> from) => new vulkan.PFN_vkCmdBindPipeline(from);
            
            public static bool operator ==(PFN_vkCmdBindPipeline left, PFN_vkCmdBindPipeline right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBindPipeline left, PFN_vkCmdBindPipeline right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetViewport : IEquatable<PFN_vkCmdSetViewport>
        {
            public PFN_vkCmdSetViewport(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkViewport*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkViewport*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetViewport other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetViewport other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkViewport*, void> (vulkan.PFN_vkCmdSetViewport from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetViewport (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkViewport*, void> from) => new vulkan.PFN_vkCmdSetViewport(from);
            
            public static bool operator ==(PFN_vkCmdSetViewport left, PFN_vkCmdSetViewport right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetViewport left, PFN_vkCmdSetViewport right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetScissor : IEquatable<PFN_vkCmdSetScissor>
        {
            public PFN_vkCmdSetScissor(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkRect2D*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkRect2D*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetScissor other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetScissor other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkRect2D*, void> (vulkan.PFN_vkCmdSetScissor from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetScissor (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkRect2D*, void> from) => new vulkan.PFN_vkCmdSetScissor(from);
            
            public static bool operator ==(PFN_vkCmdSetScissor left, PFN_vkCmdSetScissor right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetScissor left, PFN_vkCmdSetScissor right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetLineWidth : IEquatable<PFN_vkCmdSetLineWidth>
        {
            public PFN_vkCmdSetLineWidth(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, float, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, float, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetLineWidth other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetLineWidth other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, float, void> (vulkan.PFN_vkCmdSetLineWidth from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetLineWidth (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, float, void> from) => new vulkan.PFN_vkCmdSetLineWidth(from);
            
            public static bool operator ==(PFN_vkCmdSetLineWidth left, PFN_vkCmdSetLineWidth right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetLineWidth left, PFN_vkCmdSetLineWidth right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDepthBias : IEquatable<PFN_vkCmdSetDepthBias>
        {
            public PFN_vkCmdSetDepthBias(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, float, float, float, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, float, float, float, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDepthBias other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDepthBias other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, float, float, float, void> (vulkan.PFN_vkCmdSetDepthBias from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDepthBias (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, float, float, float, void> from) => new vulkan.PFN_vkCmdSetDepthBias(from);
            
            public static bool operator ==(PFN_vkCmdSetDepthBias left, PFN_vkCmdSetDepthBias right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDepthBias left, PFN_vkCmdSetDepthBias right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetBlendConstants : IEquatable<PFN_vkCmdSetBlendConstants>
        {
            public PFN_vkCmdSetBlendConstants(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, FixedArray4<float>, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, FixedArray4<float>, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetBlendConstants other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetBlendConstants other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, FixedArray4<float>, void> (vulkan.PFN_vkCmdSetBlendConstants from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetBlendConstants (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, FixedArray4<float>, void> from) => new vulkan.PFN_vkCmdSetBlendConstants(from);
            
            public static bool operator ==(PFN_vkCmdSetBlendConstants left, PFN_vkCmdSetBlendConstants right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetBlendConstants left, PFN_vkCmdSetBlendConstants right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDepthBounds : IEquatable<PFN_vkCmdSetDepthBounds>
        {
            public PFN_vkCmdSetDepthBounds(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, float, float, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, float, float, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDepthBounds other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDepthBounds other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, float, float, void> (vulkan.PFN_vkCmdSetDepthBounds from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDepthBounds (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, float, float, void> from) => new vulkan.PFN_vkCmdSetDepthBounds(from);
            
            public static bool operator ==(PFN_vkCmdSetDepthBounds left, PFN_vkCmdSetDepthBounds right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDepthBounds left, PFN_vkCmdSetDepthBounds right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetStencilCompareMask : IEquatable<PFN_vkCmdSetStencilCompareMask>
        {
            public PFN_vkCmdSetStencilCompareMask(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetStencilCompareMask other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetStencilCompareMask other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, uint, void> (vulkan.PFN_vkCmdSetStencilCompareMask from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetStencilCompareMask (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, uint, void> from) => new vulkan.PFN_vkCmdSetStencilCompareMask(from);
            
            public static bool operator ==(PFN_vkCmdSetStencilCompareMask left, PFN_vkCmdSetStencilCompareMask right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetStencilCompareMask left, PFN_vkCmdSetStencilCompareMask right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetStencilWriteMask : IEquatable<PFN_vkCmdSetStencilWriteMask>
        {
            public PFN_vkCmdSetStencilWriteMask(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetStencilWriteMask other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetStencilWriteMask other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, uint, void> (vulkan.PFN_vkCmdSetStencilWriteMask from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetStencilWriteMask (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, uint, void> from) => new vulkan.PFN_vkCmdSetStencilWriteMask(from);
            
            public static bool operator ==(PFN_vkCmdSetStencilWriteMask left, PFN_vkCmdSetStencilWriteMask right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetStencilWriteMask left, PFN_vkCmdSetStencilWriteMask right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetStencilReference : IEquatable<PFN_vkCmdSetStencilReference>
        {
            public PFN_vkCmdSetStencilReference(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetStencilReference other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetStencilReference other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, uint, void> (vulkan.PFN_vkCmdSetStencilReference from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetStencilReference (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, uint, void> from) => new vulkan.PFN_vkCmdSetStencilReference(from);
            
            public static bool operator ==(PFN_vkCmdSetStencilReference left, PFN_vkCmdSetStencilReference right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetStencilReference left, PFN_vkCmdSetStencilReference right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBindDescriptorSets : IEquatable<PFN_vkCmdBindDescriptorSets>
        {
            public PFN_vkCmdBindDescriptorSets(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipelineLayout, uint, uint, vulkan.VkDescriptorSet*, uint, uint*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipelineLayout, uint, uint, vulkan.VkDescriptorSet*, uint, uint*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBindDescriptorSets other && Equals(other);
            
            public bool Equals(PFN_vkCmdBindDescriptorSets other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipelineLayout, uint, uint, vulkan.VkDescriptorSet*, uint, uint*, void> (vulkan.PFN_vkCmdBindDescriptorSets from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBindDescriptorSets (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipelineLayout, uint, uint, vulkan.VkDescriptorSet*, uint, uint*, void> from) => new vulkan.PFN_vkCmdBindDescriptorSets(from);
            
            public static bool operator ==(PFN_vkCmdBindDescriptorSets left, PFN_vkCmdBindDescriptorSets right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBindDescriptorSets left, PFN_vkCmdBindDescriptorSets right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBindIndexBuffer : IEquatable<PFN_vkCmdBindIndexBuffer>
        {
            public PFN_vkCmdBindIndexBuffer(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkIndexType, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkIndexType, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBindIndexBuffer other && Equals(other);
            
            public bool Equals(PFN_vkCmdBindIndexBuffer other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkIndexType, void> (vulkan.PFN_vkCmdBindIndexBuffer from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBindIndexBuffer (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkIndexType, void> from) => new vulkan.PFN_vkCmdBindIndexBuffer(from);
            
            public static bool operator ==(PFN_vkCmdBindIndexBuffer left, PFN_vkCmdBindIndexBuffer right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBindIndexBuffer left, PFN_vkCmdBindIndexBuffer right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBindVertexBuffers : IEquatable<PFN_vkCmdBindVertexBuffers>
        {
            public PFN_vkCmdBindVertexBuffers(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBindVertexBuffers other && Equals(other);
            
            public bool Equals(PFN_vkCmdBindVertexBuffers other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, void> (vulkan.PFN_vkCmdBindVertexBuffers from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBindVertexBuffers (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, void> from) => new vulkan.PFN_vkCmdBindVertexBuffers(from);
            
            public static bool operator ==(PFN_vkCmdBindVertexBuffers left, PFN_vkCmdBindVertexBuffers right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBindVertexBuffers left, PFN_vkCmdBindVertexBuffers right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDraw : IEquatable<PFN_vkCmdDraw>
        {
            public PFN_vkCmdDraw(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDraw other && Equals(other);
            
            public bool Equals(PFN_vkCmdDraw other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, uint, void> (vulkan.PFN_vkCmdDraw from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDraw (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, uint, void> from) => new vulkan.PFN_vkCmdDraw(from);
            
            public static bool operator ==(PFN_vkCmdDraw left, PFN_vkCmdDraw right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDraw left, PFN_vkCmdDraw right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawIndexed : IEquatable<PFN_vkCmdDrawIndexed>
        {
            public PFN_vkCmdDrawIndexed(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, int, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, int, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawIndexed other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawIndexed other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, int, uint, void> (vulkan.PFN_vkCmdDrawIndexed from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawIndexed (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, int, uint, void> from) => new vulkan.PFN_vkCmdDrawIndexed(from);
            
            public static bool operator ==(PFN_vkCmdDrawIndexed left, PFN_vkCmdDrawIndexed right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawIndexed left, PFN_vkCmdDrawIndexed right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawIndirect : IEquatable<PFN_vkCmdDrawIndirect>
        {
            public PFN_vkCmdDrawIndirect(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawIndirect other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawIndirect other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> (vulkan.PFN_vkCmdDrawIndirect from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawIndirect (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawIndirect(from);
            
            public static bool operator ==(PFN_vkCmdDrawIndirect left, PFN_vkCmdDrawIndirect right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawIndirect left, PFN_vkCmdDrawIndirect right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawIndexedIndirect : IEquatable<PFN_vkCmdDrawIndexedIndirect>
        {
            public PFN_vkCmdDrawIndexedIndirect(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawIndexedIndirect other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawIndexedIndirect other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> (vulkan.PFN_vkCmdDrawIndexedIndirect from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawIndexedIndirect (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawIndexedIndirect(from);
            
            public static bool operator ==(PFN_vkCmdDrawIndexedIndirect left, PFN_vkCmdDrawIndexedIndirect right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawIndexedIndirect left, PFN_vkCmdDrawIndexedIndirect right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDispatch : IEquatable<PFN_vkCmdDispatch>
        {
            public PFN_vkCmdDispatch(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDispatch other && Equals(other);
            
            public bool Equals(PFN_vkCmdDispatch other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, void> (vulkan.PFN_vkCmdDispatch from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDispatch (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, void> from) => new vulkan.PFN_vkCmdDispatch(from);
            
            public static bool operator ==(PFN_vkCmdDispatch left, PFN_vkCmdDispatch right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDispatch left, PFN_vkCmdDispatch right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDispatchIndirect : IEquatable<PFN_vkCmdDispatchIndirect>
        {
            public PFN_vkCmdDispatchIndirect(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDispatchIndirect other && Equals(other);
            
            public bool Equals(PFN_vkCmdDispatchIndirect other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, void> (vulkan.PFN_vkCmdDispatchIndirect from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDispatchIndirect (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, void> from) => new vulkan.PFN_vkCmdDispatchIndirect(from);
            
            public static bool operator ==(PFN_vkCmdDispatchIndirect left, PFN_vkCmdDispatchIndirect right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDispatchIndirect left, PFN_vkCmdDispatchIndirect right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyBuffer : IEquatable<PFN_vkCmdCopyBuffer>
        {
            public PFN_vkCmdCopyBuffer(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkBuffer, uint, vulkan.VkBufferCopy*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkBuffer, uint, vulkan.VkBufferCopy*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyBuffer other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyBuffer other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkBuffer, uint, vulkan.VkBufferCopy*, void> (vulkan.PFN_vkCmdCopyBuffer from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyBuffer (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkBuffer, uint, vulkan.VkBufferCopy*, void> from) => new vulkan.PFN_vkCmdCopyBuffer(from);
            
            public static bool operator ==(PFN_vkCmdCopyBuffer left, PFN_vkCmdCopyBuffer right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyBuffer left, PFN_vkCmdCopyBuffer right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyImage : IEquatable<PFN_vkCmdCopyImage>
        {
            public PFN_vkCmdCopyImage(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkImage, vulkan.VkImageLayout, uint, vulkan.VkImageCopy*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkImage, vulkan.VkImageLayout, uint, vulkan.VkImageCopy*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyImage other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyImage other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkImage, vulkan.VkImageLayout, uint, vulkan.VkImageCopy*, void> (vulkan.PFN_vkCmdCopyImage from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyImage (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkImage, vulkan.VkImageLayout, uint, vulkan.VkImageCopy*, void> from) => new vulkan.PFN_vkCmdCopyImage(from);
            
            public static bool operator ==(PFN_vkCmdCopyImage left, PFN_vkCmdCopyImage right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyImage left, PFN_vkCmdCopyImage right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBlitImage : IEquatable<PFN_vkCmdBlitImage>
        {
            public PFN_vkCmdBlitImage(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkImage, vulkan.VkImageLayout, uint, vulkan.VkImageBlit*, vulkan.VkFilter, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkImage, vulkan.VkImageLayout, uint, vulkan.VkImageBlit*, vulkan.VkFilter, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBlitImage other && Equals(other);
            
            public bool Equals(PFN_vkCmdBlitImage other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkImage, vulkan.VkImageLayout, uint, vulkan.VkImageBlit*, vulkan.VkFilter, void> (vulkan.PFN_vkCmdBlitImage from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBlitImage (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkImage, vulkan.VkImageLayout, uint, vulkan.VkImageBlit*, vulkan.VkFilter, void> from) => new vulkan.PFN_vkCmdBlitImage(from);
            
            public static bool operator ==(PFN_vkCmdBlitImage left, PFN_vkCmdBlitImage right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBlitImage left, PFN_vkCmdBlitImage right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyBufferToImage : IEquatable<PFN_vkCmdCopyBufferToImage>
        {
            public PFN_vkCmdCopyBufferToImage(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkImage, vulkan.VkImageLayout, uint, vulkan.VkBufferImageCopy*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkImage, vulkan.VkImageLayout, uint, vulkan.VkBufferImageCopy*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyBufferToImage other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyBufferToImage other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkImage, vulkan.VkImageLayout, uint, vulkan.VkBufferImageCopy*, void> (vulkan.PFN_vkCmdCopyBufferToImage from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyBufferToImage (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkImage, vulkan.VkImageLayout, uint, vulkan.VkBufferImageCopy*, void> from) => new vulkan.PFN_vkCmdCopyBufferToImage(from);
            
            public static bool operator ==(PFN_vkCmdCopyBufferToImage left, PFN_vkCmdCopyBufferToImage right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyBufferToImage left, PFN_vkCmdCopyBufferToImage right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyImageToBuffer : IEquatable<PFN_vkCmdCopyImageToBuffer>
        {
            public PFN_vkCmdCopyImageToBuffer(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkBuffer, uint, vulkan.VkBufferImageCopy*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkBuffer, uint, vulkan.VkBufferImageCopy*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyImageToBuffer other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyImageToBuffer other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkBuffer, uint, vulkan.VkBufferImageCopy*, void> (vulkan.PFN_vkCmdCopyImageToBuffer from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyImageToBuffer (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkBuffer, uint, vulkan.VkBufferImageCopy*, void> from) => new vulkan.PFN_vkCmdCopyImageToBuffer(from);
            
            public static bool operator ==(PFN_vkCmdCopyImageToBuffer left, PFN_vkCmdCopyImageToBuffer right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyImageToBuffer left, PFN_vkCmdCopyImageToBuffer right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdUpdateBuffer : IEquatable<PFN_vkCmdUpdateBuffer>
        {
            public PFN_vkCmdUpdateBuffer(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, void*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, void*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdUpdateBuffer other && Equals(other);
            
            public bool Equals(PFN_vkCmdUpdateBuffer other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, void*, void> (vulkan.PFN_vkCmdUpdateBuffer from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdUpdateBuffer (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, void*, void> from) => new vulkan.PFN_vkCmdUpdateBuffer(from);
            
            public static bool operator ==(PFN_vkCmdUpdateBuffer left, PFN_vkCmdUpdateBuffer right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdUpdateBuffer left, PFN_vkCmdUpdateBuffer right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdFillBuffer : IEquatable<PFN_vkCmdFillBuffer>
        {
            public PFN_vkCmdFillBuffer(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdFillBuffer other && Equals(other);
            
            public bool Equals(PFN_vkCmdFillBuffer other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, uint, void> (vulkan.PFN_vkCmdFillBuffer from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdFillBuffer (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, uint, void> from) => new vulkan.PFN_vkCmdFillBuffer(from);
            
            public static bool operator ==(PFN_vkCmdFillBuffer left, PFN_vkCmdFillBuffer right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdFillBuffer left, PFN_vkCmdFillBuffer right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdClearColorImage : IEquatable<PFN_vkCmdClearColorImage>
        {
            public PFN_vkCmdClearColorImage(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkClearColorValue*, uint, vulkan.VkImageSubresourceRange*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkClearColorValue*, uint, vulkan.VkImageSubresourceRange*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdClearColorImage other && Equals(other);
            
            public bool Equals(PFN_vkCmdClearColorImage other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkClearColorValue*, uint, vulkan.VkImageSubresourceRange*, void> (vulkan.PFN_vkCmdClearColorImage from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdClearColorImage (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkClearColorValue*, uint, vulkan.VkImageSubresourceRange*, void> from) => new vulkan.PFN_vkCmdClearColorImage(from);
            
            public static bool operator ==(PFN_vkCmdClearColorImage left, PFN_vkCmdClearColorImage right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdClearColorImage left, PFN_vkCmdClearColorImage right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdClearDepthStencilImage : IEquatable<PFN_vkCmdClearDepthStencilImage>
        {
            public PFN_vkCmdClearDepthStencilImage(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkClearDepthStencilValue*, uint, vulkan.VkImageSubresourceRange*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkClearDepthStencilValue*, uint, vulkan.VkImageSubresourceRange*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdClearDepthStencilImage other && Equals(other);
            
            public bool Equals(PFN_vkCmdClearDepthStencilImage other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkClearDepthStencilValue*, uint, vulkan.VkImageSubresourceRange*, void> (vulkan.PFN_vkCmdClearDepthStencilImage from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdClearDepthStencilImage (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkClearDepthStencilValue*, uint, vulkan.VkImageSubresourceRange*, void> from) => new vulkan.PFN_vkCmdClearDepthStencilImage(from);
            
            public static bool operator ==(PFN_vkCmdClearDepthStencilImage left, PFN_vkCmdClearDepthStencilImage right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdClearDepthStencilImage left, PFN_vkCmdClearDepthStencilImage right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdClearAttachments : IEquatable<PFN_vkCmdClearAttachments>
        {
            public PFN_vkCmdClearAttachments(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkClearAttachment*, uint, vulkan.VkClearRect*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkClearAttachment*, uint, vulkan.VkClearRect*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdClearAttachments other && Equals(other);
            
            public bool Equals(PFN_vkCmdClearAttachments other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkClearAttachment*, uint, vulkan.VkClearRect*, void> (vulkan.PFN_vkCmdClearAttachments from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdClearAttachments (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkClearAttachment*, uint, vulkan.VkClearRect*, void> from) => new vulkan.PFN_vkCmdClearAttachments(from);
            
            public static bool operator ==(PFN_vkCmdClearAttachments left, PFN_vkCmdClearAttachments right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdClearAttachments left, PFN_vkCmdClearAttachments right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdResolveImage : IEquatable<PFN_vkCmdResolveImage>
        {
            public PFN_vkCmdResolveImage(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkImage, vulkan.VkImageLayout, uint, vulkan.VkImageResolve*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkImage, vulkan.VkImageLayout, uint, vulkan.VkImageResolve*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdResolveImage other && Equals(other);
            
            public bool Equals(PFN_vkCmdResolveImage other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkImage, vulkan.VkImageLayout, uint, vulkan.VkImageResolve*, void> (vulkan.PFN_vkCmdResolveImage from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdResolveImage (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkImage, vulkan.VkImageLayout, uint, vulkan.VkImageResolve*, void> from) => new vulkan.PFN_vkCmdResolveImage(from);
            
            public static bool operator ==(PFN_vkCmdResolveImage left, PFN_vkCmdResolveImage right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdResolveImage left, PFN_vkCmdResolveImage right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetEvent : IEquatable<PFN_vkCmdSetEvent>
        {
            public PFN_vkCmdSetEvent(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkPipelineStageFlags, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkPipelineStageFlags, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetEvent other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetEvent other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkPipelineStageFlags, void> (vulkan.PFN_vkCmdSetEvent from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetEvent (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkPipelineStageFlags, void> from) => new vulkan.PFN_vkCmdSetEvent(from);
            
            public static bool operator ==(PFN_vkCmdSetEvent left, PFN_vkCmdSetEvent right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetEvent left, PFN_vkCmdSetEvent right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdResetEvent : IEquatable<PFN_vkCmdResetEvent>
        {
            public PFN_vkCmdResetEvent(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkPipelineStageFlags, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkPipelineStageFlags, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdResetEvent other && Equals(other);
            
            public bool Equals(PFN_vkCmdResetEvent other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkPipelineStageFlags, void> (vulkan.PFN_vkCmdResetEvent from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdResetEvent (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkPipelineStageFlags, void> from) => new vulkan.PFN_vkCmdResetEvent(from);
            
            public static bool operator ==(PFN_vkCmdResetEvent left, PFN_vkCmdResetEvent right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdResetEvent left, PFN_vkCmdResetEvent right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdWaitEvents : IEquatable<PFN_vkCmdWaitEvents>
        {
            public PFN_vkCmdWaitEvents(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkEvent*, vulkan.VkPipelineStageFlags, vulkan.VkPipelineStageFlags, uint, vulkan.VkMemoryBarrier*, uint, vulkan.VkBufferMemoryBarrier*, uint, vulkan.VkImageMemoryBarrier*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkEvent*, vulkan.VkPipelineStageFlags, vulkan.VkPipelineStageFlags, uint, vulkan.VkMemoryBarrier*, uint, vulkan.VkBufferMemoryBarrier*, uint, vulkan.VkImageMemoryBarrier*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdWaitEvents other && Equals(other);
            
            public bool Equals(PFN_vkCmdWaitEvents other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkEvent*, vulkan.VkPipelineStageFlags, vulkan.VkPipelineStageFlags, uint, vulkan.VkMemoryBarrier*, uint, vulkan.VkBufferMemoryBarrier*, uint, vulkan.VkImageMemoryBarrier*, void> (vulkan.PFN_vkCmdWaitEvents from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdWaitEvents (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkEvent*, vulkan.VkPipelineStageFlags, vulkan.VkPipelineStageFlags, uint, vulkan.VkMemoryBarrier*, uint, vulkan.VkBufferMemoryBarrier*, uint, vulkan.VkImageMemoryBarrier*, void> from) => new vulkan.PFN_vkCmdWaitEvents(from);
            
            public static bool operator ==(PFN_vkCmdWaitEvents left, PFN_vkCmdWaitEvents right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdWaitEvents left, PFN_vkCmdWaitEvents right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdPipelineBarrier : IEquatable<PFN_vkCmdPipelineBarrier>
        {
            public PFN_vkCmdPipelineBarrier(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlags, vulkan.VkPipelineStageFlags, vulkan.VkDependencyFlags, uint, vulkan.VkMemoryBarrier*, uint, vulkan.VkBufferMemoryBarrier*, uint, vulkan.VkImageMemoryBarrier*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlags, vulkan.VkPipelineStageFlags, vulkan.VkDependencyFlags, uint, vulkan.VkMemoryBarrier*, uint, vulkan.VkBufferMemoryBarrier*, uint, vulkan.VkImageMemoryBarrier*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdPipelineBarrier other && Equals(other);
            
            public bool Equals(PFN_vkCmdPipelineBarrier other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlags, vulkan.VkPipelineStageFlags, vulkan.VkDependencyFlags, uint, vulkan.VkMemoryBarrier*, uint, vulkan.VkBufferMemoryBarrier*, uint, vulkan.VkImageMemoryBarrier*, void> (vulkan.PFN_vkCmdPipelineBarrier from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdPipelineBarrier (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlags, vulkan.VkPipelineStageFlags, vulkan.VkDependencyFlags, uint, vulkan.VkMemoryBarrier*, uint, vulkan.VkBufferMemoryBarrier*, uint, vulkan.VkImageMemoryBarrier*, void> from) => new vulkan.PFN_vkCmdPipelineBarrier(from);
            
            public static bool operator ==(PFN_vkCmdPipelineBarrier left, PFN_vkCmdPipelineBarrier right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdPipelineBarrier left, PFN_vkCmdPipelineBarrier right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBeginQuery : IEquatable<PFN_vkCmdBeginQuery>
        {
            public PFN_vkCmdBeginQuery(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, vulkan.VkQueryControlFlags, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, vulkan.VkQueryControlFlags, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBeginQuery other && Equals(other);
            
            public bool Equals(PFN_vkCmdBeginQuery other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, vulkan.VkQueryControlFlags, void> (vulkan.PFN_vkCmdBeginQuery from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBeginQuery (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, vulkan.VkQueryControlFlags, void> from) => new vulkan.PFN_vkCmdBeginQuery(from);
            
            public static bool operator ==(PFN_vkCmdBeginQuery left, PFN_vkCmdBeginQuery right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBeginQuery left, PFN_vkCmdBeginQuery right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdEndQuery : IEquatable<PFN_vkCmdEndQuery>
        {
            public PFN_vkCmdEndQuery(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdEndQuery other && Equals(other);
            
            public bool Equals(PFN_vkCmdEndQuery other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, void> (vulkan.PFN_vkCmdEndQuery from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdEndQuery (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, void> from) => new vulkan.PFN_vkCmdEndQuery(from);
            
            public static bool operator ==(PFN_vkCmdEndQuery left, PFN_vkCmdEndQuery right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdEndQuery left, PFN_vkCmdEndQuery right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdResetQueryPool : IEquatable<PFN_vkCmdResetQueryPool>
        {
            public PFN_vkCmdResetQueryPool(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdResetQueryPool other && Equals(other);
            
            public bool Equals(PFN_vkCmdResetQueryPool other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, uint, void> (vulkan.PFN_vkCmdResetQueryPool from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdResetQueryPool (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, uint, void> from) => new vulkan.PFN_vkCmdResetQueryPool(from);
            
            public static bool operator ==(PFN_vkCmdResetQueryPool left, PFN_vkCmdResetQueryPool right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdResetQueryPool left, PFN_vkCmdResetQueryPool right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdWriteTimestamp : IEquatable<PFN_vkCmdWriteTimestamp>
        {
            public PFN_vkCmdWriteTimestamp(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlagBits, vulkan.VkQueryPool, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlagBits, vulkan.VkQueryPool, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdWriteTimestamp other && Equals(other);
            
            public bool Equals(PFN_vkCmdWriteTimestamp other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlagBits, vulkan.VkQueryPool, uint, void> (vulkan.PFN_vkCmdWriteTimestamp from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdWriteTimestamp (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlagBits, vulkan.VkQueryPool, uint, void> from) => new vulkan.PFN_vkCmdWriteTimestamp(from);
            
            public static bool operator ==(PFN_vkCmdWriteTimestamp left, PFN_vkCmdWriteTimestamp right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdWriteTimestamp left, PFN_vkCmdWriteTimestamp right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyQueryPoolResults : IEquatable<PFN_vkCmdCopyQueryPoolResults>
        {
            public PFN_vkCmdCopyQueryPoolResults(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, uint, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkQueryResultFlags, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, uint, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkQueryResultFlags, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyQueryPoolResults other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyQueryPoolResults other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, uint, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkQueryResultFlags, void> (vulkan.PFN_vkCmdCopyQueryPoolResults from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyQueryPoolResults (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, uint, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkQueryResultFlags, void> from) => new vulkan.PFN_vkCmdCopyQueryPoolResults(from);
            
            public static bool operator ==(PFN_vkCmdCopyQueryPoolResults left, PFN_vkCmdCopyQueryPoolResults right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyQueryPoolResults left, PFN_vkCmdCopyQueryPoolResults right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdPushConstants : IEquatable<PFN_vkCmdPushConstants>
        {
            public PFN_vkCmdPushConstants(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineLayout, vulkan.VkShaderStageFlags, uint, uint, void*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineLayout, vulkan.VkShaderStageFlags, uint, uint, void*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdPushConstants other && Equals(other);
            
            public bool Equals(PFN_vkCmdPushConstants other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineLayout, vulkan.VkShaderStageFlags, uint, uint, void*, void> (vulkan.PFN_vkCmdPushConstants from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdPushConstants (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineLayout, vulkan.VkShaderStageFlags, uint, uint, void*, void> from) => new vulkan.PFN_vkCmdPushConstants(from);
            
            public static bool operator ==(PFN_vkCmdPushConstants left, PFN_vkCmdPushConstants right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdPushConstants left, PFN_vkCmdPushConstants right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBeginRenderPass : IEquatable<PFN_vkCmdBeginRenderPass>
        {
            public PFN_vkCmdBeginRenderPass(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderPassBeginInfo*, vulkan.VkSubpassContents, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderPassBeginInfo*, vulkan.VkSubpassContents, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBeginRenderPass other && Equals(other);
            
            public bool Equals(PFN_vkCmdBeginRenderPass other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderPassBeginInfo*, vulkan.VkSubpassContents, void> (vulkan.PFN_vkCmdBeginRenderPass from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBeginRenderPass (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderPassBeginInfo*, vulkan.VkSubpassContents, void> from) => new vulkan.PFN_vkCmdBeginRenderPass(from);
            
            public static bool operator ==(PFN_vkCmdBeginRenderPass left, PFN_vkCmdBeginRenderPass right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBeginRenderPass left, PFN_vkCmdBeginRenderPass right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdNextSubpass : IEquatable<PFN_vkCmdNextSubpass>
        {
            public PFN_vkCmdNextSubpass(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassContents, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassContents, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdNextSubpass other && Equals(other);
            
            public bool Equals(PFN_vkCmdNextSubpass other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassContents, void> (vulkan.PFN_vkCmdNextSubpass from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdNextSubpass (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassContents, void> from) => new vulkan.PFN_vkCmdNextSubpass(from);
            
            public static bool operator ==(PFN_vkCmdNextSubpass left, PFN_vkCmdNextSubpass right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdNextSubpass left, PFN_vkCmdNextSubpass right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdEndRenderPass : IEquatable<PFN_vkCmdEndRenderPass>
        {
            public PFN_vkCmdEndRenderPass(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdEndRenderPass other && Equals(other);
            
            public bool Equals(PFN_vkCmdEndRenderPass other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> (vulkan.PFN_vkCmdEndRenderPass from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdEndRenderPass (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> from) => new vulkan.PFN_vkCmdEndRenderPass(from);
            
            public static bool operator ==(PFN_vkCmdEndRenderPass left, PFN_vkCmdEndRenderPass right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdEndRenderPass left, PFN_vkCmdEndRenderPass right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdExecuteCommands : IEquatable<PFN_vkCmdExecuteCommands>
        {
            public PFN_vkCmdExecuteCommands(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkCommandBuffer*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkCommandBuffer*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdExecuteCommands other && Equals(other);
            
            public bool Equals(PFN_vkCmdExecuteCommands other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkCommandBuffer*, void> (vulkan.PFN_vkCmdExecuteCommands from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdExecuteCommands (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkCommandBuffer*, void> from) => new vulkan.PFN_vkCmdExecuteCommands(from);
            
            public static bool operator ==(PFN_vkCmdExecuteCommands left, PFN_vkCmdExecuteCommands right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdExecuteCommands left, PFN_vkCmdExecuteCommands right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorUpdateTemplate : IEquatable<VkDescriptorUpdateTemplate>
        {
            public VkDescriptorUpdateTemplate(vulkan.VkDescriptorUpdateTemplate_T value) => this.Value = value;
            
            public vulkan.VkDescriptorUpdateTemplate_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorUpdateTemplate other && Equals(other);
            
            public bool Equals(VkDescriptorUpdateTemplate other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDescriptorUpdateTemplate_T (vulkan.VkDescriptorUpdateTemplate from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorUpdateTemplate (vulkan.VkDescriptorUpdateTemplate_T from) => new vulkan.VkDescriptorUpdateTemplate(from);
            
            public static bool operator ==(VkDescriptorUpdateTemplate left, VkDescriptorUpdateTemplate right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorUpdateTemplate left, VkDescriptorUpdateTemplate right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPeerMemoryFeatureFlags : IEquatable<VkPeerMemoryFeatureFlags>
        {
            public VkPeerMemoryFeatureFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPeerMemoryFeatureFlags other && Equals(other);
            
            public bool Equals(VkPeerMemoryFeatureFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkPeerMemoryFeatureFlags from) => from.Value;
            
            public static implicit operator vulkan.VkPeerMemoryFeatureFlags (vulkan.VkFlags from) => new vulkan.VkPeerMemoryFeatureFlags(from);
            
            public static bool operator ==(VkPeerMemoryFeatureFlags left, VkPeerMemoryFeatureFlags right) => left.Equals(right);
            
            public static bool operator !=(VkPeerMemoryFeatureFlags left, VkPeerMemoryFeatureFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCommandPoolTrimFlags : IEquatable<VkCommandPoolTrimFlags>
        {
            public VkCommandPoolTrimFlags(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkCommandPoolTrimFlags other && Equals(other);
            
            public bool Equals(VkCommandPoolTrimFlags other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkCommandPoolTrimFlags from) => from.Value;
            
            public static implicit operator vulkan.VkCommandPoolTrimFlags (vulkan.VkFlags from) => new vulkan.VkCommandPoolTrimFlags(from);
            
            public static bool operator ==(VkCommandPoolTrimFlags left, VkCommandPoolTrimFlags right) => left.Equals(right);
            
            public static bool operator !=(VkCommandPoolTrimFlags left, VkCommandPoolTrimFlags right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceVariablePointerFeatures : IEquatable<VkPhysicalDeviceVariablePointerFeatures>
        {
            public VkPhysicalDeviceVariablePointerFeatures(vulkan.VkPhysicalDeviceVariablePointersFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceVariablePointersFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceVariablePointerFeatures other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceVariablePointerFeatures other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceVariablePointersFeatures (vulkan.VkPhysicalDeviceVariablePointerFeatures from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceVariablePointerFeatures (vulkan.VkPhysicalDeviceVariablePointersFeatures from) => new vulkan.VkPhysicalDeviceVariablePointerFeatures(from);
            
            public static bool operator ==(VkPhysicalDeviceVariablePointerFeatures left, VkPhysicalDeviceVariablePointerFeatures right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceVariablePointerFeatures left, VkPhysicalDeviceVariablePointerFeatures right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceShaderDrawParameterFeatures : IEquatable<VkPhysicalDeviceShaderDrawParameterFeatures>
        {
            public VkPhysicalDeviceShaderDrawParameterFeatures(vulkan.VkPhysicalDeviceShaderDrawParametersFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceShaderDrawParametersFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceShaderDrawParameterFeatures other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceShaderDrawParameterFeatures other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderDrawParametersFeatures (vulkan.VkPhysicalDeviceShaderDrawParameterFeatures from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderDrawParameterFeatures (vulkan.VkPhysicalDeviceShaderDrawParametersFeatures from) => new vulkan.VkPhysicalDeviceShaderDrawParameterFeatures(from);
            
            public static bool operator ==(VkPhysicalDeviceShaderDrawParameterFeatures left, VkPhysicalDeviceShaderDrawParameterFeatures right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceShaderDrawParameterFeatures left, VkPhysicalDeviceShaderDrawParameterFeatures right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkEnumerateInstanceVersion : IEquatable<PFN_vkEnumerateInstanceVersion>
        {
            public PFN_vkEnumerateInstanceVersion(delegate*unmanaged[Stdcall]<uint*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<uint*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkEnumerateInstanceVersion other && Equals(other);
            
            public bool Equals(PFN_vkEnumerateInstanceVersion other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<uint*, vulkan.VkResult> (vulkan.PFN_vkEnumerateInstanceVersion from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkEnumerateInstanceVersion (delegate*unmanaged[Stdcall]<uint*, vulkan.VkResult> from) => new vulkan.PFN_vkEnumerateInstanceVersion(from);
            
            public static bool operator ==(PFN_vkEnumerateInstanceVersion left, PFN_vkEnumerateInstanceVersion right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkEnumerateInstanceVersion left, PFN_vkEnumerateInstanceVersion right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkBindBufferMemory2 : IEquatable<PFN_vkBindBufferMemory2>
        {
            public PFN_vkBindBufferMemory2(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindBufferMemoryInfo*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindBufferMemoryInfo*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkBindBufferMemory2 other && Equals(other);
            
            public bool Equals(PFN_vkBindBufferMemory2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindBufferMemoryInfo*, vulkan.VkResult> (vulkan.PFN_vkBindBufferMemory2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkBindBufferMemory2 (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindBufferMemoryInfo*, vulkan.VkResult> from) => new vulkan.PFN_vkBindBufferMemory2(from);
            
            public static bool operator ==(PFN_vkBindBufferMemory2 left, PFN_vkBindBufferMemory2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkBindBufferMemory2 left, PFN_vkBindBufferMemory2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkBindImageMemory2 : IEquatable<PFN_vkBindImageMemory2>
        {
            public PFN_vkBindImageMemory2(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindImageMemoryInfo*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindImageMemoryInfo*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkBindImageMemory2 other && Equals(other);
            
            public bool Equals(PFN_vkBindImageMemory2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindImageMemoryInfo*, vulkan.VkResult> (vulkan.PFN_vkBindImageMemory2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkBindImageMemory2 (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindImageMemoryInfo*, vulkan.VkResult> from) => new vulkan.PFN_vkBindImageMemory2(from);
            
            public static bool operator ==(PFN_vkBindImageMemory2 left, PFN_vkBindImageMemory2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkBindImageMemory2 left, PFN_vkBindImageMemory2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceGroupPeerMemoryFeatures : IEquatable<PFN_vkGetDeviceGroupPeerMemoryFeatures>
        {
            public PFN_vkGetDeviceGroupPeerMemoryFeatures(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, uint, uint, vulkan.VkPeerMemoryFeatureFlags*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, uint, uint, vulkan.VkPeerMemoryFeatureFlags*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceGroupPeerMemoryFeatures other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceGroupPeerMemoryFeatures other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, uint, uint, vulkan.VkPeerMemoryFeatureFlags*, void> (vulkan.PFN_vkGetDeviceGroupPeerMemoryFeatures from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceGroupPeerMemoryFeatures (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, uint, uint, vulkan.VkPeerMemoryFeatureFlags*, void> from) => new vulkan.PFN_vkGetDeviceGroupPeerMemoryFeatures(from);
            
            public static bool operator ==(PFN_vkGetDeviceGroupPeerMemoryFeatures left, PFN_vkGetDeviceGroupPeerMemoryFeatures right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceGroupPeerMemoryFeatures left, PFN_vkGetDeviceGroupPeerMemoryFeatures right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDeviceMask : IEquatable<PFN_vkCmdSetDeviceMask>
        {
            public PFN_vkCmdSetDeviceMask(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDeviceMask other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDeviceMask other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> (vulkan.PFN_vkCmdSetDeviceMask from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDeviceMask (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> from) => new vulkan.PFN_vkCmdSetDeviceMask(from);
            
            public static bool operator ==(PFN_vkCmdSetDeviceMask left, PFN_vkCmdSetDeviceMask right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDeviceMask left, PFN_vkCmdSetDeviceMask right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDispatchBase : IEquatable<PFN_vkCmdDispatchBase>
        {
            public PFN_vkCmdDispatchBase(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, uint, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, uint, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDispatchBase other && Equals(other);
            
            public bool Equals(PFN_vkCmdDispatchBase other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, uint, uint, uint, void> (vulkan.PFN_vkCmdDispatchBase from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDispatchBase (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, uint, uint, uint, void> from) => new vulkan.PFN_vkCmdDispatchBase(from);
            
            public static bool operator ==(PFN_vkCmdDispatchBase left, PFN_vkCmdDispatchBase right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDispatchBase left, PFN_vkCmdDispatchBase right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkEnumeratePhysicalDeviceGroups : IEquatable<PFN_vkEnumeratePhysicalDeviceGroups>
        {
            public PFN_vkEnumeratePhysicalDeviceGroups(delegate*unmanaged[Stdcall]<vulkan.VkInstance, uint*, vulkan.VkPhysicalDeviceGroupProperties*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, uint*, vulkan.VkPhysicalDeviceGroupProperties*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkEnumeratePhysicalDeviceGroups other && Equals(other);
            
            public bool Equals(PFN_vkEnumeratePhysicalDeviceGroups other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, uint*, vulkan.VkPhysicalDeviceGroupProperties*, vulkan.VkResult> (vulkan.PFN_vkEnumeratePhysicalDeviceGroups from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkEnumeratePhysicalDeviceGroups (delegate*unmanaged[Stdcall]<vulkan.VkInstance, uint*, vulkan.VkPhysicalDeviceGroupProperties*, vulkan.VkResult> from) => new vulkan.PFN_vkEnumeratePhysicalDeviceGroups(from);
            
            public static bool operator ==(PFN_vkEnumeratePhysicalDeviceGroups left, PFN_vkEnumeratePhysicalDeviceGroups right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkEnumeratePhysicalDeviceGroups left, PFN_vkEnumeratePhysicalDeviceGroups right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetImageMemoryRequirements2 : IEquatable<PFN_vkGetImageMemoryRequirements2>
        {
            public PFN_vkGetImageMemoryRequirements2(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageMemoryRequirementsInfo2*, vulkan.VkMemoryRequirements2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageMemoryRequirementsInfo2*, vulkan.VkMemoryRequirements2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetImageMemoryRequirements2 other && Equals(other);
            
            public bool Equals(PFN_vkGetImageMemoryRequirements2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageMemoryRequirementsInfo2*, vulkan.VkMemoryRequirements2*, void> (vulkan.PFN_vkGetImageMemoryRequirements2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetImageMemoryRequirements2 (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageMemoryRequirementsInfo2*, vulkan.VkMemoryRequirements2*, void> from) => new vulkan.PFN_vkGetImageMemoryRequirements2(from);
            
            public static bool operator ==(PFN_vkGetImageMemoryRequirements2 left, PFN_vkGetImageMemoryRequirements2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetImageMemoryRequirements2 left, PFN_vkGetImageMemoryRequirements2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetBufferMemoryRequirements2 : IEquatable<PFN_vkGetBufferMemoryRequirements2>
        {
            public PFN_vkGetBufferMemoryRequirements2(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferMemoryRequirementsInfo2*, vulkan.VkMemoryRequirements2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferMemoryRequirementsInfo2*, vulkan.VkMemoryRequirements2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetBufferMemoryRequirements2 other && Equals(other);
            
            public bool Equals(PFN_vkGetBufferMemoryRequirements2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferMemoryRequirementsInfo2*, vulkan.VkMemoryRequirements2*, void> (vulkan.PFN_vkGetBufferMemoryRequirements2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetBufferMemoryRequirements2 (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferMemoryRequirementsInfo2*, vulkan.VkMemoryRequirements2*, void> from) => new vulkan.PFN_vkGetBufferMemoryRequirements2(from);
            
            public static bool operator ==(PFN_vkGetBufferMemoryRequirements2 left, PFN_vkGetBufferMemoryRequirements2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetBufferMemoryRequirements2 left, PFN_vkGetBufferMemoryRequirements2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetImageSparseMemoryRequirements2 : IEquatable<PFN_vkGetImageSparseMemoryRequirements2>
        {
            public PFN_vkGetImageSparseMemoryRequirements2(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageSparseMemoryRequirementsInfo2*, uint*, vulkan.VkSparseImageMemoryRequirements2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageSparseMemoryRequirementsInfo2*, uint*, vulkan.VkSparseImageMemoryRequirements2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetImageSparseMemoryRequirements2 other && Equals(other);
            
            public bool Equals(PFN_vkGetImageSparseMemoryRequirements2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageSparseMemoryRequirementsInfo2*, uint*, vulkan.VkSparseImageMemoryRequirements2*, void> (vulkan.PFN_vkGetImageSparseMemoryRequirements2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetImageSparseMemoryRequirements2 (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageSparseMemoryRequirementsInfo2*, uint*, vulkan.VkSparseImageMemoryRequirements2*, void> from) => new vulkan.PFN_vkGetImageSparseMemoryRequirements2(from);
            
            public static bool operator ==(PFN_vkGetImageSparseMemoryRequirements2 left, PFN_vkGetImageSparseMemoryRequirements2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetImageSparseMemoryRequirements2 left, PFN_vkGetImageSparseMemoryRequirements2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceFeatures2 : IEquatable<PFN_vkGetPhysicalDeviceFeatures2>
        {
            public PFN_vkGetPhysicalDeviceFeatures2(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceFeatures2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceFeatures2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceFeatures2 other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceFeatures2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceFeatures2*, void> (vulkan.PFN_vkGetPhysicalDeviceFeatures2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceFeatures2 (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceFeatures2*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceFeatures2(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceFeatures2 left, PFN_vkGetPhysicalDeviceFeatures2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceFeatures2 left, PFN_vkGetPhysicalDeviceFeatures2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceProperties2 : IEquatable<PFN_vkGetPhysicalDeviceProperties2>
        {
            public PFN_vkGetPhysicalDeviceProperties2(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceProperties2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceProperties2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceProperties2 other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceProperties2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceProperties2*, void> (vulkan.PFN_vkGetPhysicalDeviceProperties2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceProperties2 (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceProperties2*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceProperties2(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceProperties2 left, PFN_vkGetPhysicalDeviceProperties2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceProperties2 left, PFN_vkGetPhysicalDeviceProperties2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceFormatProperties2 : IEquatable<PFN_vkGetPhysicalDeviceFormatProperties2>
        {
            public PFN_vkGetPhysicalDeviceFormatProperties2(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkFormatProperties2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkFormatProperties2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceFormatProperties2 other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceFormatProperties2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkFormatProperties2*, void> (vulkan.PFN_vkGetPhysicalDeviceFormatProperties2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceFormatProperties2 (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkFormatProperties2*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceFormatProperties2(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceFormatProperties2 left, PFN_vkGetPhysicalDeviceFormatProperties2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceFormatProperties2 left, PFN_vkGetPhysicalDeviceFormatProperties2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceImageFormatProperties2 : IEquatable<PFN_vkGetPhysicalDeviceImageFormatProperties2>
        {
            public PFN_vkGetPhysicalDeviceImageFormatProperties2(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceImageFormatInfo2*, vulkan.VkImageFormatProperties2*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceImageFormatInfo2*, vulkan.VkImageFormatProperties2*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceImageFormatProperties2 other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceImageFormatProperties2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceImageFormatInfo2*, vulkan.VkImageFormatProperties2*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceImageFormatProperties2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceImageFormatProperties2 (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceImageFormatInfo2*, vulkan.VkImageFormatProperties2*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceImageFormatProperties2(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceImageFormatProperties2 left, PFN_vkGetPhysicalDeviceImageFormatProperties2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceImageFormatProperties2 left, PFN_vkGetPhysicalDeviceImageFormatProperties2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceQueueFamilyProperties2 : IEquatable<PFN_vkGetPhysicalDeviceQueueFamilyProperties2>
        {
            public PFN_vkGetPhysicalDeviceQueueFamilyProperties2(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkQueueFamilyProperties2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkQueueFamilyProperties2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceQueueFamilyProperties2 other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceQueueFamilyProperties2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkQueueFamilyProperties2*, void> (vulkan.PFN_vkGetPhysicalDeviceQueueFamilyProperties2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceQueueFamilyProperties2 (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkQueueFamilyProperties2*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceQueueFamilyProperties2(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceQueueFamilyProperties2 left, PFN_vkGetPhysicalDeviceQueueFamilyProperties2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceQueueFamilyProperties2 left, PFN_vkGetPhysicalDeviceQueueFamilyProperties2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceMemoryProperties2 : IEquatable<PFN_vkGetPhysicalDeviceMemoryProperties2>
        {
            public PFN_vkGetPhysicalDeviceMemoryProperties2(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceMemoryProperties2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceMemoryProperties2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceMemoryProperties2 other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceMemoryProperties2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceMemoryProperties2*, void> (vulkan.PFN_vkGetPhysicalDeviceMemoryProperties2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceMemoryProperties2 (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceMemoryProperties2*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceMemoryProperties2(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceMemoryProperties2 left, PFN_vkGetPhysicalDeviceMemoryProperties2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceMemoryProperties2 left, PFN_vkGetPhysicalDeviceMemoryProperties2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 : IEquatable<PFN_vkGetPhysicalDeviceSparseImageFormatProperties2>
        {
            public PFN_vkGetPhysicalDeviceSparseImageFormatProperties2(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSparseImageFormatInfo2*, uint*, vulkan.VkSparseImageFormatProperties2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSparseImageFormatInfo2*, uint*, vulkan.VkSparseImageFormatProperties2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSparseImageFormatInfo2*, uint*, vulkan.VkSparseImageFormatProperties2*, void> (vulkan.PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSparseImageFormatInfo2*, uint*, vulkan.VkSparseImageFormatProperties2*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceSparseImageFormatProperties2(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 left, PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 left, PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkTrimCommandPool : IEquatable<PFN_vkTrimCommandPool>
        {
            public PFN_vkTrimCommandPool(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, vulkan.VkCommandPoolTrimFlags, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, vulkan.VkCommandPoolTrimFlags, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkTrimCommandPool other && Equals(other);
            
            public bool Equals(PFN_vkTrimCommandPool other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, vulkan.VkCommandPoolTrimFlags, void> (vulkan.PFN_vkTrimCommandPool from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkTrimCommandPool (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, vulkan.VkCommandPoolTrimFlags, void> from) => new vulkan.PFN_vkTrimCommandPool(from);
            
            public static bool operator ==(PFN_vkTrimCommandPool left, PFN_vkTrimCommandPool right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkTrimCommandPool left, PFN_vkTrimCommandPool right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceQueue2 : IEquatable<PFN_vkGetDeviceQueue2>
        {
            public PFN_vkGetDeviceQueue2(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceQueueInfo2*, vulkan.VkQueue*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceQueueInfo2*, vulkan.VkQueue*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceQueue2 other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceQueue2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceQueueInfo2*, vulkan.VkQueue*, void> (vulkan.PFN_vkGetDeviceQueue2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceQueue2 (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceQueueInfo2*, vulkan.VkQueue*, void> from) => new vulkan.PFN_vkGetDeviceQueue2(from);
            
            public static bool operator ==(PFN_vkGetDeviceQueue2 left, PFN_vkGetDeviceQueue2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceQueue2 left, PFN_vkGetDeviceQueue2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateSamplerYcbcrConversion : IEquatable<PFN_vkCreateSamplerYcbcrConversion>
        {
            public PFN_vkCreateSamplerYcbcrConversion(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerYcbcrConversionCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkSamplerYcbcrConversion*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerYcbcrConversionCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkSamplerYcbcrConversion*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateSamplerYcbcrConversion other && Equals(other);
            
            public bool Equals(PFN_vkCreateSamplerYcbcrConversion other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerYcbcrConversionCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkSamplerYcbcrConversion*, vulkan.VkResult> (vulkan.PFN_vkCreateSamplerYcbcrConversion from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateSamplerYcbcrConversion (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerYcbcrConversionCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkSamplerYcbcrConversion*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateSamplerYcbcrConversion(from);
            
            public static bool operator ==(PFN_vkCreateSamplerYcbcrConversion left, PFN_vkCreateSamplerYcbcrConversion right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateSamplerYcbcrConversion left, PFN_vkCreateSamplerYcbcrConversion right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroySamplerYcbcrConversion : IEquatable<PFN_vkDestroySamplerYcbcrConversion>
        {
            public PFN_vkDestroySamplerYcbcrConversion(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerYcbcrConversion, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerYcbcrConversion, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroySamplerYcbcrConversion other && Equals(other);
            
            public bool Equals(PFN_vkDestroySamplerYcbcrConversion other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerYcbcrConversion, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroySamplerYcbcrConversion from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroySamplerYcbcrConversion (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerYcbcrConversion, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroySamplerYcbcrConversion(from);
            
            public static bool operator ==(PFN_vkDestroySamplerYcbcrConversion left, PFN_vkDestroySamplerYcbcrConversion right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroySamplerYcbcrConversion left, PFN_vkDestroySamplerYcbcrConversion right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateDescriptorUpdateTemplate : IEquatable<PFN_vkCreateDescriptorUpdateTemplate>
        {
            public PFN_vkCreateDescriptorUpdateTemplate(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorUpdateTemplateCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDescriptorUpdateTemplate*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorUpdateTemplateCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDescriptorUpdateTemplate*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateDescriptorUpdateTemplate other && Equals(other);
            
            public bool Equals(PFN_vkCreateDescriptorUpdateTemplate other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorUpdateTemplateCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDescriptorUpdateTemplate*, vulkan.VkResult> (vulkan.PFN_vkCreateDescriptorUpdateTemplate from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateDescriptorUpdateTemplate (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorUpdateTemplateCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDescriptorUpdateTemplate*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateDescriptorUpdateTemplate(from);
            
            public static bool operator ==(PFN_vkCreateDescriptorUpdateTemplate left, PFN_vkCreateDescriptorUpdateTemplate right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateDescriptorUpdateTemplate left, PFN_vkCreateDescriptorUpdateTemplate right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyDescriptorUpdateTemplate : IEquatable<PFN_vkDestroyDescriptorUpdateTemplate>
        {
            public PFN_vkDestroyDescriptorUpdateTemplate(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorUpdateTemplate, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorUpdateTemplate, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyDescriptorUpdateTemplate other && Equals(other);
            
            public bool Equals(PFN_vkDestroyDescriptorUpdateTemplate other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorUpdateTemplate, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyDescriptorUpdateTemplate from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyDescriptorUpdateTemplate (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorUpdateTemplate, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyDescriptorUpdateTemplate(from);
            
            public static bool operator ==(PFN_vkDestroyDescriptorUpdateTemplate left, PFN_vkDestroyDescriptorUpdateTemplate right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyDescriptorUpdateTemplate left, PFN_vkDestroyDescriptorUpdateTemplate right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkUpdateDescriptorSetWithTemplate : IEquatable<PFN_vkUpdateDescriptorSetWithTemplate>
        {
            public PFN_vkUpdateDescriptorSetWithTemplate(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSet, vulkan.VkDescriptorUpdateTemplate, void*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSet, vulkan.VkDescriptorUpdateTemplate, void*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkUpdateDescriptorSetWithTemplate other && Equals(other);
            
            public bool Equals(PFN_vkUpdateDescriptorSetWithTemplate other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSet, vulkan.VkDescriptorUpdateTemplate, void*, void> (vulkan.PFN_vkUpdateDescriptorSetWithTemplate from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkUpdateDescriptorSetWithTemplate (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSet, vulkan.VkDescriptorUpdateTemplate, void*, void> from) => new vulkan.PFN_vkUpdateDescriptorSetWithTemplate(from);
            
            public static bool operator ==(PFN_vkUpdateDescriptorSetWithTemplate left, PFN_vkUpdateDescriptorSetWithTemplate right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkUpdateDescriptorSetWithTemplate left, PFN_vkUpdateDescriptorSetWithTemplate right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceExternalBufferProperties : IEquatable<PFN_vkGetPhysicalDeviceExternalBufferProperties>
        {
            public PFN_vkGetPhysicalDeviceExternalBufferProperties(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalBufferInfo*, vulkan.VkExternalBufferProperties*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalBufferInfo*, vulkan.VkExternalBufferProperties*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceExternalBufferProperties other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceExternalBufferProperties other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalBufferInfo*, vulkan.VkExternalBufferProperties*, void> (vulkan.PFN_vkGetPhysicalDeviceExternalBufferProperties from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceExternalBufferProperties (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalBufferInfo*, vulkan.VkExternalBufferProperties*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceExternalBufferProperties(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceExternalBufferProperties left, PFN_vkGetPhysicalDeviceExternalBufferProperties right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceExternalBufferProperties left, PFN_vkGetPhysicalDeviceExternalBufferProperties right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceExternalFenceProperties : IEquatable<PFN_vkGetPhysicalDeviceExternalFenceProperties>
        {
            public PFN_vkGetPhysicalDeviceExternalFenceProperties(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalFenceInfo*, vulkan.VkExternalFenceProperties*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalFenceInfo*, vulkan.VkExternalFenceProperties*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceExternalFenceProperties other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceExternalFenceProperties other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalFenceInfo*, vulkan.VkExternalFenceProperties*, void> (vulkan.PFN_vkGetPhysicalDeviceExternalFenceProperties from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceExternalFenceProperties (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalFenceInfo*, vulkan.VkExternalFenceProperties*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceExternalFenceProperties(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceExternalFenceProperties left, PFN_vkGetPhysicalDeviceExternalFenceProperties right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceExternalFenceProperties left, PFN_vkGetPhysicalDeviceExternalFenceProperties right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceExternalSemaphoreProperties : IEquatable<PFN_vkGetPhysicalDeviceExternalSemaphoreProperties>
        {
            public PFN_vkGetPhysicalDeviceExternalSemaphoreProperties(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalSemaphoreInfo*, vulkan.VkExternalSemaphoreProperties*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalSemaphoreInfo*, vulkan.VkExternalSemaphoreProperties*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceExternalSemaphoreProperties other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceExternalSemaphoreProperties other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalSemaphoreInfo*, vulkan.VkExternalSemaphoreProperties*, void> (vulkan.PFN_vkGetPhysicalDeviceExternalSemaphoreProperties from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceExternalSemaphoreProperties (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalSemaphoreInfo*, vulkan.VkExternalSemaphoreProperties*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceExternalSemaphoreProperties(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceExternalSemaphoreProperties left, PFN_vkGetPhysicalDeviceExternalSemaphoreProperties right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceExternalSemaphoreProperties left, PFN_vkGetPhysicalDeviceExternalSemaphoreProperties right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDescriptorSetLayoutSupport : IEquatable<PFN_vkGetDescriptorSetLayoutSupport>
        {
            public PFN_vkGetDescriptorSetLayoutSupport(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayoutCreateInfo*, vulkan.VkDescriptorSetLayoutSupport*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayoutCreateInfo*, vulkan.VkDescriptorSetLayoutSupport*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDescriptorSetLayoutSupport other && Equals(other);
            
            public bool Equals(PFN_vkGetDescriptorSetLayoutSupport other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayoutCreateInfo*, vulkan.VkDescriptorSetLayoutSupport*, void> (vulkan.PFN_vkGetDescriptorSetLayoutSupport from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDescriptorSetLayoutSupport (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayoutCreateInfo*, vulkan.VkDescriptorSetLayoutSupport*, void> from) => new vulkan.PFN_vkGetDescriptorSetLayoutSupport(from);
            
            public static bool operator ==(PFN_vkGetDescriptorSetLayoutSupport left, PFN_vkGetDescriptorSetLayoutSupport right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDescriptorSetLayoutSupport left, PFN_vkGetDescriptorSetLayoutSupport right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawIndirectCount : IEquatable<PFN_vkCmdDrawIndirectCount>
        {
            public PFN_vkCmdDrawIndirectCount(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawIndirectCount other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawIndirectCount other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> (vulkan.PFN_vkCmdDrawIndirectCount from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawIndirectCount (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawIndirectCount(from);
            
            public static bool operator ==(PFN_vkCmdDrawIndirectCount left, PFN_vkCmdDrawIndirectCount right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawIndirectCount left, PFN_vkCmdDrawIndirectCount right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawIndexedIndirectCount : IEquatable<PFN_vkCmdDrawIndexedIndirectCount>
        {
            public PFN_vkCmdDrawIndexedIndirectCount(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawIndexedIndirectCount other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawIndexedIndirectCount other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> (vulkan.PFN_vkCmdDrawIndexedIndirectCount from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawIndexedIndirectCount (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawIndexedIndirectCount(from);
            
            public static bool operator ==(PFN_vkCmdDrawIndexedIndirectCount left, PFN_vkCmdDrawIndexedIndirectCount right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawIndexedIndirectCount left, PFN_vkCmdDrawIndexedIndirectCount right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateRenderPass2 : IEquatable<PFN_vkCreateRenderPass2>
        {
            public PFN_vkCreateRenderPass2(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPassCreateInfo2*, vulkan.VkAllocationCallbacks*, vulkan.VkRenderPass*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPassCreateInfo2*, vulkan.VkAllocationCallbacks*, vulkan.VkRenderPass*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateRenderPass2 other && Equals(other);
            
            public bool Equals(PFN_vkCreateRenderPass2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPassCreateInfo2*, vulkan.VkAllocationCallbacks*, vulkan.VkRenderPass*, vulkan.VkResult> (vulkan.PFN_vkCreateRenderPass2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateRenderPass2 (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPassCreateInfo2*, vulkan.VkAllocationCallbacks*, vulkan.VkRenderPass*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateRenderPass2(from);
            
            public static bool operator ==(PFN_vkCreateRenderPass2 left, PFN_vkCreateRenderPass2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateRenderPass2 left, PFN_vkCreateRenderPass2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBeginRenderPass2 : IEquatable<PFN_vkCmdBeginRenderPass2>
        {
            public PFN_vkCmdBeginRenderPass2(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderPassBeginInfo*, vulkan.VkSubpassBeginInfo*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderPassBeginInfo*, vulkan.VkSubpassBeginInfo*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBeginRenderPass2 other && Equals(other);
            
            public bool Equals(PFN_vkCmdBeginRenderPass2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderPassBeginInfo*, vulkan.VkSubpassBeginInfo*, void> (vulkan.PFN_vkCmdBeginRenderPass2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBeginRenderPass2 (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderPassBeginInfo*, vulkan.VkSubpassBeginInfo*, void> from) => new vulkan.PFN_vkCmdBeginRenderPass2(from);
            
            public static bool operator ==(PFN_vkCmdBeginRenderPass2 left, PFN_vkCmdBeginRenderPass2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBeginRenderPass2 left, PFN_vkCmdBeginRenderPass2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdNextSubpass2 : IEquatable<PFN_vkCmdNextSubpass2>
        {
            public PFN_vkCmdNextSubpass2(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassBeginInfo*, vulkan.VkSubpassEndInfo*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassBeginInfo*, vulkan.VkSubpassEndInfo*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdNextSubpass2 other && Equals(other);
            
            public bool Equals(PFN_vkCmdNextSubpass2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassBeginInfo*, vulkan.VkSubpassEndInfo*, void> (vulkan.PFN_vkCmdNextSubpass2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdNextSubpass2 (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassBeginInfo*, vulkan.VkSubpassEndInfo*, void> from) => new vulkan.PFN_vkCmdNextSubpass2(from);
            
            public static bool operator ==(PFN_vkCmdNextSubpass2 left, PFN_vkCmdNextSubpass2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdNextSubpass2 left, PFN_vkCmdNextSubpass2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdEndRenderPass2 : IEquatable<PFN_vkCmdEndRenderPass2>
        {
            public PFN_vkCmdEndRenderPass2(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassEndInfo*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassEndInfo*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdEndRenderPass2 other && Equals(other);
            
            public bool Equals(PFN_vkCmdEndRenderPass2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassEndInfo*, void> (vulkan.PFN_vkCmdEndRenderPass2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdEndRenderPass2 (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassEndInfo*, void> from) => new vulkan.PFN_vkCmdEndRenderPass2(from);
            
            public static bool operator ==(PFN_vkCmdEndRenderPass2 left, PFN_vkCmdEndRenderPass2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdEndRenderPass2 left, PFN_vkCmdEndRenderPass2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkResetQueryPool : IEquatable<PFN_vkResetQueryPool>
        {
            public PFN_vkResetQueryPool(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPool, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPool, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkResetQueryPool other && Equals(other);
            
            public bool Equals(PFN_vkResetQueryPool other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPool, uint, uint, void> (vulkan.PFN_vkResetQueryPool from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkResetQueryPool (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPool, uint, uint, void> from) => new vulkan.PFN_vkResetQueryPool(from);
            
            public static bool operator ==(PFN_vkResetQueryPool left, PFN_vkResetQueryPool right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkResetQueryPool left, PFN_vkResetQueryPool right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetSemaphoreCounterValue : IEquatable<PFN_vkGetSemaphoreCounterValue>
        {
            public PFN_vkGetSemaphoreCounterValue(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphore, ulong*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphore, ulong*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetSemaphoreCounterValue other && Equals(other);
            
            public bool Equals(PFN_vkGetSemaphoreCounterValue other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphore, ulong*, vulkan.VkResult> (vulkan.PFN_vkGetSemaphoreCounterValue from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetSemaphoreCounterValue (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphore, ulong*, vulkan.VkResult> from) => new vulkan.PFN_vkGetSemaphoreCounterValue(from);
            
            public static bool operator ==(PFN_vkGetSemaphoreCounterValue left, PFN_vkGetSemaphoreCounterValue right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetSemaphoreCounterValue left, PFN_vkGetSemaphoreCounterValue right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkWaitSemaphores : IEquatable<PFN_vkWaitSemaphores>
        {
            public PFN_vkWaitSemaphores(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreWaitInfo*, ulong, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreWaitInfo*, ulong, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkWaitSemaphores other && Equals(other);
            
            public bool Equals(PFN_vkWaitSemaphores other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreWaitInfo*, ulong, vulkan.VkResult> (vulkan.PFN_vkWaitSemaphores from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkWaitSemaphores (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreWaitInfo*, ulong, vulkan.VkResult> from) => new vulkan.PFN_vkWaitSemaphores(from);
            
            public static bool operator ==(PFN_vkWaitSemaphores left, PFN_vkWaitSemaphores right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkWaitSemaphores left, PFN_vkWaitSemaphores right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkSignalSemaphore : IEquatable<PFN_vkSignalSemaphore>
        {
            public PFN_vkSignalSemaphore(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreSignalInfo*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreSignalInfo*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkSignalSemaphore other && Equals(other);
            
            public bool Equals(PFN_vkSignalSemaphore other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreSignalInfo*, vulkan.VkResult> (vulkan.PFN_vkSignalSemaphore from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkSignalSemaphore (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreSignalInfo*, vulkan.VkResult> from) => new vulkan.PFN_vkSignalSemaphore(from);
            
            public static bool operator ==(PFN_vkSignalSemaphore left, PFN_vkSignalSemaphore right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkSignalSemaphore left, PFN_vkSignalSemaphore right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetBufferDeviceAddress : IEquatable<PFN_vkGetBufferDeviceAddress>
        {
            public PFN_vkGetBufferDeviceAddress(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, vulkan.VkDeviceAddress> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, vulkan.VkDeviceAddress> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetBufferDeviceAddress other && Equals(other);
            
            public bool Equals(PFN_vkGetBufferDeviceAddress other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, vulkan.VkDeviceAddress> (vulkan.PFN_vkGetBufferDeviceAddress from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetBufferDeviceAddress (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, vulkan.VkDeviceAddress> from) => new vulkan.PFN_vkGetBufferDeviceAddress(from);
            
            public static bool operator ==(PFN_vkGetBufferDeviceAddress left, PFN_vkGetBufferDeviceAddress right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetBufferDeviceAddress left, PFN_vkGetBufferDeviceAddress right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetBufferOpaqueCaptureAddress : IEquatable<PFN_vkGetBufferOpaqueCaptureAddress>
        {
            public PFN_vkGetBufferOpaqueCaptureAddress(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, ulong> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, ulong> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetBufferOpaqueCaptureAddress other && Equals(other);
            
            public bool Equals(PFN_vkGetBufferOpaqueCaptureAddress other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, ulong> (vulkan.PFN_vkGetBufferOpaqueCaptureAddress from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetBufferOpaqueCaptureAddress (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, ulong> from) => new vulkan.PFN_vkGetBufferOpaqueCaptureAddress(from);
            
            public static bool operator ==(PFN_vkGetBufferOpaqueCaptureAddress left, PFN_vkGetBufferOpaqueCaptureAddress right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetBufferOpaqueCaptureAddress left, PFN_vkGetBufferOpaqueCaptureAddress right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceMemoryOpaqueCaptureAddress : IEquatable<PFN_vkGetDeviceMemoryOpaqueCaptureAddress>
        {
            public PFN_vkGetDeviceMemoryOpaqueCaptureAddress(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceMemoryOpaqueCaptureAddress other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceMemoryOpaqueCaptureAddress other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong> (vulkan.PFN_vkGetDeviceMemoryOpaqueCaptureAddress from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceMemoryOpaqueCaptureAddress (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong> from) => new vulkan.PFN_vkGetDeviceMemoryOpaqueCaptureAddress(from);
            
            public static bool operator ==(PFN_vkGetDeviceMemoryOpaqueCaptureAddress left, PFN_vkGetDeviceMemoryOpaqueCaptureAddress right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceMemoryOpaqueCaptureAddress left, PFN_vkGetDeviceMemoryOpaqueCaptureAddress right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPrivateDataSlot : IEquatable<VkPrivateDataSlot>
        {
            public VkPrivateDataSlot(vulkan.VkPrivateDataSlot_T value) => this.Value = value;
            
            public vulkan.VkPrivateDataSlot_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkPrivateDataSlot other && Equals(other);
            
            public bool Equals(VkPrivateDataSlot other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPrivateDataSlot_T (vulkan.VkPrivateDataSlot from) => from.Value;
            
            public static implicit operator vulkan.VkPrivateDataSlot (vulkan.VkPrivateDataSlot_T from) => new vulkan.VkPrivateDataSlot(from);
            
            public static bool operator ==(VkPrivateDataSlot left, VkPrivateDataSlot right) => left.Equals(right);
            
            public static bool operator !=(VkPrivateDataSlot left, VkPrivateDataSlot right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Flag bits for VkPipelineStageFlagBits2
        /// </summary>
        public readonly partial struct VkPipelineStageFlagBits2 : IEquatable<VkPipelineStageFlagBits2>
        {
            public VkPipelineStageFlagBits2(vulkan.VkFlags64 value) => this.Value = value;
            
            public vulkan.VkFlags64 Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineStageFlagBits2 other && Equals(other);
            
            public bool Equals(VkPipelineStageFlagBits2 other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags64 (vulkan.VkPipelineStageFlagBits2 from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineStageFlagBits2 (vulkan.VkFlags64 from) => new vulkan.VkPipelineStageFlagBits2(from);
            
            public static bool operator ==(VkPipelineStageFlagBits2 left, VkPipelineStageFlagBits2 right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineStageFlagBits2 left, VkPipelineStageFlagBits2 right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Flag bits for VkAccessFlagBits2
        /// </summary>
        public readonly partial struct VkAccessFlagBits2 : IEquatable<VkAccessFlagBits2>
        {
            public VkAccessFlagBits2(vulkan.VkFlags64 value) => this.Value = value;
            
            public vulkan.VkFlags64 Value { get; }
            
            public override bool Equals(object obj) => obj is VkAccessFlagBits2 other && Equals(other);
            
            public bool Equals(VkAccessFlagBits2 other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags64 (vulkan.VkAccessFlagBits2 from) => from.Value;
            
            public static implicit operator vulkan.VkAccessFlagBits2 (vulkan.VkFlags64 from) => new vulkan.VkAccessFlagBits2(from);
            
            public static bool operator ==(VkAccessFlagBits2 left, VkAccessFlagBits2 right) => left.Equals(right);
            
            public static bool operator !=(VkAccessFlagBits2 left, VkAccessFlagBits2 right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Flag bits for VkFormatFeatureFlagBits2
        /// </summary>
        public readonly partial struct VkFormatFeatureFlagBits2 : IEquatable<VkFormatFeatureFlagBits2>
        {
            public VkFormatFeatureFlagBits2(vulkan.VkFlags64 value) => this.Value = value;
            
            public vulkan.VkFlags64 Value { get; }
            
            public override bool Equals(object obj) => obj is VkFormatFeatureFlagBits2 other && Equals(other);
            
            public bool Equals(VkFormatFeatureFlagBits2 other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags64 (vulkan.VkFormatFeatureFlagBits2 from) => from.Value;
            
            public static implicit operator vulkan.VkFormatFeatureFlagBits2 (vulkan.VkFlags64 from) => new vulkan.VkFormatFeatureFlagBits2(from);
            
            public static bool operator ==(VkFormatFeatureFlagBits2 left, VkFormatFeatureFlagBits2 right) => left.Equals(right);
            
            public static bool operator !=(VkFormatFeatureFlagBits2 left, VkFormatFeatureFlagBits2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceToolProperties : IEquatable<PFN_vkGetPhysicalDeviceToolProperties>
        {
            public PFN_vkGetPhysicalDeviceToolProperties(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkPhysicalDeviceToolProperties*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkPhysicalDeviceToolProperties*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceToolProperties other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceToolProperties other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkPhysicalDeviceToolProperties*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceToolProperties from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceToolProperties (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkPhysicalDeviceToolProperties*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceToolProperties(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceToolProperties left, PFN_vkGetPhysicalDeviceToolProperties right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceToolProperties left, PFN_vkGetPhysicalDeviceToolProperties right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreatePrivateDataSlot : IEquatable<PFN_vkCreatePrivateDataSlot>
        {
            public PFN_vkCreatePrivateDataSlot(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPrivateDataSlotCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPrivateDataSlot*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPrivateDataSlotCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPrivateDataSlot*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreatePrivateDataSlot other && Equals(other);
            
            public bool Equals(PFN_vkCreatePrivateDataSlot other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPrivateDataSlotCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPrivateDataSlot*, vulkan.VkResult> (vulkan.PFN_vkCreatePrivateDataSlot from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreatePrivateDataSlot (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPrivateDataSlotCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPrivateDataSlot*, vulkan.VkResult> from) => new vulkan.PFN_vkCreatePrivateDataSlot(from);
            
            public static bool operator ==(PFN_vkCreatePrivateDataSlot left, PFN_vkCreatePrivateDataSlot right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreatePrivateDataSlot left, PFN_vkCreatePrivateDataSlot right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyPrivateDataSlot : IEquatable<PFN_vkDestroyPrivateDataSlot>
        {
            public PFN_vkDestroyPrivateDataSlot(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPrivateDataSlot, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPrivateDataSlot, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyPrivateDataSlot other && Equals(other);
            
            public bool Equals(PFN_vkDestroyPrivateDataSlot other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPrivateDataSlot, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyPrivateDataSlot from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyPrivateDataSlot (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPrivateDataSlot, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyPrivateDataSlot(from);
            
            public static bool operator ==(PFN_vkDestroyPrivateDataSlot left, PFN_vkDestroyPrivateDataSlot right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyPrivateDataSlot left, PFN_vkDestroyPrivateDataSlot right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkSetPrivateData : IEquatable<PFN_vkSetPrivateData>
        {
            public PFN_vkSetPrivateData(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkObjectType, ulong, vulkan.VkPrivateDataSlot, ulong, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkObjectType, ulong, vulkan.VkPrivateDataSlot, ulong, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkSetPrivateData other && Equals(other);
            
            public bool Equals(PFN_vkSetPrivateData other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkObjectType, ulong, vulkan.VkPrivateDataSlot, ulong, vulkan.VkResult> (vulkan.PFN_vkSetPrivateData from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkSetPrivateData (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkObjectType, ulong, vulkan.VkPrivateDataSlot, ulong, vulkan.VkResult> from) => new vulkan.PFN_vkSetPrivateData(from);
            
            public static bool operator ==(PFN_vkSetPrivateData left, PFN_vkSetPrivateData right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkSetPrivateData left, PFN_vkSetPrivateData right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPrivateData : IEquatable<PFN_vkGetPrivateData>
        {
            public PFN_vkGetPrivateData(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkObjectType, ulong, vulkan.VkPrivateDataSlot, ulong*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkObjectType, ulong, vulkan.VkPrivateDataSlot, ulong*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPrivateData other && Equals(other);
            
            public bool Equals(PFN_vkGetPrivateData other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkObjectType, ulong, vulkan.VkPrivateDataSlot, ulong*, void> (vulkan.PFN_vkGetPrivateData from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPrivateData (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkObjectType, ulong, vulkan.VkPrivateDataSlot, ulong*, void> from) => new vulkan.PFN_vkGetPrivateData(from);
            
            public static bool operator ==(PFN_vkGetPrivateData left, PFN_vkGetPrivateData right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPrivateData left, PFN_vkGetPrivateData right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetEvent2 : IEquatable<PFN_vkCmdSetEvent2>
        {
            public PFN_vkCmdSetEvent2(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkDependencyInfo*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkDependencyInfo*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetEvent2 other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetEvent2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkDependencyInfo*, void> (vulkan.PFN_vkCmdSetEvent2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetEvent2 (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkDependencyInfo*, void> from) => new vulkan.PFN_vkCmdSetEvent2(from);
            
            public static bool operator ==(PFN_vkCmdSetEvent2 left, PFN_vkCmdSetEvent2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetEvent2 left, PFN_vkCmdSetEvent2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdResetEvent2 : IEquatable<PFN_vkCmdResetEvent2>
        {
            public PFN_vkCmdResetEvent2(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkPipelineStageFlags2, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkPipelineStageFlags2, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdResetEvent2 other && Equals(other);
            
            public bool Equals(PFN_vkCmdResetEvent2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkPipelineStageFlags2, void> (vulkan.PFN_vkCmdResetEvent2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdResetEvent2 (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkPipelineStageFlags2, void> from) => new vulkan.PFN_vkCmdResetEvent2(from);
            
            public static bool operator ==(PFN_vkCmdResetEvent2 left, PFN_vkCmdResetEvent2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdResetEvent2 left, PFN_vkCmdResetEvent2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdWaitEvents2 : IEquatable<PFN_vkCmdWaitEvents2>
        {
            public PFN_vkCmdWaitEvents2(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkEvent*, vulkan.VkDependencyInfo*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkEvent*, vulkan.VkDependencyInfo*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdWaitEvents2 other && Equals(other);
            
            public bool Equals(PFN_vkCmdWaitEvents2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkEvent*, vulkan.VkDependencyInfo*, void> (vulkan.PFN_vkCmdWaitEvents2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdWaitEvents2 (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkEvent*, vulkan.VkDependencyInfo*, void> from) => new vulkan.PFN_vkCmdWaitEvents2(from);
            
            public static bool operator ==(PFN_vkCmdWaitEvents2 left, PFN_vkCmdWaitEvents2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdWaitEvents2 left, PFN_vkCmdWaitEvents2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdPipelineBarrier2 : IEquatable<PFN_vkCmdPipelineBarrier2>
        {
            public PFN_vkCmdPipelineBarrier2(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDependencyInfo*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDependencyInfo*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdPipelineBarrier2 other && Equals(other);
            
            public bool Equals(PFN_vkCmdPipelineBarrier2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDependencyInfo*, void> (vulkan.PFN_vkCmdPipelineBarrier2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdPipelineBarrier2 (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDependencyInfo*, void> from) => new vulkan.PFN_vkCmdPipelineBarrier2(from);
            
            public static bool operator ==(PFN_vkCmdPipelineBarrier2 left, PFN_vkCmdPipelineBarrier2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdPipelineBarrier2 left, PFN_vkCmdPipelineBarrier2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdWriteTimestamp2 : IEquatable<PFN_vkCmdWriteTimestamp2>
        {
            public PFN_vkCmdWriteTimestamp2(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlags2, vulkan.VkQueryPool, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlags2, vulkan.VkQueryPool, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdWriteTimestamp2 other && Equals(other);
            
            public bool Equals(PFN_vkCmdWriteTimestamp2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlags2, vulkan.VkQueryPool, uint, void> (vulkan.PFN_vkCmdWriteTimestamp2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdWriteTimestamp2 (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlags2, vulkan.VkQueryPool, uint, void> from) => new vulkan.PFN_vkCmdWriteTimestamp2(from);
            
            public static bool operator ==(PFN_vkCmdWriteTimestamp2 left, PFN_vkCmdWriteTimestamp2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdWriteTimestamp2 left, PFN_vkCmdWriteTimestamp2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkQueueSubmit2 : IEquatable<PFN_vkQueueSubmit2>
        {
            public PFN_vkQueueSubmit2(delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint, vulkan.VkSubmitInfo2*, vulkan.VkFence, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint, vulkan.VkSubmitInfo2*, vulkan.VkFence, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkQueueSubmit2 other && Equals(other);
            
            public bool Equals(PFN_vkQueueSubmit2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint, vulkan.VkSubmitInfo2*, vulkan.VkFence, vulkan.VkResult> (vulkan.PFN_vkQueueSubmit2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkQueueSubmit2 (delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint, vulkan.VkSubmitInfo2*, vulkan.VkFence, vulkan.VkResult> from) => new vulkan.PFN_vkQueueSubmit2(from);
            
            public static bool operator ==(PFN_vkQueueSubmit2 left, PFN_vkQueueSubmit2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkQueueSubmit2 left, PFN_vkQueueSubmit2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyBuffer2 : IEquatable<PFN_vkCmdCopyBuffer2>
        {
            public PFN_vkCmdCopyBuffer2(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyBufferInfo2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyBufferInfo2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyBuffer2 other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyBuffer2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyBufferInfo2*, void> (vulkan.PFN_vkCmdCopyBuffer2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyBuffer2 (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyBufferInfo2*, void> from) => new vulkan.PFN_vkCmdCopyBuffer2(from);
            
            public static bool operator ==(PFN_vkCmdCopyBuffer2 left, PFN_vkCmdCopyBuffer2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyBuffer2 left, PFN_vkCmdCopyBuffer2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyImage2 : IEquatable<PFN_vkCmdCopyImage2>
        {
            public PFN_vkCmdCopyImage2(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyImageInfo2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyImageInfo2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyImage2 other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyImage2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyImageInfo2*, void> (vulkan.PFN_vkCmdCopyImage2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyImage2 (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyImageInfo2*, void> from) => new vulkan.PFN_vkCmdCopyImage2(from);
            
            public static bool operator ==(PFN_vkCmdCopyImage2 left, PFN_vkCmdCopyImage2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyImage2 left, PFN_vkCmdCopyImage2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyBufferToImage2 : IEquatable<PFN_vkCmdCopyBufferToImage2>
        {
            public PFN_vkCmdCopyBufferToImage2(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyBufferToImageInfo2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyBufferToImageInfo2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyBufferToImage2 other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyBufferToImage2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyBufferToImageInfo2*, void> (vulkan.PFN_vkCmdCopyBufferToImage2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyBufferToImage2 (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyBufferToImageInfo2*, void> from) => new vulkan.PFN_vkCmdCopyBufferToImage2(from);
            
            public static bool operator ==(PFN_vkCmdCopyBufferToImage2 left, PFN_vkCmdCopyBufferToImage2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyBufferToImage2 left, PFN_vkCmdCopyBufferToImage2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyImageToBuffer2 : IEquatable<PFN_vkCmdCopyImageToBuffer2>
        {
            public PFN_vkCmdCopyImageToBuffer2(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyImageToBufferInfo2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyImageToBufferInfo2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyImageToBuffer2 other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyImageToBuffer2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyImageToBufferInfo2*, void> (vulkan.PFN_vkCmdCopyImageToBuffer2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyImageToBuffer2 (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyImageToBufferInfo2*, void> from) => new vulkan.PFN_vkCmdCopyImageToBuffer2(from);
            
            public static bool operator ==(PFN_vkCmdCopyImageToBuffer2 left, PFN_vkCmdCopyImageToBuffer2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyImageToBuffer2 left, PFN_vkCmdCopyImageToBuffer2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBlitImage2 : IEquatable<PFN_vkCmdBlitImage2>
        {
            public PFN_vkCmdBlitImage2(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBlitImageInfo2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBlitImageInfo2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBlitImage2 other && Equals(other);
            
            public bool Equals(PFN_vkCmdBlitImage2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBlitImageInfo2*, void> (vulkan.PFN_vkCmdBlitImage2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBlitImage2 (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBlitImageInfo2*, void> from) => new vulkan.PFN_vkCmdBlitImage2(from);
            
            public static bool operator ==(PFN_vkCmdBlitImage2 left, PFN_vkCmdBlitImage2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBlitImage2 left, PFN_vkCmdBlitImage2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdResolveImage2 : IEquatable<PFN_vkCmdResolveImage2>
        {
            public PFN_vkCmdResolveImage2(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkResolveImageInfo2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkResolveImageInfo2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdResolveImage2 other && Equals(other);
            
            public bool Equals(PFN_vkCmdResolveImage2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkResolveImageInfo2*, void> (vulkan.PFN_vkCmdResolveImage2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdResolveImage2 (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkResolveImageInfo2*, void> from) => new vulkan.PFN_vkCmdResolveImage2(from);
            
            public static bool operator ==(PFN_vkCmdResolveImage2 left, PFN_vkCmdResolveImage2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdResolveImage2 left, PFN_vkCmdResolveImage2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBeginRendering : IEquatable<PFN_vkCmdBeginRendering>
        {
            public PFN_vkCmdBeginRendering(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderingInfo*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderingInfo*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBeginRendering other && Equals(other);
            
            public bool Equals(PFN_vkCmdBeginRendering other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderingInfo*, void> (vulkan.PFN_vkCmdBeginRendering from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBeginRendering (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderingInfo*, void> from) => new vulkan.PFN_vkCmdBeginRendering(from);
            
            public static bool operator ==(PFN_vkCmdBeginRendering left, PFN_vkCmdBeginRendering right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBeginRendering left, PFN_vkCmdBeginRendering right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdEndRendering : IEquatable<PFN_vkCmdEndRendering>
        {
            public PFN_vkCmdEndRendering(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdEndRendering other && Equals(other);
            
            public bool Equals(PFN_vkCmdEndRendering other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> (vulkan.PFN_vkCmdEndRendering from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdEndRendering (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> from) => new vulkan.PFN_vkCmdEndRendering(from);
            
            public static bool operator ==(PFN_vkCmdEndRendering left, PFN_vkCmdEndRendering right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdEndRendering left, PFN_vkCmdEndRendering right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetCullMode : IEquatable<PFN_vkCmdSetCullMode>
        {
            public PFN_vkCmdSetCullMode(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCullModeFlags, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCullModeFlags, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetCullMode other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetCullMode other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCullModeFlags, void> (vulkan.PFN_vkCmdSetCullMode from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetCullMode (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCullModeFlags, void> from) => new vulkan.PFN_vkCmdSetCullMode(from);
            
            public static bool operator ==(PFN_vkCmdSetCullMode left, PFN_vkCmdSetCullMode right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetCullMode left, PFN_vkCmdSetCullMode right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetFrontFace : IEquatable<PFN_vkCmdSetFrontFace>
        {
            public PFN_vkCmdSetFrontFace(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkFrontFace, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkFrontFace, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetFrontFace other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetFrontFace other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkFrontFace, void> (vulkan.PFN_vkCmdSetFrontFace from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetFrontFace (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkFrontFace, void> from) => new vulkan.PFN_vkCmdSetFrontFace(from);
            
            public static bool operator ==(PFN_vkCmdSetFrontFace left, PFN_vkCmdSetFrontFace right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetFrontFace left, PFN_vkCmdSetFrontFace right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetPrimitiveTopology : IEquatable<PFN_vkCmdSetPrimitiveTopology>
        {
            public PFN_vkCmdSetPrimitiveTopology(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPrimitiveTopology, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPrimitiveTopology, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetPrimitiveTopology other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetPrimitiveTopology other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPrimitiveTopology, void> (vulkan.PFN_vkCmdSetPrimitiveTopology from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetPrimitiveTopology (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPrimitiveTopology, void> from) => new vulkan.PFN_vkCmdSetPrimitiveTopology(from);
            
            public static bool operator ==(PFN_vkCmdSetPrimitiveTopology left, PFN_vkCmdSetPrimitiveTopology right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetPrimitiveTopology left, PFN_vkCmdSetPrimitiveTopology right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetViewportWithCount : IEquatable<PFN_vkCmdSetViewportWithCount>
        {
            public PFN_vkCmdSetViewportWithCount(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkViewport*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkViewport*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetViewportWithCount other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetViewportWithCount other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkViewport*, void> (vulkan.PFN_vkCmdSetViewportWithCount from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetViewportWithCount (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkViewport*, void> from) => new vulkan.PFN_vkCmdSetViewportWithCount(from);
            
            public static bool operator ==(PFN_vkCmdSetViewportWithCount left, PFN_vkCmdSetViewportWithCount right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetViewportWithCount left, PFN_vkCmdSetViewportWithCount right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetScissorWithCount : IEquatable<PFN_vkCmdSetScissorWithCount>
        {
            public PFN_vkCmdSetScissorWithCount(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkRect2D*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkRect2D*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetScissorWithCount other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetScissorWithCount other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkRect2D*, void> (vulkan.PFN_vkCmdSetScissorWithCount from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetScissorWithCount (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkRect2D*, void> from) => new vulkan.PFN_vkCmdSetScissorWithCount(from);
            
            public static bool operator ==(PFN_vkCmdSetScissorWithCount left, PFN_vkCmdSetScissorWithCount right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetScissorWithCount left, PFN_vkCmdSetScissorWithCount right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBindVertexBuffers2 : IEquatable<PFN_vkCmdBindVertexBuffers2>
        {
            public PFN_vkCmdBindVertexBuffers2(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBindVertexBuffers2 other && Equals(other);
            
            public bool Equals(PFN_vkCmdBindVertexBuffers2 other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, void> (vulkan.PFN_vkCmdBindVertexBuffers2 from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBindVertexBuffers2 (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, void> from) => new vulkan.PFN_vkCmdBindVertexBuffers2(from);
            
            public static bool operator ==(PFN_vkCmdBindVertexBuffers2 left, PFN_vkCmdBindVertexBuffers2 right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBindVertexBuffers2 left, PFN_vkCmdBindVertexBuffers2 right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDepthTestEnable : IEquatable<PFN_vkCmdSetDepthTestEnable>
        {
            public PFN_vkCmdSetDepthTestEnable(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDepthTestEnable other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDepthTestEnable other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetDepthTestEnable from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDepthTestEnable (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetDepthTestEnable(from);
            
            public static bool operator ==(PFN_vkCmdSetDepthTestEnable left, PFN_vkCmdSetDepthTestEnable right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDepthTestEnable left, PFN_vkCmdSetDepthTestEnable right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDepthWriteEnable : IEquatable<PFN_vkCmdSetDepthWriteEnable>
        {
            public PFN_vkCmdSetDepthWriteEnable(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDepthWriteEnable other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDepthWriteEnable other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetDepthWriteEnable from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDepthWriteEnable (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetDepthWriteEnable(from);
            
            public static bool operator ==(PFN_vkCmdSetDepthWriteEnable left, PFN_vkCmdSetDepthWriteEnable right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDepthWriteEnable left, PFN_vkCmdSetDepthWriteEnable right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDepthCompareOp : IEquatable<PFN_vkCmdSetDepthCompareOp>
        {
            public PFN_vkCmdSetDepthCompareOp(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCompareOp, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCompareOp, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDepthCompareOp other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDepthCompareOp other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCompareOp, void> (vulkan.PFN_vkCmdSetDepthCompareOp from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDepthCompareOp (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCompareOp, void> from) => new vulkan.PFN_vkCmdSetDepthCompareOp(from);
            
            public static bool operator ==(PFN_vkCmdSetDepthCompareOp left, PFN_vkCmdSetDepthCompareOp right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDepthCompareOp left, PFN_vkCmdSetDepthCompareOp right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDepthBoundsTestEnable : IEquatable<PFN_vkCmdSetDepthBoundsTestEnable>
        {
            public PFN_vkCmdSetDepthBoundsTestEnable(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDepthBoundsTestEnable other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDepthBoundsTestEnable other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetDepthBoundsTestEnable from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDepthBoundsTestEnable (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetDepthBoundsTestEnable(from);
            
            public static bool operator ==(PFN_vkCmdSetDepthBoundsTestEnable left, PFN_vkCmdSetDepthBoundsTestEnable right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDepthBoundsTestEnable left, PFN_vkCmdSetDepthBoundsTestEnable right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetStencilTestEnable : IEquatable<PFN_vkCmdSetStencilTestEnable>
        {
            public PFN_vkCmdSetStencilTestEnable(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetStencilTestEnable other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetStencilTestEnable other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetStencilTestEnable from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetStencilTestEnable (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetStencilTestEnable(from);
            
            public static bool operator ==(PFN_vkCmdSetStencilTestEnable left, PFN_vkCmdSetStencilTestEnable right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetStencilTestEnable left, PFN_vkCmdSetStencilTestEnable right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetStencilOp : IEquatable<PFN_vkCmdSetStencilOp>
        {
            public PFN_vkCmdSetStencilOp(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, vulkan.VkStencilOp, vulkan.VkStencilOp, vulkan.VkStencilOp, vulkan.VkCompareOp, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, vulkan.VkStencilOp, vulkan.VkStencilOp, vulkan.VkStencilOp, vulkan.VkCompareOp, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetStencilOp other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetStencilOp other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, vulkan.VkStencilOp, vulkan.VkStencilOp, vulkan.VkStencilOp, vulkan.VkCompareOp, void> (vulkan.PFN_vkCmdSetStencilOp from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetStencilOp (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, vulkan.VkStencilOp, vulkan.VkStencilOp, vulkan.VkStencilOp, vulkan.VkCompareOp, void> from) => new vulkan.PFN_vkCmdSetStencilOp(from);
            
            public static bool operator ==(PFN_vkCmdSetStencilOp left, PFN_vkCmdSetStencilOp right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetStencilOp left, PFN_vkCmdSetStencilOp right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetRasterizerDiscardEnable : IEquatable<PFN_vkCmdSetRasterizerDiscardEnable>
        {
            public PFN_vkCmdSetRasterizerDiscardEnable(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetRasterizerDiscardEnable other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetRasterizerDiscardEnable other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetRasterizerDiscardEnable from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetRasterizerDiscardEnable (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetRasterizerDiscardEnable(from);
            
            public static bool operator ==(PFN_vkCmdSetRasterizerDiscardEnable left, PFN_vkCmdSetRasterizerDiscardEnable right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetRasterizerDiscardEnable left, PFN_vkCmdSetRasterizerDiscardEnable right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDepthBiasEnable : IEquatable<PFN_vkCmdSetDepthBiasEnable>
        {
            public PFN_vkCmdSetDepthBiasEnable(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDepthBiasEnable other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDepthBiasEnable other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetDepthBiasEnable from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDepthBiasEnable (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetDepthBiasEnable(from);
            
            public static bool operator ==(PFN_vkCmdSetDepthBiasEnable left, PFN_vkCmdSetDepthBiasEnable right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDepthBiasEnable left, PFN_vkCmdSetDepthBiasEnable right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetPrimitiveRestartEnable : IEquatable<PFN_vkCmdSetPrimitiveRestartEnable>
        {
            public PFN_vkCmdSetPrimitiveRestartEnable(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetPrimitiveRestartEnable other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetPrimitiveRestartEnable other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetPrimitiveRestartEnable from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetPrimitiveRestartEnable (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetPrimitiveRestartEnable(from);
            
            public static bool operator ==(PFN_vkCmdSetPrimitiveRestartEnable left, PFN_vkCmdSetPrimitiveRestartEnable right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetPrimitiveRestartEnable left, PFN_vkCmdSetPrimitiveRestartEnable right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceBufferMemoryRequirements : IEquatable<PFN_vkGetDeviceBufferMemoryRequirements>
        {
            public PFN_vkGetDeviceBufferMemoryRequirements(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceBufferMemoryRequirements*, vulkan.VkMemoryRequirements2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceBufferMemoryRequirements*, vulkan.VkMemoryRequirements2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceBufferMemoryRequirements other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceBufferMemoryRequirements other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceBufferMemoryRequirements*, vulkan.VkMemoryRequirements2*, void> (vulkan.PFN_vkGetDeviceBufferMemoryRequirements from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceBufferMemoryRequirements (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceBufferMemoryRequirements*, vulkan.VkMemoryRequirements2*, void> from) => new vulkan.PFN_vkGetDeviceBufferMemoryRequirements(from);
            
            public static bool operator ==(PFN_vkGetDeviceBufferMemoryRequirements left, PFN_vkGetDeviceBufferMemoryRequirements right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceBufferMemoryRequirements left, PFN_vkGetDeviceBufferMemoryRequirements right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceImageMemoryRequirements : IEquatable<PFN_vkGetDeviceImageMemoryRequirements>
        {
            public PFN_vkGetDeviceImageMemoryRequirements(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageMemoryRequirements*, vulkan.VkMemoryRequirements2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageMemoryRequirements*, vulkan.VkMemoryRequirements2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceImageMemoryRequirements other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceImageMemoryRequirements other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageMemoryRequirements*, vulkan.VkMemoryRequirements2*, void> (vulkan.PFN_vkGetDeviceImageMemoryRequirements from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceImageMemoryRequirements (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageMemoryRequirements*, vulkan.VkMemoryRequirements2*, void> from) => new vulkan.PFN_vkGetDeviceImageMemoryRequirements(from);
            
            public static bool operator ==(PFN_vkGetDeviceImageMemoryRequirements left, PFN_vkGetDeviceImageMemoryRequirements right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceImageMemoryRequirements left, PFN_vkGetDeviceImageMemoryRequirements right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceImageSparseMemoryRequirements : IEquatable<PFN_vkGetDeviceImageSparseMemoryRequirements>
        {
            public PFN_vkGetDeviceImageSparseMemoryRequirements(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageMemoryRequirements*, uint*, vulkan.VkSparseImageMemoryRequirements2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageMemoryRequirements*, uint*, vulkan.VkSparseImageMemoryRequirements2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceImageSparseMemoryRequirements other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceImageSparseMemoryRequirements other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageMemoryRequirements*, uint*, vulkan.VkSparseImageMemoryRequirements2*, void> (vulkan.PFN_vkGetDeviceImageSparseMemoryRequirements from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceImageSparseMemoryRequirements (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageMemoryRequirements*, uint*, vulkan.VkSparseImageMemoryRequirements2*, void> from) => new vulkan.PFN_vkGetDeviceImageSparseMemoryRequirements(from);
            
            public static bool operator ==(PFN_vkGetDeviceImageSparseMemoryRequirements left, PFN_vkGetDeviceImageSparseMemoryRequirements right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceImageSparseMemoryRequirements left, PFN_vkGetDeviceImageSparseMemoryRequirements right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroySurfaceKHR : IEquatable<PFN_vkDestroySurfaceKHR>
        {
            public PFN_vkDestroySurfaceKHR(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkSurfaceKHR, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkSurfaceKHR, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroySurfaceKHR other && Equals(other);
            
            public bool Equals(PFN_vkDestroySurfaceKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkSurfaceKHR, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroySurfaceKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroySurfaceKHR (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkSurfaceKHR, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroySurfaceKHR(from);
            
            public static bool operator ==(PFN_vkDestroySurfaceKHR left, PFN_vkDestroySurfaceKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroySurfaceKHR left, PFN_vkDestroySurfaceKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceSurfaceSupportKHR : IEquatable<PFN_vkGetPhysicalDeviceSurfaceSupportKHR>
        {
            public PFN_vkGetPhysicalDeviceSurfaceSupportKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan.VkSurfaceKHR, vulkan.VkBool32*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan.VkSurfaceKHR, vulkan.VkBool32*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceSurfaceSupportKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceSurfaceSupportKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan.VkSurfaceKHR, vulkan.VkBool32*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceSurfaceSupportKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceSurfaceSupportKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan.VkSurfaceKHR, vulkan.VkBool32*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceSurfaceSupportKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceSurfaceSupportKHR left, PFN_vkGetPhysicalDeviceSurfaceSupportKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceSurfaceSupportKHR left, PFN_vkGetPhysicalDeviceSurfaceSupportKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR : IEquatable<PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR>
        {
            public PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, vulkan.VkSurfaceCapabilitiesKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, vulkan.VkSurfaceCapabilitiesKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, vulkan.VkSurfaceCapabilitiesKHR*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, vulkan.VkSurfaceCapabilitiesKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR left, PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR left, PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceSurfaceFormatsKHR : IEquatable<PFN_vkGetPhysicalDeviceSurfaceFormatsKHR>
        {
            public PFN_vkGetPhysicalDeviceSurfaceFormatsKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, uint*, vulkan.VkSurfaceFormatKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, uint*, vulkan.VkSurfaceFormatKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceSurfaceFormatsKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceSurfaceFormatsKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, uint*, vulkan.VkSurfaceFormatKHR*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceSurfaceFormatsKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceSurfaceFormatsKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, uint*, vulkan.VkSurfaceFormatKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceSurfaceFormatsKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceSurfaceFormatsKHR left, PFN_vkGetPhysicalDeviceSurfaceFormatsKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceSurfaceFormatsKHR left, PFN_vkGetPhysicalDeviceSurfaceFormatsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceSurfacePresentModesKHR : IEquatable<PFN_vkGetPhysicalDeviceSurfacePresentModesKHR>
        {
            public PFN_vkGetPhysicalDeviceSurfacePresentModesKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, uint*, vulkan.VkPresentModeKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, uint*, vulkan.VkPresentModeKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceSurfacePresentModesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceSurfacePresentModesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, uint*, vulkan.VkPresentModeKHR*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceSurfacePresentModesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceSurfacePresentModesKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, uint*, vulkan.VkPresentModeKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceSurfacePresentModesKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceSurfacePresentModesKHR left, PFN_vkGetPhysicalDeviceSurfacePresentModesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceSurfacePresentModesKHR left, PFN_vkGetPhysicalDeviceSurfacePresentModesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateSwapchainKHR : IEquatable<PFN_vkCreateSwapchainKHR>
        {
            public PFN_vkCreateSwapchainKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSwapchainKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSwapchainKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateSwapchainKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateSwapchainKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSwapchainKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateSwapchainKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateSwapchainKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSwapchainKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateSwapchainKHR(from);
            
            public static bool operator ==(PFN_vkCreateSwapchainKHR left, PFN_vkCreateSwapchainKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateSwapchainKHR left, PFN_vkCreateSwapchainKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroySwapchainKHR : IEquatable<PFN_vkDestroySwapchainKHR>
        {
            public PFN_vkDestroySwapchainKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroySwapchainKHR other && Equals(other);
            
            public bool Equals(PFN_vkDestroySwapchainKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroySwapchainKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroySwapchainKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroySwapchainKHR(from);
            
            public static bool operator ==(PFN_vkDestroySwapchainKHR left, PFN_vkDestroySwapchainKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroySwapchainKHR left, PFN_vkDestroySwapchainKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetSwapchainImagesKHR : IEquatable<PFN_vkGetSwapchainImagesKHR>
        {
            public PFN_vkGetSwapchainImagesKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, uint*, vulkan.VkImage*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, uint*, vulkan.VkImage*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetSwapchainImagesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetSwapchainImagesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, uint*, vulkan.VkImage*, vulkan.VkResult> (vulkan.PFN_vkGetSwapchainImagesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetSwapchainImagesKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, uint*, vulkan.VkImage*, vulkan.VkResult> from) => new vulkan.PFN_vkGetSwapchainImagesKHR(from);
            
            public static bool operator ==(PFN_vkGetSwapchainImagesKHR left, PFN_vkGetSwapchainImagesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetSwapchainImagesKHR left, PFN_vkGetSwapchainImagesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkAcquireNextImageKHR : IEquatable<PFN_vkAcquireNextImageKHR>
        {
            public PFN_vkAcquireNextImageKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, ulong, vulkan.VkSemaphore, vulkan.VkFence, uint*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, ulong, vulkan.VkSemaphore, vulkan.VkFence, uint*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkAcquireNextImageKHR other && Equals(other);
            
            public bool Equals(PFN_vkAcquireNextImageKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, ulong, vulkan.VkSemaphore, vulkan.VkFence, uint*, vulkan.VkResult> (vulkan.PFN_vkAcquireNextImageKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkAcquireNextImageKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, ulong, vulkan.VkSemaphore, vulkan.VkFence, uint*, vulkan.VkResult> from) => new vulkan.PFN_vkAcquireNextImageKHR(from);
            
            public static bool operator ==(PFN_vkAcquireNextImageKHR left, PFN_vkAcquireNextImageKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkAcquireNextImageKHR left, PFN_vkAcquireNextImageKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkQueuePresentKHR : IEquatable<PFN_vkQueuePresentKHR>
        {
            public PFN_vkQueuePresentKHR(delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkPresentInfoKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkPresentInfoKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkQueuePresentKHR other && Equals(other);
            
            public bool Equals(PFN_vkQueuePresentKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkPresentInfoKHR*, vulkan.VkResult> (vulkan.PFN_vkQueuePresentKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkQueuePresentKHR (delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkPresentInfoKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkQueuePresentKHR(from);
            
            public static bool operator ==(PFN_vkQueuePresentKHR left, PFN_vkQueuePresentKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkQueuePresentKHR left, PFN_vkQueuePresentKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceGroupPresentCapabilitiesKHR : IEquatable<PFN_vkGetDeviceGroupPresentCapabilitiesKHR>
        {
            public PFN_vkGetDeviceGroupPresentCapabilitiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceGroupPresentCapabilitiesKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceGroupPresentCapabilitiesKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceGroupPresentCapabilitiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceGroupPresentCapabilitiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceGroupPresentCapabilitiesKHR*, vulkan.VkResult> (vulkan.PFN_vkGetDeviceGroupPresentCapabilitiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceGroupPresentCapabilitiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceGroupPresentCapabilitiesKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetDeviceGroupPresentCapabilitiesKHR(from);
            
            public static bool operator ==(PFN_vkGetDeviceGroupPresentCapabilitiesKHR left, PFN_vkGetDeviceGroupPresentCapabilitiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceGroupPresentCapabilitiesKHR left, PFN_vkGetDeviceGroupPresentCapabilitiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceGroupSurfacePresentModesKHR : IEquatable<PFN_vkGetDeviceGroupSurfacePresentModesKHR>
        {
            public PFN_vkGetDeviceGroupSurfacePresentModesKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSurfaceKHR, vulkan.VkDeviceGroupPresentModeFlagsKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSurfaceKHR, vulkan.VkDeviceGroupPresentModeFlagsKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceGroupSurfacePresentModesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceGroupSurfacePresentModesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSurfaceKHR, vulkan.VkDeviceGroupPresentModeFlagsKHR*, vulkan.VkResult> (vulkan.PFN_vkGetDeviceGroupSurfacePresentModesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceGroupSurfacePresentModesKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSurfaceKHR, vulkan.VkDeviceGroupPresentModeFlagsKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetDeviceGroupSurfacePresentModesKHR(from);
            
            public static bool operator ==(PFN_vkGetDeviceGroupSurfacePresentModesKHR left, PFN_vkGetDeviceGroupSurfacePresentModesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceGroupSurfacePresentModesKHR left, PFN_vkGetDeviceGroupSurfacePresentModesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDevicePresentRectanglesKHR : IEquatable<PFN_vkGetPhysicalDevicePresentRectanglesKHR>
        {
            public PFN_vkGetPhysicalDevicePresentRectanglesKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, uint*, vulkan.VkRect2D*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, uint*, vulkan.VkRect2D*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDevicePresentRectanglesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDevicePresentRectanglesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, uint*, vulkan.VkRect2D*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDevicePresentRectanglesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDevicePresentRectanglesKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, uint*, vulkan.VkRect2D*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDevicePresentRectanglesKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDevicePresentRectanglesKHR left, PFN_vkGetPhysicalDevicePresentRectanglesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDevicePresentRectanglesKHR left, PFN_vkGetPhysicalDevicePresentRectanglesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkAcquireNextImage2KHR : IEquatable<PFN_vkAcquireNextImage2KHR>
        {
            public PFN_vkAcquireNextImage2KHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAcquireNextImageInfoKHR*, uint*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAcquireNextImageInfoKHR*, uint*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkAcquireNextImage2KHR other && Equals(other);
            
            public bool Equals(PFN_vkAcquireNextImage2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAcquireNextImageInfoKHR*, uint*, vulkan.VkResult> (vulkan.PFN_vkAcquireNextImage2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkAcquireNextImage2KHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAcquireNextImageInfoKHR*, uint*, vulkan.VkResult> from) => new vulkan.PFN_vkAcquireNextImage2KHR(from);
            
            public static bool operator ==(PFN_vkAcquireNextImage2KHR left, PFN_vkAcquireNextImage2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkAcquireNextImage2KHR left, PFN_vkAcquireNextImage2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceDisplayPropertiesKHR : IEquatable<PFN_vkGetPhysicalDeviceDisplayPropertiesKHR>
        {
            public PFN_vkGetPhysicalDeviceDisplayPropertiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkDisplayPropertiesKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkDisplayPropertiesKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceDisplayPropertiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceDisplayPropertiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkDisplayPropertiesKHR*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceDisplayPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceDisplayPropertiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkDisplayPropertiesKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceDisplayPropertiesKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceDisplayPropertiesKHR left, PFN_vkGetPhysicalDeviceDisplayPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceDisplayPropertiesKHR left, PFN_vkGetPhysicalDeviceDisplayPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR : IEquatable<PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR>
        {
            public PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkDisplayPlanePropertiesKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkDisplayPlanePropertiesKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkDisplayPlanePropertiesKHR*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkDisplayPlanePropertiesKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR left, PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR left, PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDisplayPlaneSupportedDisplaysKHR : IEquatable<PFN_vkGetDisplayPlaneSupportedDisplaysKHR>
        {
            public PFN_vkGetDisplayPlaneSupportedDisplaysKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, uint*, vulkan.VkDisplayKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, uint*, vulkan.VkDisplayKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDisplayPlaneSupportedDisplaysKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDisplayPlaneSupportedDisplaysKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, uint*, vulkan.VkDisplayKHR*, vulkan.VkResult> (vulkan.PFN_vkGetDisplayPlaneSupportedDisplaysKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDisplayPlaneSupportedDisplaysKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, uint*, vulkan.VkDisplayKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetDisplayPlaneSupportedDisplaysKHR(from);
            
            public static bool operator ==(PFN_vkGetDisplayPlaneSupportedDisplaysKHR left, PFN_vkGetDisplayPlaneSupportedDisplaysKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDisplayPlaneSupportedDisplaysKHR left, PFN_vkGetDisplayPlaneSupportedDisplaysKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDisplayModePropertiesKHR : IEquatable<PFN_vkGetDisplayModePropertiesKHR>
        {
            public PFN_vkGetDisplayModePropertiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, uint*, vulkan.VkDisplayModePropertiesKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, uint*, vulkan.VkDisplayModePropertiesKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDisplayModePropertiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDisplayModePropertiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, uint*, vulkan.VkDisplayModePropertiesKHR*, vulkan.VkResult> (vulkan.PFN_vkGetDisplayModePropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDisplayModePropertiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, uint*, vulkan.VkDisplayModePropertiesKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetDisplayModePropertiesKHR(from);
            
            public static bool operator ==(PFN_vkGetDisplayModePropertiesKHR left, PFN_vkGetDisplayModePropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDisplayModePropertiesKHR left, PFN_vkGetDisplayModePropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateDisplayModeKHR : IEquatable<PFN_vkCreateDisplayModeKHR>
        {
            public PFN_vkCreateDisplayModeKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, vulkan.VkDisplayModeCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkDisplayModeKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, vulkan.VkDisplayModeCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkDisplayModeKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateDisplayModeKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateDisplayModeKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, vulkan.VkDisplayModeCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkDisplayModeKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateDisplayModeKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateDisplayModeKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, vulkan.VkDisplayModeCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkDisplayModeKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateDisplayModeKHR(from);
            
            public static bool operator ==(PFN_vkCreateDisplayModeKHR left, PFN_vkCreateDisplayModeKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateDisplayModeKHR left, PFN_vkCreateDisplayModeKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDisplayPlaneCapabilitiesKHR : IEquatable<PFN_vkGetDisplayPlaneCapabilitiesKHR>
        {
            public PFN_vkGetDisplayPlaneCapabilitiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayModeKHR, uint, vulkan.VkDisplayPlaneCapabilitiesKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayModeKHR, uint, vulkan.VkDisplayPlaneCapabilitiesKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDisplayPlaneCapabilitiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDisplayPlaneCapabilitiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayModeKHR, uint, vulkan.VkDisplayPlaneCapabilitiesKHR*, vulkan.VkResult> (vulkan.PFN_vkGetDisplayPlaneCapabilitiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDisplayPlaneCapabilitiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayModeKHR, uint, vulkan.VkDisplayPlaneCapabilitiesKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetDisplayPlaneCapabilitiesKHR(from);
            
            public static bool operator ==(PFN_vkGetDisplayPlaneCapabilitiesKHR left, PFN_vkGetDisplayPlaneCapabilitiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDisplayPlaneCapabilitiesKHR left, PFN_vkGetDisplayPlaneCapabilitiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateDisplayPlaneSurfaceKHR : IEquatable<PFN_vkCreateDisplayPlaneSurfaceKHR>
        {
            public PFN_vkCreateDisplayPlaneSurfaceKHR(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDisplaySurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDisplaySurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateDisplayPlaneSurfaceKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateDisplayPlaneSurfaceKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDisplaySurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateDisplayPlaneSurfaceKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateDisplayPlaneSurfaceKHR (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDisplaySurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateDisplayPlaneSurfaceKHR(from);
            
            public static bool operator ==(PFN_vkCreateDisplayPlaneSurfaceKHR left, PFN_vkCreateDisplayPlaneSurfaceKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateDisplayPlaneSurfaceKHR left, PFN_vkCreateDisplayPlaneSurfaceKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateSharedSwapchainsKHR : IEquatable<PFN_vkCreateSharedSwapchainsKHR>
        {
            public PFN_vkCreateSharedSwapchainsKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkSwapchainCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSwapchainKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkSwapchainCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSwapchainKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateSharedSwapchainsKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateSharedSwapchainsKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkSwapchainCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSwapchainKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateSharedSwapchainsKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateSharedSwapchainsKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkSwapchainCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSwapchainKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateSharedSwapchainsKHR(from);
            
            public static bool operator ==(PFN_vkCreateSharedSwapchainsKHR left, PFN_vkCreateSharedSwapchainsKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateSharedSwapchainsKHR left, PFN_vkCreateSharedSwapchainsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR : IEquatable<PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR>
        {
            public PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkVideoProfileInfoKHR*, vulkan.VkVideoCapabilitiesKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkVideoProfileInfoKHR*, vulkan.VkVideoCapabilitiesKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkVideoProfileInfoKHR*, vulkan.VkVideoCapabilitiesKHR*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkVideoProfileInfoKHR*, vulkan.VkVideoCapabilitiesKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR left, PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR left, PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR : IEquatable<PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR>
        {
            public PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceVideoFormatInfoKHR*, uint*, vulkan.VkVideoFormatPropertiesKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceVideoFormatInfoKHR*, uint*, vulkan.VkVideoFormatPropertiesKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceVideoFormatInfoKHR*, uint*, vulkan.VkVideoFormatPropertiesKHR*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceVideoFormatInfoKHR*, uint*, vulkan.VkVideoFormatPropertiesKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR left, PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR left, PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateVideoSessionKHR : IEquatable<PFN_vkCreateVideoSessionKHR>
        {
            public PFN_vkCreateVideoSessionKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkVideoSessionKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkVideoSessionKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateVideoSessionKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateVideoSessionKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkVideoSessionKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateVideoSessionKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateVideoSessionKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkVideoSessionKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateVideoSessionKHR(from);
            
            public static bool operator ==(PFN_vkCreateVideoSessionKHR left, PFN_vkCreateVideoSessionKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateVideoSessionKHR left, PFN_vkCreateVideoSessionKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyVideoSessionKHR : IEquatable<PFN_vkDestroyVideoSessionKHR>
        {
            public PFN_vkDestroyVideoSessionKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionKHR, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionKHR, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyVideoSessionKHR other && Equals(other);
            
            public bool Equals(PFN_vkDestroyVideoSessionKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionKHR, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyVideoSessionKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyVideoSessionKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionKHR, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyVideoSessionKHR(from);
            
            public static bool operator ==(PFN_vkDestroyVideoSessionKHR left, PFN_vkDestroyVideoSessionKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyVideoSessionKHR left, PFN_vkDestroyVideoSessionKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetVideoSessionMemoryRequirementsKHR : IEquatable<PFN_vkGetVideoSessionMemoryRequirementsKHR>
        {
            public PFN_vkGetVideoSessionMemoryRequirementsKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionKHR, uint*, vulkan.VkVideoSessionMemoryRequirementsKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionKHR, uint*, vulkan.VkVideoSessionMemoryRequirementsKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetVideoSessionMemoryRequirementsKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetVideoSessionMemoryRequirementsKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionKHR, uint*, vulkan.VkVideoSessionMemoryRequirementsKHR*, vulkan.VkResult> (vulkan.PFN_vkGetVideoSessionMemoryRequirementsKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetVideoSessionMemoryRequirementsKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionKHR, uint*, vulkan.VkVideoSessionMemoryRequirementsKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetVideoSessionMemoryRequirementsKHR(from);
            
            public static bool operator ==(PFN_vkGetVideoSessionMemoryRequirementsKHR left, PFN_vkGetVideoSessionMemoryRequirementsKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetVideoSessionMemoryRequirementsKHR left, PFN_vkGetVideoSessionMemoryRequirementsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkBindVideoSessionMemoryKHR : IEquatable<PFN_vkBindVideoSessionMemoryKHR>
        {
            public PFN_vkBindVideoSessionMemoryKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionKHR, uint, vulkan.VkBindVideoSessionMemoryInfoKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionKHR, uint, vulkan.VkBindVideoSessionMemoryInfoKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkBindVideoSessionMemoryKHR other && Equals(other);
            
            public bool Equals(PFN_vkBindVideoSessionMemoryKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionKHR, uint, vulkan.VkBindVideoSessionMemoryInfoKHR*, vulkan.VkResult> (vulkan.PFN_vkBindVideoSessionMemoryKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkBindVideoSessionMemoryKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionKHR, uint, vulkan.VkBindVideoSessionMemoryInfoKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkBindVideoSessionMemoryKHR(from);
            
            public static bool operator ==(PFN_vkBindVideoSessionMemoryKHR left, PFN_vkBindVideoSessionMemoryKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkBindVideoSessionMemoryKHR left, PFN_vkBindVideoSessionMemoryKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateVideoSessionParametersKHR : IEquatable<PFN_vkCreateVideoSessionParametersKHR>
        {
            public PFN_vkCreateVideoSessionParametersKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionParametersCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkVideoSessionParametersKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionParametersCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkVideoSessionParametersKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateVideoSessionParametersKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateVideoSessionParametersKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionParametersCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkVideoSessionParametersKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateVideoSessionParametersKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateVideoSessionParametersKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionParametersCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkVideoSessionParametersKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateVideoSessionParametersKHR(from);
            
            public static bool operator ==(PFN_vkCreateVideoSessionParametersKHR left, PFN_vkCreateVideoSessionParametersKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateVideoSessionParametersKHR left, PFN_vkCreateVideoSessionParametersKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkUpdateVideoSessionParametersKHR : IEquatable<PFN_vkUpdateVideoSessionParametersKHR>
        {
            public PFN_vkUpdateVideoSessionParametersKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionParametersKHR, vulkan.VkVideoSessionParametersUpdateInfoKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionParametersKHR, vulkan.VkVideoSessionParametersUpdateInfoKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkUpdateVideoSessionParametersKHR other && Equals(other);
            
            public bool Equals(PFN_vkUpdateVideoSessionParametersKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionParametersKHR, vulkan.VkVideoSessionParametersUpdateInfoKHR*, vulkan.VkResult> (vulkan.PFN_vkUpdateVideoSessionParametersKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkUpdateVideoSessionParametersKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionParametersKHR, vulkan.VkVideoSessionParametersUpdateInfoKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkUpdateVideoSessionParametersKHR(from);
            
            public static bool operator ==(PFN_vkUpdateVideoSessionParametersKHR left, PFN_vkUpdateVideoSessionParametersKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkUpdateVideoSessionParametersKHR left, PFN_vkUpdateVideoSessionParametersKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyVideoSessionParametersKHR : IEquatable<PFN_vkDestroyVideoSessionParametersKHR>
        {
            public PFN_vkDestroyVideoSessionParametersKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionParametersKHR, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionParametersKHR, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyVideoSessionParametersKHR other && Equals(other);
            
            public bool Equals(PFN_vkDestroyVideoSessionParametersKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionParametersKHR, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyVideoSessionParametersKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyVideoSessionParametersKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkVideoSessionParametersKHR, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyVideoSessionParametersKHR(from);
            
            public static bool operator ==(PFN_vkDestroyVideoSessionParametersKHR left, PFN_vkDestroyVideoSessionParametersKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyVideoSessionParametersKHR left, PFN_vkDestroyVideoSessionParametersKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBeginVideoCodingKHR : IEquatable<PFN_vkCmdBeginVideoCodingKHR>
        {
            public PFN_vkCmdBeginVideoCodingKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkVideoBeginCodingInfoKHR*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkVideoBeginCodingInfoKHR*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBeginVideoCodingKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdBeginVideoCodingKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkVideoBeginCodingInfoKHR*, void> (vulkan.PFN_vkCmdBeginVideoCodingKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBeginVideoCodingKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkVideoBeginCodingInfoKHR*, void> from) => new vulkan.PFN_vkCmdBeginVideoCodingKHR(from);
            
            public static bool operator ==(PFN_vkCmdBeginVideoCodingKHR left, PFN_vkCmdBeginVideoCodingKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBeginVideoCodingKHR left, PFN_vkCmdBeginVideoCodingKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdEndVideoCodingKHR : IEquatable<PFN_vkCmdEndVideoCodingKHR>
        {
            public PFN_vkCmdEndVideoCodingKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkVideoEndCodingInfoKHR*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkVideoEndCodingInfoKHR*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdEndVideoCodingKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdEndVideoCodingKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkVideoEndCodingInfoKHR*, void> (vulkan.PFN_vkCmdEndVideoCodingKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdEndVideoCodingKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkVideoEndCodingInfoKHR*, void> from) => new vulkan.PFN_vkCmdEndVideoCodingKHR(from);
            
            public static bool operator ==(PFN_vkCmdEndVideoCodingKHR left, PFN_vkCmdEndVideoCodingKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdEndVideoCodingKHR left, PFN_vkCmdEndVideoCodingKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdControlVideoCodingKHR : IEquatable<PFN_vkCmdControlVideoCodingKHR>
        {
            public PFN_vkCmdControlVideoCodingKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkVideoCodingControlInfoKHR*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkVideoCodingControlInfoKHR*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdControlVideoCodingKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdControlVideoCodingKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkVideoCodingControlInfoKHR*, void> (vulkan.PFN_vkCmdControlVideoCodingKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdControlVideoCodingKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkVideoCodingControlInfoKHR*, void> from) => new vulkan.PFN_vkCmdControlVideoCodingKHR(from);
            
            public static bool operator ==(PFN_vkCmdControlVideoCodingKHR left, PFN_vkCmdControlVideoCodingKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdControlVideoCodingKHR left, PFN_vkCmdControlVideoCodingKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDecodeVideoKHR : IEquatable<PFN_vkCmdDecodeVideoKHR>
        {
            public PFN_vkCmdDecodeVideoKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkVideoDecodeInfoKHR*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkVideoDecodeInfoKHR*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDecodeVideoKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdDecodeVideoKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkVideoDecodeInfoKHR*, void> (vulkan.PFN_vkCmdDecodeVideoKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDecodeVideoKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkVideoDecodeInfoKHR*, void> from) => new vulkan.PFN_vkCmdDecodeVideoKHR(from);
            
            public static bool operator ==(PFN_vkCmdDecodeVideoKHR left, PFN_vkCmdDecodeVideoKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDecodeVideoKHR left, PFN_vkCmdDecodeVideoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkVideoDecodeH264PictureLayoutFlagsKHR : IEquatable<VkVideoDecodeH264PictureLayoutFlagsKHR>
        {
            public VkVideoDecodeH264PictureLayoutFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkVideoDecodeH264PictureLayoutFlagsKHR other && Equals(other);
            
            public bool Equals(VkVideoDecodeH264PictureLayoutFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkVideoDecodeH264PictureLayoutFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkVideoDecodeH264PictureLayoutFlagsKHR (vulkan.VkFlags from) => new vulkan.VkVideoDecodeH264PictureLayoutFlagsKHR(from);
            
            public static bool operator ==(VkVideoDecodeH264PictureLayoutFlagsKHR left, VkVideoDecodeH264PictureLayoutFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkVideoDecodeH264PictureLayoutFlagsKHR left, VkVideoDecodeH264PictureLayoutFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkRenderingFlagsKHR : IEquatable<VkRenderingFlagsKHR>
        {
            public VkRenderingFlagsKHR(vulkan.VkRenderingFlags value) => this.Value = value;
            
            public vulkan.VkRenderingFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkRenderingFlagsKHR other && Equals(other);
            
            public bool Equals(VkRenderingFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkRenderingFlags (vulkan.VkRenderingFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkRenderingFlagsKHR (vulkan.VkRenderingFlags from) => new vulkan.VkRenderingFlagsKHR(from);
            
            public static bool operator ==(VkRenderingFlagsKHR left, VkRenderingFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkRenderingFlagsKHR left, VkRenderingFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkRenderingFlagBitsKHR : IEquatable<VkRenderingFlagBitsKHR>
        {
            public VkRenderingFlagBitsKHR(vulkan.VkRenderingFlagBits value) => this.Value = value;
            
            public vulkan.VkRenderingFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkRenderingFlagBitsKHR other && Equals(other);
            
            public bool Equals(VkRenderingFlagBitsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkRenderingFlagBits (vulkan.VkRenderingFlagBitsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkRenderingFlagBitsKHR (vulkan.VkRenderingFlagBits from) => new vulkan.VkRenderingFlagBitsKHR(from);
            
            public static bool operator ==(VkRenderingFlagBitsKHR left, VkRenderingFlagBitsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkRenderingFlagBitsKHR left, VkRenderingFlagBitsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkRenderingInfoKHR : IEquatable<VkRenderingInfoKHR>
        {
            public VkRenderingInfoKHR(vulkan.VkRenderingInfo value) => this.Value = value;
            
            public vulkan.VkRenderingInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkRenderingInfoKHR other && Equals(other);
            
            public bool Equals(VkRenderingInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkRenderingInfo (vulkan.VkRenderingInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkRenderingInfoKHR (vulkan.VkRenderingInfo from) => new vulkan.VkRenderingInfoKHR(from);
            
            public static bool operator ==(VkRenderingInfoKHR left, VkRenderingInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkRenderingInfoKHR left, VkRenderingInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkRenderingAttachmentInfoKHR : IEquatable<VkRenderingAttachmentInfoKHR>
        {
            public VkRenderingAttachmentInfoKHR(vulkan.VkRenderingAttachmentInfo value) => this.Value = value;
            
            public vulkan.VkRenderingAttachmentInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkRenderingAttachmentInfoKHR other && Equals(other);
            
            public bool Equals(VkRenderingAttachmentInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkRenderingAttachmentInfo (vulkan.VkRenderingAttachmentInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkRenderingAttachmentInfoKHR (vulkan.VkRenderingAttachmentInfo from) => new vulkan.VkRenderingAttachmentInfoKHR(from);
            
            public static bool operator ==(VkRenderingAttachmentInfoKHR left, VkRenderingAttachmentInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkRenderingAttachmentInfoKHR left, VkRenderingAttachmentInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineRenderingCreateInfoKHR : IEquatable<VkPipelineRenderingCreateInfoKHR>
        {
            public VkPipelineRenderingCreateInfoKHR(vulkan.VkPipelineRenderingCreateInfo value) => this.Value = value;
            
            public vulkan.VkPipelineRenderingCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineRenderingCreateInfoKHR other && Equals(other);
            
            public bool Equals(VkPipelineRenderingCreateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPipelineRenderingCreateInfo (vulkan.VkPipelineRenderingCreateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineRenderingCreateInfoKHR (vulkan.VkPipelineRenderingCreateInfo from) => new vulkan.VkPipelineRenderingCreateInfoKHR(from);
            
            public static bool operator ==(VkPipelineRenderingCreateInfoKHR left, VkPipelineRenderingCreateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineRenderingCreateInfoKHR left, VkPipelineRenderingCreateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceDynamicRenderingFeaturesKHR : IEquatable<VkPhysicalDeviceDynamicRenderingFeaturesKHR>
        {
            public VkPhysicalDeviceDynamicRenderingFeaturesKHR(vulkan.VkPhysicalDeviceDynamicRenderingFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceDynamicRenderingFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceDynamicRenderingFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceDynamicRenderingFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceDynamicRenderingFeatures (vulkan.VkPhysicalDeviceDynamicRenderingFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceDynamicRenderingFeaturesKHR (vulkan.VkPhysicalDeviceDynamicRenderingFeatures from) => new vulkan.VkPhysicalDeviceDynamicRenderingFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceDynamicRenderingFeaturesKHR left, VkPhysicalDeviceDynamicRenderingFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceDynamicRenderingFeaturesKHR left, VkPhysicalDeviceDynamicRenderingFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCommandBufferInheritanceRenderingInfoKHR : IEquatable<VkCommandBufferInheritanceRenderingInfoKHR>
        {
            public VkCommandBufferInheritanceRenderingInfoKHR(vulkan.VkCommandBufferInheritanceRenderingInfo value) => this.Value = value;
            
            public vulkan.VkCommandBufferInheritanceRenderingInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkCommandBufferInheritanceRenderingInfoKHR other && Equals(other);
            
            public bool Equals(VkCommandBufferInheritanceRenderingInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkCommandBufferInheritanceRenderingInfo (vulkan.VkCommandBufferInheritanceRenderingInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkCommandBufferInheritanceRenderingInfoKHR (vulkan.VkCommandBufferInheritanceRenderingInfo from) => new vulkan.VkCommandBufferInheritanceRenderingInfoKHR(from);
            
            public static bool operator ==(VkCommandBufferInheritanceRenderingInfoKHR left, VkCommandBufferInheritanceRenderingInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkCommandBufferInheritanceRenderingInfoKHR left, VkCommandBufferInheritanceRenderingInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkAttachmentSampleCountInfoNV : IEquatable<VkAttachmentSampleCountInfoNV>
        {
            public VkAttachmentSampleCountInfoNV(vulkan.VkAttachmentSampleCountInfoAMD value) => this.Value = value;
            
            public vulkan.VkAttachmentSampleCountInfoAMD Value { get; }
            
            public override bool Equals(object obj) => obj is VkAttachmentSampleCountInfoNV other && Equals(other);
            
            public bool Equals(VkAttachmentSampleCountInfoNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkAttachmentSampleCountInfoAMD (vulkan.VkAttachmentSampleCountInfoNV from) => from.Value;
            
            public static implicit operator vulkan.VkAttachmentSampleCountInfoNV (vulkan.VkAttachmentSampleCountInfoAMD from) => new vulkan.VkAttachmentSampleCountInfoNV(from);
            
            public static bool operator ==(VkAttachmentSampleCountInfoNV left, VkAttachmentSampleCountInfoNV right) => left.Equals(right);
            
            public static bool operator !=(VkAttachmentSampleCountInfoNV left, VkAttachmentSampleCountInfoNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBeginRenderingKHR : IEquatable<PFN_vkCmdBeginRenderingKHR>
        {
            public PFN_vkCmdBeginRenderingKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderingInfo*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderingInfo*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBeginRenderingKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdBeginRenderingKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderingInfo*, void> (vulkan.PFN_vkCmdBeginRenderingKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBeginRenderingKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderingInfo*, void> from) => new vulkan.PFN_vkCmdBeginRenderingKHR(from);
            
            public static bool operator ==(PFN_vkCmdBeginRenderingKHR left, PFN_vkCmdBeginRenderingKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBeginRenderingKHR left, PFN_vkCmdBeginRenderingKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdEndRenderingKHR : IEquatable<PFN_vkCmdEndRenderingKHR>
        {
            public PFN_vkCmdEndRenderingKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdEndRenderingKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdEndRenderingKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> (vulkan.PFN_vkCmdEndRenderingKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdEndRenderingKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> from) => new vulkan.PFN_vkCmdEndRenderingKHR(from);
            
            public static bool operator ==(PFN_vkCmdEndRenderingKHR left, PFN_vkCmdEndRenderingKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdEndRenderingKHR left, PFN_vkCmdEndRenderingKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkRenderPassMultiviewCreateInfoKHR : IEquatable<VkRenderPassMultiviewCreateInfoKHR>
        {
            public VkRenderPassMultiviewCreateInfoKHR(vulkan.VkRenderPassMultiviewCreateInfo value) => this.Value = value;
            
            public vulkan.VkRenderPassMultiviewCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkRenderPassMultiviewCreateInfoKHR other && Equals(other);
            
            public bool Equals(VkRenderPassMultiviewCreateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkRenderPassMultiviewCreateInfo (vulkan.VkRenderPassMultiviewCreateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkRenderPassMultiviewCreateInfoKHR (vulkan.VkRenderPassMultiviewCreateInfo from) => new vulkan.VkRenderPassMultiviewCreateInfoKHR(from);
            
            public static bool operator ==(VkRenderPassMultiviewCreateInfoKHR left, VkRenderPassMultiviewCreateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkRenderPassMultiviewCreateInfoKHR left, VkRenderPassMultiviewCreateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceMultiviewFeaturesKHR : IEquatable<VkPhysicalDeviceMultiviewFeaturesKHR>
        {
            public VkPhysicalDeviceMultiviewFeaturesKHR(vulkan.VkPhysicalDeviceMultiviewFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceMultiviewFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceMultiviewFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceMultiviewFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceMultiviewFeatures (vulkan.VkPhysicalDeviceMultiviewFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceMultiviewFeaturesKHR (vulkan.VkPhysicalDeviceMultiviewFeatures from) => new vulkan.VkPhysicalDeviceMultiviewFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceMultiviewFeaturesKHR left, VkPhysicalDeviceMultiviewFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceMultiviewFeaturesKHR left, VkPhysicalDeviceMultiviewFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceMultiviewPropertiesKHR : IEquatable<VkPhysicalDeviceMultiviewPropertiesKHR>
        {
            public VkPhysicalDeviceMultiviewPropertiesKHR(vulkan.VkPhysicalDeviceMultiviewProperties value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceMultiviewProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceMultiviewPropertiesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceMultiviewPropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceMultiviewProperties (vulkan.VkPhysicalDeviceMultiviewPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceMultiviewPropertiesKHR (vulkan.VkPhysicalDeviceMultiviewProperties from) => new vulkan.VkPhysicalDeviceMultiviewPropertiesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceMultiviewPropertiesKHR left, VkPhysicalDeviceMultiviewPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceMultiviewPropertiesKHR left, VkPhysicalDeviceMultiviewPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceFeatures2KHR : IEquatable<VkPhysicalDeviceFeatures2KHR>
        {
            public VkPhysicalDeviceFeatures2KHR(vulkan.VkPhysicalDeviceFeatures2 value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceFeatures2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceFeatures2KHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceFeatures2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceFeatures2 (vulkan.VkPhysicalDeviceFeatures2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceFeatures2KHR (vulkan.VkPhysicalDeviceFeatures2 from) => new vulkan.VkPhysicalDeviceFeatures2KHR(from);
            
            public static bool operator ==(VkPhysicalDeviceFeatures2KHR left, VkPhysicalDeviceFeatures2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceFeatures2KHR left, VkPhysicalDeviceFeatures2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceProperties2KHR : IEquatable<VkPhysicalDeviceProperties2KHR>
        {
            public VkPhysicalDeviceProperties2KHR(vulkan.VkPhysicalDeviceProperties2 value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceProperties2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceProperties2KHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceProperties2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceProperties2 (vulkan.VkPhysicalDeviceProperties2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceProperties2KHR (vulkan.VkPhysicalDeviceProperties2 from) => new vulkan.VkPhysicalDeviceProperties2KHR(from);
            
            public static bool operator ==(VkPhysicalDeviceProperties2KHR left, VkPhysicalDeviceProperties2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceProperties2KHR left, VkPhysicalDeviceProperties2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkFormatProperties2KHR : IEquatable<VkFormatProperties2KHR>
        {
            public VkFormatProperties2KHR(vulkan.VkFormatProperties2 value) => this.Value = value;
            
            public vulkan.VkFormatProperties2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkFormatProperties2KHR other && Equals(other);
            
            public bool Equals(VkFormatProperties2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFormatProperties2 (vulkan.VkFormatProperties2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkFormatProperties2KHR (vulkan.VkFormatProperties2 from) => new vulkan.VkFormatProperties2KHR(from);
            
            public static bool operator ==(VkFormatProperties2KHR left, VkFormatProperties2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkFormatProperties2KHR left, VkFormatProperties2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImageFormatProperties2KHR : IEquatable<VkImageFormatProperties2KHR>
        {
            public VkImageFormatProperties2KHR(vulkan.VkImageFormatProperties2 value) => this.Value = value;
            
            public vulkan.VkImageFormatProperties2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageFormatProperties2KHR other && Equals(other);
            
            public bool Equals(VkImageFormatProperties2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkImageFormatProperties2 (vulkan.VkImageFormatProperties2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkImageFormatProperties2KHR (vulkan.VkImageFormatProperties2 from) => new vulkan.VkImageFormatProperties2KHR(from);
            
            public static bool operator ==(VkImageFormatProperties2KHR left, VkImageFormatProperties2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkImageFormatProperties2KHR left, VkImageFormatProperties2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceImageFormatInfo2KHR : IEquatable<VkPhysicalDeviceImageFormatInfo2KHR>
        {
            public VkPhysicalDeviceImageFormatInfo2KHR(vulkan.VkPhysicalDeviceImageFormatInfo2 value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceImageFormatInfo2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceImageFormatInfo2KHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceImageFormatInfo2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceImageFormatInfo2 (vulkan.VkPhysicalDeviceImageFormatInfo2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceImageFormatInfo2KHR (vulkan.VkPhysicalDeviceImageFormatInfo2 from) => new vulkan.VkPhysicalDeviceImageFormatInfo2KHR(from);
            
            public static bool operator ==(VkPhysicalDeviceImageFormatInfo2KHR left, VkPhysicalDeviceImageFormatInfo2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceImageFormatInfo2KHR left, VkPhysicalDeviceImageFormatInfo2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkQueueFamilyProperties2KHR : IEquatable<VkQueueFamilyProperties2KHR>
        {
            public VkQueueFamilyProperties2KHR(vulkan.VkQueueFamilyProperties2 value) => this.Value = value;
            
            public vulkan.VkQueueFamilyProperties2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkQueueFamilyProperties2KHR other && Equals(other);
            
            public bool Equals(VkQueueFamilyProperties2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkQueueFamilyProperties2 (vulkan.VkQueueFamilyProperties2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkQueueFamilyProperties2KHR (vulkan.VkQueueFamilyProperties2 from) => new vulkan.VkQueueFamilyProperties2KHR(from);
            
            public static bool operator ==(VkQueueFamilyProperties2KHR left, VkQueueFamilyProperties2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkQueueFamilyProperties2KHR left, VkQueueFamilyProperties2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceMemoryProperties2KHR : IEquatable<VkPhysicalDeviceMemoryProperties2KHR>
        {
            public VkPhysicalDeviceMemoryProperties2KHR(vulkan.VkPhysicalDeviceMemoryProperties2 value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceMemoryProperties2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceMemoryProperties2KHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceMemoryProperties2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceMemoryProperties2 (vulkan.VkPhysicalDeviceMemoryProperties2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceMemoryProperties2KHR (vulkan.VkPhysicalDeviceMemoryProperties2 from) => new vulkan.VkPhysicalDeviceMemoryProperties2KHR(from);
            
            public static bool operator ==(VkPhysicalDeviceMemoryProperties2KHR left, VkPhysicalDeviceMemoryProperties2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceMemoryProperties2KHR left, VkPhysicalDeviceMemoryProperties2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSparseImageFormatProperties2KHR : IEquatable<VkSparseImageFormatProperties2KHR>
        {
            public VkSparseImageFormatProperties2KHR(vulkan.VkSparseImageFormatProperties2 value) => this.Value = value;
            
            public vulkan.VkSparseImageFormatProperties2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkSparseImageFormatProperties2KHR other && Equals(other);
            
            public bool Equals(VkSparseImageFormatProperties2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSparseImageFormatProperties2 (vulkan.VkSparseImageFormatProperties2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkSparseImageFormatProperties2KHR (vulkan.VkSparseImageFormatProperties2 from) => new vulkan.VkSparseImageFormatProperties2KHR(from);
            
            public static bool operator ==(VkSparseImageFormatProperties2KHR left, VkSparseImageFormatProperties2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkSparseImageFormatProperties2KHR left, VkSparseImageFormatProperties2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceSparseImageFormatInfo2KHR : IEquatable<VkPhysicalDeviceSparseImageFormatInfo2KHR>
        {
            public VkPhysicalDeviceSparseImageFormatInfo2KHR(vulkan.VkPhysicalDeviceSparseImageFormatInfo2 value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceSparseImageFormatInfo2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceSparseImageFormatInfo2KHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceSparseImageFormatInfo2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceSparseImageFormatInfo2 (vulkan.VkPhysicalDeviceSparseImageFormatInfo2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceSparseImageFormatInfo2KHR (vulkan.VkPhysicalDeviceSparseImageFormatInfo2 from) => new vulkan.VkPhysicalDeviceSparseImageFormatInfo2KHR(from);
            
            public static bool operator ==(VkPhysicalDeviceSparseImageFormatInfo2KHR left, VkPhysicalDeviceSparseImageFormatInfo2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceSparseImageFormatInfo2KHR left, VkPhysicalDeviceSparseImageFormatInfo2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceFeatures2KHR : IEquatable<PFN_vkGetPhysicalDeviceFeatures2KHR>
        {
            public PFN_vkGetPhysicalDeviceFeatures2KHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceFeatures2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceFeatures2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceFeatures2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceFeatures2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceFeatures2*, void> (vulkan.PFN_vkGetPhysicalDeviceFeatures2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceFeatures2KHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceFeatures2*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceFeatures2KHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceFeatures2KHR left, PFN_vkGetPhysicalDeviceFeatures2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceFeatures2KHR left, PFN_vkGetPhysicalDeviceFeatures2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceProperties2KHR : IEquatable<PFN_vkGetPhysicalDeviceProperties2KHR>
        {
            public PFN_vkGetPhysicalDeviceProperties2KHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceProperties2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceProperties2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceProperties2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceProperties2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceProperties2*, void> (vulkan.PFN_vkGetPhysicalDeviceProperties2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceProperties2KHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceProperties2*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceProperties2KHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceProperties2KHR left, PFN_vkGetPhysicalDeviceProperties2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceProperties2KHR left, PFN_vkGetPhysicalDeviceProperties2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceFormatProperties2KHR : IEquatable<PFN_vkGetPhysicalDeviceFormatProperties2KHR>
        {
            public PFN_vkGetPhysicalDeviceFormatProperties2KHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkFormatProperties2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkFormatProperties2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceFormatProperties2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceFormatProperties2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkFormatProperties2*, void> (vulkan.PFN_vkGetPhysicalDeviceFormatProperties2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceFormatProperties2KHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkFormatProperties2*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceFormatProperties2KHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceFormatProperties2KHR left, PFN_vkGetPhysicalDeviceFormatProperties2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceFormatProperties2KHR left, PFN_vkGetPhysicalDeviceFormatProperties2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceImageFormatProperties2KHR : IEquatable<PFN_vkGetPhysicalDeviceImageFormatProperties2KHR>
        {
            public PFN_vkGetPhysicalDeviceImageFormatProperties2KHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceImageFormatInfo2*, vulkan.VkImageFormatProperties2*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceImageFormatInfo2*, vulkan.VkImageFormatProperties2*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceImageFormatProperties2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceImageFormatProperties2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceImageFormatInfo2*, vulkan.VkImageFormatProperties2*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceImageFormatProperties2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceImageFormatProperties2KHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceImageFormatInfo2*, vulkan.VkImageFormatProperties2*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceImageFormatProperties2KHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceImageFormatProperties2KHR left, PFN_vkGetPhysicalDeviceImageFormatProperties2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceImageFormatProperties2KHR left, PFN_vkGetPhysicalDeviceImageFormatProperties2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR : IEquatable<PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR>
        {
            public PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkQueueFamilyProperties2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkQueueFamilyProperties2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkQueueFamilyProperties2*, void> (vulkan.PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkQueueFamilyProperties2*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR left, PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR left, PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceMemoryProperties2KHR : IEquatable<PFN_vkGetPhysicalDeviceMemoryProperties2KHR>
        {
            public PFN_vkGetPhysicalDeviceMemoryProperties2KHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceMemoryProperties2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceMemoryProperties2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceMemoryProperties2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceMemoryProperties2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceMemoryProperties2*, void> (vulkan.PFN_vkGetPhysicalDeviceMemoryProperties2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceMemoryProperties2KHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceMemoryProperties2*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceMemoryProperties2KHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceMemoryProperties2KHR left, PFN_vkGetPhysicalDeviceMemoryProperties2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceMemoryProperties2KHR left, PFN_vkGetPhysicalDeviceMemoryProperties2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR : IEquatable<PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR>
        {
            public PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSparseImageFormatInfo2*, uint*, vulkan.VkSparseImageFormatProperties2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSparseImageFormatInfo2*, uint*, vulkan.VkSparseImageFormatProperties2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSparseImageFormatInfo2*, uint*, vulkan.VkSparseImageFormatProperties2*, void> (vulkan.PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSparseImageFormatInfo2*, uint*, vulkan.VkSparseImageFormatProperties2*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR left, PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR left, PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPeerMemoryFeatureFlagsKHR : IEquatable<VkPeerMemoryFeatureFlagsKHR>
        {
            public VkPeerMemoryFeatureFlagsKHR(vulkan.VkPeerMemoryFeatureFlags value) => this.Value = value;
            
            public vulkan.VkPeerMemoryFeatureFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPeerMemoryFeatureFlagsKHR other && Equals(other);
            
            public bool Equals(VkPeerMemoryFeatureFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPeerMemoryFeatureFlags (vulkan.VkPeerMemoryFeatureFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPeerMemoryFeatureFlagsKHR (vulkan.VkPeerMemoryFeatureFlags from) => new vulkan.VkPeerMemoryFeatureFlagsKHR(from);
            
            public static bool operator ==(VkPeerMemoryFeatureFlagsKHR left, VkPeerMemoryFeatureFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPeerMemoryFeatureFlagsKHR left, VkPeerMemoryFeatureFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPeerMemoryFeatureFlagBitsKHR : IEquatable<VkPeerMemoryFeatureFlagBitsKHR>
        {
            public VkPeerMemoryFeatureFlagBitsKHR(vulkan.VkPeerMemoryFeatureFlagBits value) => this.Value = value;
            
            public vulkan.VkPeerMemoryFeatureFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkPeerMemoryFeatureFlagBitsKHR other && Equals(other);
            
            public bool Equals(VkPeerMemoryFeatureFlagBitsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPeerMemoryFeatureFlagBits (vulkan.VkPeerMemoryFeatureFlagBitsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPeerMemoryFeatureFlagBitsKHR (vulkan.VkPeerMemoryFeatureFlagBits from) => new vulkan.VkPeerMemoryFeatureFlagBitsKHR(from);
            
            public static bool operator ==(VkPeerMemoryFeatureFlagBitsKHR left, VkPeerMemoryFeatureFlagBitsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPeerMemoryFeatureFlagBitsKHR left, VkPeerMemoryFeatureFlagBitsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkMemoryAllocateFlagsKHR : IEquatable<VkMemoryAllocateFlagsKHR>
        {
            public VkMemoryAllocateFlagsKHR(vulkan.VkMemoryAllocateFlags value) => this.Value = value;
            
            public vulkan.VkMemoryAllocateFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkMemoryAllocateFlagsKHR other && Equals(other);
            
            public bool Equals(VkMemoryAllocateFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkMemoryAllocateFlags (vulkan.VkMemoryAllocateFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkMemoryAllocateFlagsKHR (vulkan.VkMemoryAllocateFlags from) => new vulkan.VkMemoryAllocateFlagsKHR(from);
            
            public static bool operator ==(VkMemoryAllocateFlagsKHR left, VkMemoryAllocateFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkMemoryAllocateFlagsKHR left, VkMemoryAllocateFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkMemoryAllocateFlagBitsKHR : IEquatable<VkMemoryAllocateFlagBitsKHR>
        {
            public VkMemoryAllocateFlagBitsKHR(vulkan.VkMemoryAllocateFlagBits value) => this.Value = value;
            
            public vulkan.VkMemoryAllocateFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkMemoryAllocateFlagBitsKHR other && Equals(other);
            
            public bool Equals(VkMemoryAllocateFlagBitsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkMemoryAllocateFlagBits (vulkan.VkMemoryAllocateFlagBitsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkMemoryAllocateFlagBitsKHR (vulkan.VkMemoryAllocateFlagBits from) => new vulkan.VkMemoryAllocateFlagBitsKHR(from);
            
            public static bool operator ==(VkMemoryAllocateFlagBitsKHR left, VkMemoryAllocateFlagBitsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkMemoryAllocateFlagBitsKHR left, VkMemoryAllocateFlagBitsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkMemoryAllocateFlagsInfoKHR : IEquatable<VkMemoryAllocateFlagsInfoKHR>
        {
            public VkMemoryAllocateFlagsInfoKHR(vulkan.VkMemoryAllocateFlagsInfo value) => this.Value = value;
            
            public vulkan.VkMemoryAllocateFlagsInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkMemoryAllocateFlagsInfoKHR other && Equals(other);
            
            public bool Equals(VkMemoryAllocateFlagsInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkMemoryAllocateFlagsInfo (vulkan.VkMemoryAllocateFlagsInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkMemoryAllocateFlagsInfoKHR (vulkan.VkMemoryAllocateFlagsInfo from) => new vulkan.VkMemoryAllocateFlagsInfoKHR(from);
            
            public static bool operator ==(VkMemoryAllocateFlagsInfoKHR left, VkMemoryAllocateFlagsInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkMemoryAllocateFlagsInfoKHR left, VkMemoryAllocateFlagsInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDeviceGroupRenderPassBeginInfoKHR : IEquatable<VkDeviceGroupRenderPassBeginInfoKHR>
        {
            public VkDeviceGroupRenderPassBeginInfoKHR(vulkan.VkDeviceGroupRenderPassBeginInfo value) => this.Value = value;
            
            public vulkan.VkDeviceGroupRenderPassBeginInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceGroupRenderPassBeginInfoKHR other && Equals(other);
            
            public bool Equals(VkDeviceGroupRenderPassBeginInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDeviceGroupRenderPassBeginInfo (vulkan.VkDeviceGroupRenderPassBeginInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceGroupRenderPassBeginInfoKHR (vulkan.VkDeviceGroupRenderPassBeginInfo from) => new vulkan.VkDeviceGroupRenderPassBeginInfoKHR(from);
            
            public static bool operator ==(VkDeviceGroupRenderPassBeginInfoKHR left, VkDeviceGroupRenderPassBeginInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceGroupRenderPassBeginInfoKHR left, VkDeviceGroupRenderPassBeginInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDeviceGroupCommandBufferBeginInfoKHR : IEquatable<VkDeviceGroupCommandBufferBeginInfoKHR>
        {
            public VkDeviceGroupCommandBufferBeginInfoKHR(vulkan.VkDeviceGroupCommandBufferBeginInfo value) => this.Value = value;
            
            public vulkan.VkDeviceGroupCommandBufferBeginInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceGroupCommandBufferBeginInfoKHR other && Equals(other);
            
            public bool Equals(VkDeviceGroupCommandBufferBeginInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDeviceGroupCommandBufferBeginInfo (vulkan.VkDeviceGroupCommandBufferBeginInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceGroupCommandBufferBeginInfoKHR (vulkan.VkDeviceGroupCommandBufferBeginInfo from) => new vulkan.VkDeviceGroupCommandBufferBeginInfoKHR(from);
            
            public static bool operator ==(VkDeviceGroupCommandBufferBeginInfoKHR left, VkDeviceGroupCommandBufferBeginInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceGroupCommandBufferBeginInfoKHR left, VkDeviceGroupCommandBufferBeginInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDeviceGroupSubmitInfoKHR : IEquatable<VkDeviceGroupSubmitInfoKHR>
        {
            public VkDeviceGroupSubmitInfoKHR(vulkan.VkDeviceGroupSubmitInfo value) => this.Value = value;
            
            public vulkan.VkDeviceGroupSubmitInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceGroupSubmitInfoKHR other && Equals(other);
            
            public bool Equals(VkDeviceGroupSubmitInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDeviceGroupSubmitInfo (vulkan.VkDeviceGroupSubmitInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceGroupSubmitInfoKHR (vulkan.VkDeviceGroupSubmitInfo from) => new vulkan.VkDeviceGroupSubmitInfoKHR(from);
            
            public static bool operator ==(VkDeviceGroupSubmitInfoKHR left, VkDeviceGroupSubmitInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceGroupSubmitInfoKHR left, VkDeviceGroupSubmitInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDeviceGroupBindSparseInfoKHR : IEquatable<VkDeviceGroupBindSparseInfoKHR>
        {
            public VkDeviceGroupBindSparseInfoKHR(vulkan.VkDeviceGroupBindSparseInfo value) => this.Value = value;
            
            public vulkan.VkDeviceGroupBindSparseInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceGroupBindSparseInfoKHR other && Equals(other);
            
            public bool Equals(VkDeviceGroupBindSparseInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDeviceGroupBindSparseInfo (vulkan.VkDeviceGroupBindSparseInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceGroupBindSparseInfoKHR (vulkan.VkDeviceGroupBindSparseInfo from) => new vulkan.VkDeviceGroupBindSparseInfoKHR(from);
            
            public static bool operator ==(VkDeviceGroupBindSparseInfoKHR left, VkDeviceGroupBindSparseInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceGroupBindSparseInfoKHR left, VkDeviceGroupBindSparseInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBindBufferMemoryDeviceGroupInfoKHR : IEquatable<VkBindBufferMemoryDeviceGroupInfoKHR>
        {
            public VkBindBufferMemoryDeviceGroupInfoKHR(vulkan.VkBindBufferMemoryDeviceGroupInfo value) => this.Value = value;
            
            public vulkan.VkBindBufferMemoryDeviceGroupInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkBindBufferMemoryDeviceGroupInfoKHR other && Equals(other);
            
            public bool Equals(VkBindBufferMemoryDeviceGroupInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBindBufferMemoryDeviceGroupInfo (vulkan.VkBindBufferMemoryDeviceGroupInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkBindBufferMemoryDeviceGroupInfoKHR (vulkan.VkBindBufferMemoryDeviceGroupInfo from) => new vulkan.VkBindBufferMemoryDeviceGroupInfoKHR(from);
            
            public static bool operator ==(VkBindBufferMemoryDeviceGroupInfoKHR left, VkBindBufferMemoryDeviceGroupInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkBindBufferMemoryDeviceGroupInfoKHR left, VkBindBufferMemoryDeviceGroupInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBindImageMemoryDeviceGroupInfoKHR : IEquatable<VkBindImageMemoryDeviceGroupInfoKHR>
        {
            public VkBindImageMemoryDeviceGroupInfoKHR(vulkan.VkBindImageMemoryDeviceGroupInfo value) => this.Value = value;
            
            public vulkan.VkBindImageMemoryDeviceGroupInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkBindImageMemoryDeviceGroupInfoKHR other && Equals(other);
            
            public bool Equals(VkBindImageMemoryDeviceGroupInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBindImageMemoryDeviceGroupInfo (vulkan.VkBindImageMemoryDeviceGroupInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkBindImageMemoryDeviceGroupInfoKHR (vulkan.VkBindImageMemoryDeviceGroupInfo from) => new vulkan.VkBindImageMemoryDeviceGroupInfoKHR(from);
            
            public static bool operator ==(VkBindImageMemoryDeviceGroupInfoKHR left, VkBindImageMemoryDeviceGroupInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkBindImageMemoryDeviceGroupInfoKHR left, VkBindImageMemoryDeviceGroupInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR : IEquatable<PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR>
        {
            public PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, uint, uint, vulkan.VkPeerMemoryFeatureFlags*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, uint, uint, vulkan.VkPeerMemoryFeatureFlags*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, uint, uint, vulkan.VkPeerMemoryFeatureFlags*, void> (vulkan.PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, uint, uint, vulkan.VkPeerMemoryFeatureFlags*, void> from) => new vulkan.PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR(from);
            
            public static bool operator ==(PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR left, PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR left, PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDeviceMaskKHR : IEquatable<PFN_vkCmdSetDeviceMaskKHR>
        {
            public PFN_vkCmdSetDeviceMaskKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDeviceMaskKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDeviceMaskKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> (vulkan.PFN_vkCmdSetDeviceMaskKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDeviceMaskKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> from) => new vulkan.PFN_vkCmdSetDeviceMaskKHR(from);
            
            public static bool operator ==(PFN_vkCmdSetDeviceMaskKHR left, PFN_vkCmdSetDeviceMaskKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDeviceMaskKHR left, PFN_vkCmdSetDeviceMaskKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDispatchBaseKHR : IEquatable<PFN_vkCmdDispatchBaseKHR>
        {
            public PFN_vkCmdDispatchBaseKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, uint, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, uint, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDispatchBaseKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdDispatchBaseKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, uint, uint, uint, void> (vulkan.PFN_vkCmdDispatchBaseKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDispatchBaseKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, uint, uint, uint, void> from) => new vulkan.PFN_vkCmdDispatchBaseKHR(from);
            
            public static bool operator ==(PFN_vkCmdDispatchBaseKHR left, PFN_vkCmdDispatchBaseKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDispatchBaseKHR left, PFN_vkCmdDispatchBaseKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCommandPoolTrimFlagsKHR : IEquatable<VkCommandPoolTrimFlagsKHR>
        {
            public VkCommandPoolTrimFlagsKHR(vulkan.VkCommandPoolTrimFlags value) => this.Value = value;
            
            public vulkan.VkCommandPoolTrimFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkCommandPoolTrimFlagsKHR other && Equals(other);
            
            public bool Equals(VkCommandPoolTrimFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkCommandPoolTrimFlags (vulkan.VkCommandPoolTrimFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkCommandPoolTrimFlagsKHR (vulkan.VkCommandPoolTrimFlags from) => new vulkan.VkCommandPoolTrimFlagsKHR(from);
            
            public static bool operator ==(VkCommandPoolTrimFlagsKHR left, VkCommandPoolTrimFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkCommandPoolTrimFlagsKHR left, VkCommandPoolTrimFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkTrimCommandPoolKHR : IEquatable<PFN_vkTrimCommandPoolKHR>
        {
            public PFN_vkTrimCommandPoolKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, vulkan.VkCommandPoolTrimFlags, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, vulkan.VkCommandPoolTrimFlags, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkTrimCommandPoolKHR other && Equals(other);
            
            public bool Equals(PFN_vkTrimCommandPoolKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, vulkan.VkCommandPoolTrimFlags, void> (vulkan.PFN_vkTrimCommandPoolKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkTrimCommandPoolKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCommandPool, vulkan.VkCommandPoolTrimFlags, void> from) => new vulkan.PFN_vkTrimCommandPoolKHR(from);
            
            public static bool operator ==(PFN_vkTrimCommandPoolKHR left, PFN_vkTrimCommandPoolKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkTrimCommandPoolKHR left, PFN_vkTrimCommandPoolKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceGroupPropertiesKHR : IEquatable<VkPhysicalDeviceGroupPropertiesKHR>
        {
            public VkPhysicalDeviceGroupPropertiesKHR(vulkan.VkPhysicalDeviceGroupProperties value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceGroupProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceGroupPropertiesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceGroupPropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceGroupProperties (vulkan.VkPhysicalDeviceGroupPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceGroupPropertiesKHR (vulkan.VkPhysicalDeviceGroupProperties from) => new vulkan.VkPhysicalDeviceGroupPropertiesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceGroupPropertiesKHR left, VkPhysicalDeviceGroupPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceGroupPropertiesKHR left, VkPhysicalDeviceGroupPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDeviceGroupDeviceCreateInfoKHR : IEquatable<VkDeviceGroupDeviceCreateInfoKHR>
        {
            public VkDeviceGroupDeviceCreateInfoKHR(vulkan.VkDeviceGroupDeviceCreateInfo value) => this.Value = value;
            
            public vulkan.VkDeviceGroupDeviceCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceGroupDeviceCreateInfoKHR other && Equals(other);
            
            public bool Equals(VkDeviceGroupDeviceCreateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDeviceGroupDeviceCreateInfo (vulkan.VkDeviceGroupDeviceCreateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceGroupDeviceCreateInfoKHR (vulkan.VkDeviceGroupDeviceCreateInfo from) => new vulkan.VkDeviceGroupDeviceCreateInfoKHR(from);
            
            public static bool operator ==(VkDeviceGroupDeviceCreateInfoKHR left, VkDeviceGroupDeviceCreateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceGroupDeviceCreateInfoKHR left, VkDeviceGroupDeviceCreateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkEnumeratePhysicalDeviceGroupsKHR : IEquatable<PFN_vkEnumeratePhysicalDeviceGroupsKHR>
        {
            public PFN_vkEnumeratePhysicalDeviceGroupsKHR(delegate*unmanaged[Stdcall]<vulkan.VkInstance, uint*, vulkan.VkPhysicalDeviceGroupProperties*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, uint*, vulkan.VkPhysicalDeviceGroupProperties*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkEnumeratePhysicalDeviceGroupsKHR other && Equals(other);
            
            public bool Equals(PFN_vkEnumeratePhysicalDeviceGroupsKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, uint*, vulkan.VkPhysicalDeviceGroupProperties*, vulkan.VkResult> (vulkan.PFN_vkEnumeratePhysicalDeviceGroupsKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkEnumeratePhysicalDeviceGroupsKHR (delegate*unmanaged[Stdcall]<vulkan.VkInstance, uint*, vulkan.VkPhysicalDeviceGroupProperties*, vulkan.VkResult> from) => new vulkan.PFN_vkEnumeratePhysicalDeviceGroupsKHR(from);
            
            public static bool operator ==(PFN_vkEnumeratePhysicalDeviceGroupsKHR left, PFN_vkEnumeratePhysicalDeviceGroupsKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkEnumeratePhysicalDeviceGroupsKHR left, PFN_vkEnumeratePhysicalDeviceGroupsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalMemoryHandleTypeFlagsKHR : IEquatable<VkExternalMemoryHandleTypeFlagsKHR>
        {
            public VkExternalMemoryHandleTypeFlagsKHR(vulkan.VkExternalMemoryHandleTypeFlags value) => this.Value = value;
            
            public vulkan.VkExternalMemoryHandleTypeFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalMemoryHandleTypeFlagsKHR other && Equals(other);
            
            public bool Equals(VkExternalMemoryHandleTypeFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalMemoryHandleTypeFlags (vulkan.VkExternalMemoryHandleTypeFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalMemoryHandleTypeFlagsKHR (vulkan.VkExternalMemoryHandleTypeFlags from) => new vulkan.VkExternalMemoryHandleTypeFlagsKHR(from);
            
            public static bool operator ==(VkExternalMemoryHandleTypeFlagsKHR left, VkExternalMemoryHandleTypeFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalMemoryHandleTypeFlagsKHR left, VkExternalMemoryHandleTypeFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalMemoryHandleTypeFlagBitsKHR : IEquatable<VkExternalMemoryHandleTypeFlagBitsKHR>
        {
            public VkExternalMemoryHandleTypeFlagBitsKHR(vulkan.VkExternalMemoryHandleTypeFlagBits value) => this.Value = value;
            
            public vulkan.VkExternalMemoryHandleTypeFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalMemoryHandleTypeFlagBitsKHR other && Equals(other);
            
            public bool Equals(VkExternalMemoryHandleTypeFlagBitsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalMemoryHandleTypeFlagBits (vulkan.VkExternalMemoryHandleTypeFlagBitsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalMemoryHandleTypeFlagBitsKHR (vulkan.VkExternalMemoryHandleTypeFlagBits from) => new vulkan.VkExternalMemoryHandleTypeFlagBitsKHR(from);
            
            public static bool operator ==(VkExternalMemoryHandleTypeFlagBitsKHR left, VkExternalMemoryHandleTypeFlagBitsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalMemoryHandleTypeFlagBitsKHR left, VkExternalMemoryHandleTypeFlagBitsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalMemoryFeatureFlagsKHR : IEquatable<VkExternalMemoryFeatureFlagsKHR>
        {
            public VkExternalMemoryFeatureFlagsKHR(vulkan.VkExternalMemoryFeatureFlags value) => this.Value = value;
            
            public vulkan.VkExternalMemoryFeatureFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalMemoryFeatureFlagsKHR other && Equals(other);
            
            public bool Equals(VkExternalMemoryFeatureFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalMemoryFeatureFlags (vulkan.VkExternalMemoryFeatureFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalMemoryFeatureFlagsKHR (vulkan.VkExternalMemoryFeatureFlags from) => new vulkan.VkExternalMemoryFeatureFlagsKHR(from);
            
            public static bool operator ==(VkExternalMemoryFeatureFlagsKHR left, VkExternalMemoryFeatureFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalMemoryFeatureFlagsKHR left, VkExternalMemoryFeatureFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalMemoryFeatureFlagBitsKHR : IEquatable<VkExternalMemoryFeatureFlagBitsKHR>
        {
            public VkExternalMemoryFeatureFlagBitsKHR(vulkan.VkExternalMemoryFeatureFlagBits value) => this.Value = value;
            
            public vulkan.VkExternalMemoryFeatureFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalMemoryFeatureFlagBitsKHR other && Equals(other);
            
            public bool Equals(VkExternalMemoryFeatureFlagBitsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalMemoryFeatureFlagBits (vulkan.VkExternalMemoryFeatureFlagBitsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalMemoryFeatureFlagBitsKHR (vulkan.VkExternalMemoryFeatureFlagBits from) => new vulkan.VkExternalMemoryFeatureFlagBitsKHR(from);
            
            public static bool operator ==(VkExternalMemoryFeatureFlagBitsKHR left, VkExternalMemoryFeatureFlagBitsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalMemoryFeatureFlagBitsKHR left, VkExternalMemoryFeatureFlagBitsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalMemoryPropertiesKHR : IEquatable<VkExternalMemoryPropertiesKHR>
        {
            public VkExternalMemoryPropertiesKHR(vulkan.VkExternalMemoryProperties value) => this.Value = value;
            
            public vulkan.VkExternalMemoryProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalMemoryPropertiesKHR other && Equals(other);
            
            public bool Equals(VkExternalMemoryPropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalMemoryProperties (vulkan.VkExternalMemoryPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalMemoryPropertiesKHR (vulkan.VkExternalMemoryProperties from) => new vulkan.VkExternalMemoryPropertiesKHR(from);
            
            public static bool operator ==(VkExternalMemoryPropertiesKHR left, VkExternalMemoryPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalMemoryPropertiesKHR left, VkExternalMemoryPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceExternalImageFormatInfoKHR : IEquatable<VkPhysicalDeviceExternalImageFormatInfoKHR>
        {
            public VkPhysicalDeviceExternalImageFormatInfoKHR(vulkan.VkPhysicalDeviceExternalImageFormatInfo value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceExternalImageFormatInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceExternalImageFormatInfoKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceExternalImageFormatInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceExternalImageFormatInfo (vulkan.VkPhysicalDeviceExternalImageFormatInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceExternalImageFormatInfoKHR (vulkan.VkPhysicalDeviceExternalImageFormatInfo from) => new vulkan.VkPhysicalDeviceExternalImageFormatInfoKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceExternalImageFormatInfoKHR left, VkPhysicalDeviceExternalImageFormatInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceExternalImageFormatInfoKHR left, VkPhysicalDeviceExternalImageFormatInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalImageFormatPropertiesKHR : IEquatable<VkExternalImageFormatPropertiesKHR>
        {
            public VkExternalImageFormatPropertiesKHR(vulkan.VkExternalImageFormatProperties value) => this.Value = value;
            
            public vulkan.VkExternalImageFormatProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalImageFormatPropertiesKHR other && Equals(other);
            
            public bool Equals(VkExternalImageFormatPropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalImageFormatProperties (vulkan.VkExternalImageFormatPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalImageFormatPropertiesKHR (vulkan.VkExternalImageFormatProperties from) => new vulkan.VkExternalImageFormatPropertiesKHR(from);
            
            public static bool operator ==(VkExternalImageFormatPropertiesKHR left, VkExternalImageFormatPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalImageFormatPropertiesKHR left, VkExternalImageFormatPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceExternalBufferInfoKHR : IEquatable<VkPhysicalDeviceExternalBufferInfoKHR>
        {
            public VkPhysicalDeviceExternalBufferInfoKHR(vulkan.VkPhysicalDeviceExternalBufferInfo value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceExternalBufferInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceExternalBufferInfoKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceExternalBufferInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceExternalBufferInfo (vulkan.VkPhysicalDeviceExternalBufferInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceExternalBufferInfoKHR (vulkan.VkPhysicalDeviceExternalBufferInfo from) => new vulkan.VkPhysicalDeviceExternalBufferInfoKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceExternalBufferInfoKHR left, VkPhysicalDeviceExternalBufferInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceExternalBufferInfoKHR left, VkPhysicalDeviceExternalBufferInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalBufferPropertiesKHR : IEquatable<VkExternalBufferPropertiesKHR>
        {
            public VkExternalBufferPropertiesKHR(vulkan.VkExternalBufferProperties value) => this.Value = value;
            
            public vulkan.VkExternalBufferProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalBufferPropertiesKHR other && Equals(other);
            
            public bool Equals(VkExternalBufferPropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalBufferProperties (vulkan.VkExternalBufferPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalBufferPropertiesKHR (vulkan.VkExternalBufferProperties from) => new vulkan.VkExternalBufferPropertiesKHR(from);
            
            public static bool operator ==(VkExternalBufferPropertiesKHR left, VkExternalBufferPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalBufferPropertiesKHR left, VkExternalBufferPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceIDPropertiesKHR : IEquatable<VkPhysicalDeviceIDPropertiesKHR>
        {
            public VkPhysicalDeviceIDPropertiesKHR(vulkan.VkPhysicalDeviceIDProperties value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceIDProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceIDPropertiesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceIDPropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceIDProperties (vulkan.VkPhysicalDeviceIDPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceIDPropertiesKHR (vulkan.VkPhysicalDeviceIDProperties from) => new vulkan.VkPhysicalDeviceIDPropertiesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceIDPropertiesKHR left, VkPhysicalDeviceIDPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceIDPropertiesKHR left, VkPhysicalDeviceIDPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR : IEquatable<PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR>
        {
            public PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalBufferInfo*, vulkan.VkExternalBufferProperties*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalBufferInfo*, vulkan.VkExternalBufferProperties*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalBufferInfo*, vulkan.VkExternalBufferProperties*, void> (vulkan.PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalBufferInfo*, vulkan.VkExternalBufferProperties*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR left, PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR left, PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalMemoryImageCreateInfoKHR : IEquatable<VkExternalMemoryImageCreateInfoKHR>
        {
            public VkExternalMemoryImageCreateInfoKHR(vulkan.VkExternalMemoryImageCreateInfo value) => this.Value = value;
            
            public vulkan.VkExternalMemoryImageCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalMemoryImageCreateInfoKHR other && Equals(other);
            
            public bool Equals(VkExternalMemoryImageCreateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalMemoryImageCreateInfo (vulkan.VkExternalMemoryImageCreateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalMemoryImageCreateInfoKHR (vulkan.VkExternalMemoryImageCreateInfo from) => new vulkan.VkExternalMemoryImageCreateInfoKHR(from);
            
            public static bool operator ==(VkExternalMemoryImageCreateInfoKHR left, VkExternalMemoryImageCreateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalMemoryImageCreateInfoKHR left, VkExternalMemoryImageCreateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalMemoryBufferCreateInfoKHR : IEquatable<VkExternalMemoryBufferCreateInfoKHR>
        {
            public VkExternalMemoryBufferCreateInfoKHR(vulkan.VkExternalMemoryBufferCreateInfo value) => this.Value = value;
            
            public vulkan.VkExternalMemoryBufferCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalMemoryBufferCreateInfoKHR other && Equals(other);
            
            public bool Equals(VkExternalMemoryBufferCreateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalMemoryBufferCreateInfo (vulkan.VkExternalMemoryBufferCreateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalMemoryBufferCreateInfoKHR (vulkan.VkExternalMemoryBufferCreateInfo from) => new vulkan.VkExternalMemoryBufferCreateInfoKHR(from);
            
            public static bool operator ==(VkExternalMemoryBufferCreateInfoKHR left, VkExternalMemoryBufferCreateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalMemoryBufferCreateInfoKHR left, VkExternalMemoryBufferCreateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExportMemoryAllocateInfoKHR : IEquatable<VkExportMemoryAllocateInfoKHR>
        {
            public VkExportMemoryAllocateInfoKHR(vulkan.VkExportMemoryAllocateInfo value) => this.Value = value;
            
            public vulkan.VkExportMemoryAllocateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkExportMemoryAllocateInfoKHR other && Equals(other);
            
            public bool Equals(VkExportMemoryAllocateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExportMemoryAllocateInfo (vulkan.VkExportMemoryAllocateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExportMemoryAllocateInfoKHR (vulkan.VkExportMemoryAllocateInfo from) => new vulkan.VkExportMemoryAllocateInfoKHR(from);
            
            public static bool operator ==(VkExportMemoryAllocateInfoKHR left, VkExportMemoryAllocateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExportMemoryAllocateInfoKHR left, VkExportMemoryAllocateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetMemoryFdKHR : IEquatable<PFN_vkGetMemoryFdKHR>
        {
            public PFN_vkGetMemoryFdKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetFdInfoKHR*, int*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetFdInfoKHR*, int*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetMemoryFdKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetMemoryFdKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetFdInfoKHR*, int*, vulkan.VkResult> (vulkan.PFN_vkGetMemoryFdKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetMemoryFdKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetFdInfoKHR*, int*, vulkan.VkResult> from) => new vulkan.PFN_vkGetMemoryFdKHR(from);
            
            public static bool operator ==(PFN_vkGetMemoryFdKHR left, PFN_vkGetMemoryFdKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetMemoryFdKHR left, PFN_vkGetMemoryFdKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetMemoryFdPropertiesKHR : IEquatable<PFN_vkGetMemoryFdPropertiesKHR>
        {
            public PFN_vkGetMemoryFdPropertiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkExternalMemoryHandleTypeFlagBits, int, vulkan.VkMemoryFdPropertiesKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkExternalMemoryHandleTypeFlagBits, int, vulkan.VkMemoryFdPropertiesKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetMemoryFdPropertiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetMemoryFdPropertiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkExternalMemoryHandleTypeFlagBits, int, vulkan.VkMemoryFdPropertiesKHR*, vulkan.VkResult> (vulkan.PFN_vkGetMemoryFdPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetMemoryFdPropertiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkExternalMemoryHandleTypeFlagBits, int, vulkan.VkMemoryFdPropertiesKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetMemoryFdPropertiesKHR(from);
            
            public static bool operator ==(PFN_vkGetMemoryFdPropertiesKHR left, PFN_vkGetMemoryFdPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetMemoryFdPropertiesKHR left, PFN_vkGetMemoryFdPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalSemaphoreHandleTypeFlagsKHR : IEquatable<VkExternalSemaphoreHandleTypeFlagsKHR>
        {
            public VkExternalSemaphoreHandleTypeFlagsKHR(vulkan.VkExternalSemaphoreHandleTypeFlags value) => this.Value = value;
            
            public vulkan.VkExternalSemaphoreHandleTypeFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalSemaphoreHandleTypeFlagsKHR other && Equals(other);
            
            public bool Equals(VkExternalSemaphoreHandleTypeFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalSemaphoreHandleTypeFlags (vulkan.VkExternalSemaphoreHandleTypeFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalSemaphoreHandleTypeFlagsKHR (vulkan.VkExternalSemaphoreHandleTypeFlags from) => new vulkan.VkExternalSemaphoreHandleTypeFlagsKHR(from);
            
            public static bool operator ==(VkExternalSemaphoreHandleTypeFlagsKHR left, VkExternalSemaphoreHandleTypeFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalSemaphoreHandleTypeFlagsKHR left, VkExternalSemaphoreHandleTypeFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalSemaphoreHandleTypeFlagBitsKHR : IEquatable<VkExternalSemaphoreHandleTypeFlagBitsKHR>
        {
            public VkExternalSemaphoreHandleTypeFlagBitsKHR(vulkan.VkExternalSemaphoreHandleTypeFlagBits value) => this.Value = value;
            
            public vulkan.VkExternalSemaphoreHandleTypeFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalSemaphoreHandleTypeFlagBitsKHR other && Equals(other);
            
            public bool Equals(VkExternalSemaphoreHandleTypeFlagBitsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalSemaphoreHandleTypeFlagBits (vulkan.VkExternalSemaphoreHandleTypeFlagBitsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalSemaphoreHandleTypeFlagBitsKHR (vulkan.VkExternalSemaphoreHandleTypeFlagBits from) => new vulkan.VkExternalSemaphoreHandleTypeFlagBitsKHR(from);
            
            public static bool operator ==(VkExternalSemaphoreHandleTypeFlagBitsKHR left, VkExternalSemaphoreHandleTypeFlagBitsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalSemaphoreHandleTypeFlagBitsKHR left, VkExternalSemaphoreHandleTypeFlagBitsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalSemaphoreFeatureFlagsKHR : IEquatable<VkExternalSemaphoreFeatureFlagsKHR>
        {
            public VkExternalSemaphoreFeatureFlagsKHR(vulkan.VkExternalSemaphoreFeatureFlags value) => this.Value = value;
            
            public vulkan.VkExternalSemaphoreFeatureFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalSemaphoreFeatureFlagsKHR other && Equals(other);
            
            public bool Equals(VkExternalSemaphoreFeatureFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalSemaphoreFeatureFlags (vulkan.VkExternalSemaphoreFeatureFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalSemaphoreFeatureFlagsKHR (vulkan.VkExternalSemaphoreFeatureFlags from) => new vulkan.VkExternalSemaphoreFeatureFlagsKHR(from);
            
            public static bool operator ==(VkExternalSemaphoreFeatureFlagsKHR left, VkExternalSemaphoreFeatureFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalSemaphoreFeatureFlagsKHR left, VkExternalSemaphoreFeatureFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalSemaphoreFeatureFlagBitsKHR : IEquatable<VkExternalSemaphoreFeatureFlagBitsKHR>
        {
            public VkExternalSemaphoreFeatureFlagBitsKHR(vulkan.VkExternalSemaphoreFeatureFlagBits value) => this.Value = value;
            
            public vulkan.VkExternalSemaphoreFeatureFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalSemaphoreFeatureFlagBitsKHR other && Equals(other);
            
            public bool Equals(VkExternalSemaphoreFeatureFlagBitsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalSemaphoreFeatureFlagBits (vulkan.VkExternalSemaphoreFeatureFlagBitsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalSemaphoreFeatureFlagBitsKHR (vulkan.VkExternalSemaphoreFeatureFlagBits from) => new vulkan.VkExternalSemaphoreFeatureFlagBitsKHR(from);
            
            public static bool operator ==(VkExternalSemaphoreFeatureFlagBitsKHR left, VkExternalSemaphoreFeatureFlagBitsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalSemaphoreFeatureFlagBitsKHR left, VkExternalSemaphoreFeatureFlagBitsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceExternalSemaphoreInfoKHR : IEquatable<VkPhysicalDeviceExternalSemaphoreInfoKHR>
        {
            public VkPhysicalDeviceExternalSemaphoreInfoKHR(vulkan.VkPhysicalDeviceExternalSemaphoreInfo value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceExternalSemaphoreInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceExternalSemaphoreInfoKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceExternalSemaphoreInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceExternalSemaphoreInfo (vulkan.VkPhysicalDeviceExternalSemaphoreInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceExternalSemaphoreInfoKHR (vulkan.VkPhysicalDeviceExternalSemaphoreInfo from) => new vulkan.VkPhysicalDeviceExternalSemaphoreInfoKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceExternalSemaphoreInfoKHR left, VkPhysicalDeviceExternalSemaphoreInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceExternalSemaphoreInfoKHR left, VkPhysicalDeviceExternalSemaphoreInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalSemaphorePropertiesKHR : IEquatable<VkExternalSemaphorePropertiesKHR>
        {
            public VkExternalSemaphorePropertiesKHR(vulkan.VkExternalSemaphoreProperties value) => this.Value = value;
            
            public vulkan.VkExternalSemaphoreProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalSemaphorePropertiesKHR other && Equals(other);
            
            public bool Equals(VkExternalSemaphorePropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalSemaphoreProperties (vulkan.VkExternalSemaphorePropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalSemaphorePropertiesKHR (vulkan.VkExternalSemaphoreProperties from) => new vulkan.VkExternalSemaphorePropertiesKHR(from);
            
            public static bool operator ==(VkExternalSemaphorePropertiesKHR left, VkExternalSemaphorePropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalSemaphorePropertiesKHR left, VkExternalSemaphorePropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR : IEquatable<PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR>
        {
            public PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalSemaphoreInfo*, vulkan.VkExternalSemaphoreProperties*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalSemaphoreInfo*, vulkan.VkExternalSemaphoreProperties*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalSemaphoreInfo*, vulkan.VkExternalSemaphoreProperties*, void> (vulkan.PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalSemaphoreInfo*, vulkan.VkExternalSemaphoreProperties*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR left, PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR left, PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSemaphoreImportFlagsKHR : IEquatable<VkSemaphoreImportFlagsKHR>
        {
            public VkSemaphoreImportFlagsKHR(vulkan.VkSemaphoreImportFlags value) => this.Value = value;
            
            public vulkan.VkSemaphoreImportFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkSemaphoreImportFlagsKHR other && Equals(other);
            
            public bool Equals(VkSemaphoreImportFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSemaphoreImportFlags (vulkan.VkSemaphoreImportFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSemaphoreImportFlagsKHR (vulkan.VkSemaphoreImportFlags from) => new vulkan.VkSemaphoreImportFlagsKHR(from);
            
            public static bool operator ==(VkSemaphoreImportFlagsKHR left, VkSemaphoreImportFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSemaphoreImportFlagsKHR left, VkSemaphoreImportFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSemaphoreImportFlagBitsKHR : IEquatable<VkSemaphoreImportFlagBitsKHR>
        {
            public VkSemaphoreImportFlagBitsKHR(vulkan.VkSemaphoreImportFlagBits value) => this.Value = value;
            
            public vulkan.VkSemaphoreImportFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkSemaphoreImportFlagBitsKHR other && Equals(other);
            
            public bool Equals(VkSemaphoreImportFlagBitsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSemaphoreImportFlagBits (vulkan.VkSemaphoreImportFlagBitsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSemaphoreImportFlagBitsKHR (vulkan.VkSemaphoreImportFlagBits from) => new vulkan.VkSemaphoreImportFlagBitsKHR(from);
            
            public static bool operator ==(VkSemaphoreImportFlagBitsKHR left, VkSemaphoreImportFlagBitsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSemaphoreImportFlagBitsKHR left, VkSemaphoreImportFlagBitsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExportSemaphoreCreateInfoKHR : IEquatable<VkExportSemaphoreCreateInfoKHR>
        {
            public VkExportSemaphoreCreateInfoKHR(vulkan.VkExportSemaphoreCreateInfo value) => this.Value = value;
            
            public vulkan.VkExportSemaphoreCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkExportSemaphoreCreateInfoKHR other && Equals(other);
            
            public bool Equals(VkExportSemaphoreCreateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExportSemaphoreCreateInfo (vulkan.VkExportSemaphoreCreateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExportSemaphoreCreateInfoKHR (vulkan.VkExportSemaphoreCreateInfo from) => new vulkan.VkExportSemaphoreCreateInfoKHR(from);
            
            public static bool operator ==(VkExportSemaphoreCreateInfoKHR left, VkExportSemaphoreCreateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExportSemaphoreCreateInfoKHR left, VkExportSemaphoreCreateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkImportSemaphoreFdKHR : IEquatable<PFN_vkImportSemaphoreFdKHR>
        {
            public PFN_vkImportSemaphoreFdKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportSemaphoreFdInfoKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportSemaphoreFdInfoKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkImportSemaphoreFdKHR other && Equals(other);
            
            public bool Equals(PFN_vkImportSemaphoreFdKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportSemaphoreFdInfoKHR*, vulkan.VkResult> (vulkan.PFN_vkImportSemaphoreFdKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkImportSemaphoreFdKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportSemaphoreFdInfoKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkImportSemaphoreFdKHR(from);
            
            public static bool operator ==(PFN_vkImportSemaphoreFdKHR left, PFN_vkImportSemaphoreFdKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkImportSemaphoreFdKHR left, PFN_vkImportSemaphoreFdKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetSemaphoreFdKHR : IEquatable<PFN_vkGetSemaphoreFdKHR>
        {
            public PFN_vkGetSemaphoreFdKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreGetFdInfoKHR*, int*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreGetFdInfoKHR*, int*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetSemaphoreFdKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetSemaphoreFdKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreGetFdInfoKHR*, int*, vulkan.VkResult> (vulkan.PFN_vkGetSemaphoreFdKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetSemaphoreFdKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreGetFdInfoKHR*, int*, vulkan.VkResult> from) => new vulkan.PFN_vkGetSemaphoreFdKHR(from);
            
            public static bool operator ==(PFN_vkGetSemaphoreFdKHR left, PFN_vkGetSemaphoreFdKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetSemaphoreFdKHR left, PFN_vkGetSemaphoreFdKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdPushDescriptorSetKHR : IEquatable<PFN_vkCmdPushDescriptorSetKHR>
        {
            public PFN_vkCmdPushDescriptorSetKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipelineLayout, uint, uint, vulkan.VkWriteDescriptorSet*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipelineLayout, uint, uint, vulkan.VkWriteDescriptorSet*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdPushDescriptorSetKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdPushDescriptorSetKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipelineLayout, uint, uint, vulkan.VkWriteDescriptorSet*, void> (vulkan.PFN_vkCmdPushDescriptorSetKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdPushDescriptorSetKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipelineLayout, uint, uint, vulkan.VkWriteDescriptorSet*, void> from) => new vulkan.PFN_vkCmdPushDescriptorSetKHR(from);
            
            public static bool operator ==(PFN_vkCmdPushDescriptorSetKHR left, PFN_vkCmdPushDescriptorSetKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdPushDescriptorSetKHR left, PFN_vkCmdPushDescriptorSetKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdPushDescriptorSetWithTemplateKHR : IEquatable<PFN_vkCmdPushDescriptorSetWithTemplateKHR>
        {
            public PFN_vkCmdPushDescriptorSetWithTemplateKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDescriptorUpdateTemplate, vulkan.VkPipelineLayout, uint, void*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDescriptorUpdateTemplate, vulkan.VkPipelineLayout, uint, void*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdPushDescriptorSetWithTemplateKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdPushDescriptorSetWithTemplateKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDescriptorUpdateTemplate, vulkan.VkPipelineLayout, uint, void*, void> (vulkan.PFN_vkCmdPushDescriptorSetWithTemplateKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdPushDescriptorSetWithTemplateKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDescriptorUpdateTemplate, vulkan.VkPipelineLayout, uint, void*, void> from) => new vulkan.PFN_vkCmdPushDescriptorSetWithTemplateKHR(from);
            
            public static bool operator ==(PFN_vkCmdPushDescriptorSetWithTemplateKHR left, PFN_vkCmdPushDescriptorSetWithTemplateKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdPushDescriptorSetWithTemplateKHR left, PFN_vkCmdPushDescriptorSetWithTemplateKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceShaderFloat16Int8FeaturesKHR : IEquatable<VkPhysicalDeviceShaderFloat16Int8FeaturesKHR>
        {
            public VkPhysicalDeviceShaderFloat16Int8FeaturesKHR(vulkan.VkPhysicalDeviceShaderFloat16Int8Features value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceShaderFloat16Int8Features Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceShaderFloat16Int8FeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceShaderFloat16Int8FeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderFloat16Int8Features (vulkan.VkPhysicalDeviceShaderFloat16Int8FeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderFloat16Int8FeaturesKHR (vulkan.VkPhysicalDeviceShaderFloat16Int8Features from) => new vulkan.VkPhysicalDeviceShaderFloat16Int8FeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceShaderFloat16Int8FeaturesKHR left, VkPhysicalDeviceShaderFloat16Int8FeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceShaderFloat16Int8FeaturesKHR left, VkPhysicalDeviceShaderFloat16Int8FeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceFloat16Int8FeaturesKHR : IEquatable<VkPhysicalDeviceFloat16Int8FeaturesKHR>
        {
            public VkPhysicalDeviceFloat16Int8FeaturesKHR(vulkan.VkPhysicalDeviceShaderFloat16Int8Features value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceShaderFloat16Int8Features Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceFloat16Int8FeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceFloat16Int8FeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderFloat16Int8Features (vulkan.VkPhysicalDeviceFloat16Int8FeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceFloat16Int8FeaturesKHR (vulkan.VkPhysicalDeviceShaderFloat16Int8Features from) => new vulkan.VkPhysicalDeviceFloat16Int8FeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceFloat16Int8FeaturesKHR left, VkPhysicalDeviceFloat16Int8FeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceFloat16Int8FeaturesKHR left, VkPhysicalDeviceFloat16Int8FeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDevice16BitStorageFeaturesKHR : IEquatable<VkPhysicalDevice16BitStorageFeaturesKHR>
        {
            public VkPhysicalDevice16BitStorageFeaturesKHR(vulkan.VkPhysicalDevice16BitStorageFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDevice16BitStorageFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDevice16BitStorageFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDevice16BitStorageFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDevice16BitStorageFeatures (vulkan.VkPhysicalDevice16BitStorageFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDevice16BitStorageFeaturesKHR (vulkan.VkPhysicalDevice16BitStorageFeatures from) => new vulkan.VkPhysicalDevice16BitStorageFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDevice16BitStorageFeaturesKHR left, VkPhysicalDevice16BitStorageFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDevice16BitStorageFeaturesKHR left, VkPhysicalDevice16BitStorageFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorUpdateTemplateKHR : IEquatable<VkDescriptorUpdateTemplateKHR>
        {
            public VkDescriptorUpdateTemplateKHR(vulkan.VkDescriptorUpdateTemplate value) => this.Value = value;
            
            public vulkan.VkDescriptorUpdateTemplate Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorUpdateTemplateKHR other && Equals(other);
            
            public bool Equals(VkDescriptorUpdateTemplateKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDescriptorUpdateTemplate (vulkan.VkDescriptorUpdateTemplateKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorUpdateTemplateKHR (vulkan.VkDescriptorUpdateTemplate from) => new vulkan.VkDescriptorUpdateTemplateKHR(from);
            
            public static bool operator ==(VkDescriptorUpdateTemplateKHR left, VkDescriptorUpdateTemplateKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorUpdateTemplateKHR left, VkDescriptorUpdateTemplateKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorUpdateTemplateTypeKHR : IEquatable<VkDescriptorUpdateTemplateTypeKHR>
        {
            public VkDescriptorUpdateTemplateTypeKHR(vulkan.VkDescriptorUpdateTemplateType value) => this.Value = value;
            
            public vulkan.VkDescriptorUpdateTemplateType Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorUpdateTemplateTypeKHR other && Equals(other);
            
            public bool Equals(VkDescriptorUpdateTemplateTypeKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDescriptorUpdateTemplateType (vulkan.VkDescriptorUpdateTemplateTypeKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorUpdateTemplateTypeKHR (vulkan.VkDescriptorUpdateTemplateType from) => new vulkan.VkDescriptorUpdateTemplateTypeKHR(from);
            
            public static bool operator ==(VkDescriptorUpdateTemplateTypeKHR left, VkDescriptorUpdateTemplateTypeKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorUpdateTemplateTypeKHR left, VkDescriptorUpdateTemplateTypeKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorUpdateTemplateCreateFlagsKHR : IEquatable<VkDescriptorUpdateTemplateCreateFlagsKHR>
        {
            public VkDescriptorUpdateTemplateCreateFlagsKHR(vulkan.VkDescriptorUpdateTemplateCreateFlags value) => this.Value = value;
            
            public vulkan.VkDescriptorUpdateTemplateCreateFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorUpdateTemplateCreateFlagsKHR other && Equals(other);
            
            public bool Equals(VkDescriptorUpdateTemplateCreateFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDescriptorUpdateTemplateCreateFlags (vulkan.VkDescriptorUpdateTemplateCreateFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorUpdateTemplateCreateFlagsKHR (vulkan.VkDescriptorUpdateTemplateCreateFlags from) => new vulkan.VkDescriptorUpdateTemplateCreateFlagsKHR(from);
            
            public static bool operator ==(VkDescriptorUpdateTemplateCreateFlagsKHR left, VkDescriptorUpdateTemplateCreateFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorUpdateTemplateCreateFlagsKHR left, VkDescriptorUpdateTemplateCreateFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorUpdateTemplateEntryKHR : IEquatable<VkDescriptorUpdateTemplateEntryKHR>
        {
            public VkDescriptorUpdateTemplateEntryKHR(vulkan.VkDescriptorUpdateTemplateEntry value) => this.Value = value;
            
            public vulkan.VkDescriptorUpdateTemplateEntry Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorUpdateTemplateEntryKHR other && Equals(other);
            
            public bool Equals(VkDescriptorUpdateTemplateEntryKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDescriptorUpdateTemplateEntry (vulkan.VkDescriptorUpdateTemplateEntryKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorUpdateTemplateEntryKHR (vulkan.VkDescriptorUpdateTemplateEntry from) => new vulkan.VkDescriptorUpdateTemplateEntryKHR(from);
            
            public static bool operator ==(VkDescriptorUpdateTemplateEntryKHR left, VkDescriptorUpdateTemplateEntryKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorUpdateTemplateEntryKHR left, VkDescriptorUpdateTemplateEntryKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorUpdateTemplateCreateInfoKHR : IEquatable<VkDescriptorUpdateTemplateCreateInfoKHR>
        {
            public VkDescriptorUpdateTemplateCreateInfoKHR(vulkan.VkDescriptorUpdateTemplateCreateInfo value) => this.Value = value;
            
            public vulkan.VkDescriptorUpdateTemplateCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorUpdateTemplateCreateInfoKHR other && Equals(other);
            
            public bool Equals(VkDescriptorUpdateTemplateCreateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDescriptorUpdateTemplateCreateInfo (vulkan.VkDescriptorUpdateTemplateCreateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorUpdateTemplateCreateInfoKHR (vulkan.VkDescriptorUpdateTemplateCreateInfo from) => new vulkan.VkDescriptorUpdateTemplateCreateInfoKHR(from);
            
            public static bool operator ==(VkDescriptorUpdateTemplateCreateInfoKHR left, VkDescriptorUpdateTemplateCreateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorUpdateTemplateCreateInfoKHR left, VkDescriptorUpdateTemplateCreateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateDescriptorUpdateTemplateKHR : IEquatable<PFN_vkCreateDescriptorUpdateTemplateKHR>
        {
            public PFN_vkCreateDescriptorUpdateTemplateKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorUpdateTemplateCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDescriptorUpdateTemplate*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorUpdateTemplateCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDescriptorUpdateTemplate*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateDescriptorUpdateTemplateKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateDescriptorUpdateTemplateKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorUpdateTemplateCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDescriptorUpdateTemplate*, vulkan.VkResult> (vulkan.PFN_vkCreateDescriptorUpdateTemplateKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateDescriptorUpdateTemplateKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorUpdateTemplateCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkDescriptorUpdateTemplate*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateDescriptorUpdateTemplateKHR(from);
            
            public static bool operator ==(PFN_vkCreateDescriptorUpdateTemplateKHR left, PFN_vkCreateDescriptorUpdateTemplateKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateDescriptorUpdateTemplateKHR left, PFN_vkCreateDescriptorUpdateTemplateKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyDescriptorUpdateTemplateKHR : IEquatable<PFN_vkDestroyDescriptorUpdateTemplateKHR>
        {
            public PFN_vkDestroyDescriptorUpdateTemplateKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorUpdateTemplate, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorUpdateTemplate, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyDescriptorUpdateTemplateKHR other && Equals(other);
            
            public bool Equals(PFN_vkDestroyDescriptorUpdateTemplateKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorUpdateTemplate, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyDescriptorUpdateTemplateKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyDescriptorUpdateTemplateKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorUpdateTemplate, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyDescriptorUpdateTemplateKHR(from);
            
            public static bool operator ==(PFN_vkDestroyDescriptorUpdateTemplateKHR left, PFN_vkDestroyDescriptorUpdateTemplateKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyDescriptorUpdateTemplateKHR left, PFN_vkDestroyDescriptorUpdateTemplateKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkUpdateDescriptorSetWithTemplateKHR : IEquatable<PFN_vkUpdateDescriptorSetWithTemplateKHR>
        {
            public PFN_vkUpdateDescriptorSetWithTemplateKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSet, vulkan.VkDescriptorUpdateTemplate, void*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSet, vulkan.VkDescriptorUpdateTemplate, void*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkUpdateDescriptorSetWithTemplateKHR other && Equals(other);
            
            public bool Equals(PFN_vkUpdateDescriptorSetWithTemplateKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSet, vulkan.VkDescriptorUpdateTemplate, void*, void> (vulkan.PFN_vkUpdateDescriptorSetWithTemplateKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkUpdateDescriptorSetWithTemplateKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSet, vulkan.VkDescriptorUpdateTemplate, void*, void> from) => new vulkan.PFN_vkUpdateDescriptorSetWithTemplateKHR(from);
            
            public static bool operator ==(PFN_vkUpdateDescriptorSetWithTemplateKHR left, PFN_vkUpdateDescriptorSetWithTemplateKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkUpdateDescriptorSetWithTemplateKHR left, PFN_vkUpdateDescriptorSetWithTemplateKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceImagelessFramebufferFeaturesKHR : IEquatable<VkPhysicalDeviceImagelessFramebufferFeaturesKHR>
        {
            public VkPhysicalDeviceImagelessFramebufferFeaturesKHR(vulkan.VkPhysicalDeviceImagelessFramebufferFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceImagelessFramebufferFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceImagelessFramebufferFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceImagelessFramebufferFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceImagelessFramebufferFeatures (vulkan.VkPhysicalDeviceImagelessFramebufferFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceImagelessFramebufferFeaturesKHR (vulkan.VkPhysicalDeviceImagelessFramebufferFeatures from) => new vulkan.VkPhysicalDeviceImagelessFramebufferFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceImagelessFramebufferFeaturesKHR left, VkPhysicalDeviceImagelessFramebufferFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceImagelessFramebufferFeaturesKHR left, VkPhysicalDeviceImagelessFramebufferFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkFramebufferAttachmentsCreateInfoKHR : IEquatable<VkFramebufferAttachmentsCreateInfoKHR>
        {
            public VkFramebufferAttachmentsCreateInfoKHR(vulkan.VkFramebufferAttachmentsCreateInfo value) => this.Value = value;
            
            public vulkan.VkFramebufferAttachmentsCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkFramebufferAttachmentsCreateInfoKHR other && Equals(other);
            
            public bool Equals(VkFramebufferAttachmentsCreateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFramebufferAttachmentsCreateInfo (vulkan.VkFramebufferAttachmentsCreateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkFramebufferAttachmentsCreateInfoKHR (vulkan.VkFramebufferAttachmentsCreateInfo from) => new vulkan.VkFramebufferAttachmentsCreateInfoKHR(from);
            
            public static bool operator ==(VkFramebufferAttachmentsCreateInfoKHR left, VkFramebufferAttachmentsCreateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkFramebufferAttachmentsCreateInfoKHR left, VkFramebufferAttachmentsCreateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkFramebufferAttachmentImageInfoKHR : IEquatable<VkFramebufferAttachmentImageInfoKHR>
        {
            public VkFramebufferAttachmentImageInfoKHR(vulkan.VkFramebufferAttachmentImageInfo value) => this.Value = value;
            
            public vulkan.VkFramebufferAttachmentImageInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkFramebufferAttachmentImageInfoKHR other && Equals(other);
            
            public bool Equals(VkFramebufferAttachmentImageInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFramebufferAttachmentImageInfo (vulkan.VkFramebufferAttachmentImageInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkFramebufferAttachmentImageInfoKHR (vulkan.VkFramebufferAttachmentImageInfo from) => new vulkan.VkFramebufferAttachmentImageInfoKHR(from);
            
            public static bool operator ==(VkFramebufferAttachmentImageInfoKHR left, VkFramebufferAttachmentImageInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkFramebufferAttachmentImageInfoKHR left, VkFramebufferAttachmentImageInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkRenderPassAttachmentBeginInfoKHR : IEquatable<VkRenderPassAttachmentBeginInfoKHR>
        {
            public VkRenderPassAttachmentBeginInfoKHR(vulkan.VkRenderPassAttachmentBeginInfo value) => this.Value = value;
            
            public vulkan.VkRenderPassAttachmentBeginInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkRenderPassAttachmentBeginInfoKHR other && Equals(other);
            
            public bool Equals(VkRenderPassAttachmentBeginInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkRenderPassAttachmentBeginInfo (vulkan.VkRenderPassAttachmentBeginInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkRenderPassAttachmentBeginInfoKHR (vulkan.VkRenderPassAttachmentBeginInfo from) => new vulkan.VkRenderPassAttachmentBeginInfoKHR(from);
            
            public static bool operator ==(VkRenderPassAttachmentBeginInfoKHR left, VkRenderPassAttachmentBeginInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkRenderPassAttachmentBeginInfoKHR left, VkRenderPassAttachmentBeginInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkRenderPassCreateInfo2KHR : IEquatable<VkRenderPassCreateInfo2KHR>
        {
            public VkRenderPassCreateInfo2KHR(vulkan.VkRenderPassCreateInfo2 value) => this.Value = value;
            
            public vulkan.VkRenderPassCreateInfo2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkRenderPassCreateInfo2KHR other && Equals(other);
            
            public bool Equals(VkRenderPassCreateInfo2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkRenderPassCreateInfo2 (vulkan.VkRenderPassCreateInfo2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkRenderPassCreateInfo2KHR (vulkan.VkRenderPassCreateInfo2 from) => new vulkan.VkRenderPassCreateInfo2KHR(from);
            
            public static bool operator ==(VkRenderPassCreateInfo2KHR left, VkRenderPassCreateInfo2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkRenderPassCreateInfo2KHR left, VkRenderPassCreateInfo2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkAttachmentDescription2KHR : IEquatable<VkAttachmentDescription2KHR>
        {
            public VkAttachmentDescription2KHR(vulkan.VkAttachmentDescription2 value) => this.Value = value;
            
            public vulkan.VkAttachmentDescription2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkAttachmentDescription2KHR other && Equals(other);
            
            public bool Equals(VkAttachmentDescription2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkAttachmentDescription2 (vulkan.VkAttachmentDescription2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkAttachmentDescription2KHR (vulkan.VkAttachmentDescription2 from) => new vulkan.VkAttachmentDescription2KHR(from);
            
            public static bool operator ==(VkAttachmentDescription2KHR left, VkAttachmentDescription2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkAttachmentDescription2KHR left, VkAttachmentDescription2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkAttachmentReference2KHR : IEquatable<VkAttachmentReference2KHR>
        {
            public VkAttachmentReference2KHR(vulkan.VkAttachmentReference2 value) => this.Value = value;
            
            public vulkan.VkAttachmentReference2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkAttachmentReference2KHR other && Equals(other);
            
            public bool Equals(VkAttachmentReference2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkAttachmentReference2 (vulkan.VkAttachmentReference2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkAttachmentReference2KHR (vulkan.VkAttachmentReference2 from) => new vulkan.VkAttachmentReference2KHR(from);
            
            public static bool operator ==(VkAttachmentReference2KHR left, VkAttachmentReference2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkAttachmentReference2KHR left, VkAttachmentReference2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSubpassDescription2KHR : IEquatable<VkSubpassDescription2KHR>
        {
            public VkSubpassDescription2KHR(vulkan.VkSubpassDescription2 value) => this.Value = value;
            
            public vulkan.VkSubpassDescription2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkSubpassDescription2KHR other && Equals(other);
            
            public bool Equals(VkSubpassDescription2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSubpassDescription2 (vulkan.VkSubpassDescription2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkSubpassDescription2KHR (vulkan.VkSubpassDescription2 from) => new vulkan.VkSubpassDescription2KHR(from);
            
            public static bool operator ==(VkSubpassDescription2KHR left, VkSubpassDescription2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkSubpassDescription2KHR left, VkSubpassDescription2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSubpassDependency2KHR : IEquatable<VkSubpassDependency2KHR>
        {
            public VkSubpassDependency2KHR(vulkan.VkSubpassDependency2 value) => this.Value = value;
            
            public vulkan.VkSubpassDependency2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkSubpassDependency2KHR other && Equals(other);
            
            public bool Equals(VkSubpassDependency2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSubpassDependency2 (vulkan.VkSubpassDependency2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkSubpassDependency2KHR (vulkan.VkSubpassDependency2 from) => new vulkan.VkSubpassDependency2KHR(from);
            
            public static bool operator ==(VkSubpassDependency2KHR left, VkSubpassDependency2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkSubpassDependency2KHR left, VkSubpassDependency2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSubpassBeginInfoKHR : IEquatable<VkSubpassBeginInfoKHR>
        {
            public VkSubpassBeginInfoKHR(vulkan.VkSubpassBeginInfo value) => this.Value = value;
            
            public vulkan.VkSubpassBeginInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkSubpassBeginInfoKHR other && Equals(other);
            
            public bool Equals(VkSubpassBeginInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSubpassBeginInfo (vulkan.VkSubpassBeginInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSubpassBeginInfoKHR (vulkan.VkSubpassBeginInfo from) => new vulkan.VkSubpassBeginInfoKHR(from);
            
            public static bool operator ==(VkSubpassBeginInfoKHR left, VkSubpassBeginInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSubpassBeginInfoKHR left, VkSubpassBeginInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSubpassEndInfoKHR : IEquatable<VkSubpassEndInfoKHR>
        {
            public VkSubpassEndInfoKHR(vulkan.VkSubpassEndInfo value) => this.Value = value;
            
            public vulkan.VkSubpassEndInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkSubpassEndInfoKHR other && Equals(other);
            
            public bool Equals(VkSubpassEndInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSubpassEndInfo (vulkan.VkSubpassEndInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSubpassEndInfoKHR (vulkan.VkSubpassEndInfo from) => new vulkan.VkSubpassEndInfoKHR(from);
            
            public static bool operator ==(VkSubpassEndInfoKHR left, VkSubpassEndInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSubpassEndInfoKHR left, VkSubpassEndInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateRenderPass2KHR : IEquatable<PFN_vkCreateRenderPass2KHR>
        {
            public PFN_vkCreateRenderPass2KHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPassCreateInfo2*, vulkan.VkAllocationCallbacks*, vulkan.VkRenderPass*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPassCreateInfo2*, vulkan.VkAllocationCallbacks*, vulkan.VkRenderPass*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateRenderPass2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateRenderPass2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPassCreateInfo2*, vulkan.VkAllocationCallbacks*, vulkan.VkRenderPass*, vulkan.VkResult> (vulkan.PFN_vkCreateRenderPass2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateRenderPass2KHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPassCreateInfo2*, vulkan.VkAllocationCallbacks*, vulkan.VkRenderPass*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateRenderPass2KHR(from);
            
            public static bool operator ==(PFN_vkCreateRenderPass2KHR left, PFN_vkCreateRenderPass2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateRenderPass2KHR left, PFN_vkCreateRenderPass2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBeginRenderPass2KHR : IEquatable<PFN_vkCmdBeginRenderPass2KHR>
        {
            public PFN_vkCmdBeginRenderPass2KHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderPassBeginInfo*, vulkan.VkSubpassBeginInfo*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderPassBeginInfo*, vulkan.VkSubpassBeginInfo*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBeginRenderPass2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdBeginRenderPass2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderPassBeginInfo*, vulkan.VkSubpassBeginInfo*, void> (vulkan.PFN_vkCmdBeginRenderPass2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBeginRenderPass2KHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkRenderPassBeginInfo*, vulkan.VkSubpassBeginInfo*, void> from) => new vulkan.PFN_vkCmdBeginRenderPass2KHR(from);
            
            public static bool operator ==(PFN_vkCmdBeginRenderPass2KHR left, PFN_vkCmdBeginRenderPass2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBeginRenderPass2KHR left, PFN_vkCmdBeginRenderPass2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdNextSubpass2KHR : IEquatable<PFN_vkCmdNextSubpass2KHR>
        {
            public PFN_vkCmdNextSubpass2KHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassBeginInfo*, vulkan.VkSubpassEndInfo*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassBeginInfo*, vulkan.VkSubpassEndInfo*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdNextSubpass2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdNextSubpass2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassBeginInfo*, vulkan.VkSubpassEndInfo*, void> (vulkan.PFN_vkCmdNextSubpass2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdNextSubpass2KHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassBeginInfo*, vulkan.VkSubpassEndInfo*, void> from) => new vulkan.PFN_vkCmdNextSubpass2KHR(from);
            
            public static bool operator ==(PFN_vkCmdNextSubpass2KHR left, PFN_vkCmdNextSubpass2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdNextSubpass2KHR left, PFN_vkCmdNextSubpass2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdEndRenderPass2KHR : IEquatable<PFN_vkCmdEndRenderPass2KHR>
        {
            public PFN_vkCmdEndRenderPass2KHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassEndInfo*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassEndInfo*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdEndRenderPass2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdEndRenderPass2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassEndInfo*, void> (vulkan.PFN_vkCmdEndRenderPass2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdEndRenderPass2KHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSubpassEndInfo*, void> from) => new vulkan.PFN_vkCmdEndRenderPass2KHR(from);
            
            public static bool operator ==(PFN_vkCmdEndRenderPass2KHR left, PFN_vkCmdEndRenderPass2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdEndRenderPass2KHR left, PFN_vkCmdEndRenderPass2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetSwapchainStatusKHR : IEquatable<PFN_vkGetSwapchainStatusKHR>
        {
            public PFN_vkGetSwapchainStatusKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetSwapchainStatusKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetSwapchainStatusKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkResult> (vulkan.PFN_vkGetSwapchainStatusKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetSwapchainStatusKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkResult> from) => new vulkan.PFN_vkGetSwapchainStatusKHR(from);
            
            public static bool operator ==(PFN_vkGetSwapchainStatusKHR left, PFN_vkGetSwapchainStatusKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetSwapchainStatusKHR left, PFN_vkGetSwapchainStatusKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalFenceHandleTypeFlagsKHR : IEquatable<VkExternalFenceHandleTypeFlagsKHR>
        {
            public VkExternalFenceHandleTypeFlagsKHR(vulkan.VkExternalFenceHandleTypeFlags value) => this.Value = value;
            
            public vulkan.VkExternalFenceHandleTypeFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalFenceHandleTypeFlagsKHR other && Equals(other);
            
            public bool Equals(VkExternalFenceHandleTypeFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalFenceHandleTypeFlags (vulkan.VkExternalFenceHandleTypeFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalFenceHandleTypeFlagsKHR (vulkan.VkExternalFenceHandleTypeFlags from) => new vulkan.VkExternalFenceHandleTypeFlagsKHR(from);
            
            public static bool operator ==(VkExternalFenceHandleTypeFlagsKHR left, VkExternalFenceHandleTypeFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalFenceHandleTypeFlagsKHR left, VkExternalFenceHandleTypeFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalFenceHandleTypeFlagBitsKHR : IEquatable<VkExternalFenceHandleTypeFlagBitsKHR>
        {
            public VkExternalFenceHandleTypeFlagBitsKHR(vulkan.VkExternalFenceHandleTypeFlagBits value) => this.Value = value;
            
            public vulkan.VkExternalFenceHandleTypeFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalFenceHandleTypeFlagBitsKHR other && Equals(other);
            
            public bool Equals(VkExternalFenceHandleTypeFlagBitsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalFenceHandleTypeFlagBits (vulkan.VkExternalFenceHandleTypeFlagBitsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalFenceHandleTypeFlagBitsKHR (vulkan.VkExternalFenceHandleTypeFlagBits from) => new vulkan.VkExternalFenceHandleTypeFlagBitsKHR(from);
            
            public static bool operator ==(VkExternalFenceHandleTypeFlagBitsKHR left, VkExternalFenceHandleTypeFlagBitsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalFenceHandleTypeFlagBitsKHR left, VkExternalFenceHandleTypeFlagBitsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalFenceFeatureFlagsKHR : IEquatable<VkExternalFenceFeatureFlagsKHR>
        {
            public VkExternalFenceFeatureFlagsKHR(vulkan.VkExternalFenceFeatureFlags value) => this.Value = value;
            
            public vulkan.VkExternalFenceFeatureFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalFenceFeatureFlagsKHR other && Equals(other);
            
            public bool Equals(VkExternalFenceFeatureFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalFenceFeatureFlags (vulkan.VkExternalFenceFeatureFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalFenceFeatureFlagsKHR (vulkan.VkExternalFenceFeatureFlags from) => new vulkan.VkExternalFenceFeatureFlagsKHR(from);
            
            public static bool operator ==(VkExternalFenceFeatureFlagsKHR left, VkExternalFenceFeatureFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalFenceFeatureFlagsKHR left, VkExternalFenceFeatureFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalFenceFeatureFlagBitsKHR : IEquatable<VkExternalFenceFeatureFlagBitsKHR>
        {
            public VkExternalFenceFeatureFlagBitsKHR(vulkan.VkExternalFenceFeatureFlagBits value) => this.Value = value;
            
            public vulkan.VkExternalFenceFeatureFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalFenceFeatureFlagBitsKHR other && Equals(other);
            
            public bool Equals(VkExternalFenceFeatureFlagBitsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalFenceFeatureFlagBits (vulkan.VkExternalFenceFeatureFlagBitsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalFenceFeatureFlagBitsKHR (vulkan.VkExternalFenceFeatureFlagBits from) => new vulkan.VkExternalFenceFeatureFlagBitsKHR(from);
            
            public static bool operator ==(VkExternalFenceFeatureFlagBitsKHR left, VkExternalFenceFeatureFlagBitsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalFenceFeatureFlagBitsKHR left, VkExternalFenceFeatureFlagBitsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceExternalFenceInfoKHR : IEquatable<VkPhysicalDeviceExternalFenceInfoKHR>
        {
            public VkPhysicalDeviceExternalFenceInfoKHR(vulkan.VkPhysicalDeviceExternalFenceInfo value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceExternalFenceInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceExternalFenceInfoKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceExternalFenceInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceExternalFenceInfo (vulkan.VkPhysicalDeviceExternalFenceInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceExternalFenceInfoKHR (vulkan.VkPhysicalDeviceExternalFenceInfo from) => new vulkan.VkPhysicalDeviceExternalFenceInfoKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceExternalFenceInfoKHR left, VkPhysicalDeviceExternalFenceInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceExternalFenceInfoKHR left, VkPhysicalDeviceExternalFenceInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExternalFencePropertiesKHR : IEquatable<VkExternalFencePropertiesKHR>
        {
            public VkExternalFencePropertiesKHR(vulkan.VkExternalFenceProperties value) => this.Value = value;
            
            public vulkan.VkExternalFenceProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkExternalFencePropertiesKHR other && Equals(other);
            
            public bool Equals(VkExternalFencePropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExternalFenceProperties (vulkan.VkExternalFencePropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExternalFencePropertiesKHR (vulkan.VkExternalFenceProperties from) => new vulkan.VkExternalFencePropertiesKHR(from);
            
            public static bool operator ==(VkExternalFencePropertiesKHR left, VkExternalFencePropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExternalFencePropertiesKHR left, VkExternalFencePropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR : IEquatable<PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR>
        {
            public PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalFenceInfo*, vulkan.VkExternalFenceProperties*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalFenceInfo*, vulkan.VkExternalFenceProperties*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalFenceInfo*, vulkan.VkExternalFenceProperties*, void> (vulkan.PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceExternalFenceInfo*, vulkan.VkExternalFenceProperties*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR left, PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR left, PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkFenceImportFlagsKHR : IEquatable<VkFenceImportFlagsKHR>
        {
            public VkFenceImportFlagsKHR(vulkan.VkFenceImportFlags value) => this.Value = value;
            
            public vulkan.VkFenceImportFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkFenceImportFlagsKHR other && Equals(other);
            
            public bool Equals(VkFenceImportFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFenceImportFlags (vulkan.VkFenceImportFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkFenceImportFlagsKHR (vulkan.VkFenceImportFlags from) => new vulkan.VkFenceImportFlagsKHR(from);
            
            public static bool operator ==(VkFenceImportFlagsKHR left, VkFenceImportFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkFenceImportFlagsKHR left, VkFenceImportFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkFenceImportFlagBitsKHR : IEquatable<VkFenceImportFlagBitsKHR>
        {
            public VkFenceImportFlagBitsKHR(vulkan.VkFenceImportFlagBits value) => this.Value = value;
            
            public vulkan.VkFenceImportFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkFenceImportFlagBitsKHR other && Equals(other);
            
            public bool Equals(VkFenceImportFlagBitsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFenceImportFlagBits (vulkan.VkFenceImportFlagBitsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkFenceImportFlagBitsKHR (vulkan.VkFenceImportFlagBits from) => new vulkan.VkFenceImportFlagBitsKHR(from);
            
            public static bool operator ==(VkFenceImportFlagBitsKHR left, VkFenceImportFlagBitsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkFenceImportFlagBitsKHR left, VkFenceImportFlagBitsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkExportFenceCreateInfoKHR : IEquatable<VkExportFenceCreateInfoKHR>
        {
            public VkExportFenceCreateInfoKHR(vulkan.VkExportFenceCreateInfo value) => this.Value = value;
            
            public vulkan.VkExportFenceCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkExportFenceCreateInfoKHR other && Equals(other);
            
            public bool Equals(VkExportFenceCreateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkExportFenceCreateInfo (vulkan.VkExportFenceCreateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkExportFenceCreateInfoKHR (vulkan.VkExportFenceCreateInfo from) => new vulkan.VkExportFenceCreateInfoKHR(from);
            
            public static bool operator ==(VkExportFenceCreateInfoKHR left, VkExportFenceCreateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkExportFenceCreateInfoKHR left, VkExportFenceCreateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkImportFenceFdKHR : IEquatable<PFN_vkImportFenceFdKHR>
        {
            public PFN_vkImportFenceFdKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportFenceFdInfoKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportFenceFdInfoKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkImportFenceFdKHR other && Equals(other);
            
            public bool Equals(PFN_vkImportFenceFdKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportFenceFdInfoKHR*, vulkan.VkResult> (vulkan.PFN_vkImportFenceFdKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkImportFenceFdKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportFenceFdInfoKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkImportFenceFdKHR(from);
            
            public static bool operator ==(PFN_vkImportFenceFdKHR left, PFN_vkImportFenceFdKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkImportFenceFdKHR left, PFN_vkImportFenceFdKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetFenceFdKHR : IEquatable<PFN_vkGetFenceFdKHR>
        {
            public PFN_vkGetFenceFdKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFenceGetFdInfoKHR*, int*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFenceGetFdInfoKHR*, int*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetFenceFdKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetFenceFdKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFenceGetFdInfoKHR*, int*, vulkan.VkResult> (vulkan.PFN_vkGetFenceFdKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetFenceFdKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFenceGetFdInfoKHR*, int*, vulkan.VkResult> from) => new vulkan.PFN_vkGetFenceFdKHR(from);
            
            public static bool operator ==(PFN_vkGetFenceFdKHR left, PFN_vkGetFenceFdKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetFenceFdKHR left, PFN_vkGetFenceFdKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR : IEquatable<PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR>
        {
            public PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, uint*, vulkan.VkPerformanceCounterKHR*, vulkan.VkPerformanceCounterDescriptionKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, uint*, vulkan.VkPerformanceCounterKHR*, vulkan.VkPerformanceCounterDescriptionKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR other && Equals(other);
            
            public bool Equals(PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, uint*, vulkan.VkPerformanceCounterKHR*, vulkan.VkPerformanceCounterDescriptionKHR*, vulkan.VkResult> (vulkan.PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, uint*, vulkan.VkPerformanceCounterKHR*, vulkan.VkPerformanceCounterDescriptionKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(from);
            
            public static bool operator ==(PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR left, PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR left, PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR : IEquatable<PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR>
        {
            public PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkQueryPoolPerformanceCreateInfoKHR*, uint*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkQueryPoolPerformanceCreateInfoKHR*, uint*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkQueryPoolPerformanceCreateInfoKHR*, uint*, void> (vulkan.PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkQueryPoolPerformanceCreateInfoKHR*, uint*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR left, PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR left, PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkAcquireProfilingLockKHR : IEquatable<PFN_vkAcquireProfilingLockKHR>
        {
            public PFN_vkAcquireProfilingLockKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAcquireProfilingLockInfoKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAcquireProfilingLockInfoKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkAcquireProfilingLockKHR other && Equals(other);
            
            public bool Equals(PFN_vkAcquireProfilingLockKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAcquireProfilingLockInfoKHR*, vulkan.VkResult> (vulkan.PFN_vkAcquireProfilingLockKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkAcquireProfilingLockKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAcquireProfilingLockInfoKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkAcquireProfilingLockKHR(from);
            
            public static bool operator ==(PFN_vkAcquireProfilingLockKHR left, PFN_vkAcquireProfilingLockKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkAcquireProfilingLockKHR left, PFN_vkAcquireProfilingLockKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkReleaseProfilingLockKHR : IEquatable<PFN_vkReleaseProfilingLockKHR>
        {
            public PFN_vkReleaseProfilingLockKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkReleaseProfilingLockKHR other && Equals(other);
            
            public bool Equals(PFN_vkReleaseProfilingLockKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, void> (vulkan.PFN_vkReleaseProfilingLockKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkReleaseProfilingLockKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, void> from) => new vulkan.PFN_vkReleaseProfilingLockKHR(from);
            
            public static bool operator ==(PFN_vkReleaseProfilingLockKHR left, PFN_vkReleaseProfilingLockKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkReleaseProfilingLockKHR left, PFN_vkReleaseProfilingLockKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPointClippingBehaviorKHR : IEquatable<VkPointClippingBehaviorKHR>
        {
            public VkPointClippingBehaviorKHR(vulkan.VkPointClippingBehavior value) => this.Value = value;
            
            public vulkan.VkPointClippingBehavior Value { get; }
            
            public override bool Equals(object obj) => obj is VkPointClippingBehaviorKHR other && Equals(other);
            
            public bool Equals(VkPointClippingBehaviorKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPointClippingBehavior (vulkan.VkPointClippingBehaviorKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPointClippingBehaviorKHR (vulkan.VkPointClippingBehavior from) => new vulkan.VkPointClippingBehaviorKHR(from);
            
            public static bool operator ==(VkPointClippingBehaviorKHR left, VkPointClippingBehaviorKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPointClippingBehaviorKHR left, VkPointClippingBehaviorKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkTessellationDomainOriginKHR : IEquatable<VkTessellationDomainOriginKHR>
        {
            public VkTessellationDomainOriginKHR(vulkan.VkTessellationDomainOrigin value) => this.Value = value;
            
            public vulkan.VkTessellationDomainOrigin Value { get; }
            
            public override bool Equals(object obj) => obj is VkTessellationDomainOriginKHR other && Equals(other);
            
            public bool Equals(VkTessellationDomainOriginKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkTessellationDomainOrigin (vulkan.VkTessellationDomainOriginKHR from) => from.Value;
            
            public static implicit operator vulkan.VkTessellationDomainOriginKHR (vulkan.VkTessellationDomainOrigin from) => new vulkan.VkTessellationDomainOriginKHR(from);
            
            public static bool operator ==(VkTessellationDomainOriginKHR left, VkTessellationDomainOriginKHR right) => left.Equals(right);
            
            public static bool operator !=(VkTessellationDomainOriginKHR left, VkTessellationDomainOriginKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDevicePointClippingPropertiesKHR : IEquatable<VkPhysicalDevicePointClippingPropertiesKHR>
        {
            public VkPhysicalDevicePointClippingPropertiesKHR(vulkan.VkPhysicalDevicePointClippingProperties value) => this.Value = value;
            
            public vulkan.VkPhysicalDevicePointClippingProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDevicePointClippingPropertiesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDevicePointClippingPropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDevicePointClippingProperties (vulkan.VkPhysicalDevicePointClippingPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDevicePointClippingPropertiesKHR (vulkan.VkPhysicalDevicePointClippingProperties from) => new vulkan.VkPhysicalDevicePointClippingPropertiesKHR(from);
            
            public static bool operator ==(VkPhysicalDevicePointClippingPropertiesKHR left, VkPhysicalDevicePointClippingPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDevicePointClippingPropertiesKHR left, VkPhysicalDevicePointClippingPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkRenderPassInputAttachmentAspectCreateInfoKHR : IEquatable<VkRenderPassInputAttachmentAspectCreateInfoKHR>
        {
            public VkRenderPassInputAttachmentAspectCreateInfoKHR(vulkan.VkRenderPassInputAttachmentAspectCreateInfo value) => this.Value = value;
            
            public vulkan.VkRenderPassInputAttachmentAspectCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkRenderPassInputAttachmentAspectCreateInfoKHR other && Equals(other);
            
            public bool Equals(VkRenderPassInputAttachmentAspectCreateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkRenderPassInputAttachmentAspectCreateInfo (vulkan.VkRenderPassInputAttachmentAspectCreateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkRenderPassInputAttachmentAspectCreateInfoKHR (vulkan.VkRenderPassInputAttachmentAspectCreateInfo from) => new vulkan.VkRenderPassInputAttachmentAspectCreateInfoKHR(from);
            
            public static bool operator ==(VkRenderPassInputAttachmentAspectCreateInfoKHR left, VkRenderPassInputAttachmentAspectCreateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkRenderPassInputAttachmentAspectCreateInfoKHR left, VkRenderPassInputAttachmentAspectCreateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkInputAttachmentAspectReferenceKHR : IEquatable<VkInputAttachmentAspectReferenceKHR>
        {
            public VkInputAttachmentAspectReferenceKHR(vulkan.VkInputAttachmentAspectReference value) => this.Value = value;
            
            public vulkan.VkInputAttachmentAspectReference Value { get; }
            
            public override bool Equals(object obj) => obj is VkInputAttachmentAspectReferenceKHR other && Equals(other);
            
            public bool Equals(VkInputAttachmentAspectReferenceKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkInputAttachmentAspectReference (vulkan.VkInputAttachmentAspectReferenceKHR from) => from.Value;
            
            public static implicit operator vulkan.VkInputAttachmentAspectReferenceKHR (vulkan.VkInputAttachmentAspectReference from) => new vulkan.VkInputAttachmentAspectReferenceKHR(from);
            
            public static bool operator ==(VkInputAttachmentAspectReferenceKHR left, VkInputAttachmentAspectReferenceKHR right) => left.Equals(right);
            
            public static bool operator !=(VkInputAttachmentAspectReferenceKHR left, VkInputAttachmentAspectReferenceKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImageViewUsageCreateInfoKHR : IEquatable<VkImageViewUsageCreateInfoKHR>
        {
            public VkImageViewUsageCreateInfoKHR(vulkan.VkImageViewUsageCreateInfo value) => this.Value = value;
            
            public vulkan.VkImageViewUsageCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageViewUsageCreateInfoKHR other && Equals(other);
            
            public bool Equals(VkImageViewUsageCreateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkImageViewUsageCreateInfo (vulkan.VkImageViewUsageCreateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkImageViewUsageCreateInfoKHR (vulkan.VkImageViewUsageCreateInfo from) => new vulkan.VkImageViewUsageCreateInfoKHR(from);
            
            public static bool operator ==(VkImageViewUsageCreateInfoKHR left, VkImageViewUsageCreateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkImageViewUsageCreateInfoKHR left, VkImageViewUsageCreateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineTessellationDomainOriginStateCreateInfoKHR : IEquatable<VkPipelineTessellationDomainOriginStateCreateInfoKHR>
        {
            public VkPipelineTessellationDomainOriginStateCreateInfoKHR(vulkan.VkPipelineTessellationDomainOriginStateCreateInfo value) => this.Value = value;
            
            public vulkan.VkPipelineTessellationDomainOriginStateCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineTessellationDomainOriginStateCreateInfoKHR other && Equals(other);
            
            public bool Equals(VkPipelineTessellationDomainOriginStateCreateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPipelineTessellationDomainOriginStateCreateInfo (vulkan.VkPipelineTessellationDomainOriginStateCreateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineTessellationDomainOriginStateCreateInfoKHR (vulkan.VkPipelineTessellationDomainOriginStateCreateInfo from) => new vulkan.VkPipelineTessellationDomainOriginStateCreateInfoKHR(from);
            
            public static bool operator ==(VkPipelineTessellationDomainOriginStateCreateInfoKHR left, VkPipelineTessellationDomainOriginStateCreateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineTessellationDomainOriginStateCreateInfoKHR left, VkPipelineTessellationDomainOriginStateCreateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR : IEquatable<PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR>
        {
            public PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSurfaceInfo2KHR*, vulkan.VkSurfaceCapabilities2KHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSurfaceInfo2KHR*, vulkan.VkSurfaceCapabilities2KHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSurfaceInfo2KHR*, vulkan.VkSurfaceCapabilities2KHR*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSurfaceInfo2KHR*, vulkan.VkSurfaceCapabilities2KHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR left, PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR left, PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceSurfaceFormats2KHR : IEquatable<PFN_vkGetPhysicalDeviceSurfaceFormats2KHR>
        {
            public PFN_vkGetPhysicalDeviceSurfaceFormats2KHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSurfaceInfo2KHR*, uint*, vulkan.VkSurfaceFormat2KHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSurfaceInfo2KHR*, uint*, vulkan.VkSurfaceFormat2KHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceSurfaceFormats2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceSurfaceFormats2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSurfaceInfo2KHR*, uint*, vulkan.VkSurfaceFormat2KHR*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceSurfaceFormats2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceSurfaceFormats2KHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSurfaceInfo2KHR*, uint*, vulkan.VkSurfaceFormat2KHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceSurfaceFormats2KHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceSurfaceFormats2KHR left, PFN_vkGetPhysicalDeviceSurfaceFormats2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceSurfaceFormats2KHR left, PFN_vkGetPhysicalDeviceSurfaceFormats2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceVariablePointerFeaturesKHR : IEquatable<VkPhysicalDeviceVariablePointerFeaturesKHR>
        {
            public VkPhysicalDeviceVariablePointerFeaturesKHR(vulkan.VkPhysicalDeviceVariablePointersFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceVariablePointersFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceVariablePointerFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceVariablePointerFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceVariablePointersFeatures (vulkan.VkPhysicalDeviceVariablePointerFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceVariablePointerFeaturesKHR (vulkan.VkPhysicalDeviceVariablePointersFeatures from) => new vulkan.VkPhysicalDeviceVariablePointerFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceVariablePointerFeaturesKHR left, VkPhysicalDeviceVariablePointerFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceVariablePointerFeaturesKHR left, VkPhysicalDeviceVariablePointerFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceVariablePointersFeaturesKHR : IEquatable<VkPhysicalDeviceVariablePointersFeaturesKHR>
        {
            public VkPhysicalDeviceVariablePointersFeaturesKHR(vulkan.VkPhysicalDeviceVariablePointersFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceVariablePointersFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceVariablePointersFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceVariablePointersFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceVariablePointersFeatures (vulkan.VkPhysicalDeviceVariablePointersFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceVariablePointersFeaturesKHR (vulkan.VkPhysicalDeviceVariablePointersFeatures from) => new vulkan.VkPhysicalDeviceVariablePointersFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceVariablePointersFeaturesKHR left, VkPhysicalDeviceVariablePointersFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceVariablePointersFeaturesKHR left, VkPhysicalDeviceVariablePointersFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceDisplayProperties2KHR : IEquatable<PFN_vkGetPhysicalDeviceDisplayProperties2KHR>
        {
            public PFN_vkGetPhysicalDeviceDisplayProperties2KHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkDisplayProperties2KHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkDisplayProperties2KHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceDisplayProperties2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceDisplayProperties2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkDisplayProperties2KHR*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceDisplayProperties2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceDisplayProperties2KHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkDisplayProperties2KHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceDisplayProperties2KHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceDisplayProperties2KHR left, PFN_vkGetPhysicalDeviceDisplayProperties2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceDisplayProperties2KHR left, PFN_vkGetPhysicalDeviceDisplayProperties2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR : IEquatable<PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR>
        {
            public PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkDisplayPlaneProperties2KHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkDisplayPlaneProperties2KHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkDisplayPlaneProperties2KHR*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkDisplayPlaneProperties2KHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR left, PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR left, PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDisplayModeProperties2KHR : IEquatable<PFN_vkGetDisplayModeProperties2KHR>
        {
            public PFN_vkGetDisplayModeProperties2KHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, uint*, vulkan.VkDisplayModeProperties2KHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, uint*, vulkan.VkDisplayModeProperties2KHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDisplayModeProperties2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDisplayModeProperties2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, uint*, vulkan.VkDisplayModeProperties2KHR*, vulkan.VkResult> (vulkan.PFN_vkGetDisplayModeProperties2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDisplayModeProperties2KHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, uint*, vulkan.VkDisplayModeProperties2KHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetDisplayModeProperties2KHR(from);
            
            public static bool operator ==(PFN_vkGetDisplayModeProperties2KHR left, PFN_vkGetDisplayModeProperties2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDisplayModeProperties2KHR left, PFN_vkGetDisplayModeProperties2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDisplayPlaneCapabilities2KHR : IEquatable<PFN_vkGetDisplayPlaneCapabilities2KHR>
        {
            public PFN_vkGetDisplayPlaneCapabilities2KHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayPlaneInfo2KHR*, vulkan.VkDisplayPlaneCapabilities2KHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayPlaneInfo2KHR*, vulkan.VkDisplayPlaneCapabilities2KHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDisplayPlaneCapabilities2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDisplayPlaneCapabilities2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayPlaneInfo2KHR*, vulkan.VkDisplayPlaneCapabilities2KHR*, vulkan.VkResult> (vulkan.PFN_vkGetDisplayPlaneCapabilities2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDisplayPlaneCapabilities2KHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayPlaneInfo2KHR*, vulkan.VkDisplayPlaneCapabilities2KHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetDisplayPlaneCapabilities2KHR(from);
            
            public static bool operator ==(PFN_vkGetDisplayPlaneCapabilities2KHR left, PFN_vkGetDisplayPlaneCapabilities2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDisplayPlaneCapabilities2KHR left, PFN_vkGetDisplayPlaneCapabilities2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkMemoryDedicatedRequirementsKHR : IEquatable<VkMemoryDedicatedRequirementsKHR>
        {
            public VkMemoryDedicatedRequirementsKHR(vulkan.VkMemoryDedicatedRequirements value) => this.Value = value;
            
            public vulkan.VkMemoryDedicatedRequirements Value { get; }
            
            public override bool Equals(object obj) => obj is VkMemoryDedicatedRequirementsKHR other && Equals(other);
            
            public bool Equals(VkMemoryDedicatedRequirementsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkMemoryDedicatedRequirements (vulkan.VkMemoryDedicatedRequirementsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkMemoryDedicatedRequirementsKHR (vulkan.VkMemoryDedicatedRequirements from) => new vulkan.VkMemoryDedicatedRequirementsKHR(from);
            
            public static bool operator ==(VkMemoryDedicatedRequirementsKHR left, VkMemoryDedicatedRequirementsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkMemoryDedicatedRequirementsKHR left, VkMemoryDedicatedRequirementsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkMemoryDedicatedAllocateInfoKHR : IEquatable<VkMemoryDedicatedAllocateInfoKHR>
        {
            public VkMemoryDedicatedAllocateInfoKHR(vulkan.VkMemoryDedicatedAllocateInfo value) => this.Value = value;
            
            public vulkan.VkMemoryDedicatedAllocateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkMemoryDedicatedAllocateInfoKHR other && Equals(other);
            
            public bool Equals(VkMemoryDedicatedAllocateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkMemoryDedicatedAllocateInfo (vulkan.VkMemoryDedicatedAllocateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkMemoryDedicatedAllocateInfoKHR (vulkan.VkMemoryDedicatedAllocateInfo from) => new vulkan.VkMemoryDedicatedAllocateInfoKHR(from);
            
            public static bool operator ==(VkMemoryDedicatedAllocateInfoKHR left, VkMemoryDedicatedAllocateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkMemoryDedicatedAllocateInfoKHR left, VkMemoryDedicatedAllocateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBufferMemoryRequirementsInfo2KHR : IEquatable<VkBufferMemoryRequirementsInfo2KHR>
        {
            public VkBufferMemoryRequirementsInfo2KHR(vulkan.VkBufferMemoryRequirementsInfo2 value) => this.Value = value;
            
            public vulkan.VkBufferMemoryRequirementsInfo2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkBufferMemoryRequirementsInfo2KHR other && Equals(other);
            
            public bool Equals(VkBufferMemoryRequirementsInfo2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBufferMemoryRequirementsInfo2 (vulkan.VkBufferMemoryRequirementsInfo2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkBufferMemoryRequirementsInfo2KHR (vulkan.VkBufferMemoryRequirementsInfo2 from) => new vulkan.VkBufferMemoryRequirementsInfo2KHR(from);
            
            public static bool operator ==(VkBufferMemoryRequirementsInfo2KHR left, VkBufferMemoryRequirementsInfo2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkBufferMemoryRequirementsInfo2KHR left, VkBufferMemoryRequirementsInfo2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImageMemoryRequirementsInfo2KHR : IEquatable<VkImageMemoryRequirementsInfo2KHR>
        {
            public VkImageMemoryRequirementsInfo2KHR(vulkan.VkImageMemoryRequirementsInfo2 value) => this.Value = value;
            
            public vulkan.VkImageMemoryRequirementsInfo2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageMemoryRequirementsInfo2KHR other && Equals(other);
            
            public bool Equals(VkImageMemoryRequirementsInfo2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkImageMemoryRequirementsInfo2 (vulkan.VkImageMemoryRequirementsInfo2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkImageMemoryRequirementsInfo2KHR (vulkan.VkImageMemoryRequirementsInfo2 from) => new vulkan.VkImageMemoryRequirementsInfo2KHR(from);
            
            public static bool operator ==(VkImageMemoryRequirementsInfo2KHR left, VkImageMemoryRequirementsInfo2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkImageMemoryRequirementsInfo2KHR left, VkImageMemoryRequirementsInfo2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImageSparseMemoryRequirementsInfo2KHR : IEquatable<VkImageSparseMemoryRequirementsInfo2KHR>
        {
            public VkImageSparseMemoryRequirementsInfo2KHR(vulkan.VkImageSparseMemoryRequirementsInfo2 value) => this.Value = value;
            
            public vulkan.VkImageSparseMemoryRequirementsInfo2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageSparseMemoryRequirementsInfo2KHR other && Equals(other);
            
            public bool Equals(VkImageSparseMemoryRequirementsInfo2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkImageSparseMemoryRequirementsInfo2 (vulkan.VkImageSparseMemoryRequirementsInfo2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkImageSparseMemoryRequirementsInfo2KHR (vulkan.VkImageSparseMemoryRequirementsInfo2 from) => new vulkan.VkImageSparseMemoryRequirementsInfo2KHR(from);
            
            public static bool operator ==(VkImageSparseMemoryRequirementsInfo2KHR left, VkImageSparseMemoryRequirementsInfo2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkImageSparseMemoryRequirementsInfo2KHR left, VkImageSparseMemoryRequirementsInfo2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkMemoryRequirements2KHR : IEquatable<VkMemoryRequirements2KHR>
        {
            public VkMemoryRequirements2KHR(vulkan.VkMemoryRequirements2 value) => this.Value = value;
            
            public vulkan.VkMemoryRequirements2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkMemoryRequirements2KHR other && Equals(other);
            
            public bool Equals(VkMemoryRequirements2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkMemoryRequirements2 (vulkan.VkMemoryRequirements2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkMemoryRequirements2KHR (vulkan.VkMemoryRequirements2 from) => new vulkan.VkMemoryRequirements2KHR(from);
            
            public static bool operator ==(VkMemoryRequirements2KHR left, VkMemoryRequirements2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkMemoryRequirements2KHR left, VkMemoryRequirements2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSparseImageMemoryRequirements2KHR : IEquatable<VkSparseImageMemoryRequirements2KHR>
        {
            public VkSparseImageMemoryRequirements2KHR(vulkan.VkSparseImageMemoryRequirements2 value) => this.Value = value;
            
            public vulkan.VkSparseImageMemoryRequirements2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkSparseImageMemoryRequirements2KHR other && Equals(other);
            
            public bool Equals(VkSparseImageMemoryRequirements2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSparseImageMemoryRequirements2 (vulkan.VkSparseImageMemoryRequirements2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkSparseImageMemoryRequirements2KHR (vulkan.VkSparseImageMemoryRequirements2 from) => new vulkan.VkSparseImageMemoryRequirements2KHR(from);
            
            public static bool operator ==(VkSparseImageMemoryRequirements2KHR left, VkSparseImageMemoryRequirements2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkSparseImageMemoryRequirements2KHR left, VkSparseImageMemoryRequirements2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetImageMemoryRequirements2KHR : IEquatable<PFN_vkGetImageMemoryRequirements2KHR>
        {
            public PFN_vkGetImageMemoryRequirements2KHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageMemoryRequirementsInfo2*, vulkan.VkMemoryRequirements2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageMemoryRequirementsInfo2*, vulkan.VkMemoryRequirements2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetImageMemoryRequirements2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetImageMemoryRequirements2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageMemoryRequirementsInfo2*, vulkan.VkMemoryRequirements2*, void> (vulkan.PFN_vkGetImageMemoryRequirements2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetImageMemoryRequirements2KHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageMemoryRequirementsInfo2*, vulkan.VkMemoryRequirements2*, void> from) => new vulkan.PFN_vkGetImageMemoryRequirements2KHR(from);
            
            public static bool operator ==(PFN_vkGetImageMemoryRequirements2KHR left, PFN_vkGetImageMemoryRequirements2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetImageMemoryRequirements2KHR left, PFN_vkGetImageMemoryRequirements2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetBufferMemoryRequirements2KHR : IEquatable<PFN_vkGetBufferMemoryRequirements2KHR>
        {
            public PFN_vkGetBufferMemoryRequirements2KHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferMemoryRequirementsInfo2*, vulkan.VkMemoryRequirements2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferMemoryRequirementsInfo2*, vulkan.VkMemoryRequirements2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetBufferMemoryRequirements2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetBufferMemoryRequirements2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferMemoryRequirementsInfo2*, vulkan.VkMemoryRequirements2*, void> (vulkan.PFN_vkGetBufferMemoryRequirements2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetBufferMemoryRequirements2KHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferMemoryRequirementsInfo2*, vulkan.VkMemoryRequirements2*, void> from) => new vulkan.PFN_vkGetBufferMemoryRequirements2KHR(from);
            
            public static bool operator ==(PFN_vkGetBufferMemoryRequirements2KHR left, PFN_vkGetBufferMemoryRequirements2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetBufferMemoryRequirements2KHR left, PFN_vkGetBufferMemoryRequirements2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetImageSparseMemoryRequirements2KHR : IEquatable<PFN_vkGetImageSparseMemoryRequirements2KHR>
        {
            public PFN_vkGetImageSparseMemoryRequirements2KHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageSparseMemoryRequirementsInfo2*, uint*, vulkan.VkSparseImageMemoryRequirements2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageSparseMemoryRequirementsInfo2*, uint*, vulkan.VkSparseImageMemoryRequirements2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetImageSparseMemoryRequirements2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetImageSparseMemoryRequirements2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageSparseMemoryRequirementsInfo2*, uint*, vulkan.VkSparseImageMemoryRequirements2*, void> (vulkan.PFN_vkGetImageSparseMemoryRequirements2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetImageSparseMemoryRequirements2KHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageSparseMemoryRequirementsInfo2*, uint*, vulkan.VkSparseImageMemoryRequirements2*, void> from) => new vulkan.PFN_vkGetImageSparseMemoryRequirements2KHR(from);
            
            public static bool operator ==(PFN_vkGetImageSparseMemoryRequirements2KHR left, PFN_vkGetImageSparseMemoryRequirements2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetImageSparseMemoryRequirements2KHR left, PFN_vkGetImageSparseMemoryRequirements2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImageFormatListCreateInfoKHR : IEquatable<VkImageFormatListCreateInfoKHR>
        {
            public VkImageFormatListCreateInfoKHR(vulkan.VkImageFormatListCreateInfo value) => this.Value = value;
            
            public vulkan.VkImageFormatListCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageFormatListCreateInfoKHR other && Equals(other);
            
            public bool Equals(VkImageFormatListCreateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkImageFormatListCreateInfo (vulkan.VkImageFormatListCreateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkImageFormatListCreateInfoKHR (vulkan.VkImageFormatListCreateInfo from) => new vulkan.VkImageFormatListCreateInfoKHR(from);
            
            public static bool operator ==(VkImageFormatListCreateInfoKHR left, VkImageFormatListCreateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkImageFormatListCreateInfoKHR left, VkImageFormatListCreateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSamplerYcbcrConversionKHR : IEquatable<VkSamplerYcbcrConversionKHR>
        {
            public VkSamplerYcbcrConversionKHR(vulkan.VkSamplerYcbcrConversion value) => this.Value = value;
            
            public vulkan.VkSamplerYcbcrConversion Value { get; }
            
            public override bool Equals(object obj) => obj is VkSamplerYcbcrConversionKHR other && Equals(other);
            
            public bool Equals(VkSamplerYcbcrConversionKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSamplerYcbcrConversion (vulkan.VkSamplerYcbcrConversionKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSamplerYcbcrConversionKHR (vulkan.VkSamplerYcbcrConversion from) => new vulkan.VkSamplerYcbcrConversionKHR(from);
            
            public static bool operator ==(VkSamplerYcbcrConversionKHR left, VkSamplerYcbcrConversionKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSamplerYcbcrConversionKHR left, VkSamplerYcbcrConversionKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSamplerYcbcrModelConversionKHR : IEquatable<VkSamplerYcbcrModelConversionKHR>
        {
            public VkSamplerYcbcrModelConversionKHR(vulkan.VkSamplerYcbcrModelConversion value) => this.Value = value;
            
            public vulkan.VkSamplerYcbcrModelConversion Value { get; }
            
            public override bool Equals(object obj) => obj is VkSamplerYcbcrModelConversionKHR other && Equals(other);
            
            public bool Equals(VkSamplerYcbcrModelConversionKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSamplerYcbcrModelConversion (vulkan.VkSamplerYcbcrModelConversionKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSamplerYcbcrModelConversionKHR (vulkan.VkSamplerYcbcrModelConversion from) => new vulkan.VkSamplerYcbcrModelConversionKHR(from);
            
            public static bool operator ==(VkSamplerYcbcrModelConversionKHR left, VkSamplerYcbcrModelConversionKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSamplerYcbcrModelConversionKHR left, VkSamplerYcbcrModelConversionKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSamplerYcbcrRangeKHR : IEquatable<VkSamplerYcbcrRangeKHR>
        {
            public VkSamplerYcbcrRangeKHR(vulkan.VkSamplerYcbcrRange value) => this.Value = value;
            
            public vulkan.VkSamplerYcbcrRange Value { get; }
            
            public override bool Equals(object obj) => obj is VkSamplerYcbcrRangeKHR other && Equals(other);
            
            public bool Equals(VkSamplerYcbcrRangeKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSamplerYcbcrRange (vulkan.VkSamplerYcbcrRangeKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSamplerYcbcrRangeKHR (vulkan.VkSamplerYcbcrRange from) => new vulkan.VkSamplerYcbcrRangeKHR(from);
            
            public static bool operator ==(VkSamplerYcbcrRangeKHR left, VkSamplerYcbcrRangeKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSamplerYcbcrRangeKHR left, VkSamplerYcbcrRangeKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkChromaLocationKHR : IEquatable<VkChromaLocationKHR>
        {
            public VkChromaLocationKHR(vulkan.VkChromaLocation value) => this.Value = value;
            
            public vulkan.VkChromaLocation Value { get; }
            
            public override bool Equals(object obj) => obj is VkChromaLocationKHR other && Equals(other);
            
            public bool Equals(VkChromaLocationKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkChromaLocation (vulkan.VkChromaLocationKHR from) => from.Value;
            
            public static implicit operator vulkan.VkChromaLocationKHR (vulkan.VkChromaLocation from) => new vulkan.VkChromaLocationKHR(from);
            
            public static bool operator ==(VkChromaLocationKHR left, VkChromaLocationKHR right) => left.Equals(right);
            
            public static bool operator !=(VkChromaLocationKHR left, VkChromaLocationKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSamplerYcbcrConversionCreateInfoKHR : IEquatable<VkSamplerYcbcrConversionCreateInfoKHR>
        {
            public VkSamplerYcbcrConversionCreateInfoKHR(vulkan.VkSamplerYcbcrConversionCreateInfo value) => this.Value = value;
            
            public vulkan.VkSamplerYcbcrConversionCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkSamplerYcbcrConversionCreateInfoKHR other && Equals(other);
            
            public bool Equals(VkSamplerYcbcrConversionCreateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSamplerYcbcrConversionCreateInfo (vulkan.VkSamplerYcbcrConversionCreateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSamplerYcbcrConversionCreateInfoKHR (vulkan.VkSamplerYcbcrConversionCreateInfo from) => new vulkan.VkSamplerYcbcrConversionCreateInfoKHR(from);
            
            public static bool operator ==(VkSamplerYcbcrConversionCreateInfoKHR left, VkSamplerYcbcrConversionCreateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSamplerYcbcrConversionCreateInfoKHR left, VkSamplerYcbcrConversionCreateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSamplerYcbcrConversionInfoKHR : IEquatable<VkSamplerYcbcrConversionInfoKHR>
        {
            public VkSamplerYcbcrConversionInfoKHR(vulkan.VkSamplerYcbcrConversionInfo value) => this.Value = value;
            
            public vulkan.VkSamplerYcbcrConversionInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkSamplerYcbcrConversionInfoKHR other && Equals(other);
            
            public bool Equals(VkSamplerYcbcrConversionInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSamplerYcbcrConversionInfo (vulkan.VkSamplerYcbcrConversionInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSamplerYcbcrConversionInfoKHR (vulkan.VkSamplerYcbcrConversionInfo from) => new vulkan.VkSamplerYcbcrConversionInfoKHR(from);
            
            public static bool operator ==(VkSamplerYcbcrConversionInfoKHR left, VkSamplerYcbcrConversionInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSamplerYcbcrConversionInfoKHR left, VkSamplerYcbcrConversionInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBindImagePlaneMemoryInfoKHR : IEquatable<VkBindImagePlaneMemoryInfoKHR>
        {
            public VkBindImagePlaneMemoryInfoKHR(vulkan.VkBindImagePlaneMemoryInfo value) => this.Value = value;
            
            public vulkan.VkBindImagePlaneMemoryInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkBindImagePlaneMemoryInfoKHR other && Equals(other);
            
            public bool Equals(VkBindImagePlaneMemoryInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBindImagePlaneMemoryInfo (vulkan.VkBindImagePlaneMemoryInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkBindImagePlaneMemoryInfoKHR (vulkan.VkBindImagePlaneMemoryInfo from) => new vulkan.VkBindImagePlaneMemoryInfoKHR(from);
            
            public static bool operator ==(VkBindImagePlaneMemoryInfoKHR left, VkBindImagePlaneMemoryInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkBindImagePlaneMemoryInfoKHR left, VkBindImagePlaneMemoryInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImagePlaneMemoryRequirementsInfoKHR : IEquatable<VkImagePlaneMemoryRequirementsInfoKHR>
        {
            public VkImagePlaneMemoryRequirementsInfoKHR(vulkan.VkImagePlaneMemoryRequirementsInfo value) => this.Value = value;
            
            public vulkan.VkImagePlaneMemoryRequirementsInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkImagePlaneMemoryRequirementsInfoKHR other && Equals(other);
            
            public bool Equals(VkImagePlaneMemoryRequirementsInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkImagePlaneMemoryRequirementsInfo (vulkan.VkImagePlaneMemoryRequirementsInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkImagePlaneMemoryRequirementsInfoKHR (vulkan.VkImagePlaneMemoryRequirementsInfo from) => new vulkan.VkImagePlaneMemoryRequirementsInfoKHR(from);
            
            public static bool operator ==(VkImagePlaneMemoryRequirementsInfoKHR left, VkImagePlaneMemoryRequirementsInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkImagePlaneMemoryRequirementsInfoKHR left, VkImagePlaneMemoryRequirementsInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR : IEquatable<VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR>
        {
            public VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR(vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeatures (vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR (vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeatures from) => new vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR left, VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR left, VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSamplerYcbcrConversionImageFormatPropertiesKHR : IEquatable<VkSamplerYcbcrConversionImageFormatPropertiesKHR>
        {
            public VkSamplerYcbcrConversionImageFormatPropertiesKHR(vulkan.VkSamplerYcbcrConversionImageFormatProperties value) => this.Value = value;
            
            public vulkan.VkSamplerYcbcrConversionImageFormatProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkSamplerYcbcrConversionImageFormatPropertiesKHR other && Equals(other);
            
            public bool Equals(VkSamplerYcbcrConversionImageFormatPropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSamplerYcbcrConversionImageFormatProperties (vulkan.VkSamplerYcbcrConversionImageFormatPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSamplerYcbcrConversionImageFormatPropertiesKHR (vulkan.VkSamplerYcbcrConversionImageFormatProperties from) => new vulkan.VkSamplerYcbcrConversionImageFormatPropertiesKHR(from);
            
            public static bool operator ==(VkSamplerYcbcrConversionImageFormatPropertiesKHR left, VkSamplerYcbcrConversionImageFormatPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSamplerYcbcrConversionImageFormatPropertiesKHR left, VkSamplerYcbcrConversionImageFormatPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateSamplerYcbcrConversionKHR : IEquatable<PFN_vkCreateSamplerYcbcrConversionKHR>
        {
            public PFN_vkCreateSamplerYcbcrConversionKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerYcbcrConversionCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkSamplerYcbcrConversion*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerYcbcrConversionCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkSamplerYcbcrConversion*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateSamplerYcbcrConversionKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateSamplerYcbcrConversionKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerYcbcrConversionCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkSamplerYcbcrConversion*, vulkan.VkResult> (vulkan.PFN_vkCreateSamplerYcbcrConversionKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateSamplerYcbcrConversionKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerYcbcrConversionCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkSamplerYcbcrConversion*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateSamplerYcbcrConversionKHR(from);
            
            public static bool operator ==(PFN_vkCreateSamplerYcbcrConversionKHR left, PFN_vkCreateSamplerYcbcrConversionKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateSamplerYcbcrConversionKHR left, PFN_vkCreateSamplerYcbcrConversionKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroySamplerYcbcrConversionKHR : IEquatable<PFN_vkDestroySamplerYcbcrConversionKHR>
        {
            public PFN_vkDestroySamplerYcbcrConversionKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerYcbcrConversion, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerYcbcrConversion, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroySamplerYcbcrConversionKHR other && Equals(other);
            
            public bool Equals(PFN_vkDestroySamplerYcbcrConversionKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerYcbcrConversion, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroySamplerYcbcrConversionKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroySamplerYcbcrConversionKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerYcbcrConversion, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroySamplerYcbcrConversionKHR(from);
            
            public static bool operator ==(PFN_vkDestroySamplerYcbcrConversionKHR left, PFN_vkDestroySamplerYcbcrConversionKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroySamplerYcbcrConversionKHR left, PFN_vkDestroySamplerYcbcrConversionKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBindBufferMemoryInfoKHR : IEquatable<VkBindBufferMemoryInfoKHR>
        {
            public VkBindBufferMemoryInfoKHR(vulkan.VkBindBufferMemoryInfo value) => this.Value = value;
            
            public vulkan.VkBindBufferMemoryInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkBindBufferMemoryInfoKHR other && Equals(other);
            
            public bool Equals(VkBindBufferMemoryInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBindBufferMemoryInfo (vulkan.VkBindBufferMemoryInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkBindBufferMemoryInfoKHR (vulkan.VkBindBufferMemoryInfo from) => new vulkan.VkBindBufferMemoryInfoKHR(from);
            
            public static bool operator ==(VkBindBufferMemoryInfoKHR left, VkBindBufferMemoryInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkBindBufferMemoryInfoKHR left, VkBindBufferMemoryInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBindImageMemoryInfoKHR : IEquatable<VkBindImageMemoryInfoKHR>
        {
            public VkBindImageMemoryInfoKHR(vulkan.VkBindImageMemoryInfo value) => this.Value = value;
            
            public vulkan.VkBindImageMemoryInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkBindImageMemoryInfoKHR other && Equals(other);
            
            public bool Equals(VkBindImageMemoryInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBindImageMemoryInfo (vulkan.VkBindImageMemoryInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkBindImageMemoryInfoKHR (vulkan.VkBindImageMemoryInfo from) => new vulkan.VkBindImageMemoryInfoKHR(from);
            
            public static bool operator ==(VkBindImageMemoryInfoKHR left, VkBindImageMemoryInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkBindImageMemoryInfoKHR left, VkBindImageMemoryInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkBindBufferMemory2KHR : IEquatable<PFN_vkBindBufferMemory2KHR>
        {
            public PFN_vkBindBufferMemory2KHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindBufferMemoryInfo*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindBufferMemoryInfo*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkBindBufferMemory2KHR other && Equals(other);
            
            public bool Equals(PFN_vkBindBufferMemory2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindBufferMemoryInfo*, vulkan.VkResult> (vulkan.PFN_vkBindBufferMemory2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkBindBufferMemory2KHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindBufferMemoryInfo*, vulkan.VkResult> from) => new vulkan.PFN_vkBindBufferMemory2KHR(from);
            
            public static bool operator ==(PFN_vkBindBufferMemory2KHR left, PFN_vkBindBufferMemory2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkBindBufferMemory2KHR left, PFN_vkBindBufferMemory2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkBindImageMemory2KHR : IEquatable<PFN_vkBindImageMemory2KHR>
        {
            public PFN_vkBindImageMemory2KHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindImageMemoryInfo*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindImageMemoryInfo*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkBindImageMemory2KHR other && Equals(other);
            
            public bool Equals(PFN_vkBindImageMemory2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindImageMemoryInfo*, vulkan.VkResult> (vulkan.PFN_vkBindImageMemory2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkBindImageMemory2KHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindImageMemoryInfo*, vulkan.VkResult> from) => new vulkan.PFN_vkBindImageMemory2KHR(from);
            
            public static bool operator ==(PFN_vkBindImageMemory2KHR left, PFN_vkBindImageMemory2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkBindImageMemory2KHR left, PFN_vkBindImageMemory2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceMaintenance3PropertiesKHR : IEquatable<VkPhysicalDeviceMaintenance3PropertiesKHR>
        {
            public VkPhysicalDeviceMaintenance3PropertiesKHR(vulkan.VkPhysicalDeviceMaintenance3Properties value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceMaintenance3Properties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceMaintenance3PropertiesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceMaintenance3PropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceMaintenance3Properties (vulkan.VkPhysicalDeviceMaintenance3PropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceMaintenance3PropertiesKHR (vulkan.VkPhysicalDeviceMaintenance3Properties from) => new vulkan.VkPhysicalDeviceMaintenance3PropertiesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceMaintenance3PropertiesKHR left, VkPhysicalDeviceMaintenance3PropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceMaintenance3PropertiesKHR left, VkPhysicalDeviceMaintenance3PropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorSetLayoutSupportKHR : IEquatable<VkDescriptorSetLayoutSupportKHR>
        {
            public VkDescriptorSetLayoutSupportKHR(vulkan.VkDescriptorSetLayoutSupport value) => this.Value = value;
            
            public vulkan.VkDescriptorSetLayoutSupport Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorSetLayoutSupportKHR other && Equals(other);
            
            public bool Equals(VkDescriptorSetLayoutSupportKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDescriptorSetLayoutSupport (vulkan.VkDescriptorSetLayoutSupportKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorSetLayoutSupportKHR (vulkan.VkDescriptorSetLayoutSupport from) => new vulkan.VkDescriptorSetLayoutSupportKHR(from);
            
            public static bool operator ==(VkDescriptorSetLayoutSupportKHR left, VkDescriptorSetLayoutSupportKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorSetLayoutSupportKHR left, VkDescriptorSetLayoutSupportKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDescriptorSetLayoutSupportKHR : IEquatable<PFN_vkGetDescriptorSetLayoutSupportKHR>
        {
            public PFN_vkGetDescriptorSetLayoutSupportKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayoutCreateInfo*, vulkan.VkDescriptorSetLayoutSupport*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayoutCreateInfo*, vulkan.VkDescriptorSetLayoutSupport*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDescriptorSetLayoutSupportKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDescriptorSetLayoutSupportKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayoutCreateInfo*, vulkan.VkDescriptorSetLayoutSupport*, void> (vulkan.PFN_vkGetDescriptorSetLayoutSupportKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDescriptorSetLayoutSupportKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayoutCreateInfo*, vulkan.VkDescriptorSetLayoutSupport*, void> from) => new vulkan.PFN_vkGetDescriptorSetLayoutSupportKHR(from);
            
            public static bool operator ==(PFN_vkGetDescriptorSetLayoutSupportKHR left, PFN_vkGetDescriptorSetLayoutSupportKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDescriptorSetLayoutSupportKHR left, PFN_vkGetDescriptorSetLayoutSupportKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawIndirectCountKHR : IEquatable<PFN_vkCmdDrawIndirectCountKHR>
        {
            public PFN_vkCmdDrawIndirectCountKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawIndirectCountKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawIndirectCountKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> (vulkan.PFN_vkCmdDrawIndirectCountKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawIndirectCountKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawIndirectCountKHR(from);
            
            public static bool operator ==(PFN_vkCmdDrawIndirectCountKHR left, PFN_vkCmdDrawIndirectCountKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawIndirectCountKHR left, PFN_vkCmdDrawIndirectCountKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawIndexedIndirectCountKHR : IEquatable<PFN_vkCmdDrawIndexedIndirectCountKHR>
        {
            public PFN_vkCmdDrawIndexedIndirectCountKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawIndexedIndirectCountKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawIndexedIndirectCountKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> (vulkan.PFN_vkCmdDrawIndexedIndirectCountKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawIndexedIndirectCountKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawIndexedIndirectCountKHR(from);
            
            public static bool operator ==(PFN_vkCmdDrawIndexedIndirectCountKHR left, PFN_vkCmdDrawIndexedIndirectCountKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawIndexedIndirectCountKHR left, PFN_vkCmdDrawIndexedIndirectCountKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR : IEquatable<VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR>
        {
            public VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR(vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures (vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR (vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures from) => new vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR left, VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR left, VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDevice8BitStorageFeaturesKHR : IEquatable<VkPhysicalDevice8BitStorageFeaturesKHR>
        {
            public VkPhysicalDevice8BitStorageFeaturesKHR(vulkan.VkPhysicalDevice8BitStorageFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDevice8BitStorageFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDevice8BitStorageFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDevice8BitStorageFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDevice8BitStorageFeatures (vulkan.VkPhysicalDevice8BitStorageFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDevice8BitStorageFeaturesKHR (vulkan.VkPhysicalDevice8BitStorageFeatures from) => new vulkan.VkPhysicalDevice8BitStorageFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDevice8BitStorageFeaturesKHR left, VkPhysicalDevice8BitStorageFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDevice8BitStorageFeaturesKHR left, VkPhysicalDevice8BitStorageFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceShaderAtomicInt64FeaturesKHR : IEquatable<VkPhysicalDeviceShaderAtomicInt64FeaturesKHR>
        {
            public VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(vulkan.VkPhysicalDeviceShaderAtomicInt64Features value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceShaderAtomicInt64Features Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceShaderAtomicInt64FeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderAtomicInt64Features (vulkan.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR (vulkan.VkPhysicalDeviceShaderAtomicInt64Features from) => new vulkan.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR left, VkPhysicalDeviceShaderAtomicInt64FeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR left, VkPhysicalDeviceShaderAtomicInt64FeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDriverIdKHR : IEquatable<VkDriverIdKHR>
        {
            public VkDriverIdKHR(vulkan.VkDriverId value) => this.Value = value;
            
            public vulkan.VkDriverId Value { get; }
            
            public override bool Equals(object obj) => obj is VkDriverIdKHR other && Equals(other);
            
            public bool Equals(VkDriverIdKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDriverId (vulkan.VkDriverIdKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDriverIdKHR (vulkan.VkDriverId from) => new vulkan.VkDriverIdKHR(from);
            
            public static bool operator ==(VkDriverIdKHR left, VkDriverIdKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDriverIdKHR left, VkDriverIdKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkConformanceVersionKHR : IEquatable<VkConformanceVersionKHR>
        {
            public VkConformanceVersionKHR(vulkan.VkConformanceVersion value) => this.Value = value;
            
            public vulkan.VkConformanceVersion Value { get; }
            
            public override bool Equals(object obj) => obj is VkConformanceVersionKHR other && Equals(other);
            
            public bool Equals(VkConformanceVersionKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkConformanceVersion (vulkan.VkConformanceVersionKHR from) => from.Value;
            
            public static implicit operator vulkan.VkConformanceVersionKHR (vulkan.VkConformanceVersion from) => new vulkan.VkConformanceVersionKHR(from);
            
            public static bool operator ==(VkConformanceVersionKHR left, VkConformanceVersionKHR right) => left.Equals(right);
            
            public static bool operator !=(VkConformanceVersionKHR left, VkConformanceVersionKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceDriverPropertiesKHR : IEquatable<VkPhysicalDeviceDriverPropertiesKHR>
        {
            public VkPhysicalDeviceDriverPropertiesKHR(vulkan.VkPhysicalDeviceDriverProperties value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceDriverProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceDriverPropertiesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceDriverPropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceDriverProperties (vulkan.VkPhysicalDeviceDriverPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceDriverPropertiesKHR (vulkan.VkPhysicalDeviceDriverProperties from) => new vulkan.VkPhysicalDeviceDriverPropertiesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceDriverPropertiesKHR left, VkPhysicalDeviceDriverPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceDriverPropertiesKHR left, VkPhysicalDeviceDriverPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkShaderFloatControlsIndependenceKHR : IEquatable<VkShaderFloatControlsIndependenceKHR>
        {
            public VkShaderFloatControlsIndependenceKHR(vulkan.VkShaderFloatControlsIndependence value) => this.Value = value;
            
            public vulkan.VkShaderFloatControlsIndependence Value { get; }
            
            public override bool Equals(object obj) => obj is VkShaderFloatControlsIndependenceKHR other && Equals(other);
            
            public bool Equals(VkShaderFloatControlsIndependenceKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkShaderFloatControlsIndependence (vulkan.VkShaderFloatControlsIndependenceKHR from) => from.Value;
            
            public static implicit operator vulkan.VkShaderFloatControlsIndependenceKHR (vulkan.VkShaderFloatControlsIndependence from) => new vulkan.VkShaderFloatControlsIndependenceKHR(from);
            
            public static bool operator ==(VkShaderFloatControlsIndependenceKHR left, VkShaderFloatControlsIndependenceKHR right) => left.Equals(right);
            
            public static bool operator !=(VkShaderFloatControlsIndependenceKHR left, VkShaderFloatControlsIndependenceKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceFloatControlsPropertiesKHR : IEquatable<VkPhysicalDeviceFloatControlsPropertiesKHR>
        {
            public VkPhysicalDeviceFloatControlsPropertiesKHR(vulkan.VkPhysicalDeviceFloatControlsProperties value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceFloatControlsProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceFloatControlsPropertiesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceFloatControlsPropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceFloatControlsProperties (vulkan.VkPhysicalDeviceFloatControlsPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceFloatControlsPropertiesKHR (vulkan.VkPhysicalDeviceFloatControlsProperties from) => new vulkan.VkPhysicalDeviceFloatControlsPropertiesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceFloatControlsPropertiesKHR left, VkPhysicalDeviceFloatControlsPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceFloatControlsPropertiesKHR left, VkPhysicalDeviceFloatControlsPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkResolveModeFlagBitsKHR : IEquatable<VkResolveModeFlagBitsKHR>
        {
            public VkResolveModeFlagBitsKHR(vulkan.VkResolveModeFlagBits value) => this.Value = value;
            
            public vulkan.VkResolveModeFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkResolveModeFlagBitsKHR other && Equals(other);
            
            public bool Equals(VkResolveModeFlagBitsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkResolveModeFlagBits (vulkan.VkResolveModeFlagBitsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkResolveModeFlagBitsKHR (vulkan.VkResolveModeFlagBits from) => new vulkan.VkResolveModeFlagBitsKHR(from);
            
            public static bool operator ==(VkResolveModeFlagBitsKHR left, VkResolveModeFlagBitsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkResolveModeFlagBitsKHR left, VkResolveModeFlagBitsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkResolveModeFlagsKHR : IEquatable<VkResolveModeFlagsKHR>
        {
            public VkResolveModeFlagsKHR(vulkan.VkResolveModeFlags value) => this.Value = value;
            
            public vulkan.VkResolveModeFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkResolveModeFlagsKHR other && Equals(other);
            
            public bool Equals(VkResolveModeFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkResolveModeFlags (vulkan.VkResolveModeFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkResolveModeFlagsKHR (vulkan.VkResolveModeFlags from) => new vulkan.VkResolveModeFlagsKHR(from);
            
            public static bool operator ==(VkResolveModeFlagsKHR left, VkResolveModeFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkResolveModeFlagsKHR left, VkResolveModeFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSubpassDescriptionDepthStencilResolveKHR : IEquatable<VkSubpassDescriptionDepthStencilResolveKHR>
        {
            public VkSubpassDescriptionDepthStencilResolveKHR(vulkan.VkSubpassDescriptionDepthStencilResolve value) => this.Value = value;
            
            public vulkan.VkSubpassDescriptionDepthStencilResolve Value { get; }
            
            public override bool Equals(object obj) => obj is VkSubpassDescriptionDepthStencilResolveKHR other && Equals(other);
            
            public bool Equals(VkSubpassDescriptionDepthStencilResolveKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSubpassDescriptionDepthStencilResolve (vulkan.VkSubpassDescriptionDepthStencilResolveKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSubpassDescriptionDepthStencilResolveKHR (vulkan.VkSubpassDescriptionDepthStencilResolve from) => new vulkan.VkSubpassDescriptionDepthStencilResolveKHR(from);
            
            public static bool operator ==(VkSubpassDescriptionDepthStencilResolveKHR left, VkSubpassDescriptionDepthStencilResolveKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSubpassDescriptionDepthStencilResolveKHR left, VkSubpassDescriptionDepthStencilResolveKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceDepthStencilResolvePropertiesKHR : IEquatable<VkPhysicalDeviceDepthStencilResolvePropertiesKHR>
        {
            public VkPhysicalDeviceDepthStencilResolvePropertiesKHR(vulkan.VkPhysicalDeviceDepthStencilResolveProperties value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceDepthStencilResolveProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceDepthStencilResolvePropertiesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceDepthStencilResolvePropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceDepthStencilResolveProperties (vulkan.VkPhysicalDeviceDepthStencilResolvePropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceDepthStencilResolvePropertiesKHR (vulkan.VkPhysicalDeviceDepthStencilResolveProperties from) => new vulkan.VkPhysicalDeviceDepthStencilResolvePropertiesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceDepthStencilResolvePropertiesKHR left, VkPhysicalDeviceDepthStencilResolvePropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceDepthStencilResolvePropertiesKHR left, VkPhysicalDeviceDepthStencilResolvePropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSemaphoreTypeKHR : IEquatable<VkSemaphoreTypeKHR>
        {
            public VkSemaphoreTypeKHR(vulkan.VkSemaphoreType value) => this.Value = value;
            
            public vulkan.VkSemaphoreType Value { get; }
            
            public override bool Equals(object obj) => obj is VkSemaphoreTypeKHR other && Equals(other);
            
            public bool Equals(VkSemaphoreTypeKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSemaphoreType (vulkan.VkSemaphoreTypeKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSemaphoreTypeKHR (vulkan.VkSemaphoreType from) => new vulkan.VkSemaphoreTypeKHR(from);
            
            public static bool operator ==(VkSemaphoreTypeKHR left, VkSemaphoreTypeKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSemaphoreTypeKHR left, VkSemaphoreTypeKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSemaphoreWaitFlagBitsKHR : IEquatable<VkSemaphoreWaitFlagBitsKHR>
        {
            public VkSemaphoreWaitFlagBitsKHR(vulkan.VkSemaphoreWaitFlagBits value) => this.Value = value;
            
            public vulkan.VkSemaphoreWaitFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkSemaphoreWaitFlagBitsKHR other && Equals(other);
            
            public bool Equals(VkSemaphoreWaitFlagBitsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSemaphoreWaitFlagBits (vulkan.VkSemaphoreWaitFlagBitsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSemaphoreWaitFlagBitsKHR (vulkan.VkSemaphoreWaitFlagBits from) => new vulkan.VkSemaphoreWaitFlagBitsKHR(from);
            
            public static bool operator ==(VkSemaphoreWaitFlagBitsKHR left, VkSemaphoreWaitFlagBitsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSemaphoreWaitFlagBitsKHR left, VkSemaphoreWaitFlagBitsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSemaphoreWaitFlagsKHR : IEquatable<VkSemaphoreWaitFlagsKHR>
        {
            public VkSemaphoreWaitFlagsKHR(vulkan.VkSemaphoreWaitFlags value) => this.Value = value;
            
            public vulkan.VkSemaphoreWaitFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkSemaphoreWaitFlagsKHR other && Equals(other);
            
            public bool Equals(VkSemaphoreWaitFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSemaphoreWaitFlags (vulkan.VkSemaphoreWaitFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSemaphoreWaitFlagsKHR (vulkan.VkSemaphoreWaitFlags from) => new vulkan.VkSemaphoreWaitFlagsKHR(from);
            
            public static bool operator ==(VkSemaphoreWaitFlagsKHR left, VkSemaphoreWaitFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSemaphoreWaitFlagsKHR left, VkSemaphoreWaitFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceTimelineSemaphoreFeaturesKHR : IEquatable<VkPhysicalDeviceTimelineSemaphoreFeaturesKHR>
        {
            public VkPhysicalDeviceTimelineSemaphoreFeaturesKHR(vulkan.VkPhysicalDeviceTimelineSemaphoreFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceTimelineSemaphoreFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceTimelineSemaphoreFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceTimelineSemaphoreFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceTimelineSemaphoreFeatures (vulkan.VkPhysicalDeviceTimelineSemaphoreFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceTimelineSemaphoreFeaturesKHR (vulkan.VkPhysicalDeviceTimelineSemaphoreFeatures from) => new vulkan.VkPhysicalDeviceTimelineSemaphoreFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceTimelineSemaphoreFeaturesKHR left, VkPhysicalDeviceTimelineSemaphoreFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceTimelineSemaphoreFeaturesKHR left, VkPhysicalDeviceTimelineSemaphoreFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceTimelineSemaphorePropertiesKHR : IEquatable<VkPhysicalDeviceTimelineSemaphorePropertiesKHR>
        {
            public VkPhysicalDeviceTimelineSemaphorePropertiesKHR(vulkan.VkPhysicalDeviceTimelineSemaphoreProperties value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceTimelineSemaphoreProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceTimelineSemaphorePropertiesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceTimelineSemaphorePropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceTimelineSemaphoreProperties (vulkan.VkPhysicalDeviceTimelineSemaphorePropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceTimelineSemaphorePropertiesKHR (vulkan.VkPhysicalDeviceTimelineSemaphoreProperties from) => new vulkan.VkPhysicalDeviceTimelineSemaphorePropertiesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceTimelineSemaphorePropertiesKHR left, VkPhysicalDeviceTimelineSemaphorePropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceTimelineSemaphorePropertiesKHR left, VkPhysicalDeviceTimelineSemaphorePropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSemaphoreTypeCreateInfoKHR : IEquatable<VkSemaphoreTypeCreateInfoKHR>
        {
            public VkSemaphoreTypeCreateInfoKHR(vulkan.VkSemaphoreTypeCreateInfo value) => this.Value = value;
            
            public vulkan.VkSemaphoreTypeCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkSemaphoreTypeCreateInfoKHR other && Equals(other);
            
            public bool Equals(VkSemaphoreTypeCreateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSemaphoreTypeCreateInfo (vulkan.VkSemaphoreTypeCreateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSemaphoreTypeCreateInfoKHR (vulkan.VkSemaphoreTypeCreateInfo from) => new vulkan.VkSemaphoreTypeCreateInfoKHR(from);
            
            public static bool operator ==(VkSemaphoreTypeCreateInfoKHR left, VkSemaphoreTypeCreateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSemaphoreTypeCreateInfoKHR left, VkSemaphoreTypeCreateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkTimelineSemaphoreSubmitInfoKHR : IEquatable<VkTimelineSemaphoreSubmitInfoKHR>
        {
            public VkTimelineSemaphoreSubmitInfoKHR(vulkan.VkTimelineSemaphoreSubmitInfo value) => this.Value = value;
            
            public vulkan.VkTimelineSemaphoreSubmitInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkTimelineSemaphoreSubmitInfoKHR other && Equals(other);
            
            public bool Equals(VkTimelineSemaphoreSubmitInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkTimelineSemaphoreSubmitInfo (vulkan.VkTimelineSemaphoreSubmitInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkTimelineSemaphoreSubmitInfoKHR (vulkan.VkTimelineSemaphoreSubmitInfo from) => new vulkan.VkTimelineSemaphoreSubmitInfoKHR(from);
            
            public static bool operator ==(VkTimelineSemaphoreSubmitInfoKHR left, VkTimelineSemaphoreSubmitInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkTimelineSemaphoreSubmitInfoKHR left, VkTimelineSemaphoreSubmitInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSemaphoreWaitInfoKHR : IEquatable<VkSemaphoreWaitInfoKHR>
        {
            public VkSemaphoreWaitInfoKHR(vulkan.VkSemaphoreWaitInfo value) => this.Value = value;
            
            public vulkan.VkSemaphoreWaitInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkSemaphoreWaitInfoKHR other && Equals(other);
            
            public bool Equals(VkSemaphoreWaitInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSemaphoreWaitInfo (vulkan.VkSemaphoreWaitInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSemaphoreWaitInfoKHR (vulkan.VkSemaphoreWaitInfo from) => new vulkan.VkSemaphoreWaitInfoKHR(from);
            
            public static bool operator ==(VkSemaphoreWaitInfoKHR left, VkSemaphoreWaitInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSemaphoreWaitInfoKHR left, VkSemaphoreWaitInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSemaphoreSignalInfoKHR : IEquatable<VkSemaphoreSignalInfoKHR>
        {
            public VkSemaphoreSignalInfoKHR(vulkan.VkSemaphoreSignalInfo value) => this.Value = value;
            
            public vulkan.VkSemaphoreSignalInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkSemaphoreSignalInfoKHR other && Equals(other);
            
            public bool Equals(VkSemaphoreSignalInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSemaphoreSignalInfo (vulkan.VkSemaphoreSignalInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSemaphoreSignalInfoKHR (vulkan.VkSemaphoreSignalInfo from) => new vulkan.VkSemaphoreSignalInfoKHR(from);
            
            public static bool operator ==(VkSemaphoreSignalInfoKHR left, VkSemaphoreSignalInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSemaphoreSignalInfoKHR left, VkSemaphoreSignalInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetSemaphoreCounterValueKHR : IEquatable<PFN_vkGetSemaphoreCounterValueKHR>
        {
            public PFN_vkGetSemaphoreCounterValueKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphore, ulong*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphore, ulong*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetSemaphoreCounterValueKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetSemaphoreCounterValueKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphore, ulong*, vulkan.VkResult> (vulkan.PFN_vkGetSemaphoreCounterValueKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetSemaphoreCounterValueKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphore, ulong*, vulkan.VkResult> from) => new vulkan.PFN_vkGetSemaphoreCounterValueKHR(from);
            
            public static bool operator ==(PFN_vkGetSemaphoreCounterValueKHR left, PFN_vkGetSemaphoreCounterValueKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetSemaphoreCounterValueKHR left, PFN_vkGetSemaphoreCounterValueKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkWaitSemaphoresKHR : IEquatable<PFN_vkWaitSemaphoresKHR>
        {
            public PFN_vkWaitSemaphoresKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreWaitInfo*, ulong, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreWaitInfo*, ulong, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkWaitSemaphoresKHR other && Equals(other);
            
            public bool Equals(PFN_vkWaitSemaphoresKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreWaitInfo*, ulong, vulkan.VkResult> (vulkan.PFN_vkWaitSemaphoresKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkWaitSemaphoresKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreWaitInfo*, ulong, vulkan.VkResult> from) => new vulkan.PFN_vkWaitSemaphoresKHR(from);
            
            public static bool operator ==(PFN_vkWaitSemaphoresKHR left, PFN_vkWaitSemaphoresKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkWaitSemaphoresKHR left, PFN_vkWaitSemaphoresKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkSignalSemaphoreKHR : IEquatable<PFN_vkSignalSemaphoreKHR>
        {
            public PFN_vkSignalSemaphoreKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreSignalInfo*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreSignalInfo*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkSignalSemaphoreKHR other && Equals(other);
            
            public bool Equals(PFN_vkSignalSemaphoreKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreSignalInfo*, vulkan.VkResult> (vulkan.PFN_vkSignalSemaphoreKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkSignalSemaphoreKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreSignalInfo*, vulkan.VkResult> from) => new vulkan.PFN_vkSignalSemaphoreKHR(from);
            
            public static bool operator ==(PFN_vkSignalSemaphoreKHR left, PFN_vkSignalSemaphoreKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkSignalSemaphoreKHR left, PFN_vkSignalSemaphoreKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceVulkanMemoryModelFeaturesKHR : IEquatable<VkPhysicalDeviceVulkanMemoryModelFeaturesKHR>
        {
            public VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(vulkan.VkPhysicalDeviceVulkanMemoryModelFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceVulkanMemoryModelFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceVulkanMemoryModelFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceVulkanMemoryModelFeatures (vulkan.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR (vulkan.VkPhysicalDeviceVulkanMemoryModelFeatures from) => new vulkan.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR left, VkPhysicalDeviceVulkanMemoryModelFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR left, VkPhysicalDeviceVulkanMemoryModelFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR : IEquatable<VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR>
        {
            public VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(vulkan.VkPhysicalDeviceShaderTerminateInvocationFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceShaderTerminateInvocationFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderTerminateInvocationFeatures (vulkan.VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR (vulkan.VkPhysicalDeviceShaderTerminateInvocationFeatures from) => new vulkan.VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR left, VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR left, VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR : IEquatable<PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR>
        {
            public PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkPhysicalDeviceFragmentShadingRateKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkPhysicalDeviceFragmentShadingRateKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkPhysicalDeviceFragmentShadingRateKHR*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkPhysicalDeviceFragmentShadingRateKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR left, PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR left, PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetFragmentShadingRateKHR : IEquatable<PFN_vkCmdSetFragmentShadingRateKHR>
        {
            public PFN_vkCmdSetFragmentShadingRateKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkExtent2D*, FixedArray2<vulkan.VkFragmentShadingRateCombinerOpKHR>, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkExtent2D*, FixedArray2<vulkan.VkFragmentShadingRateCombinerOpKHR>, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetFragmentShadingRateKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetFragmentShadingRateKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkExtent2D*, FixedArray2<vulkan.VkFragmentShadingRateCombinerOpKHR>, void> (vulkan.PFN_vkCmdSetFragmentShadingRateKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetFragmentShadingRateKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkExtent2D*, FixedArray2<vulkan.VkFragmentShadingRateCombinerOpKHR>, void> from) => new vulkan.PFN_vkCmdSetFragmentShadingRateKHR(from);
            
            public static bool operator ==(PFN_vkCmdSetFragmentShadingRateKHR left, PFN_vkCmdSetFragmentShadingRateKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetFragmentShadingRateKHR left, PFN_vkCmdSetFragmentShadingRateKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR : IEquatable<VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR>
        {
            public VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR(vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures (vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR (vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures from) => new vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR left, VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR left, VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkAttachmentReferenceStencilLayoutKHR : IEquatable<VkAttachmentReferenceStencilLayoutKHR>
        {
            public VkAttachmentReferenceStencilLayoutKHR(vulkan.VkAttachmentReferenceStencilLayout value) => this.Value = value;
            
            public vulkan.VkAttachmentReferenceStencilLayout Value { get; }
            
            public override bool Equals(object obj) => obj is VkAttachmentReferenceStencilLayoutKHR other && Equals(other);
            
            public bool Equals(VkAttachmentReferenceStencilLayoutKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkAttachmentReferenceStencilLayout (vulkan.VkAttachmentReferenceStencilLayoutKHR from) => from.Value;
            
            public static implicit operator vulkan.VkAttachmentReferenceStencilLayoutKHR (vulkan.VkAttachmentReferenceStencilLayout from) => new vulkan.VkAttachmentReferenceStencilLayoutKHR(from);
            
            public static bool operator ==(VkAttachmentReferenceStencilLayoutKHR left, VkAttachmentReferenceStencilLayoutKHR right) => left.Equals(right);
            
            public static bool operator !=(VkAttachmentReferenceStencilLayoutKHR left, VkAttachmentReferenceStencilLayoutKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkAttachmentDescriptionStencilLayoutKHR : IEquatable<VkAttachmentDescriptionStencilLayoutKHR>
        {
            public VkAttachmentDescriptionStencilLayoutKHR(vulkan.VkAttachmentDescriptionStencilLayout value) => this.Value = value;
            
            public vulkan.VkAttachmentDescriptionStencilLayout Value { get; }
            
            public override bool Equals(object obj) => obj is VkAttachmentDescriptionStencilLayoutKHR other && Equals(other);
            
            public bool Equals(VkAttachmentDescriptionStencilLayoutKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkAttachmentDescriptionStencilLayout (vulkan.VkAttachmentDescriptionStencilLayoutKHR from) => from.Value;
            
            public static implicit operator vulkan.VkAttachmentDescriptionStencilLayoutKHR (vulkan.VkAttachmentDescriptionStencilLayout from) => new vulkan.VkAttachmentDescriptionStencilLayoutKHR(from);
            
            public static bool operator ==(VkAttachmentDescriptionStencilLayoutKHR left, VkAttachmentDescriptionStencilLayoutKHR right) => left.Equals(right);
            
            public static bool operator !=(VkAttachmentDescriptionStencilLayoutKHR left, VkAttachmentDescriptionStencilLayoutKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkWaitForPresentKHR : IEquatable<PFN_vkWaitForPresentKHR>
        {
            public PFN_vkWaitForPresentKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, ulong, ulong, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, ulong, ulong, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkWaitForPresentKHR other && Equals(other);
            
            public bool Equals(PFN_vkWaitForPresentKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, ulong, ulong, vulkan.VkResult> (vulkan.PFN_vkWaitForPresentKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkWaitForPresentKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, ulong, ulong, vulkan.VkResult> from) => new vulkan.PFN_vkWaitForPresentKHR(from);
            
            public static bool operator ==(PFN_vkWaitForPresentKHR left, PFN_vkWaitForPresentKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkWaitForPresentKHR left, PFN_vkWaitForPresentKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR : IEquatable<VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR>
        {
            public VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeatures (vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR (vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeatures from) => new vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR left, VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR left, VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceBufferDeviceAddressFeaturesKHR : IEquatable<VkPhysicalDeviceBufferDeviceAddressFeaturesKHR>
        {
            public VkPhysicalDeviceBufferDeviceAddressFeaturesKHR(vulkan.VkPhysicalDeviceBufferDeviceAddressFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceBufferDeviceAddressFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceBufferDeviceAddressFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceBufferDeviceAddressFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceBufferDeviceAddressFeatures (vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesKHR (vulkan.VkPhysicalDeviceBufferDeviceAddressFeatures from) => new vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceBufferDeviceAddressFeaturesKHR left, VkPhysicalDeviceBufferDeviceAddressFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceBufferDeviceAddressFeaturesKHR left, VkPhysicalDeviceBufferDeviceAddressFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBufferDeviceAddressInfoKHR : IEquatable<VkBufferDeviceAddressInfoKHR>
        {
            public VkBufferDeviceAddressInfoKHR(vulkan.VkBufferDeviceAddressInfo value) => this.Value = value;
            
            public vulkan.VkBufferDeviceAddressInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkBufferDeviceAddressInfoKHR other && Equals(other);
            
            public bool Equals(VkBufferDeviceAddressInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBufferDeviceAddressInfo (vulkan.VkBufferDeviceAddressInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkBufferDeviceAddressInfoKHR (vulkan.VkBufferDeviceAddressInfo from) => new vulkan.VkBufferDeviceAddressInfoKHR(from);
            
            public static bool operator ==(VkBufferDeviceAddressInfoKHR left, VkBufferDeviceAddressInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkBufferDeviceAddressInfoKHR left, VkBufferDeviceAddressInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBufferOpaqueCaptureAddressCreateInfoKHR : IEquatable<VkBufferOpaqueCaptureAddressCreateInfoKHR>
        {
            public VkBufferOpaqueCaptureAddressCreateInfoKHR(vulkan.VkBufferOpaqueCaptureAddressCreateInfo value) => this.Value = value;
            
            public vulkan.VkBufferOpaqueCaptureAddressCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkBufferOpaqueCaptureAddressCreateInfoKHR other && Equals(other);
            
            public bool Equals(VkBufferOpaqueCaptureAddressCreateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBufferOpaqueCaptureAddressCreateInfo (vulkan.VkBufferOpaqueCaptureAddressCreateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkBufferOpaqueCaptureAddressCreateInfoKHR (vulkan.VkBufferOpaqueCaptureAddressCreateInfo from) => new vulkan.VkBufferOpaqueCaptureAddressCreateInfoKHR(from);
            
            public static bool operator ==(VkBufferOpaqueCaptureAddressCreateInfoKHR left, VkBufferOpaqueCaptureAddressCreateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkBufferOpaqueCaptureAddressCreateInfoKHR left, VkBufferOpaqueCaptureAddressCreateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkMemoryOpaqueCaptureAddressAllocateInfoKHR : IEquatable<VkMemoryOpaqueCaptureAddressAllocateInfoKHR>
        {
            public VkMemoryOpaqueCaptureAddressAllocateInfoKHR(vulkan.VkMemoryOpaqueCaptureAddressAllocateInfo value) => this.Value = value;
            
            public vulkan.VkMemoryOpaqueCaptureAddressAllocateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkMemoryOpaqueCaptureAddressAllocateInfoKHR other && Equals(other);
            
            public bool Equals(VkMemoryOpaqueCaptureAddressAllocateInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkMemoryOpaqueCaptureAddressAllocateInfo (vulkan.VkMemoryOpaqueCaptureAddressAllocateInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkMemoryOpaqueCaptureAddressAllocateInfoKHR (vulkan.VkMemoryOpaqueCaptureAddressAllocateInfo from) => new vulkan.VkMemoryOpaqueCaptureAddressAllocateInfoKHR(from);
            
            public static bool operator ==(VkMemoryOpaqueCaptureAddressAllocateInfoKHR left, VkMemoryOpaqueCaptureAddressAllocateInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkMemoryOpaqueCaptureAddressAllocateInfoKHR left, VkMemoryOpaqueCaptureAddressAllocateInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDeviceMemoryOpaqueCaptureAddressInfoKHR : IEquatable<VkDeviceMemoryOpaqueCaptureAddressInfoKHR>
        {
            public VkDeviceMemoryOpaqueCaptureAddressInfoKHR(vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo value) => this.Value = value;
            
            public vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceMemoryOpaqueCaptureAddressInfoKHR other && Equals(other);
            
            public bool Equals(VkDeviceMemoryOpaqueCaptureAddressInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo (vulkan.VkDeviceMemoryOpaqueCaptureAddressInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceMemoryOpaqueCaptureAddressInfoKHR (vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo from) => new vulkan.VkDeviceMemoryOpaqueCaptureAddressInfoKHR(from);
            
            public static bool operator ==(VkDeviceMemoryOpaqueCaptureAddressInfoKHR left, VkDeviceMemoryOpaqueCaptureAddressInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceMemoryOpaqueCaptureAddressInfoKHR left, VkDeviceMemoryOpaqueCaptureAddressInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetBufferDeviceAddressKHR : IEquatable<PFN_vkGetBufferDeviceAddressKHR>
        {
            public PFN_vkGetBufferDeviceAddressKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, vulkan.VkDeviceAddress> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, vulkan.VkDeviceAddress> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetBufferDeviceAddressKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetBufferDeviceAddressKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, vulkan.VkDeviceAddress> (vulkan.PFN_vkGetBufferDeviceAddressKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetBufferDeviceAddressKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, vulkan.VkDeviceAddress> from) => new vulkan.PFN_vkGetBufferDeviceAddressKHR(from);
            
            public static bool operator ==(PFN_vkGetBufferDeviceAddressKHR left, PFN_vkGetBufferDeviceAddressKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetBufferDeviceAddressKHR left, PFN_vkGetBufferDeviceAddressKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetBufferOpaqueCaptureAddressKHR : IEquatable<PFN_vkGetBufferOpaqueCaptureAddressKHR>
        {
            public PFN_vkGetBufferOpaqueCaptureAddressKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, ulong> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, ulong> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetBufferOpaqueCaptureAddressKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetBufferOpaqueCaptureAddressKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, ulong> (vulkan.PFN_vkGetBufferOpaqueCaptureAddressKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetBufferOpaqueCaptureAddressKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, ulong> from) => new vulkan.PFN_vkGetBufferOpaqueCaptureAddressKHR(from);
            
            public static bool operator ==(PFN_vkGetBufferOpaqueCaptureAddressKHR left, PFN_vkGetBufferOpaqueCaptureAddressKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetBufferOpaqueCaptureAddressKHR left, PFN_vkGetBufferOpaqueCaptureAddressKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR : IEquatable<PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR>
        {
            public PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong> (vulkan.PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong> from) => new vulkan.PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR(from);
            
            public static bool operator ==(PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR left, PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR left, PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDeferredOperationKHR : IEquatable<VkDeferredOperationKHR>
        {
            public VkDeferredOperationKHR(vulkan.VkDeferredOperationKHR_T value) => this.Value = value;
            
            public vulkan.VkDeferredOperationKHR_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeferredOperationKHR other && Equals(other);
            
            public bool Equals(VkDeferredOperationKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDeferredOperationKHR_T (vulkan.VkDeferredOperationKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDeferredOperationKHR (vulkan.VkDeferredOperationKHR_T from) => new vulkan.VkDeferredOperationKHR(from);
            
            public static bool operator ==(VkDeferredOperationKHR left, VkDeferredOperationKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDeferredOperationKHR left, VkDeferredOperationKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateDeferredOperationKHR : IEquatable<PFN_vkCreateDeferredOperationKHR>
        {
            public PFN_vkCreateDeferredOperationKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAllocationCallbacks*, vulkan.VkDeferredOperationKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAllocationCallbacks*, vulkan.VkDeferredOperationKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateDeferredOperationKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateDeferredOperationKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAllocationCallbacks*, vulkan.VkDeferredOperationKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateDeferredOperationKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateDeferredOperationKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAllocationCallbacks*, vulkan.VkDeferredOperationKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateDeferredOperationKHR(from);
            
            public static bool operator ==(PFN_vkCreateDeferredOperationKHR left, PFN_vkCreateDeferredOperationKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateDeferredOperationKHR left, PFN_vkCreateDeferredOperationKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyDeferredOperationKHR : IEquatable<PFN_vkDestroyDeferredOperationKHR>
        {
            public PFN_vkDestroyDeferredOperationKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyDeferredOperationKHR other && Equals(other);
            
            public bool Equals(PFN_vkDestroyDeferredOperationKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyDeferredOperationKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyDeferredOperationKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyDeferredOperationKHR(from);
            
            public static bool operator ==(PFN_vkDestroyDeferredOperationKHR left, PFN_vkDestroyDeferredOperationKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyDeferredOperationKHR left, PFN_vkDestroyDeferredOperationKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeferredOperationMaxConcurrencyKHR : IEquatable<PFN_vkGetDeferredOperationMaxConcurrencyKHR>
        {
            public PFN_vkGetDeferredOperationMaxConcurrencyKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, uint> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, uint> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeferredOperationMaxConcurrencyKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDeferredOperationMaxConcurrencyKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, uint> (vulkan.PFN_vkGetDeferredOperationMaxConcurrencyKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeferredOperationMaxConcurrencyKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, uint> from) => new vulkan.PFN_vkGetDeferredOperationMaxConcurrencyKHR(from);
            
            public static bool operator ==(PFN_vkGetDeferredOperationMaxConcurrencyKHR left, PFN_vkGetDeferredOperationMaxConcurrencyKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeferredOperationMaxConcurrencyKHR left, PFN_vkGetDeferredOperationMaxConcurrencyKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeferredOperationResultKHR : IEquatable<PFN_vkGetDeferredOperationResultKHR>
        {
            public PFN_vkGetDeferredOperationResultKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeferredOperationResultKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDeferredOperationResultKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkResult> (vulkan.PFN_vkGetDeferredOperationResultKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeferredOperationResultKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkResult> from) => new vulkan.PFN_vkGetDeferredOperationResultKHR(from);
            
            public static bool operator ==(PFN_vkGetDeferredOperationResultKHR left, PFN_vkGetDeferredOperationResultKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeferredOperationResultKHR left, PFN_vkGetDeferredOperationResultKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDeferredOperationJoinKHR : IEquatable<PFN_vkDeferredOperationJoinKHR>
        {
            public PFN_vkDeferredOperationJoinKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDeferredOperationJoinKHR other && Equals(other);
            
            public bool Equals(PFN_vkDeferredOperationJoinKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkResult> (vulkan.PFN_vkDeferredOperationJoinKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDeferredOperationJoinKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkResult> from) => new vulkan.PFN_vkDeferredOperationJoinKHR(from);
            
            public static bool operator ==(PFN_vkDeferredOperationJoinKHR left, PFN_vkDeferredOperationJoinKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDeferredOperationJoinKHR left, PFN_vkDeferredOperationJoinKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPipelineExecutablePropertiesKHR : IEquatable<PFN_vkGetPipelineExecutablePropertiesKHR>
        {
            public PFN_vkGetPipelineExecutablePropertiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineInfoKHR*, uint*, vulkan.VkPipelineExecutablePropertiesKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineInfoKHR*, uint*, vulkan.VkPipelineExecutablePropertiesKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPipelineExecutablePropertiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPipelineExecutablePropertiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineInfoKHR*, uint*, vulkan.VkPipelineExecutablePropertiesKHR*, vulkan.VkResult> (vulkan.PFN_vkGetPipelineExecutablePropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPipelineExecutablePropertiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineInfoKHR*, uint*, vulkan.VkPipelineExecutablePropertiesKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPipelineExecutablePropertiesKHR(from);
            
            public static bool operator ==(PFN_vkGetPipelineExecutablePropertiesKHR left, PFN_vkGetPipelineExecutablePropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPipelineExecutablePropertiesKHR left, PFN_vkGetPipelineExecutablePropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPipelineExecutableStatisticsKHR : IEquatable<PFN_vkGetPipelineExecutableStatisticsKHR>
        {
            public PFN_vkGetPipelineExecutableStatisticsKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineExecutableInfoKHR*, uint*, vulkan.VkPipelineExecutableStatisticKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineExecutableInfoKHR*, uint*, vulkan.VkPipelineExecutableStatisticKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPipelineExecutableStatisticsKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPipelineExecutableStatisticsKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineExecutableInfoKHR*, uint*, vulkan.VkPipelineExecutableStatisticKHR*, vulkan.VkResult> (vulkan.PFN_vkGetPipelineExecutableStatisticsKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPipelineExecutableStatisticsKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineExecutableInfoKHR*, uint*, vulkan.VkPipelineExecutableStatisticKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPipelineExecutableStatisticsKHR(from);
            
            public static bool operator ==(PFN_vkGetPipelineExecutableStatisticsKHR left, PFN_vkGetPipelineExecutableStatisticsKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPipelineExecutableStatisticsKHR left, PFN_vkGetPipelineExecutableStatisticsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPipelineExecutableInternalRepresentationsKHR : IEquatable<PFN_vkGetPipelineExecutableInternalRepresentationsKHR>
        {
            public PFN_vkGetPipelineExecutableInternalRepresentationsKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineExecutableInfoKHR*, uint*, vulkan.VkPipelineExecutableInternalRepresentationKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineExecutableInfoKHR*, uint*, vulkan.VkPipelineExecutableInternalRepresentationKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPipelineExecutableInternalRepresentationsKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPipelineExecutableInternalRepresentationsKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineExecutableInfoKHR*, uint*, vulkan.VkPipelineExecutableInternalRepresentationKHR*, vulkan.VkResult> (vulkan.PFN_vkGetPipelineExecutableInternalRepresentationsKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPipelineExecutableInternalRepresentationsKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineExecutableInfoKHR*, uint*, vulkan.VkPipelineExecutableInternalRepresentationKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPipelineExecutableInternalRepresentationsKHR(from);
            
            public static bool operator ==(PFN_vkGetPipelineExecutableInternalRepresentationsKHR left, PFN_vkGetPipelineExecutableInternalRepresentationsKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPipelineExecutableInternalRepresentationsKHR left, PFN_vkGetPipelineExecutableInternalRepresentationsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkMapMemory2KHR : IEquatable<PFN_vkMapMemory2KHR>
        {
            public PFN_vkMapMemory2KHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryMapInfoKHR*, void**, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryMapInfoKHR*, void**, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkMapMemory2KHR other && Equals(other);
            
            public bool Equals(PFN_vkMapMemory2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryMapInfoKHR*, void**, vulkan.VkResult> (vulkan.PFN_vkMapMemory2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkMapMemory2KHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryMapInfoKHR*, void**, vulkan.VkResult> from) => new vulkan.PFN_vkMapMemory2KHR(from);
            
            public static bool operator ==(PFN_vkMapMemory2KHR left, PFN_vkMapMemory2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkMapMemory2KHR left, PFN_vkMapMemory2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkUnmapMemory2KHR : IEquatable<PFN_vkUnmapMemory2KHR>
        {
            public PFN_vkUnmapMemory2KHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryUnmapInfoKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryUnmapInfoKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkUnmapMemory2KHR other && Equals(other);
            
            public bool Equals(PFN_vkUnmapMemory2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryUnmapInfoKHR*, vulkan.VkResult> (vulkan.PFN_vkUnmapMemory2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkUnmapMemory2KHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryUnmapInfoKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkUnmapMemory2KHR(from);
            
            public static bool operator ==(PFN_vkUnmapMemory2KHR left, PFN_vkUnmapMemory2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkUnmapMemory2KHR left, PFN_vkUnmapMemory2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR : IEquatable<VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR>
        {
            public VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR(vulkan.VkPhysicalDeviceShaderIntegerDotProductFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceShaderIntegerDotProductFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderIntegerDotProductFeatures (vulkan.VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR (vulkan.VkPhysicalDeviceShaderIntegerDotProductFeatures from) => new vulkan.VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR left, VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR left, VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR : IEquatable<VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR>
        {
            public VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR(vulkan.VkPhysicalDeviceShaderIntegerDotProductProperties value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceShaderIntegerDotProductProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderIntegerDotProductProperties (vulkan.VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR (vulkan.VkPhysicalDeviceShaderIntegerDotProductProperties from) => new vulkan.VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR left, VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR left, VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineStageFlags2KHR : IEquatable<VkPipelineStageFlags2KHR>
        {
            public VkPipelineStageFlags2KHR(vulkan.VkPipelineStageFlags2 value) => this.Value = value;
            
            public vulkan.VkPipelineStageFlags2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineStageFlags2KHR other && Equals(other);
            
            public bool Equals(VkPipelineStageFlags2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPipelineStageFlags2 (vulkan.VkPipelineStageFlags2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineStageFlags2KHR (vulkan.VkPipelineStageFlags2 from) => new vulkan.VkPipelineStageFlags2KHR(from);
            
            public static bool operator ==(VkPipelineStageFlags2KHR left, VkPipelineStageFlags2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineStageFlags2KHR left, VkPipelineStageFlags2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineStageFlagBits2KHR : IEquatable<VkPipelineStageFlagBits2KHR>
        {
            public VkPipelineStageFlagBits2KHR(vulkan.VkPipelineStageFlagBits2 value) => this.Value = value;
            
            public vulkan.VkPipelineStageFlagBits2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineStageFlagBits2KHR other && Equals(other);
            
            public bool Equals(VkPipelineStageFlagBits2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPipelineStageFlagBits2 (vulkan.VkPipelineStageFlagBits2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineStageFlagBits2KHR (vulkan.VkPipelineStageFlagBits2 from) => new vulkan.VkPipelineStageFlagBits2KHR(from);
            
            public static bool operator ==(VkPipelineStageFlagBits2KHR left, VkPipelineStageFlagBits2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineStageFlagBits2KHR left, VkPipelineStageFlagBits2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkAccessFlags2KHR : IEquatable<VkAccessFlags2KHR>
        {
            public VkAccessFlags2KHR(vulkan.VkAccessFlags2 value) => this.Value = value;
            
            public vulkan.VkAccessFlags2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkAccessFlags2KHR other && Equals(other);
            
            public bool Equals(VkAccessFlags2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkAccessFlags2 (vulkan.VkAccessFlags2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkAccessFlags2KHR (vulkan.VkAccessFlags2 from) => new vulkan.VkAccessFlags2KHR(from);
            
            public static bool operator ==(VkAccessFlags2KHR left, VkAccessFlags2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkAccessFlags2KHR left, VkAccessFlags2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkAccessFlagBits2KHR : IEquatable<VkAccessFlagBits2KHR>
        {
            public VkAccessFlagBits2KHR(vulkan.VkAccessFlagBits2 value) => this.Value = value;
            
            public vulkan.VkAccessFlagBits2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkAccessFlagBits2KHR other && Equals(other);
            
            public bool Equals(VkAccessFlagBits2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkAccessFlagBits2 (vulkan.VkAccessFlagBits2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkAccessFlagBits2KHR (vulkan.VkAccessFlagBits2 from) => new vulkan.VkAccessFlagBits2KHR(from);
            
            public static bool operator ==(VkAccessFlagBits2KHR left, VkAccessFlagBits2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkAccessFlagBits2KHR left, VkAccessFlagBits2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSubmitFlagBitsKHR : IEquatable<VkSubmitFlagBitsKHR>
        {
            public VkSubmitFlagBitsKHR(vulkan.VkSubmitFlagBits value) => this.Value = value;
            
            public vulkan.VkSubmitFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkSubmitFlagBitsKHR other && Equals(other);
            
            public bool Equals(VkSubmitFlagBitsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSubmitFlagBits (vulkan.VkSubmitFlagBitsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSubmitFlagBitsKHR (vulkan.VkSubmitFlagBits from) => new vulkan.VkSubmitFlagBitsKHR(from);
            
            public static bool operator ==(VkSubmitFlagBitsKHR left, VkSubmitFlagBitsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSubmitFlagBitsKHR left, VkSubmitFlagBitsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSubmitFlagsKHR : IEquatable<VkSubmitFlagsKHR>
        {
            public VkSubmitFlagsKHR(vulkan.VkSubmitFlags value) => this.Value = value;
            
            public vulkan.VkSubmitFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkSubmitFlagsKHR other && Equals(other);
            
            public bool Equals(VkSubmitFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSubmitFlags (vulkan.VkSubmitFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSubmitFlagsKHR (vulkan.VkSubmitFlags from) => new vulkan.VkSubmitFlagsKHR(from);
            
            public static bool operator ==(VkSubmitFlagsKHR left, VkSubmitFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSubmitFlagsKHR left, VkSubmitFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkMemoryBarrier2KHR : IEquatable<VkMemoryBarrier2KHR>
        {
            public VkMemoryBarrier2KHR(vulkan.VkMemoryBarrier2 value) => this.Value = value;
            
            public vulkan.VkMemoryBarrier2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkMemoryBarrier2KHR other && Equals(other);
            
            public bool Equals(VkMemoryBarrier2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkMemoryBarrier2 (vulkan.VkMemoryBarrier2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkMemoryBarrier2KHR (vulkan.VkMemoryBarrier2 from) => new vulkan.VkMemoryBarrier2KHR(from);
            
            public static bool operator ==(VkMemoryBarrier2KHR left, VkMemoryBarrier2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkMemoryBarrier2KHR left, VkMemoryBarrier2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBufferMemoryBarrier2KHR : IEquatable<VkBufferMemoryBarrier2KHR>
        {
            public VkBufferMemoryBarrier2KHR(vulkan.VkBufferMemoryBarrier2 value) => this.Value = value;
            
            public vulkan.VkBufferMemoryBarrier2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkBufferMemoryBarrier2KHR other && Equals(other);
            
            public bool Equals(VkBufferMemoryBarrier2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBufferMemoryBarrier2 (vulkan.VkBufferMemoryBarrier2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkBufferMemoryBarrier2KHR (vulkan.VkBufferMemoryBarrier2 from) => new vulkan.VkBufferMemoryBarrier2KHR(from);
            
            public static bool operator ==(VkBufferMemoryBarrier2KHR left, VkBufferMemoryBarrier2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkBufferMemoryBarrier2KHR left, VkBufferMemoryBarrier2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImageMemoryBarrier2KHR : IEquatable<VkImageMemoryBarrier2KHR>
        {
            public VkImageMemoryBarrier2KHR(vulkan.VkImageMemoryBarrier2 value) => this.Value = value;
            
            public vulkan.VkImageMemoryBarrier2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageMemoryBarrier2KHR other && Equals(other);
            
            public bool Equals(VkImageMemoryBarrier2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkImageMemoryBarrier2 (vulkan.VkImageMemoryBarrier2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkImageMemoryBarrier2KHR (vulkan.VkImageMemoryBarrier2 from) => new vulkan.VkImageMemoryBarrier2KHR(from);
            
            public static bool operator ==(VkImageMemoryBarrier2KHR left, VkImageMemoryBarrier2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkImageMemoryBarrier2KHR left, VkImageMemoryBarrier2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDependencyInfoKHR : IEquatable<VkDependencyInfoKHR>
        {
            public VkDependencyInfoKHR(vulkan.VkDependencyInfo value) => this.Value = value;
            
            public vulkan.VkDependencyInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkDependencyInfoKHR other && Equals(other);
            
            public bool Equals(VkDependencyInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDependencyInfo (vulkan.VkDependencyInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDependencyInfoKHR (vulkan.VkDependencyInfo from) => new vulkan.VkDependencyInfoKHR(from);
            
            public static bool operator ==(VkDependencyInfoKHR left, VkDependencyInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDependencyInfoKHR left, VkDependencyInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSubmitInfo2KHR : IEquatable<VkSubmitInfo2KHR>
        {
            public VkSubmitInfo2KHR(vulkan.VkSubmitInfo2 value) => this.Value = value;
            
            public vulkan.VkSubmitInfo2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkSubmitInfo2KHR other && Equals(other);
            
            public bool Equals(VkSubmitInfo2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSubmitInfo2 (vulkan.VkSubmitInfo2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkSubmitInfo2KHR (vulkan.VkSubmitInfo2 from) => new vulkan.VkSubmitInfo2KHR(from);
            
            public static bool operator ==(VkSubmitInfo2KHR left, VkSubmitInfo2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkSubmitInfo2KHR left, VkSubmitInfo2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSemaphoreSubmitInfoKHR : IEquatable<VkSemaphoreSubmitInfoKHR>
        {
            public VkSemaphoreSubmitInfoKHR(vulkan.VkSemaphoreSubmitInfo value) => this.Value = value;
            
            public vulkan.VkSemaphoreSubmitInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkSemaphoreSubmitInfoKHR other && Equals(other);
            
            public bool Equals(VkSemaphoreSubmitInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSemaphoreSubmitInfo (vulkan.VkSemaphoreSubmitInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkSemaphoreSubmitInfoKHR (vulkan.VkSemaphoreSubmitInfo from) => new vulkan.VkSemaphoreSubmitInfoKHR(from);
            
            public static bool operator ==(VkSemaphoreSubmitInfoKHR left, VkSemaphoreSubmitInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkSemaphoreSubmitInfoKHR left, VkSemaphoreSubmitInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCommandBufferSubmitInfoKHR : IEquatable<VkCommandBufferSubmitInfoKHR>
        {
            public VkCommandBufferSubmitInfoKHR(vulkan.VkCommandBufferSubmitInfo value) => this.Value = value;
            
            public vulkan.VkCommandBufferSubmitInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkCommandBufferSubmitInfoKHR other && Equals(other);
            
            public bool Equals(VkCommandBufferSubmitInfoKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkCommandBufferSubmitInfo (vulkan.VkCommandBufferSubmitInfoKHR from) => from.Value;
            
            public static implicit operator vulkan.VkCommandBufferSubmitInfoKHR (vulkan.VkCommandBufferSubmitInfo from) => new vulkan.VkCommandBufferSubmitInfoKHR(from);
            
            public static bool operator ==(VkCommandBufferSubmitInfoKHR left, VkCommandBufferSubmitInfoKHR right) => left.Equals(right);
            
            public static bool operator !=(VkCommandBufferSubmitInfoKHR left, VkCommandBufferSubmitInfoKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceSynchronization2FeaturesKHR : IEquatable<VkPhysicalDeviceSynchronization2FeaturesKHR>
        {
            public VkPhysicalDeviceSynchronization2FeaturesKHR(vulkan.VkPhysicalDeviceSynchronization2Features value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceSynchronization2Features Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceSynchronization2FeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceSynchronization2FeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceSynchronization2Features (vulkan.VkPhysicalDeviceSynchronization2FeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceSynchronization2FeaturesKHR (vulkan.VkPhysicalDeviceSynchronization2Features from) => new vulkan.VkPhysicalDeviceSynchronization2FeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceSynchronization2FeaturesKHR left, VkPhysicalDeviceSynchronization2FeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceSynchronization2FeaturesKHR left, VkPhysicalDeviceSynchronization2FeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetEvent2KHR : IEquatable<PFN_vkCmdSetEvent2KHR>
        {
            public PFN_vkCmdSetEvent2KHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkDependencyInfo*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkDependencyInfo*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetEvent2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetEvent2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkDependencyInfo*, void> (vulkan.PFN_vkCmdSetEvent2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetEvent2KHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkDependencyInfo*, void> from) => new vulkan.PFN_vkCmdSetEvent2KHR(from);
            
            public static bool operator ==(PFN_vkCmdSetEvent2KHR left, PFN_vkCmdSetEvent2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetEvent2KHR left, PFN_vkCmdSetEvent2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdResetEvent2KHR : IEquatable<PFN_vkCmdResetEvent2KHR>
        {
            public PFN_vkCmdResetEvent2KHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkPipelineStageFlags2, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkPipelineStageFlags2, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdResetEvent2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdResetEvent2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkPipelineStageFlags2, void> (vulkan.PFN_vkCmdResetEvent2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdResetEvent2KHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkEvent, vulkan.VkPipelineStageFlags2, void> from) => new vulkan.PFN_vkCmdResetEvent2KHR(from);
            
            public static bool operator ==(PFN_vkCmdResetEvent2KHR left, PFN_vkCmdResetEvent2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdResetEvent2KHR left, PFN_vkCmdResetEvent2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdWaitEvents2KHR : IEquatable<PFN_vkCmdWaitEvents2KHR>
        {
            public PFN_vkCmdWaitEvents2KHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkEvent*, vulkan.VkDependencyInfo*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkEvent*, vulkan.VkDependencyInfo*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdWaitEvents2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdWaitEvents2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkEvent*, vulkan.VkDependencyInfo*, void> (vulkan.PFN_vkCmdWaitEvents2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdWaitEvents2KHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkEvent*, vulkan.VkDependencyInfo*, void> from) => new vulkan.PFN_vkCmdWaitEvents2KHR(from);
            
            public static bool operator ==(PFN_vkCmdWaitEvents2KHR left, PFN_vkCmdWaitEvents2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdWaitEvents2KHR left, PFN_vkCmdWaitEvents2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdPipelineBarrier2KHR : IEquatable<PFN_vkCmdPipelineBarrier2KHR>
        {
            public PFN_vkCmdPipelineBarrier2KHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDependencyInfo*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDependencyInfo*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdPipelineBarrier2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdPipelineBarrier2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDependencyInfo*, void> (vulkan.PFN_vkCmdPipelineBarrier2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdPipelineBarrier2KHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDependencyInfo*, void> from) => new vulkan.PFN_vkCmdPipelineBarrier2KHR(from);
            
            public static bool operator ==(PFN_vkCmdPipelineBarrier2KHR left, PFN_vkCmdPipelineBarrier2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdPipelineBarrier2KHR left, PFN_vkCmdPipelineBarrier2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdWriteTimestamp2KHR : IEquatable<PFN_vkCmdWriteTimestamp2KHR>
        {
            public PFN_vkCmdWriteTimestamp2KHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlags2, vulkan.VkQueryPool, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlags2, vulkan.VkQueryPool, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdWriteTimestamp2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdWriteTimestamp2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlags2, vulkan.VkQueryPool, uint, void> (vulkan.PFN_vkCmdWriteTimestamp2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdWriteTimestamp2KHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlags2, vulkan.VkQueryPool, uint, void> from) => new vulkan.PFN_vkCmdWriteTimestamp2KHR(from);
            
            public static bool operator ==(PFN_vkCmdWriteTimestamp2KHR left, PFN_vkCmdWriteTimestamp2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdWriteTimestamp2KHR left, PFN_vkCmdWriteTimestamp2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkQueueSubmit2KHR : IEquatable<PFN_vkQueueSubmit2KHR>
        {
            public PFN_vkQueueSubmit2KHR(delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint, vulkan.VkSubmitInfo2*, vulkan.VkFence, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint, vulkan.VkSubmitInfo2*, vulkan.VkFence, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkQueueSubmit2KHR other && Equals(other);
            
            public bool Equals(PFN_vkQueueSubmit2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint, vulkan.VkSubmitInfo2*, vulkan.VkFence, vulkan.VkResult> (vulkan.PFN_vkQueueSubmit2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkQueueSubmit2KHR (delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint, vulkan.VkSubmitInfo2*, vulkan.VkFence, vulkan.VkResult> from) => new vulkan.PFN_vkQueueSubmit2KHR(from);
            
            public static bool operator ==(PFN_vkQueueSubmit2KHR left, PFN_vkQueueSubmit2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkQueueSubmit2KHR left, PFN_vkQueueSubmit2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdWriteBufferMarker2AMD : IEquatable<PFN_vkCmdWriteBufferMarker2AMD>
        {
            public PFN_vkCmdWriteBufferMarker2AMD(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlags2, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlags2, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdWriteBufferMarker2AMD other && Equals(other);
            
            public bool Equals(PFN_vkCmdWriteBufferMarker2AMD other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlags2, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, void> (vulkan.PFN_vkCmdWriteBufferMarker2AMD from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdWriteBufferMarker2AMD (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlags2, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, void> from) => new vulkan.PFN_vkCmdWriteBufferMarker2AMD(from);
            
            public static bool operator ==(PFN_vkCmdWriteBufferMarker2AMD left, PFN_vkCmdWriteBufferMarker2AMD right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdWriteBufferMarker2AMD left, PFN_vkCmdWriteBufferMarker2AMD right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetQueueCheckpointData2NV : IEquatable<PFN_vkGetQueueCheckpointData2NV>
        {
            public PFN_vkGetQueueCheckpointData2NV(delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint*, vulkan.VkCheckpointData2NV*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint*, vulkan.VkCheckpointData2NV*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetQueueCheckpointData2NV other && Equals(other);
            
            public bool Equals(PFN_vkGetQueueCheckpointData2NV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint*, vulkan.VkCheckpointData2NV*, void> (vulkan.PFN_vkGetQueueCheckpointData2NV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetQueueCheckpointData2NV (delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint*, vulkan.VkCheckpointData2NV*, void> from) => new vulkan.PFN_vkGetQueueCheckpointData2NV(from);
            
            public static bool operator ==(PFN_vkGetQueueCheckpointData2NV left, PFN_vkGetQueueCheckpointData2NV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetQueueCheckpointData2NV left, PFN_vkGetQueueCheckpointData2NV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR : IEquatable<VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR>
        {
            public VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures (vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR (vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures from) => new vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR left, VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR left, VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCopyBufferInfo2KHR : IEquatable<VkCopyBufferInfo2KHR>
        {
            public VkCopyBufferInfo2KHR(vulkan.VkCopyBufferInfo2 value) => this.Value = value;
            
            public vulkan.VkCopyBufferInfo2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkCopyBufferInfo2KHR other && Equals(other);
            
            public bool Equals(VkCopyBufferInfo2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkCopyBufferInfo2 (vulkan.VkCopyBufferInfo2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkCopyBufferInfo2KHR (vulkan.VkCopyBufferInfo2 from) => new vulkan.VkCopyBufferInfo2KHR(from);
            
            public static bool operator ==(VkCopyBufferInfo2KHR left, VkCopyBufferInfo2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkCopyBufferInfo2KHR left, VkCopyBufferInfo2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCopyImageInfo2KHR : IEquatable<VkCopyImageInfo2KHR>
        {
            public VkCopyImageInfo2KHR(vulkan.VkCopyImageInfo2 value) => this.Value = value;
            
            public vulkan.VkCopyImageInfo2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkCopyImageInfo2KHR other && Equals(other);
            
            public bool Equals(VkCopyImageInfo2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkCopyImageInfo2 (vulkan.VkCopyImageInfo2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkCopyImageInfo2KHR (vulkan.VkCopyImageInfo2 from) => new vulkan.VkCopyImageInfo2KHR(from);
            
            public static bool operator ==(VkCopyImageInfo2KHR left, VkCopyImageInfo2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkCopyImageInfo2KHR left, VkCopyImageInfo2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCopyBufferToImageInfo2KHR : IEquatable<VkCopyBufferToImageInfo2KHR>
        {
            public VkCopyBufferToImageInfo2KHR(vulkan.VkCopyBufferToImageInfo2 value) => this.Value = value;
            
            public vulkan.VkCopyBufferToImageInfo2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkCopyBufferToImageInfo2KHR other && Equals(other);
            
            public bool Equals(VkCopyBufferToImageInfo2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkCopyBufferToImageInfo2 (vulkan.VkCopyBufferToImageInfo2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkCopyBufferToImageInfo2KHR (vulkan.VkCopyBufferToImageInfo2 from) => new vulkan.VkCopyBufferToImageInfo2KHR(from);
            
            public static bool operator ==(VkCopyBufferToImageInfo2KHR left, VkCopyBufferToImageInfo2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkCopyBufferToImageInfo2KHR left, VkCopyBufferToImageInfo2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCopyImageToBufferInfo2KHR : IEquatable<VkCopyImageToBufferInfo2KHR>
        {
            public VkCopyImageToBufferInfo2KHR(vulkan.VkCopyImageToBufferInfo2 value) => this.Value = value;
            
            public vulkan.VkCopyImageToBufferInfo2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkCopyImageToBufferInfo2KHR other && Equals(other);
            
            public bool Equals(VkCopyImageToBufferInfo2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkCopyImageToBufferInfo2 (vulkan.VkCopyImageToBufferInfo2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkCopyImageToBufferInfo2KHR (vulkan.VkCopyImageToBufferInfo2 from) => new vulkan.VkCopyImageToBufferInfo2KHR(from);
            
            public static bool operator ==(VkCopyImageToBufferInfo2KHR left, VkCopyImageToBufferInfo2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkCopyImageToBufferInfo2KHR left, VkCopyImageToBufferInfo2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBlitImageInfo2KHR : IEquatable<VkBlitImageInfo2KHR>
        {
            public VkBlitImageInfo2KHR(vulkan.VkBlitImageInfo2 value) => this.Value = value;
            
            public vulkan.VkBlitImageInfo2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkBlitImageInfo2KHR other && Equals(other);
            
            public bool Equals(VkBlitImageInfo2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBlitImageInfo2 (vulkan.VkBlitImageInfo2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkBlitImageInfo2KHR (vulkan.VkBlitImageInfo2 from) => new vulkan.VkBlitImageInfo2KHR(from);
            
            public static bool operator ==(VkBlitImageInfo2KHR left, VkBlitImageInfo2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkBlitImageInfo2KHR left, VkBlitImageInfo2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkResolveImageInfo2KHR : IEquatable<VkResolveImageInfo2KHR>
        {
            public VkResolveImageInfo2KHR(vulkan.VkResolveImageInfo2 value) => this.Value = value;
            
            public vulkan.VkResolveImageInfo2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkResolveImageInfo2KHR other && Equals(other);
            
            public bool Equals(VkResolveImageInfo2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkResolveImageInfo2 (vulkan.VkResolveImageInfo2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkResolveImageInfo2KHR (vulkan.VkResolveImageInfo2 from) => new vulkan.VkResolveImageInfo2KHR(from);
            
            public static bool operator ==(VkResolveImageInfo2KHR left, VkResolveImageInfo2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkResolveImageInfo2KHR left, VkResolveImageInfo2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBufferCopy2KHR : IEquatable<VkBufferCopy2KHR>
        {
            public VkBufferCopy2KHR(vulkan.VkBufferCopy2 value) => this.Value = value;
            
            public vulkan.VkBufferCopy2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkBufferCopy2KHR other && Equals(other);
            
            public bool Equals(VkBufferCopy2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBufferCopy2 (vulkan.VkBufferCopy2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkBufferCopy2KHR (vulkan.VkBufferCopy2 from) => new vulkan.VkBufferCopy2KHR(from);
            
            public static bool operator ==(VkBufferCopy2KHR left, VkBufferCopy2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkBufferCopy2KHR left, VkBufferCopy2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImageCopy2KHR : IEquatable<VkImageCopy2KHR>
        {
            public VkImageCopy2KHR(vulkan.VkImageCopy2 value) => this.Value = value;
            
            public vulkan.VkImageCopy2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageCopy2KHR other && Equals(other);
            
            public bool Equals(VkImageCopy2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkImageCopy2 (vulkan.VkImageCopy2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkImageCopy2KHR (vulkan.VkImageCopy2 from) => new vulkan.VkImageCopy2KHR(from);
            
            public static bool operator ==(VkImageCopy2KHR left, VkImageCopy2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkImageCopy2KHR left, VkImageCopy2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImageBlit2KHR : IEquatable<VkImageBlit2KHR>
        {
            public VkImageBlit2KHR(vulkan.VkImageBlit2 value) => this.Value = value;
            
            public vulkan.VkImageBlit2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageBlit2KHR other && Equals(other);
            
            public bool Equals(VkImageBlit2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkImageBlit2 (vulkan.VkImageBlit2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkImageBlit2KHR (vulkan.VkImageBlit2 from) => new vulkan.VkImageBlit2KHR(from);
            
            public static bool operator ==(VkImageBlit2KHR left, VkImageBlit2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkImageBlit2KHR left, VkImageBlit2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBufferImageCopy2KHR : IEquatable<VkBufferImageCopy2KHR>
        {
            public VkBufferImageCopy2KHR(vulkan.VkBufferImageCopy2 value) => this.Value = value;
            
            public vulkan.VkBufferImageCopy2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkBufferImageCopy2KHR other && Equals(other);
            
            public bool Equals(VkBufferImageCopy2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBufferImageCopy2 (vulkan.VkBufferImageCopy2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkBufferImageCopy2KHR (vulkan.VkBufferImageCopy2 from) => new vulkan.VkBufferImageCopy2KHR(from);
            
            public static bool operator ==(VkBufferImageCopy2KHR left, VkBufferImageCopy2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkBufferImageCopy2KHR left, VkBufferImageCopy2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImageResolve2KHR : IEquatable<VkImageResolve2KHR>
        {
            public VkImageResolve2KHR(vulkan.VkImageResolve2 value) => this.Value = value;
            
            public vulkan.VkImageResolve2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageResolve2KHR other && Equals(other);
            
            public bool Equals(VkImageResolve2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkImageResolve2 (vulkan.VkImageResolve2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkImageResolve2KHR (vulkan.VkImageResolve2 from) => new vulkan.VkImageResolve2KHR(from);
            
            public static bool operator ==(VkImageResolve2KHR left, VkImageResolve2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkImageResolve2KHR left, VkImageResolve2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyBuffer2KHR : IEquatable<PFN_vkCmdCopyBuffer2KHR>
        {
            public PFN_vkCmdCopyBuffer2KHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyBufferInfo2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyBufferInfo2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyBuffer2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyBuffer2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyBufferInfo2*, void> (vulkan.PFN_vkCmdCopyBuffer2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyBuffer2KHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyBufferInfo2*, void> from) => new vulkan.PFN_vkCmdCopyBuffer2KHR(from);
            
            public static bool operator ==(PFN_vkCmdCopyBuffer2KHR left, PFN_vkCmdCopyBuffer2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyBuffer2KHR left, PFN_vkCmdCopyBuffer2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyImage2KHR : IEquatable<PFN_vkCmdCopyImage2KHR>
        {
            public PFN_vkCmdCopyImage2KHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyImageInfo2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyImageInfo2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyImage2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyImage2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyImageInfo2*, void> (vulkan.PFN_vkCmdCopyImage2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyImage2KHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyImageInfo2*, void> from) => new vulkan.PFN_vkCmdCopyImage2KHR(from);
            
            public static bool operator ==(PFN_vkCmdCopyImage2KHR left, PFN_vkCmdCopyImage2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyImage2KHR left, PFN_vkCmdCopyImage2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyBufferToImage2KHR : IEquatable<PFN_vkCmdCopyBufferToImage2KHR>
        {
            public PFN_vkCmdCopyBufferToImage2KHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyBufferToImageInfo2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyBufferToImageInfo2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyBufferToImage2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyBufferToImage2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyBufferToImageInfo2*, void> (vulkan.PFN_vkCmdCopyBufferToImage2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyBufferToImage2KHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyBufferToImageInfo2*, void> from) => new vulkan.PFN_vkCmdCopyBufferToImage2KHR(from);
            
            public static bool operator ==(PFN_vkCmdCopyBufferToImage2KHR left, PFN_vkCmdCopyBufferToImage2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyBufferToImage2KHR left, PFN_vkCmdCopyBufferToImage2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyImageToBuffer2KHR : IEquatable<PFN_vkCmdCopyImageToBuffer2KHR>
        {
            public PFN_vkCmdCopyImageToBuffer2KHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyImageToBufferInfo2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyImageToBufferInfo2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyImageToBuffer2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyImageToBuffer2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyImageToBufferInfo2*, void> (vulkan.PFN_vkCmdCopyImageToBuffer2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyImageToBuffer2KHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyImageToBufferInfo2*, void> from) => new vulkan.PFN_vkCmdCopyImageToBuffer2KHR(from);
            
            public static bool operator ==(PFN_vkCmdCopyImageToBuffer2KHR left, PFN_vkCmdCopyImageToBuffer2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyImageToBuffer2KHR left, PFN_vkCmdCopyImageToBuffer2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBlitImage2KHR : IEquatable<PFN_vkCmdBlitImage2KHR>
        {
            public PFN_vkCmdBlitImage2KHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBlitImageInfo2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBlitImageInfo2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBlitImage2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdBlitImage2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBlitImageInfo2*, void> (vulkan.PFN_vkCmdBlitImage2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBlitImage2KHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBlitImageInfo2*, void> from) => new vulkan.PFN_vkCmdBlitImage2KHR(from);
            
            public static bool operator ==(PFN_vkCmdBlitImage2KHR left, PFN_vkCmdBlitImage2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBlitImage2KHR left, PFN_vkCmdBlitImage2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdResolveImage2KHR : IEquatable<PFN_vkCmdResolveImage2KHR>
        {
            public PFN_vkCmdResolveImage2KHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkResolveImageInfo2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkResolveImageInfo2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdResolveImage2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdResolveImage2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkResolveImageInfo2*, void> (vulkan.PFN_vkCmdResolveImage2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdResolveImage2KHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkResolveImageInfo2*, void> from) => new vulkan.PFN_vkCmdResolveImage2KHR(from);
            
            public static bool operator ==(PFN_vkCmdResolveImage2KHR left, PFN_vkCmdResolveImage2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdResolveImage2KHR left, PFN_vkCmdResolveImage2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkFormatFeatureFlags2KHR : IEquatable<VkFormatFeatureFlags2KHR>
        {
            public VkFormatFeatureFlags2KHR(vulkan.VkFormatFeatureFlags2 value) => this.Value = value;
            
            public vulkan.VkFormatFeatureFlags2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkFormatFeatureFlags2KHR other && Equals(other);
            
            public bool Equals(VkFormatFeatureFlags2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFormatFeatureFlags2 (vulkan.VkFormatFeatureFlags2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkFormatFeatureFlags2KHR (vulkan.VkFormatFeatureFlags2 from) => new vulkan.VkFormatFeatureFlags2KHR(from);
            
            public static bool operator ==(VkFormatFeatureFlags2KHR left, VkFormatFeatureFlags2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkFormatFeatureFlags2KHR left, VkFormatFeatureFlags2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkFormatFeatureFlagBits2KHR : IEquatable<VkFormatFeatureFlagBits2KHR>
        {
            public VkFormatFeatureFlagBits2KHR(vulkan.VkFormatFeatureFlagBits2 value) => this.Value = value;
            
            public vulkan.VkFormatFeatureFlagBits2 Value { get; }
            
            public override bool Equals(object obj) => obj is VkFormatFeatureFlagBits2KHR other && Equals(other);
            
            public bool Equals(VkFormatFeatureFlagBits2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFormatFeatureFlagBits2 (vulkan.VkFormatFeatureFlagBits2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkFormatFeatureFlagBits2KHR (vulkan.VkFormatFeatureFlagBits2 from) => new vulkan.VkFormatFeatureFlagBits2KHR(from);
            
            public static bool operator ==(VkFormatFeatureFlagBits2KHR left, VkFormatFeatureFlagBits2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkFormatFeatureFlagBits2KHR left, VkFormatFeatureFlagBits2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkFormatProperties3KHR : IEquatable<VkFormatProperties3KHR>
        {
            public VkFormatProperties3KHR(vulkan.VkFormatProperties3 value) => this.Value = value;
            
            public vulkan.VkFormatProperties3 Value { get; }
            
            public override bool Equals(object obj) => obj is VkFormatProperties3KHR other && Equals(other);
            
            public bool Equals(VkFormatProperties3KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFormatProperties3 (vulkan.VkFormatProperties3KHR from) => from.Value;
            
            public static implicit operator vulkan.VkFormatProperties3KHR (vulkan.VkFormatProperties3 from) => new vulkan.VkFormatProperties3KHR(from);
            
            public static bool operator ==(VkFormatProperties3KHR left, VkFormatProperties3KHR right) => left.Equals(right);
            
            public static bool operator !=(VkFormatProperties3KHR left, VkFormatProperties3KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdTraceRaysIndirect2KHR : IEquatable<PFN_vkCmdTraceRaysIndirect2KHR>
        {
            public PFN_vkCmdTraceRaysIndirect2KHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDeviceAddress, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDeviceAddress, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdTraceRaysIndirect2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdTraceRaysIndirect2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDeviceAddress, void> (vulkan.PFN_vkCmdTraceRaysIndirect2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdTraceRaysIndirect2KHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDeviceAddress, void> from) => new vulkan.PFN_vkCmdTraceRaysIndirect2KHR(from);
            
            public static bool operator ==(PFN_vkCmdTraceRaysIndirect2KHR left, PFN_vkCmdTraceRaysIndirect2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdTraceRaysIndirect2KHR left, PFN_vkCmdTraceRaysIndirect2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceMaintenance4FeaturesKHR : IEquatable<VkPhysicalDeviceMaintenance4FeaturesKHR>
        {
            public VkPhysicalDeviceMaintenance4FeaturesKHR(vulkan.VkPhysicalDeviceMaintenance4Features value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceMaintenance4Features Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceMaintenance4FeaturesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceMaintenance4FeaturesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceMaintenance4Features (vulkan.VkPhysicalDeviceMaintenance4FeaturesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceMaintenance4FeaturesKHR (vulkan.VkPhysicalDeviceMaintenance4Features from) => new vulkan.VkPhysicalDeviceMaintenance4FeaturesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceMaintenance4FeaturesKHR left, VkPhysicalDeviceMaintenance4FeaturesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceMaintenance4FeaturesKHR left, VkPhysicalDeviceMaintenance4FeaturesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceMaintenance4PropertiesKHR : IEquatable<VkPhysicalDeviceMaintenance4PropertiesKHR>
        {
            public VkPhysicalDeviceMaintenance4PropertiesKHR(vulkan.VkPhysicalDeviceMaintenance4Properties value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceMaintenance4Properties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceMaintenance4PropertiesKHR other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceMaintenance4PropertiesKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceMaintenance4Properties (vulkan.VkPhysicalDeviceMaintenance4PropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceMaintenance4PropertiesKHR (vulkan.VkPhysicalDeviceMaintenance4Properties from) => new vulkan.VkPhysicalDeviceMaintenance4PropertiesKHR(from);
            
            public static bool operator ==(VkPhysicalDeviceMaintenance4PropertiesKHR left, VkPhysicalDeviceMaintenance4PropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceMaintenance4PropertiesKHR left, VkPhysicalDeviceMaintenance4PropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDeviceBufferMemoryRequirementsKHR : IEquatable<VkDeviceBufferMemoryRequirementsKHR>
        {
            public VkDeviceBufferMemoryRequirementsKHR(vulkan.VkDeviceBufferMemoryRequirements value) => this.Value = value;
            
            public vulkan.VkDeviceBufferMemoryRequirements Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceBufferMemoryRequirementsKHR other && Equals(other);
            
            public bool Equals(VkDeviceBufferMemoryRequirementsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDeviceBufferMemoryRequirements (vulkan.VkDeviceBufferMemoryRequirementsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceBufferMemoryRequirementsKHR (vulkan.VkDeviceBufferMemoryRequirements from) => new vulkan.VkDeviceBufferMemoryRequirementsKHR(from);
            
            public static bool operator ==(VkDeviceBufferMemoryRequirementsKHR left, VkDeviceBufferMemoryRequirementsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceBufferMemoryRequirementsKHR left, VkDeviceBufferMemoryRequirementsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDeviceImageMemoryRequirementsKHR : IEquatable<VkDeviceImageMemoryRequirementsKHR>
        {
            public VkDeviceImageMemoryRequirementsKHR(vulkan.VkDeviceImageMemoryRequirements value) => this.Value = value;
            
            public vulkan.VkDeviceImageMemoryRequirements Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceImageMemoryRequirementsKHR other && Equals(other);
            
            public bool Equals(VkDeviceImageMemoryRequirementsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDeviceImageMemoryRequirements (vulkan.VkDeviceImageMemoryRequirementsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceImageMemoryRequirementsKHR (vulkan.VkDeviceImageMemoryRequirements from) => new vulkan.VkDeviceImageMemoryRequirementsKHR(from);
            
            public static bool operator ==(VkDeviceImageMemoryRequirementsKHR left, VkDeviceImageMemoryRequirementsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceImageMemoryRequirementsKHR left, VkDeviceImageMemoryRequirementsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceBufferMemoryRequirementsKHR : IEquatable<PFN_vkGetDeviceBufferMemoryRequirementsKHR>
        {
            public PFN_vkGetDeviceBufferMemoryRequirementsKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceBufferMemoryRequirements*, vulkan.VkMemoryRequirements2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceBufferMemoryRequirements*, vulkan.VkMemoryRequirements2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceBufferMemoryRequirementsKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceBufferMemoryRequirementsKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceBufferMemoryRequirements*, vulkan.VkMemoryRequirements2*, void> (vulkan.PFN_vkGetDeviceBufferMemoryRequirementsKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceBufferMemoryRequirementsKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceBufferMemoryRequirements*, vulkan.VkMemoryRequirements2*, void> from) => new vulkan.PFN_vkGetDeviceBufferMemoryRequirementsKHR(from);
            
            public static bool operator ==(PFN_vkGetDeviceBufferMemoryRequirementsKHR left, PFN_vkGetDeviceBufferMemoryRequirementsKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceBufferMemoryRequirementsKHR left, PFN_vkGetDeviceBufferMemoryRequirementsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceImageMemoryRequirementsKHR : IEquatable<PFN_vkGetDeviceImageMemoryRequirementsKHR>
        {
            public PFN_vkGetDeviceImageMemoryRequirementsKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageMemoryRequirements*, vulkan.VkMemoryRequirements2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageMemoryRequirements*, vulkan.VkMemoryRequirements2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceImageMemoryRequirementsKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceImageMemoryRequirementsKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageMemoryRequirements*, vulkan.VkMemoryRequirements2*, void> (vulkan.PFN_vkGetDeviceImageMemoryRequirementsKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceImageMemoryRequirementsKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageMemoryRequirements*, vulkan.VkMemoryRequirements2*, void> from) => new vulkan.PFN_vkGetDeviceImageMemoryRequirementsKHR(from);
            
            public static bool operator ==(PFN_vkGetDeviceImageMemoryRequirementsKHR left, PFN_vkGetDeviceImageMemoryRequirementsKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceImageMemoryRequirementsKHR left, PFN_vkGetDeviceImageMemoryRequirementsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceImageSparseMemoryRequirementsKHR : IEquatable<PFN_vkGetDeviceImageSparseMemoryRequirementsKHR>
        {
            public PFN_vkGetDeviceImageSparseMemoryRequirementsKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageMemoryRequirements*, uint*, vulkan.VkSparseImageMemoryRequirements2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageMemoryRequirements*, uint*, vulkan.VkSparseImageMemoryRequirements2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceImageSparseMemoryRequirementsKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceImageSparseMemoryRequirementsKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageMemoryRequirements*, uint*, vulkan.VkSparseImageMemoryRequirements2*, void> (vulkan.PFN_vkGetDeviceImageSparseMemoryRequirementsKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceImageSparseMemoryRequirementsKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageMemoryRequirements*, uint*, vulkan.VkSparseImageMemoryRequirements2*, void> from) => new vulkan.PFN_vkGetDeviceImageSparseMemoryRequirementsKHR(from);
            
            public static bool operator ==(PFN_vkGetDeviceImageSparseMemoryRequirementsKHR left, PFN_vkGetDeviceImageSparseMemoryRequirementsKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceImageSparseMemoryRequirementsKHR left, PFN_vkGetDeviceImageSparseMemoryRequirementsKHR right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Flag bits for VkPipelineCreateFlagBits2KHR
        /// </summary>
        public readonly partial struct VkPipelineCreateFlagBits2KHR : IEquatable<VkPipelineCreateFlagBits2KHR>
        {
            public VkPipelineCreateFlagBits2KHR(vulkan.VkFlags64 value) => this.Value = value;
            
            public vulkan.VkFlags64 Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineCreateFlagBits2KHR other && Equals(other);
            
            public bool Equals(VkPipelineCreateFlagBits2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags64 (vulkan.VkPipelineCreateFlagBits2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineCreateFlagBits2KHR (vulkan.VkFlags64 from) => new vulkan.VkPipelineCreateFlagBits2KHR(from);
            
            public static bool operator ==(VkPipelineCreateFlagBits2KHR left, VkPipelineCreateFlagBits2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineCreateFlagBits2KHR left, VkPipelineCreateFlagBits2KHR right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Flag bits for VkBufferUsageFlagBits2KHR
        /// </summary>
        public readonly partial struct VkBufferUsageFlagBits2KHR : IEquatable<VkBufferUsageFlagBits2KHR>
        {
            public VkBufferUsageFlagBits2KHR(vulkan.VkFlags64 value) => this.Value = value;
            
            public vulkan.VkFlags64 Value { get; }
            
            public override bool Equals(object obj) => obj is VkBufferUsageFlagBits2KHR other && Equals(other);
            
            public bool Equals(VkBufferUsageFlagBits2KHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags64 (vulkan.VkBufferUsageFlagBits2KHR from) => from.Value;
            
            public static implicit operator vulkan.VkBufferUsageFlagBits2KHR (vulkan.VkFlags64 from) => new vulkan.VkBufferUsageFlagBits2KHR(from);
            
            public static bool operator ==(VkBufferUsageFlagBits2KHR left, VkBufferUsageFlagBits2KHR right) => left.Equals(right);
            
            public static bool operator !=(VkBufferUsageFlagBits2KHR left, VkBufferUsageFlagBits2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBindIndexBuffer2KHR : IEquatable<PFN_vkCmdBindIndexBuffer2KHR>
        {
            public PFN_vkCmdBindIndexBuffer2KHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkIndexType, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkIndexType, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBindIndexBuffer2KHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdBindIndexBuffer2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkIndexType, void> (vulkan.PFN_vkCmdBindIndexBuffer2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBindIndexBuffer2KHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkIndexType, void> from) => new vulkan.PFN_vkCmdBindIndexBuffer2KHR(from);
            
            public static bool operator ==(PFN_vkCmdBindIndexBuffer2KHR left, PFN_vkCmdBindIndexBuffer2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBindIndexBuffer2KHR left, PFN_vkCmdBindIndexBuffer2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetRenderingAreaGranularityKHR : IEquatable<PFN_vkGetRenderingAreaGranularityKHR>
        {
            public PFN_vkGetRenderingAreaGranularityKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderingAreaInfoKHR*, vulkan.VkExtent2D*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderingAreaInfoKHR*, vulkan.VkExtent2D*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetRenderingAreaGranularityKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetRenderingAreaGranularityKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderingAreaInfoKHR*, vulkan.VkExtent2D*, void> (vulkan.PFN_vkGetRenderingAreaGranularityKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetRenderingAreaGranularityKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderingAreaInfoKHR*, vulkan.VkExtent2D*, void> from) => new vulkan.PFN_vkGetRenderingAreaGranularityKHR(from);
            
            public static bool operator ==(PFN_vkGetRenderingAreaGranularityKHR left, PFN_vkGetRenderingAreaGranularityKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetRenderingAreaGranularityKHR left, PFN_vkGetRenderingAreaGranularityKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceImageSubresourceLayoutKHR : IEquatable<PFN_vkGetDeviceImageSubresourceLayoutKHR>
        {
            public PFN_vkGetDeviceImageSubresourceLayoutKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageSubresourceInfoKHR*, vulkan.VkSubresourceLayout2KHR*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageSubresourceInfoKHR*, vulkan.VkSubresourceLayout2KHR*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceImageSubresourceLayoutKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceImageSubresourceLayoutKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageSubresourceInfoKHR*, vulkan.VkSubresourceLayout2KHR*, void> (vulkan.PFN_vkGetDeviceImageSubresourceLayoutKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceImageSubresourceLayoutKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceImageSubresourceInfoKHR*, vulkan.VkSubresourceLayout2KHR*, void> from) => new vulkan.PFN_vkGetDeviceImageSubresourceLayoutKHR(from);
            
            public static bool operator ==(PFN_vkGetDeviceImageSubresourceLayoutKHR left, PFN_vkGetDeviceImageSubresourceLayoutKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceImageSubresourceLayoutKHR left, PFN_vkGetDeviceImageSubresourceLayoutKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetImageSubresourceLayout2KHR : IEquatable<PFN_vkGetImageSubresourceLayout2KHR>
        {
            public PFN_vkGetImageSubresourceLayout2KHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkImageSubresource2KHR*, vulkan.VkSubresourceLayout2KHR*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkImageSubresource2KHR*, vulkan.VkSubresourceLayout2KHR*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetImageSubresourceLayout2KHR other && Equals(other);
            
            public bool Equals(PFN_vkGetImageSubresourceLayout2KHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkImageSubresource2KHR*, vulkan.VkSubresourceLayout2KHR*, void> (vulkan.PFN_vkGetImageSubresourceLayout2KHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetImageSubresourceLayout2KHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkImageSubresource2KHR*, vulkan.VkSubresourceLayout2KHR*, void> from) => new vulkan.PFN_vkGetImageSubresourceLayout2KHR(from);
            
            public static bool operator ==(PFN_vkGetImageSubresourceLayout2KHR left, PFN_vkGetImageSubresourceLayout2KHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetImageSubresourceLayout2KHR left, PFN_vkGetImageSubresourceLayout2KHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR : IEquatable<PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR>
        {
            public PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkCooperativeMatrixPropertiesKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkCooperativeMatrixPropertiesKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkCooperativeMatrixPropertiesKHR*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkCooperativeMatrixPropertiesKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR left, PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR left, PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDebugReportCallbackEXT : IEquatable<VkDebugReportCallbackEXT>
        {
            public VkDebugReportCallbackEXT(vulkan.VkDebugReportCallbackEXT_T value) => this.Value = value;
            
            public vulkan.VkDebugReportCallbackEXT_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkDebugReportCallbackEXT other && Equals(other);
            
            public bool Equals(VkDebugReportCallbackEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDebugReportCallbackEXT_T (vulkan.VkDebugReportCallbackEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDebugReportCallbackEXT (vulkan.VkDebugReportCallbackEXT_T from) => new vulkan.VkDebugReportCallbackEXT(from);
            
            public static bool operator ==(VkDebugReportCallbackEXT left, VkDebugReportCallbackEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDebugReportCallbackEXT left, VkDebugReportCallbackEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateDebugReportCallbackEXT : IEquatable<PFN_vkCreateDebugReportCallbackEXT>
        {
            public PFN_vkCreateDebugReportCallbackEXT(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugReportCallbackCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkDebugReportCallbackEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugReportCallbackCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkDebugReportCallbackEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateDebugReportCallbackEXT other && Equals(other);
            
            public bool Equals(PFN_vkCreateDebugReportCallbackEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugReportCallbackCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkDebugReportCallbackEXT*, vulkan.VkResult> (vulkan.PFN_vkCreateDebugReportCallbackEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateDebugReportCallbackEXT (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugReportCallbackCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkDebugReportCallbackEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateDebugReportCallbackEXT(from);
            
            public static bool operator ==(PFN_vkCreateDebugReportCallbackEXT left, PFN_vkCreateDebugReportCallbackEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateDebugReportCallbackEXT left, PFN_vkCreateDebugReportCallbackEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyDebugReportCallbackEXT : IEquatable<PFN_vkDestroyDebugReportCallbackEXT>
        {
            public PFN_vkDestroyDebugReportCallbackEXT(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugReportCallbackEXT, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugReportCallbackEXT, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyDebugReportCallbackEXT other && Equals(other);
            
            public bool Equals(PFN_vkDestroyDebugReportCallbackEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugReportCallbackEXT, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyDebugReportCallbackEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyDebugReportCallbackEXT (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugReportCallbackEXT, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyDebugReportCallbackEXT(from);
            
            public static bool operator ==(PFN_vkDestroyDebugReportCallbackEXT left, PFN_vkDestroyDebugReportCallbackEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyDebugReportCallbackEXT left, PFN_vkDestroyDebugReportCallbackEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDebugReportMessageEXT : IEquatable<PFN_vkDebugReportMessageEXT>
        {
            public PFN_vkDebugReportMessageEXT(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugReportFlagsEXT, vulkan.VkDebugReportObjectTypeEXT, ulong, nuint, int, byte*, byte*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugReportFlagsEXT, vulkan.VkDebugReportObjectTypeEXT, ulong, nuint, int, byte*, byte*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDebugReportMessageEXT other && Equals(other);
            
            public bool Equals(PFN_vkDebugReportMessageEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugReportFlagsEXT, vulkan.VkDebugReportObjectTypeEXT, ulong, nuint, int, byte*, byte*, void> (vulkan.PFN_vkDebugReportMessageEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDebugReportMessageEXT (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugReportFlagsEXT, vulkan.VkDebugReportObjectTypeEXT, ulong, nuint, int, byte*, byte*, void> from) => new vulkan.PFN_vkDebugReportMessageEXT(from);
            
            public static bool operator ==(PFN_vkDebugReportMessageEXT left, PFN_vkDebugReportMessageEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDebugReportMessageEXT left, PFN_vkDebugReportMessageEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDebugMarkerSetObjectTagEXT : IEquatable<PFN_vkDebugMarkerSetObjectTagEXT>
        {
            public PFN_vkDebugMarkerSetObjectTagEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDebugMarkerObjectTagInfoEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDebugMarkerObjectTagInfoEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDebugMarkerSetObjectTagEXT other && Equals(other);
            
            public bool Equals(PFN_vkDebugMarkerSetObjectTagEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDebugMarkerObjectTagInfoEXT*, vulkan.VkResult> (vulkan.PFN_vkDebugMarkerSetObjectTagEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDebugMarkerSetObjectTagEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDebugMarkerObjectTagInfoEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkDebugMarkerSetObjectTagEXT(from);
            
            public static bool operator ==(PFN_vkDebugMarkerSetObjectTagEXT left, PFN_vkDebugMarkerSetObjectTagEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDebugMarkerSetObjectTagEXT left, PFN_vkDebugMarkerSetObjectTagEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDebugMarkerSetObjectNameEXT : IEquatable<PFN_vkDebugMarkerSetObjectNameEXT>
        {
            public PFN_vkDebugMarkerSetObjectNameEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDebugMarkerObjectNameInfoEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDebugMarkerObjectNameInfoEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDebugMarkerSetObjectNameEXT other && Equals(other);
            
            public bool Equals(PFN_vkDebugMarkerSetObjectNameEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDebugMarkerObjectNameInfoEXT*, vulkan.VkResult> (vulkan.PFN_vkDebugMarkerSetObjectNameEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDebugMarkerSetObjectNameEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDebugMarkerObjectNameInfoEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkDebugMarkerSetObjectNameEXT(from);
            
            public static bool operator ==(PFN_vkDebugMarkerSetObjectNameEXT left, PFN_vkDebugMarkerSetObjectNameEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDebugMarkerSetObjectNameEXT left, PFN_vkDebugMarkerSetObjectNameEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDebugMarkerBeginEXT : IEquatable<PFN_vkCmdDebugMarkerBeginEXT>
        {
            public PFN_vkCmdDebugMarkerBeginEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDebugMarkerMarkerInfoEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDebugMarkerMarkerInfoEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDebugMarkerBeginEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdDebugMarkerBeginEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDebugMarkerMarkerInfoEXT*, void> (vulkan.PFN_vkCmdDebugMarkerBeginEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDebugMarkerBeginEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDebugMarkerMarkerInfoEXT*, void> from) => new vulkan.PFN_vkCmdDebugMarkerBeginEXT(from);
            
            public static bool operator ==(PFN_vkCmdDebugMarkerBeginEXT left, PFN_vkCmdDebugMarkerBeginEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDebugMarkerBeginEXT left, PFN_vkCmdDebugMarkerBeginEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDebugMarkerEndEXT : IEquatable<PFN_vkCmdDebugMarkerEndEXT>
        {
            public PFN_vkCmdDebugMarkerEndEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDebugMarkerEndEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdDebugMarkerEndEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> (vulkan.PFN_vkCmdDebugMarkerEndEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDebugMarkerEndEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> from) => new vulkan.PFN_vkCmdDebugMarkerEndEXT(from);
            
            public static bool operator ==(PFN_vkCmdDebugMarkerEndEXT left, PFN_vkCmdDebugMarkerEndEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDebugMarkerEndEXT left, PFN_vkCmdDebugMarkerEndEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDebugMarkerInsertEXT : IEquatable<PFN_vkCmdDebugMarkerInsertEXT>
        {
            public PFN_vkCmdDebugMarkerInsertEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDebugMarkerMarkerInfoEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDebugMarkerMarkerInfoEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDebugMarkerInsertEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdDebugMarkerInsertEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDebugMarkerMarkerInfoEXT*, void> (vulkan.PFN_vkCmdDebugMarkerInsertEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDebugMarkerInsertEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDebugMarkerMarkerInfoEXT*, void> from) => new vulkan.PFN_vkCmdDebugMarkerInsertEXT(from);
            
            public static bool operator ==(PFN_vkCmdDebugMarkerInsertEXT left, PFN_vkCmdDebugMarkerInsertEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDebugMarkerInsertEXT left, PFN_vkCmdDebugMarkerInsertEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBindTransformFeedbackBuffersEXT : IEquatable<PFN_vkCmdBindTransformFeedbackBuffersEXT>
        {
            public PFN_vkCmdBindTransformFeedbackBuffersEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBindTransformFeedbackBuffersEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdBindTransformFeedbackBuffersEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, void> (vulkan.PFN_vkCmdBindTransformFeedbackBuffersEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBindTransformFeedbackBuffersEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, void> from) => new vulkan.PFN_vkCmdBindTransformFeedbackBuffersEXT(from);
            
            public static bool operator ==(PFN_vkCmdBindTransformFeedbackBuffersEXT left, PFN_vkCmdBindTransformFeedbackBuffersEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBindTransformFeedbackBuffersEXT left, PFN_vkCmdBindTransformFeedbackBuffersEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBeginTransformFeedbackEXT : IEquatable<PFN_vkCmdBeginTransformFeedbackEXT>
        {
            public PFN_vkCmdBeginTransformFeedbackEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBeginTransformFeedbackEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdBeginTransformFeedbackEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, void> (vulkan.PFN_vkCmdBeginTransformFeedbackEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBeginTransformFeedbackEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, void> from) => new vulkan.PFN_vkCmdBeginTransformFeedbackEXT(from);
            
            public static bool operator ==(PFN_vkCmdBeginTransformFeedbackEXT left, PFN_vkCmdBeginTransformFeedbackEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBeginTransformFeedbackEXT left, PFN_vkCmdBeginTransformFeedbackEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdEndTransformFeedbackEXT : IEquatable<PFN_vkCmdEndTransformFeedbackEXT>
        {
            public PFN_vkCmdEndTransformFeedbackEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdEndTransformFeedbackEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdEndTransformFeedbackEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, void> (vulkan.PFN_vkCmdEndTransformFeedbackEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdEndTransformFeedbackEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, void> from) => new vulkan.PFN_vkCmdEndTransformFeedbackEXT(from);
            
            public static bool operator ==(PFN_vkCmdEndTransformFeedbackEXT left, PFN_vkCmdEndTransformFeedbackEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdEndTransformFeedbackEXT left, PFN_vkCmdEndTransformFeedbackEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBeginQueryIndexedEXT : IEquatable<PFN_vkCmdBeginQueryIndexedEXT>
        {
            public PFN_vkCmdBeginQueryIndexedEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, vulkan.VkQueryControlFlags, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, vulkan.VkQueryControlFlags, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBeginQueryIndexedEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdBeginQueryIndexedEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, vulkan.VkQueryControlFlags, uint, void> (vulkan.PFN_vkCmdBeginQueryIndexedEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBeginQueryIndexedEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, vulkan.VkQueryControlFlags, uint, void> from) => new vulkan.PFN_vkCmdBeginQueryIndexedEXT(from);
            
            public static bool operator ==(PFN_vkCmdBeginQueryIndexedEXT left, PFN_vkCmdBeginQueryIndexedEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBeginQueryIndexedEXT left, PFN_vkCmdBeginQueryIndexedEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdEndQueryIndexedEXT : IEquatable<PFN_vkCmdEndQueryIndexedEXT>
        {
            public PFN_vkCmdEndQueryIndexedEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdEndQueryIndexedEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdEndQueryIndexedEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, uint, void> (vulkan.PFN_vkCmdEndQueryIndexedEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdEndQueryIndexedEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkQueryPool, uint, uint, void> from) => new vulkan.PFN_vkCmdEndQueryIndexedEXT(from);
            
            public static bool operator ==(PFN_vkCmdEndQueryIndexedEXT left, PFN_vkCmdEndQueryIndexedEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdEndQueryIndexedEXT left, PFN_vkCmdEndQueryIndexedEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawIndirectByteCountEXT : IEquatable<PFN_vkCmdDrawIndirectByteCountEXT>
        {
            public PFN_vkCmdDrawIndirectByteCountEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawIndirectByteCountEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawIndirectByteCountEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> (vulkan.PFN_vkCmdDrawIndirectByteCountEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawIndirectByteCountEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawIndirectByteCountEXT(from);
            
            public static bool operator ==(PFN_vkCmdDrawIndirectByteCountEXT left, PFN_vkCmdDrawIndirectByteCountEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawIndirectByteCountEXT left, PFN_vkCmdDrawIndirectByteCountEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateCuModuleNVX : IEquatable<PFN_vkCreateCuModuleNVX>
        {
            public PFN_vkCreateCuModuleNVX(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCuModuleCreateInfoNVX*, vulkan.VkAllocationCallbacks*, vulkan.VkCuModuleNVX*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCuModuleCreateInfoNVX*, vulkan.VkAllocationCallbacks*, vulkan.VkCuModuleNVX*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateCuModuleNVX other && Equals(other);
            
            public bool Equals(PFN_vkCreateCuModuleNVX other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCuModuleCreateInfoNVX*, vulkan.VkAllocationCallbacks*, vulkan.VkCuModuleNVX*, vulkan.VkResult> (vulkan.PFN_vkCreateCuModuleNVX from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateCuModuleNVX (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCuModuleCreateInfoNVX*, vulkan.VkAllocationCallbacks*, vulkan.VkCuModuleNVX*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateCuModuleNVX(from);
            
            public static bool operator ==(PFN_vkCreateCuModuleNVX left, PFN_vkCreateCuModuleNVX right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateCuModuleNVX left, PFN_vkCreateCuModuleNVX right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateCuFunctionNVX : IEquatable<PFN_vkCreateCuFunctionNVX>
        {
            public PFN_vkCreateCuFunctionNVX(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCuFunctionCreateInfoNVX*, vulkan.VkAllocationCallbacks*, vulkan.VkCuFunctionNVX*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCuFunctionCreateInfoNVX*, vulkan.VkAllocationCallbacks*, vulkan.VkCuFunctionNVX*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateCuFunctionNVX other && Equals(other);
            
            public bool Equals(PFN_vkCreateCuFunctionNVX other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCuFunctionCreateInfoNVX*, vulkan.VkAllocationCallbacks*, vulkan.VkCuFunctionNVX*, vulkan.VkResult> (vulkan.PFN_vkCreateCuFunctionNVX from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateCuFunctionNVX (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCuFunctionCreateInfoNVX*, vulkan.VkAllocationCallbacks*, vulkan.VkCuFunctionNVX*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateCuFunctionNVX(from);
            
            public static bool operator ==(PFN_vkCreateCuFunctionNVX left, PFN_vkCreateCuFunctionNVX right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateCuFunctionNVX left, PFN_vkCreateCuFunctionNVX right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyCuModuleNVX : IEquatable<PFN_vkDestroyCuModuleNVX>
        {
            public PFN_vkDestroyCuModuleNVX(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCuModuleNVX, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCuModuleNVX, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyCuModuleNVX other && Equals(other);
            
            public bool Equals(PFN_vkDestroyCuModuleNVX other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCuModuleNVX, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyCuModuleNVX from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyCuModuleNVX (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCuModuleNVX, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyCuModuleNVX(from);
            
            public static bool operator ==(PFN_vkDestroyCuModuleNVX left, PFN_vkDestroyCuModuleNVX right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyCuModuleNVX left, PFN_vkDestroyCuModuleNVX right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyCuFunctionNVX : IEquatable<PFN_vkDestroyCuFunctionNVX>
        {
            public PFN_vkDestroyCuFunctionNVX(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCuFunctionNVX, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCuFunctionNVX, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyCuFunctionNVX other && Equals(other);
            
            public bool Equals(PFN_vkDestroyCuFunctionNVX other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCuFunctionNVX, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyCuFunctionNVX from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyCuFunctionNVX (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCuFunctionNVX, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyCuFunctionNVX(from);
            
            public static bool operator ==(PFN_vkDestroyCuFunctionNVX left, PFN_vkDestroyCuFunctionNVX right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyCuFunctionNVX left, PFN_vkDestroyCuFunctionNVX right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCuLaunchKernelNVX : IEquatable<PFN_vkCmdCuLaunchKernelNVX>
        {
            public PFN_vkCmdCuLaunchKernelNVX(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCuLaunchInfoNVX*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCuLaunchInfoNVX*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCuLaunchKernelNVX other && Equals(other);
            
            public bool Equals(PFN_vkCmdCuLaunchKernelNVX other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCuLaunchInfoNVX*, void> (vulkan.PFN_vkCmdCuLaunchKernelNVX from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCuLaunchKernelNVX (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCuLaunchInfoNVX*, void> from) => new vulkan.PFN_vkCmdCuLaunchKernelNVX(from);
            
            public static bool operator ==(PFN_vkCmdCuLaunchKernelNVX left, PFN_vkCmdCuLaunchKernelNVX right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCuLaunchKernelNVX left, PFN_vkCmdCuLaunchKernelNVX right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetImageViewHandleNVX : IEquatable<PFN_vkGetImageViewHandleNVX>
        {
            public PFN_vkGetImageViewHandleNVX(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageViewHandleInfoNVX*, uint> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageViewHandleInfoNVX*, uint> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetImageViewHandleNVX other && Equals(other);
            
            public bool Equals(PFN_vkGetImageViewHandleNVX other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageViewHandleInfoNVX*, uint> (vulkan.PFN_vkGetImageViewHandleNVX from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetImageViewHandleNVX (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageViewHandleInfoNVX*, uint> from) => new vulkan.PFN_vkGetImageViewHandleNVX(from);
            
            public static bool operator ==(PFN_vkGetImageViewHandleNVX left, PFN_vkGetImageViewHandleNVX right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetImageViewHandleNVX left, PFN_vkGetImageViewHandleNVX right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetImageViewAddressNVX : IEquatable<PFN_vkGetImageViewAddressNVX>
        {
            public PFN_vkGetImageViewAddressNVX(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageView, vulkan.VkImageViewAddressPropertiesNVX*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageView, vulkan.VkImageViewAddressPropertiesNVX*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetImageViewAddressNVX other && Equals(other);
            
            public bool Equals(PFN_vkGetImageViewAddressNVX other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageView, vulkan.VkImageViewAddressPropertiesNVX*, vulkan.VkResult> (vulkan.PFN_vkGetImageViewAddressNVX from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetImageViewAddressNVX (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageView, vulkan.VkImageViewAddressPropertiesNVX*, vulkan.VkResult> from) => new vulkan.PFN_vkGetImageViewAddressNVX(from);
            
            public static bool operator ==(PFN_vkGetImageViewAddressNVX left, PFN_vkGetImageViewAddressNVX right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetImageViewAddressNVX left, PFN_vkGetImageViewAddressNVX right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawIndirectCountAMD : IEquatable<PFN_vkCmdDrawIndirectCountAMD>
        {
            public PFN_vkCmdDrawIndirectCountAMD(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawIndirectCountAMD other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawIndirectCountAMD other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> (vulkan.PFN_vkCmdDrawIndirectCountAMD from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawIndirectCountAMD (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawIndirectCountAMD(from);
            
            public static bool operator ==(PFN_vkCmdDrawIndirectCountAMD left, PFN_vkCmdDrawIndirectCountAMD right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawIndirectCountAMD left, PFN_vkCmdDrawIndirectCountAMD right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawIndexedIndirectCountAMD : IEquatable<PFN_vkCmdDrawIndexedIndirectCountAMD>
        {
            public PFN_vkCmdDrawIndexedIndirectCountAMD(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawIndexedIndirectCountAMD other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawIndexedIndirectCountAMD other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> (vulkan.PFN_vkCmdDrawIndexedIndirectCountAMD from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawIndexedIndirectCountAMD (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawIndexedIndirectCountAMD(from);
            
            public static bool operator ==(PFN_vkCmdDrawIndexedIndirectCountAMD left, PFN_vkCmdDrawIndexedIndirectCountAMD right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawIndexedIndirectCountAMD left, PFN_vkCmdDrawIndexedIndirectCountAMD right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetShaderInfoAMD : IEquatable<PFN_vkGetShaderInfoAMD>
        {
            public PFN_vkGetShaderInfoAMD(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, vulkan.VkShaderStageFlagBits, vulkan.VkShaderInfoTypeAMD, nuint*, void*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, vulkan.VkShaderStageFlagBits, vulkan.VkShaderInfoTypeAMD, nuint*, void*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetShaderInfoAMD other && Equals(other);
            
            public bool Equals(PFN_vkGetShaderInfoAMD other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, vulkan.VkShaderStageFlagBits, vulkan.VkShaderInfoTypeAMD, nuint*, void*, vulkan.VkResult> (vulkan.PFN_vkGetShaderInfoAMD from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetShaderInfoAMD (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, vulkan.VkShaderStageFlagBits, vulkan.VkShaderInfoTypeAMD, nuint*, void*, vulkan.VkResult> from) => new vulkan.PFN_vkGetShaderInfoAMD(from);
            
            public static bool operator ==(PFN_vkGetShaderInfoAMD left, PFN_vkGetShaderInfoAMD right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetShaderInfoAMD left, PFN_vkGetShaderInfoAMD right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV : IEquatable<PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV>
        {
            public PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkImageType, vulkan.VkImageTiling, vulkan.VkImageUsageFlags, vulkan.VkImageCreateFlags, vulkan.VkExternalMemoryHandleTypeFlagsNV, vulkan.VkExternalImageFormatPropertiesNV*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkImageType, vulkan.VkImageTiling, vulkan.VkImageUsageFlags, vulkan.VkImageCreateFlags, vulkan.VkExternalMemoryHandleTypeFlagsNV, vulkan.VkExternalImageFormatPropertiesNV*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkImageType, vulkan.VkImageTiling, vulkan.VkImageUsageFlags, vulkan.VkImageCreateFlags, vulkan.VkExternalMemoryHandleTypeFlagsNV, vulkan.VkExternalImageFormatPropertiesNV*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkFormat, vulkan.VkImageType, vulkan.VkImageTiling, vulkan.VkImageUsageFlags, vulkan.VkImageCreateFlags, vulkan.VkExternalMemoryHandleTypeFlagsNV, vulkan.VkExternalImageFormatPropertiesNV*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV left, PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV left, PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT : IEquatable<VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT>
        {
            public VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeatures (vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT (vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeatures from) => new vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(from);
            
            public static bool operator ==(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT left, VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT left, VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBeginConditionalRenderingEXT : IEquatable<PFN_vkCmdBeginConditionalRenderingEXT>
        {
            public PFN_vkCmdBeginConditionalRenderingEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkConditionalRenderingBeginInfoEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkConditionalRenderingBeginInfoEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBeginConditionalRenderingEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdBeginConditionalRenderingEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkConditionalRenderingBeginInfoEXT*, void> (vulkan.PFN_vkCmdBeginConditionalRenderingEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBeginConditionalRenderingEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkConditionalRenderingBeginInfoEXT*, void> from) => new vulkan.PFN_vkCmdBeginConditionalRenderingEXT(from);
            
            public static bool operator ==(PFN_vkCmdBeginConditionalRenderingEXT left, PFN_vkCmdBeginConditionalRenderingEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBeginConditionalRenderingEXT left, PFN_vkCmdBeginConditionalRenderingEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdEndConditionalRenderingEXT : IEquatable<PFN_vkCmdEndConditionalRenderingEXT>
        {
            public PFN_vkCmdEndConditionalRenderingEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdEndConditionalRenderingEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdEndConditionalRenderingEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> (vulkan.PFN_vkCmdEndConditionalRenderingEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdEndConditionalRenderingEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> from) => new vulkan.PFN_vkCmdEndConditionalRenderingEXT(from);
            
            public static bool operator ==(PFN_vkCmdEndConditionalRenderingEXT left, PFN_vkCmdEndConditionalRenderingEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdEndConditionalRenderingEXT left, PFN_vkCmdEndConditionalRenderingEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetViewportWScalingNV : IEquatable<PFN_vkCmdSetViewportWScalingNV>
        {
            public PFN_vkCmdSetViewportWScalingNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkViewportWScalingNV*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkViewportWScalingNV*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetViewportWScalingNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetViewportWScalingNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkViewportWScalingNV*, void> (vulkan.PFN_vkCmdSetViewportWScalingNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetViewportWScalingNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkViewportWScalingNV*, void> from) => new vulkan.PFN_vkCmdSetViewportWScalingNV(from);
            
            public static bool operator ==(PFN_vkCmdSetViewportWScalingNV left, PFN_vkCmdSetViewportWScalingNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetViewportWScalingNV left, PFN_vkCmdSetViewportWScalingNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkReleaseDisplayEXT : IEquatable<PFN_vkReleaseDisplayEXT>
        {
            public PFN_vkReleaseDisplayEXT(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkReleaseDisplayEXT other && Equals(other);
            
            public bool Equals(PFN_vkReleaseDisplayEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, vulkan.VkResult> (vulkan.PFN_vkReleaseDisplayEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkReleaseDisplayEXT (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, vulkan.VkResult> from) => new vulkan.PFN_vkReleaseDisplayEXT(from);
            
            public static bool operator ==(PFN_vkReleaseDisplayEXT left, PFN_vkReleaseDisplayEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkReleaseDisplayEXT left, PFN_vkReleaseDisplayEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT : IEquatable<PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT>
        {
            public PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, vulkan.VkSurfaceCapabilities2EXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, vulkan.VkSurfaceCapabilities2EXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, vulkan.VkSurfaceCapabilities2EXT*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSurfaceKHR, vulkan.VkSurfaceCapabilities2EXT*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT left, PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT left, PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDisplayPowerControlEXT : IEquatable<PFN_vkDisplayPowerControlEXT>
        {
            public PFN_vkDisplayPowerControlEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDisplayKHR, vulkan.VkDisplayPowerInfoEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDisplayKHR, vulkan.VkDisplayPowerInfoEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDisplayPowerControlEXT other && Equals(other);
            
            public bool Equals(PFN_vkDisplayPowerControlEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDisplayKHR, vulkan.VkDisplayPowerInfoEXT*, vulkan.VkResult> (vulkan.PFN_vkDisplayPowerControlEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDisplayPowerControlEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDisplayKHR, vulkan.VkDisplayPowerInfoEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkDisplayPowerControlEXT(from);
            
            public static bool operator ==(PFN_vkDisplayPowerControlEXT left, PFN_vkDisplayPowerControlEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDisplayPowerControlEXT left, PFN_vkDisplayPowerControlEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkRegisterDeviceEventEXT : IEquatable<PFN_vkRegisterDeviceEventEXT>
        {
            public PFN_vkRegisterDeviceEventEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceEventInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkFence*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceEventInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkFence*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkRegisterDeviceEventEXT other && Equals(other);
            
            public bool Equals(PFN_vkRegisterDeviceEventEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceEventInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkFence*, vulkan.VkResult> (vulkan.PFN_vkRegisterDeviceEventEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkRegisterDeviceEventEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceEventInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkFence*, vulkan.VkResult> from) => new vulkan.PFN_vkRegisterDeviceEventEXT(from);
            
            public static bool operator ==(PFN_vkRegisterDeviceEventEXT left, PFN_vkRegisterDeviceEventEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkRegisterDeviceEventEXT left, PFN_vkRegisterDeviceEventEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkRegisterDisplayEventEXT : IEquatable<PFN_vkRegisterDisplayEventEXT>
        {
            public PFN_vkRegisterDisplayEventEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDisplayKHR, vulkan.VkDisplayEventInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkFence*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDisplayKHR, vulkan.VkDisplayEventInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkFence*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkRegisterDisplayEventEXT other && Equals(other);
            
            public bool Equals(PFN_vkRegisterDisplayEventEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDisplayKHR, vulkan.VkDisplayEventInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkFence*, vulkan.VkResult> (vulkan.PFN_vkRegisterDisplayEventEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkRegisterDisplayEventEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDisplayKHR, vulkan.VkDisplayEventInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkFence*, vulkan.VkResult> from) => new vulkan.PFN_vkRegisterDisplayEventEXT(from);
            
            public static bool operator ==(PFN_vkRegisterDisplayEventEXT left, PFN_vkRegisterDisplayEventEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkRegisterDisplayEventEXT left, PFN_vkRegisterDisplayEventEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetSwapchainCounterEXT : IEquatable<PFN_vkGetSwapchainCounterEXT>
        {
            public PFN_vkGetSwapchainCounterEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkSurfaceCounterFlagBitsEXT, ulong*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkSurfaceCounterFlagBitsEXT, ulong*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetSwapchainCounterEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetSwapchainCounterEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkSurfaceCounterFlagBitsEXT, ulong*, vulkan.VkResult> (vulkan.PFN_vkGetSwapchainCounterEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetSwapchainCounterEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkSurfaceCounterFlagBitsEXT, ulong*, vulkan.VkResult> from) => new vulkan.PFN_vkGetSwapchainCounterEXT(from);
            
            public static bool operator ==(PFN_vkGetSwapchainCounterEXT left, PFN_vkGetSwapchainCounterEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetSwapchainCounterEXT left, PFN_vkGetSwapchainCounterEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetRefreshCycleDurationGOOGLE : IEquatable<PFN_vkGetRefreshCycleDurationGOOGLE>
        {
            public PFN_vkGetRefreshCycleDurationGOOGLE(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkRefreshCycleDurationGOOGLE*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkRefreshCycleDurationGOOGLE*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetRefreshCycleDurationGOOGLE other && Equals(other);
            
            public bool Equals(PFN_vkGetRefreshCycleDurationGOOGLE other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkRefreshCycleDurationGOOGLE*, vulkan.VkResult> (vulkan.PFN_vkGetRefreshCycleDurationGOOGLE from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetRefreshCycleDurationGOOGLE (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkRefreshCycleDurationGOOGLE*, vulkan.VkResult> from) => new vulkan.PFN_vkGetRefreshCycleDurationGOOGLE(from);
            
            public static bool operator ==(PFN_vkGetRefreshCycleDurationGOOGLE left, PFN_vkGetRefreshCycleDurationGOOGLE right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetRefreshCycleDurationGOOGLE left, PFN_vkGetRefreshCycleDurationGOOGLE right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPastPresentationTimingGOOGLE : IEquatable<PFN_vkGetPastPresentationTimingGOOGLE>
        {
            public PFN_vkGetPastPresentationTimingGOOGLE(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, uint*, vulkan.VkPastPresentationTimingGOOGLE*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, uint*, vulkan.VkPastPresentationTimingGOOGLE*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPastPresentationTimingGOOGLE other && Equals(other);
            
            public bool Equals(PFN_vkGetPastPresentationTimingGOOGLE other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, uint*, vulkan.VkPastPresentationTimingGOOGLE*, vulkan.VkResult> (vulkan.PFN_vkGetPastPresentationTimingGOOGLE from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPastPresentationTimingGOOGLE (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, uint*, vulkan.VkPastPresentationTimingGOOGLE*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPastPresentationTimingGOOGLE(from);
            
            public static bool operator ==(PFN_vkGetPastPresentationTimingGOOGLE left, PFN_vkGetPastPresentationTimingGOOGLE right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPastPresentationTimingGOOGLE left, PFN_vkGetPastPresentationTimingGOOGLE right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDiscardRectangleEXT : IEquatable<PFN_vkCmdSetDiscardRectangleEXT>
        {
            public PFN_vkCmdSetDiscardRectangleEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkRect2D*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkRect2D*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDiscardRectangleEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDiscardRectangleEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkRect2D*, void> (vulkan.PFN_vkCmdSetDiscardRectangleEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDiscardRectangleEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkRect2D*, void> from) => new vulkan.PFN_vkCmdSetDiscardRectangleEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetDiscardRectangleEXT left, PFN_vkCmdSetDiscardRectangleEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDiscardRectangleEXT left, PFN_vkCmdSetDiscardRectangleEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDiscardRectangleEnableEXT : IEquatable<PFN_vkCmdSetDiscardRectangleEnableEXT>
        {
            public PFN_vkCmdSetDiscardRectangleEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDiscardRectangleEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDiscardRectangleEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetDiscardRectangleEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDiscardRectangleEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetDiscardRectangleEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetDiscardRectangleEnableEXT left, PFN_vkCmdSetDiscardRectangleEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDiscardRectangleEnableEXT left, PFN_vkCmdSetDiscardRectangleEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDiscardRectangleModeEXT : IEquatable<PFN_vkCmdSetDiscardRectangleModeEXT>
        {
            public PFN_vkCmdSetDiscardRectangleModeEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDiscardRectangleModeEXT, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDiscardRectangleModeEXT, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDiscardRectangleModeEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDiscardRectangleModeEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDiscardRectangleModeEXT, void> (vulkan.PFN_vkCmdSetDiscardRectangleModeEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDiscardRectangleModeEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDiscardRectangleModeEXT, void> from) => new vulkan.PFN_vkCmdSetDiscardRectangleModeEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetDiscardRectangleModeEXT left, PFN_vkCmdSetDiscardRectangleModeEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDiscardRectangleModeEXT left, PFN_vkCmdSetDiscardRectangleModeEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkSetHdrMetadataEXT : IEquatable<PFN_vkSetHdrMetadataEXT>
        {
            public PFN_vkSetHdrMetadataEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkSwapchainKHR*, vulkan.VkHdrMetadataEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkSwapchainKHR*, vulkan.VkHdrMetadataEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkSetHdrMetadataEXT other && Equals(other);
            
            public bool Equals(PFN_vkSetHdrMetadataEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkSwapchainKHR*, vulkan.VkHdrMetadataEXT*, void> (vulkan.PFN_vkSetHdrMetadataEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkSetHdrMetadataEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkSwapchainKHR*, vulkan.VkHdrMetadataEXT*, void> from) => new vulkan.PFN_vkSetHdrMetadataEXT(from);
            
            public static bool operator ==(PFN_vkSetHdrMetadataEXT left, PFN_vkSetHdrMetadataEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkSetHdrMetadataEXT left, PFN_vkSetHdrMetadataEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDebugUtilsMessengerEXT : IEquatable<VkDebugUtilsMessengerEXT>
        {
            public VkDebugUtilsMessengerEXT(vulkan.VkDebugUtilsMessengerEXT_T value) => this.Value = value;
            
            public vulkan.VkDebugUtilsMessengerEXT_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkDebugUtilsMessengerEXT other && Equals(other);
            
            public bool Equals(VkDebugUtilsMessengerEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDebugUtilsMessengerEXT_T (vulkan.VkDebugUtilsMessengerEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDebugUtilsMessengerEXT (vulkan.VkDebugUtilsMessengerEXT_T from) => new vulkan.VkDebugUtilsMessengerEXT(from);
            
            public static bool operator ==(VkDebugUtilsMessengerEXT left, VkDebugUtilsMessengerEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDebugUtilsMessengerEXT left, VkDebugUtilsMessengerEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkSetDebugUtilsObjectNameEXT : IEquatable<PFN_vkSetDebugUtilsObjectNameEXT>
        {
            public PFN_vkSetDebugUtilsObjectNameEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDebugUtilsObjectNameInfoEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDebugUtilsObjectNameInfoEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkSetDebugUtilsObjectNameEXT other && Equals(other);
            
            public bool Equals(PFN_vkSetDebugUtilsObjectNameEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDebugUtilsObjectNameInfoEXT*, vulkan.VkResult> (vulkan.PFN_vkSetDebugUtilsObjectNameEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkSetDebugUtilsObjectNameEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDebugUtilsObjectNameInfoEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkSetDebugUtilsObjectNameEXT(from);
            
            public static bool operator ==(PFN_vkSetDebugUtilsObjectNameEXT left, PFN_vkSetDebugUtilsObjectNameEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkSetDebugUtilsObjectNameEXT left, PFN_vkSetDebugUtilsObjectNameEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkSetDebugUtilsObjectTagEXT : IEquatable<PFN_vkSetDebugUtilsObjectTagEXT>
        {
            public PFN_vkSetDebugUtilsObjectTagEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDebugUtilsObjectTagInfoEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDebugUtilsObjectTagInfoEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkSetDebugUtilsObjectTagEXT other && Equals(other);
            
            public bool Equals(PFN_vkSetDebugUtilsObjectTagEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDebugUtilsObjectTagInfoEXT*, vulkan.VkResult> (vulkan.PFN_vkSetDebugUtilsObjectTagEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkSetDebugUtilsObjectTagEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDebugUtilsObjectTagInfoEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkSetDebugUtilsObjectTagEXT(from);
            
            public static bool operator ==(PFN_vkSetDebugUtilsObjectTagEXT left, PFN_vkSetDebugUtilsObjectTagEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkSetDebugUtilsObjectTagEXT left, PFN_vkSetDebugUtilsObjectTagEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkQueueBeginDebugUtilsLabelEXT : IEquatable<PFN_vkQueueBeginDebugUtilsLabelEXT>
        {
            public PFN_vkQueueBeginDebugUtilsLabelEXT(delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkDebugUtilsLabelEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkDebugUtilsLabelEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkQueueBeginDebugUtilsLabelEXT other && Equals(other);
            
            public bool Equals(PFN_vkQueueBeginDebugUtilsLabelEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkDebugUtilsLabelEXT*, void> (vulkan.PFN_vkQueueBeginDebugUtilsLabelEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkQueueBeginDebugUtilsLabelEXT (delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkDebugUtilsLabelEXT*, void> from) => new vulkan.PFN_vkQueueBeginDebugUtilsLabelEXT(from);
            
            public static bool operator ==(PFN_vkQueueBeginDebugUtilsLabelEXT left, PFN_vkQueueBeginDebugUtilsLabelEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkQueueBeginDebugUtilsLabelEXT left, PFN_vkQueueBeginDebugUtilsLabelEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkQueueEndDebugUtilsLabelEXT : IEquatable<PFN_vkQueueEndDebugUtilsLabelEXT>
        {
            public PFN_vkQueueEndDebugUtilsLabelEXT(delegate*unmanaged[Stdcall]<vulkan.VkQueue, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkQueue, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkQueueEndDebugUtilsLabelEXT other && Equals(other);
            
            public bool Equals(PFN_vkQueueEndDebugUtilsLabelEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkQueue, void> (vulkan.PFN_vkQueueEndDebugUtilsLabelEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkQueueEndDebugUtilsLabelEXT (delegate*unmanaged[Stdcall]<vulkan.VkQueue, void> from) => new vulkan.PFN_vkQueueEndDebugUtilsLabelEXT(from);
            
            public static bool operator ==(PFN_vkQueueEndDebugUtilsLabelEXT left, PFN_vkQueueEndDebugUtilsLabelEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkQueueEndDebugUtilsLabelEXT left, PFN_vkQueueEndDebugUtilsLabelEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkQueueInsertDebugUtilsLabelEXT : IEquatable<PFN_vkQueueInsertDebugUtilsLabelEXT>
        {
            public PFN_vkQueueInsertDebugUtilsLabelEXT(delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkDebugUtilsLabelEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkDebugUtilsLabelEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkQueueInsertDebugUtilsLabelEXT other && Equals(other);
            
            public bool Equals(PFN_vkQueueInsertDebugUtilsLabelEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkDebugUtilsLabelEXT*, void> (vulkan.PFN_vkQueueInsertDebugUtilsLabelEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkQueueInsertDebugUtilsLabelEXT (delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkDebugUtilsLabelEXT*, void> from) => new vulkan.PFN_vkQueueInsertDebugUtilsLabelEXT(from);
            
            public static bool operator ==(PFN_vkQueueInsertDebugUtilsLabelEXT left, PFN_vkQueueInsertDebugUtilsLabelEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkQueueInsertDebugUtilsLabelEXT left, PFN_vkQueueInsertDebugUtilsLabelEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBeginDebugUtilsLabelEXT : IEquatable<PFN_vkCmdBeginDebugUtilsLabelEXT>
        {
            public PFN_vkCmdBeginDebugUtilsLabelEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDebugUtilsLabelEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDebugUtilsLabelEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBeginDebugUtilsLabelEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdBeginDebugUtilsLabelEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDebugUtilsLabelEXT*, void> (vulkan.PFN_vkCmdBeginDebugUtilsLabelEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBeginDebugUtilsLabelEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDebugUtilsLabelEXT*, void> from) => new vulkan.PFN_vkCmdBeginDebugUtilsLabelEXT(from);
            
            public static bool operator ==(PFN_vkCmdBeginDebugUtilsLabelEXT left, PFN_vkCmdBeginDebugUtilsLabelEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBeginDebugUtilsLabelEXT left, PFN_vkCmdBeginDebugUtilsLabelEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdEndDebugUtilsLabelEXT : IEquatable<PFN_vkCmdEndDebugUtilsLabelEXT>
        {
            public PFN_vkCmdEndDebugUtilsLabelEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdEndDebugUtilsLabelEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdEndDebugUtilsLabelEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> (vulkan.PFN_vkCmdEndDebugUtilsLabelEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdEndDebugUtilsLabelEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> from) => new vulkan.PFN_vkCmdEndDebugUtilsLabelEXT(from);
            
            public static bool operator ==(PFN_vkCmdEndDebugUtilsLabelEXT left, PFN_vkCmdEndDebugUtilsLabelEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdEndDebugUtilsLabelEXT left, PFN_vkCmdEndDebugUtilsLabelEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdInsertDebugUtilsLabelEXT : IEquatable<PFN_vkCmdInsertDebugUtilsLabelEXT>
        {
            public PFN_vkCmdInsertDebugUtilsLabelEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDebugUtilsLabelEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDebugUtilsLabelEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdInsertDebugUtilsLabelEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdInsertDebugUtilsLabelEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDebugUtilsLabelEXT*, void> (vulkan.PFN_vkCmdInsertDebugUtilsLabelEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdInsertDebugUtilsLabelEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDebugUtilsLabelEXT*, void> from) => new vulkan.PFN_vkCmdInsertDebugUtilsLabelEXT(from);
            
            public static bool operator ==(PFN_vkCmdInsertDebugUtilsLabelEXT left, PFN_vkCmdInsertDebugUtilsLabelEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdInsertDebugUtilsLabelEXT left, PFN_vkCmdInsertDebugUtilsLabelEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateDebugUtilsMessengerEXT : IEquatable<PFN_vkCreateDebugUtilsMessengerEXT>
        {
            public PFN_vkCreateDebugUtilsMessengerEXT(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugUtilsMessengerCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkDebugUtilsMessengerEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugUtilsMessengerCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkDebugUtilsMessengerEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateDebugUtilsMessengerEXT other && Equals(other);
            
            public bool Equals(PFN_vkCreateDebugUtilsMessengerEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugUtilsMessengerCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkDebugUtilsMessengerEXT*, vulkan.VkResult> (vulkan.PFN_vkCreateDebugUtilsMessengerEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateDebugUtilsMessengerEXT (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugUtilsMessengerCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkDebugUtilsMessengerEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateDebugUtilsMessengerEXT(from);
            
            public static bool operator ==(PFN_vkCreateDebugUtilsMessengerEXT left, PFN_vkCreateDebugUtilsMessengerEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateDebugUtilsMessengerEXT left, PFN_vkCreateDebugUtilsMessengerEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyDebugUtilsMessengerEXT : IEquatable<PFN_vkDestroyDebugUtilsMessengerEXT>
        {
            public PFN_vkDestroyDebugUtilsMessengerEXT(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugUtilsMessengerEXT, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugUtilsMessengerEXT, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyDebugUtilsMessengerEXT other && Equals(other);
            
            public bool Equals(PFN_vkDestroyDebugUtilsMessengerEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugUtilsMessengerEXT, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyDebugUtilsMessengerEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyDebugUtilsMessengerEXT (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugUtilsMessengerEXT, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyDebugUtilsMessengerEXT(from);
            
            public static bool operator ==(PFN_vkDestroyDebugUtilsMessengerEXT left, PFN_vkDestroyDebugUtilsMessengerEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyDebugUtilsMessengerEXT left, PFN_vkDestroyDebugUtilsMessengerEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkSubmitDebugUtilsMessageEXT : IEquatable<PFN_vkSubmitDebugUtilsMessageEXT>
        {
            public PFN_vkSubmitDebugUtilsMessageEXT(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugUtilsMessageSeverityFlagBitsEXT, vulkan.VkDebugUtilsMessageTypeFlagsEXT, vulkan.VkDebugUtilsMessengerCallbackDataEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugUtilsMessageSeverityFlagBitsEXT, vulkan.VkDebugUtilsMessageTypeFlagsEXT, vulkan.VkDebugUtilsMessengerCallbackDataEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkSubmitDebugUtilsMessageEXT other && Equals(other);
            
            public bool Equals(PFN_vkSubmitDebugUtilsMessageEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugUtilsMessageSeverityFlagBitsEXT, vulkan.VkDebugUtilsMessageTypeFlagsEXT, vulkan.VkDebugUtilsMessengerCallbackDataEXT*, void> (vulkan.PFN_vkSubmitDebugUtilsMessageEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkSubmitDebugUtilsMessageEXT (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDebugUtilsMessageSeverityFlagBitsEXT, vulkan.VkDebugUtilsMessageTypeFlagsEXT, vulkan.VkDebugUtilsMessengerCallbackDataEXT*, void> from) => new vulkan.PFN_vkSubmitDebugUtilsMessageEXT(from);
            
            public static bool operator ==(PFN_vkSubmitDebugUtilsMessageEXT left, PFN_vkSubmitDebugUtilsMessageEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkSubmitDebugUtilsMessageEXT left, PFN_vkSubmitDebugUtilsMessageEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSamplerReductionModeEXT : IEquatable<VkSamplerReductionModeEXT>
        {
            public VkSamplerReductionModeEXT(vulkan.VkSamplerReductionMode value) => this.Value = value;
            
            public vulkan.VkSamplerReductionMode Value { get; }
            
            public override bool Equals(object obj) => obj is VkSamplerReductionModeEXT other && Equals(other);
            
            public bool Equals(VkSamplerReductionModeEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSamplerReductionMode (vulkan.VkSamplerReductionModeEXT from) => from.Value;
            
            public static implicit operator vulkan.VkSamplerReductionModeEXT (vulkan.VkSamplerReductionMode from) => new vulkan.VkSamplerReductionModeEXT(from);
            
            public static bool operator ==(VkSamplerReductionModeEXT left, VkSamplerReductionModeEXT right) => left.Equals(right);
            
            public static bool operator !=(VkSamplerReductionModeEXT left, VkSamplerReductionModeEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSamplerReductionModeCreateInfoEXT : IEquatable<VkSamplerReductionModeCreateInfoEXT>
        {
            public VkSamplerReductionModeCreateInfoEXT(vulkan.VkSamplerReductionModeCreateInfo value) => this.Value = value;
            
            public vulkan.VkSamplerReductionModeCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkSamplerReductionModeCreateInfoEXT other && Equals(other);
            
            public bool Equals(VkSamplerReductionModeCreateInfoEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSamplerReductionModeCreateInfo (vulkan.VkSamplerReductionModeCreateInfoEXT from) => from.Value;
            
            public static implicit operator vulkan.VkSamplerReductionModeCreateInfoEXT (vulkan.VkSamplerReductionModeCreateInfo from) => new vulkan.VkSamplerReductionModeCreateInfoEXT(from);
            
            public static bool operator ==(VkSamplerReductionModeCreateInfoEXT left, VkSamplerReductionModeCreateInfoEXT right) => left.Equals(right);
            
            public static bool operator !=(VkSamplerReductionModeCreateInfoEXT left, VkSamplerReductionModeCreateInfoEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT : IEquatable<VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT>
        {
            public VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(vulkan.VkPhysicalDeviceSamplerFilterMinmaxProperties value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceSamplerFilterMinmaxProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceSamplerFilterMinmaxProperties (vulkan.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT (vulkan.VkPhysicalDeviceSamplerFilterMinmaxProperties from) => new vulkan.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(from);
            
            public static bool operator ==(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT left, VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT left, VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceInlineUniformBlockFeaturesEXT : IEquatable<VkPhysicalDeviceInlineUniformBlockFeaturesEXT>
        {
            public VkPhysicalDeviceInlineUniformBlockFeaturesEXT(vulkan.VkPhysicalDeviceInlineUniformBlockFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceInlineUniformBlockFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceInlineUniformBlockFeaturesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceInlineUniformBlockFeaturesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceInlineUniformBlockFeatures (vulkan.VkPhysicalDeviceInlineUniformBlockFeaturesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceInlineUniformBlockFeaturesEXT (vulkan.VkPhysicalDeviceInlineUniformBlockFeatures from) => new vulkan.VkPhysicalDeviceInlineUniformBlockFeaturesEXT(from);
            
            public static bool operator ==(VkPhysicalDeviceInlineUniformBlockFeaturesEXT left, VkPhysicalDeviceInlineUniformBlockFeaturesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceInlineUniformBlockFeaturesEXT left, VkPhysicalDeviceInlineUniformBlockFeaturesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceInlineUniformBlockPropertiesEXT : IEquatable<VkPhysicalDeviceInlineUniformBlockPropertiesEXT>
        {
            public VkPhysicalDeviceInlineUniformBlockPropertiesEXT(vulkan.VkPhysicalDeviceInlineUniformBlockProperties value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceInlineUniformBlockProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceInlineUniformBlockPropertiesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceInlineUniformBlockPropertiesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceInlineUniformBlockProperties (vulkan.VkPhysicalDeviceInlineUniformBlockPropertiesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceInlineUniformBlockPropertiesEXT (vulkan.VkPhysicalDeviceInlineUniformBlockProperties from) => new vulkan.VkPhysicalDeviceInlineUniformBlockPropertiesEXT(from);
            
            public static bool operator ==(VkPhysicalDeviceInlineUniformBlockPropertiesEXT left, VkPhysicalDeviceInlineUniformBlockPropertiesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceInlineUniformBlockPropertiesEXT left, VkPhysicalDeviceInlineUniformBlockPropertiesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkWriteDescriptorSetInlineUniformBlockEXT : IEquatable<VkWriteDescriptorSetInlineUniformBlockEXT>
        {
            public VkWriteDescriptorSetInlineUniformBlockEXT(vulkan.VkWriteDescriptorSetInlineUniformBlock value) => this.Value = value;
            
            public vulkan.VkWriteDescriptorSetInlineUniformBlock Value { get; }
            
            public override bool Equals(object obj) => obj is VkWriteDescriptorSetInlineUniformBlockEXT other && Equals(other);
            
            public bool Equals(VkWriteDescriptorSetInlineUniformBlockEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkWriteDescriptorSetInlineUniformBlock (vulkan.VkWriteDescriptorSetInlineUniformBlockEXT from) => from.Value;
            
            public static implicit operator vulkan.VkWriteDescriptorSetInlineUniformBlockEXT (vulkan.VkWriteDescriptorSetInlineUniformBlock from) => new vulkan.VkWriteDescriptorSetInlineUniformBlockEXT(from);
            
            public static bool operator ==(VkWriteDescriptorSetInlineUniformBlockEXT left, VkWriteDescriptorSetInlineUniformBlockEXT right) => left.Equals(right);
            
            public static bool operator !=(VkWriteDescriptorSetInlineUniformBlockEXT left, VkWriteDescriptorSetInlineUniformBlockEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorPoolInlineUniformBlockCreateInfoEXT : IEquatable<VkDescriptorPoolInlineUniformBlockCreateInfoEXT>
        {
            public VkDescriptorPoolInlineUniformBlockCreateInfoEXT(vulkan.VkDescriptorPoolInlineUniformBlockCreateInfo value) => this.Value = value;
            
            public vulkan.VkDescriptorPoolInlineUniformBlockCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorPoolInlineUniformBlockCreateInfoEXT other && Equals(other);
            
            public bool Equals(VkDescriptorPoolInlineUniformBlockCreateInfoEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDescriptorPoolInlineUniformBlockCreateInfo (vulkan.VkDescriptorPoolInlineUniformBlockCreateInfoEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorPoolInlineUniformBlockCreateInfoEXT (vulkan.VkDescriptorPoolInlineUniformBlockCreateInfo from) => new vulkan.VkDescriptorPoolInlineUniformBlockCreateInfoEXT(from);
            
            public static bool operator ==(VkDescriptorPoolInlineUniformBlockCreateInfoEXT left, VkDescriptorPoolInlineUniformBlockCreateInfoEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorPoolInlineUniformBlockCreateInfoEXT left, VkDescriptorPoolInlineUniformBlockCreateInfoEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetSampleLocationsEXT : IEquatable<PFN_vkCmdSetSampleLocationsEXT>
        {
            public PFN_vkCmdSetSampleLocationsEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSampleLocationsInfoEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSampleLocationsInfoEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetSampleLocationsEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetSampleLocationsEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSampleLocationsInfoEXT*, void> (vulkan.PFN_vkCmdSetSampleLocationsEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetSampleLocationsEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSampleLocationsInfoEXT*, void> from) => new vulkan.PFN_vkCmdSetSampleLocationsEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetSampleLocationsEXT left, PFN_vkCmdSetSampleLocationsEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetSampleLocationsEXT left, PFN_vkCmdSetSampleLocationsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT : IEquatable<PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT>
        {
            public PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSampleCountFlagBits, vulkan.VkMultisamplePropertiesEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSampleCountFlagBits, vulkan.VkMultisamplePropertiesEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSampleCountFlagBits, vulkan.VkMultisamplePropertiesEXT*, void> (vulkan.PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkSampleCountFlagBits, vulkan.VkMultisamplePropertiesEXT*, void> from) => new vulkan.PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT left, PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT left, PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetImageDrmFormatModifierPropertiesEXT : IEquatable<PFN_vkGetImageDrmFormatModifierPropertiesEXT>
        {
            public PFN_vkGetImageDrmFormatModifierPropertiesEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkImageDrmFormatModifierPropertiesEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkImageDrmFormatModifierPropertiesEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetImageDrmFormatModifierPropertiesEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetImageDrmFormatModifierPropertiesEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkImageDrmFormatModifierPropertiesEXT*, vulkan.VkResult> (vulkan.PFN_vkGetImageDrmFormatModifierPropertiesEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetImageDrmFormatModifierPropertiesEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkImageDrmFormatModifierPropertiesEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkGetImageDrmFormatModifierPropertiesEXT(from);
            
            public static bool operator ==(PFN_vkGetImageDrmFormatModifierPropertiesEXT left, PFN_vkGetImageDrmFormatModifierPropertiesEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetImageDrmFormatModifierPropertiesEXT left, PFN_vkGetImageDrmFormatModifierPropertiesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateValidationCacheEXT : IEquatable<PFN_vkCreateValidationCacheEXT>
        {
            public PFN_vkCreateValidationCacheEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkValidationCacheCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkValidationCacheEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkValidationCacheCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkValidationCacheEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateValidationCacheEXT other && Equals(other);
            
            public bool Equals(PFN_vkCreateValidationCacheEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkValidationCacheCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkValidationCacheEXT*, vulkan.VkResult> (vulkan.PFN_vkCreateValidationCacheEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateValidationCacheEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkValidationCacheCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkValidationCacheEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateValidationCacheEXT(from);
            
            public static bool operator ==(PFN_vkCreateValidationCacheEXT left, PFN_vkCreateValidationCacheEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateValidationCacheEXT left, PFN_vkCreateValidationCacheEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyValidationCacheEXT : IEquatable<PFN_vkDestroyValidationCacheEXT>
        {
            public PFN_vkDestroyValidationCacheEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkValidationCacheEXT, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkValidationCacheEXT, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyValidationCacheEXT other && Equals(other);
            
            public bool Equals(PFN_vkDestroyValidationCacheEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkValidationCacheEXT, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyValidationCacheEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyValidationCacheEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkValidationCacheEXT, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyValidationCacheEXT(from);
            
            public static bool operator ==(PFN_vkDestroyValidationCacheEXT left, PFN_vkDestroyValidationCacheEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyValidationCacheEXT left, PFN_vkDestroyValidationCacheEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkMergeValidationCachesEXT : IEquatable<PFN_vkMergeValidationCachesEXT>
        {
            public PFN_vkMergeValidationCachesEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkValidationCacheEXT, uint, vulkan.VkValidationCacheEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkValidationCacheEXT, uint, vulkan.VkValidationCacheEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkMergeValidationCachesEXT other && Equals(other);
            
            public bool Equals(PFN_vkMergeValidationCachesEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkValidationCacheEXT, uint, vulkan.VkValidationCacheEXT*, vulkan.VkResult> (vulkan.PFN_vkMergeValidationCachesEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkMergeValidationCachesEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkValidationCacheEXT, uint, vulkan.VkValidationCacheEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkMergeValidationCachesEXT(from);
            
            public static bool operator ==(PFN_vkMergeValidationCachesEXT left, PFN_vkMergeValidationCachesEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkMergeValidationCachesEXT left, PFN_vkMergeValidationCachesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetValidationCacheDataEXT : IEquatable<PFN_vkGetValidationCacheDataEXT>
        {
            public PFN_vkGetValidationCacheDataEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkValidationCacheEXT, nuint*, void*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkValidationCacheEXT, nuint*, void*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetValidationCacheDataEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetValidationCacheDataEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkValidationCacheEXT, nuint*, void*, vulkan.VkResult> (vulkan.PFN_vkGetValidationCacheDataEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetValidationCacheDataEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkValidationCacheEXT, nuint*, void*, vulkan.VkResult> from) => new vulkan.PFN_vkGetValidationCacheDataEXT(from);
            
            public static bool operator ==(PFN_vkGetValidationCacheDataEXT left, PFN_vkGetValidationCacheDataEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetValidationCacheDataEXT left, PFN_vkGetValidationCacheDataEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorBindingFlagBitsEXT : IEquatable<VkDescriptorBindingFlagBitsEXT>
        {
            public VkDescriptorBindingFlagBitsEXT(vulkan.VkDescriptorBindingFlagBits value) => this.Value = value;
            
            public vulkan.VkDescriptorBindingFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorBindingFlagBitsEXT other && Equals(other);
            
            public bool Equals(VkDescriptorBindingFlagBitsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDescriptorBindingFlagBits (vulkan.VkDescriptorBindingFlagBitsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorBindingFlagBitsEXT (vulkan.VkDescriptorBindingFlagBits from) => new vulkan.VkDescriptorBindingFlagBitsEXT(from);
            
            public static bool operator ==(VkDescriptorBindingFlagBitsEXT left, VkDescriptorBindingFlagBitsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorBindingFlagBitsEXT left, VkDescriptorBindingFlagBitsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorBindingFlagsEXT : IEquatable<VkDescriptorBindingFlagsEXT>
        {
            public VkDescriptorBindingFlagsEXT(vulkan.VkDescriptorBindingFlags value) => this.Value = value;
            
            public vulkan.VkDescriptorBindingFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorBindingFlagsEXT other && Equals(other);
            
            public bool Equals(VkDescriptorBindingFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDescriptorBindingFlags (vulkan.VkDescriptorBindingFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorBindingFlagsEXT (vulkan.VkDescriptorBindingFlags from) => new vulkan.VkDescriptorBindingFlagsEXT(from);
            
            public static bool operator ==(VkDescriptorBindingFlagsEXT left, VkDescriptorBindingFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorBindingFlagsEXT left, VkDescriptorBindingFlagsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorSetLayoutBindingFlagsCreateInfoEXT : IEquatable<VkDescriptorSetLayoutBindingFlagsCreateInfoEXT>
        {
            public VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfo value) => this.Value = value;
            
            public vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorSetLayoutBindingFlagsCreateInfoEXT other && Equals(other);
            
            public bool Equals(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfo (vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT (vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfo from) => new vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(from);
            
            public static bool operator ==(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT left, VkDescriptorSetLayoutBindingFlagsCreateInfoEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT left, VkDescriptorSetLayoutBindingFlagsCreateInfoEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceDescriptorIndexingFeaturesEXT : IEquatable<VkPhysicalDeviceDescriptorIndexingFeaturesEXT>
        {
            public VkPhysicalDeviceDescriptorIndexingFeaturesEXT(vulkan.VkPhysicalDeviceDescriptorIndexingFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceDescriptorIndexingFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceDescriptorIndexingFeaturesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceDescriptorIndexingFeaturesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceDescriptorIndexingFeatures (vulkan.VkPhysicalDeviceDescriptorIndexingFeaturesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceDescriptorIndexingFeaturesEXT (vulkan.VkPhysicalDeviceDescriptorIndexingFeatures from) => new vulkan.VkPhysicalDeviceDescriptorIndexingFeaturesEXT(from);
            
            public static bool operator ==(VkPhysicalDeviceDescriptorIndexingFeaturesEXT left, VkPhysicalDeviceDescriptorIndexingFeaturesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceDescriptorIndexingFeaturesEXT left, VkPhysicalDeviceDescriptorIndexingFeaturesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceDescriptorIndexingPropertiesEXT : IEquatable<VkPhysicalDeviceDescriptorIndexingPropertiesEXT>
        {
            public VkPhysicalDeviceDescriptorIndexingPropertiesEXT(vulkan.VkPhysicalDeviceDescriptorIndexingProperties value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceDescriptorIndexingProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceDescriptorIndexingPropertiesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceDescriptorIndexingPropertiesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceDescriptorIndexingProperties (vulkan.VkPhysicalDeviceDescriptorIndexingPropertiesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceDescriptorIndexingPropertiesEXT (vulkan.VkPhysicalDeviceDescriptorIndexingProperties from) => new vulkan.VkPhysicalDeviceDescriptorIndexingPropertiesEXT(from);
            
            public static bool operator ==(VkPhysicalDeviceDescriptorIndexingPropertiesEXT left, VkPhysicalDeviceDescriptorIndexingPropertiesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceDescriptorIndexingPropertiesEXT left, VkPhysicalDeviceDescriptorIndexingPropertiesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorSetVariableDescriptorCountAllocateInfoEXT : IEquatable<VkDescriptorSetVariableDescriptorCountAllocateInfoEXT>
        {
            public VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfo value) => this.Value = value;
            
            public vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorSetVariableDescriptorCountAllocateInfoEXT other && Equals(other);
            
            public bool Equals(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfo (vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT (vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfo from) => new vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(from);
            
            public static bool operator ==(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT left, VkDescriptorSetVariableDescriptorCountAllocateInfoEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT left, VkDescriptorSetVariableDescriptorCountAllocateInfoEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDescriptorSetVariableDescriptorCountLayoutSupportEXT : IEquatable<VkDescriptorSetVariableDescriptorCountLayoutSupportEXT>
        {
            public VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupport value) => this.Value = value;
            
            public vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupport Value { get; }
            
            public override bool Equals(object obj) => obj is VkDescriptorSetVariableDescriptorCountLayoutSupportEXT other && Equals(other);
            
            public bool Equals(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupport (vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT (vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupport from) => new vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(from);
            
            public static bool operator ==(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT left, VkDescriptorSetVariableDescriptorCountLayoutSupportEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT left, VkDescriptorSetVariableDescriptorCountLayoutSupportEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBindShadingRateImageNV : IEquatable<PFN_vkCmdBindShadingRateImageNV>
        {
            public PFN_vkCmdBindShadingRateImageNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImageView, vulkan.VkImageLayout, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImageView, vulkan.VkImageLayout, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBindShadingRateImageNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdBindShadingRateImageNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImageView, vulkan.VkImageLayout, void> (vulkan.PFN_vkCmdBindShadingRateImageNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBindShadingRateImageNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImageView, vulkan.VkImageLayout, void> from) => new vulkan.PFN_vkCmdBindShadingRateImageNV(from);
            
            public static bool operator ==(PFN_vkCmdBindShadingRateImageNV left, PFN_vkCmdBindShadingRateImageNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBindShadingRateImageNV left, PFN_vkCmdBindShadingRateImageNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetViewportShadingRatePaletteNV : IEquatable<PFN_vkCmdSetViewportShadingRatePaletteNV>
        {
            public PFN_vkCmdSetViewportShadingRatePaletteNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkShadingRatePaletteNV*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkShadingRatePaletteNV*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetViewportShadingRatePaletteNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetViewportShadingRatePaletteNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkShadingRatePaletteNV*, void> (vulkan.PFN_vkCmdSetViewportShadingRatePaletteNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetViewportShadingRatePaletteNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkShadingRatePaletteNV*, void> from) => new vulkan.PFN_vkCmdSetViewportShadingRatePaletteNV(from);
            
            public static bool operator ==(PFN_vkCmdSetViewportShadingRatePaletteNV left, PFN_vkCmdSetViewportShadingRatePaletteNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetViewportShadingRatePaletteNV left, PFN_vkCmdSetViewportShadingRatePaletteNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetCoarseSampleOrderNV : IEquatable<PFN_vkCmdSetCoarseSampleOrderNV>
        {
            public PFN_vkCmdSetCoarseSampleOrderNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCoarseSampleOrderTypeNV, uint, vulkan.VkCoarseSampleOrderCustomNV*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCoarseSampleOrderTypeNV, uint, vulkan.VkCoarseSampleOrderCustomNV*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetCoarseSampleOrderNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetCoarseSampleOrderNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCoarseSampleOrderTypeNV, uint, vulkan.VkCoarseSampleOrderCustomNV*, void> (vulkan.PFN_vkCmdSetCoarseSampleOrderNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetCoarseSampleOrderNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCoarseSampleOrderTypeNV, uint, vulkan.VkCoarseSampleOrderCustomNV*, void> from) => new vulkan.PFN_vkCmdSetCoarseSampleOrderNV(from);
            
            public static bool operator ==(PFN_vkCmdSetCoarseSampleOrderNV left, PFN_vkCmdSetCoarseSampleOrderNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetCoarseSampleOrderNV left, PFN_vkCmdSetCoarseSampleOrderNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkRayTracingShaderGroupTypeNV : IEquatable<VkRayTracingShaderGroupTypeNV>
        {
            public VkRayTracingShaderGroupTypeNV(vulkan.VkRayTracingShaderGroupTypeKHR value) => this.Value = value;
            
            public vulkan.VkRayTracingShaderGroupTypeKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkRayTracingShaderGroupTypeNV other && Equals(other);
            
            public bool Equals(VkRayTracingShaderGroupTypeNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkRayTracingShaderGroupTypeKHR (vulkan.VkRayTracingShaderGroupTypeNV from) => from.Value;
            
            public static implicit operator vulkan.VkRayTracingShaderGroupTypeNV (vulkan.VkRayTracingShaderGroupTypeKHR from) => new vulkan.VkRayTracingShaderGroupTypeNV(from);
            
            public static bool operator ==(VkRayTracingShaderGroupTypeNV left, VkRayTracingShaderGroupTypeNV right) => left.Equals(right);
            
            public static bool operator !=(VkRayTracingShaderGroupTypeNV left, VkRayTracingShaderGroupTypeNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkGeometryTypeNV : IEquatable<VkGeometryTypeNV>
        {
            public VkGeometryTypeNV(vulkan.VkGeometryTypeKHR value) => this.Value = value;
            
            public vulkan.VkGeometryTypeKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkGeometryTypeNV other && Equals(other);
            
            public bool Equals(VkGeometryTypeNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkGeometryTypeKHR (vulkan.VkGeometryTypeNV from) => from.Value;
            
            public static implicit operator vulkan.VkGeometryTypeNV (vulkan.VkGeometryTypeKHR from) => new vulkan.VkGeometryTypeNV(from);
            
            public static bool operator ==(VkGeometryTypeNV left, VkGeometryTypeNV right) => left.Equals(right);
            
            public static bool operator !=(VkGeometryTypeNV left, VkGeometryTypeNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkCopyAccelerationStructureModeNV : IEquatable<VkCopyAccelerationStructureModeNV>
        {
            public VkCopyAccelerationStructureModeNV(vulkan.VkCopyAccelerationStructureModeKHR value) => this.Value = value;
            
            public vulkan.VkCopyAccelerationStructureModeKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkCopyAccelerationStructureModeNV other && Equals(other);
            
            public bool Equals(VkCopyAccelerationStructureModeNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkCopyAccelerationStructureModeKHR (vulkan.VkCopyAccelerationStructureModeNV from) => from.Value;
            
            public static implicit operator vulkan.VkCopyAccelerationStructureModeNV (vulkan.VkCopyAccelerationStructureModeKHR from) => new vulkan.VkCopyAccelerationStructureModeNV(from);
            
            public static bool operator ==(VkCopyAccelerationStructureModeNV left, VkCopyAccelerationStructureModeNV right) => left.Equals(right);
            
            public static bool operator !=(VkCopyAccelerationStructureModeNV left, VkCopyAccelerationStructureModeNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkGeometryFlagsNV : IEquatable<VkGeometryFlagsNV>
        {
            public VkGeometryFlagsNV(vulkan.VkGeometryFlagsKHR value) => this.Value = value;
            
            public vulkan.VkGeometryFlagsKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkGeometryFlagsNV other && Equals(other);
            
            public bool Equals(VkGeometryFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkGeometryFlagsKHR (vulkan.VkGeometryFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkGeometryFlagsNV (vulkan.VkGeometryFlagsKHR from) => new vulkan.VkGeometryFlagsNV(from);
            
            public static bool operator ==(VkGeometryFlagsNV left, VkGeometryFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkGeometryFlagsNV left, VkGeometryFlagsNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkGeometryFlagBitsNV : IEquatable<VkGeometryFlagBitsNV>
        {
            public VkGeometryFlagBitsNV(vulkan.VkGeometryFlagBitsKHR value) => this.Value = value;
            
            public vulkan.VkGeometryFlagBitsKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkGeometryFlagBitsNV other && Equals(other);
            
            public bool Equals(VkGeometryFlagBitsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkGeometryFlagBitsKHR (vulkan.VkGeometryFlagBitsNV from) => from.Value;
            
            public static implicit operator vulkan.VkGeometryFlagBitsNV (vulkan.VkGeometryFlagBitsKHR from) => new vulkan.VkGeometryFlagBitsNV(from);
            
            public static bool operator ==(VkGeometryFlagBitsNV left, VkGeometryFlagBitsNV right) => left.Equals(right);
            
            public static bool operator !=(VkGeometryFlagBitsNV left, VkGeometryFlagBitsNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkGeometryInstanceFlagsNV : IEquatable<VkGeometryInstanceFlagsNV>
        {
            public VkGeometryInstanceFlagsNV(vulkan.VkGeometryInstanceFlagsKHR value) => this.Value = value;
            
            public vulkan.VkGeometryInstanceFlagsKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkGeometryInstanceFlagsNV other && Equals(other);
            
            public bool Equals(VkGeometryInstanceFlagsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkGeometryInstanceFlagsKHR (vulkan.VkGeometryInstanceFlagsNV from) => from.Value;
            
            public static implicit operator vulkan.VkGeometryInstanceFlagsNV (vulkan.VkGeometryInstanceFlagsKHR from) => new vulkan.VkGeometryInstanceFlagsNV(from);
            
            public static bool operator ==(VkGeometryInstanceFlagsNV left, VkGeometryInstanceFlagsNV right) => left.Equals(right);
            
            public static bool operator !=(VkGeometryInstanceFlagsNV left, VkGeometryInstanceFlagsNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkGeometryInstanceFlagBitsNV : IEquatable<VkGeometryInstanceFlagBitsNV>
        {
            public VkGeometryInstanceFlagBitsNV(vulkan.VkGeometryInstanceFlagBitsKHR value) => this.Value = value;
            
            public vulkan.VkGeometryInstanceFlagBitsKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkGeometryInstanceFlagBitsNV other && Equals(other);
            
            public bool Equals(VkGeometryInstanceFlagBitsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkGeometryInstanceFlagBitsKHR (vulkan.VkGeometryInstanceFlagBitsNV from) => from.Value;
            
            public static implicit operator vulkan.VkGeometryInstanceFlagBitsNV (vulkan.VkGeometryInstanceFlagBitsKHR from) => new vulkan.VkGeometryInstanceFlagBitsNV(from);
            
            public static bool operator ==(VkGeometryInstanceFlagBitsNV left, VkGeometryInstanceFlagBitsNV right) => left.Equals(right);
            
            public static bool operator !=(VkGeometryInstanceFlagBitsNV left, VkGeometryInstanceFlagBitsNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBuildAccelerationStructureFlagBitsNV : IEquatable<VkBuildAccelerationStructureFlagBitsNV>
        {
            public VkBuildAccelerationStructureFlagBitsNV(vulkan.VkBuildAccelerationStructureFlagBitsKHR value) => this.Value = value;
            
            public vulkan.VkBuildAccelerationStructureFlagBitsKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkBuildAccelerationStructureFlagBitsNV other && Equals(other);
            
            public bool Equals(VkBuildAccelerationStructureFlagBitsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBuildAccelerationStructureFlagBitsKHR (vulkan.VkBuildAccelerationStructureFlagBitsNV from) => from.Value;
            
            public static implicit operator vulkan.VkBuildAccelerationStructureFlagBitsNV (vulkan.VkBuildAccelerationStructureFlagBitsKHR from) => new vulkan.VkBuildAccelerationStructureFlagBitsNV(from);
            
            public static bool operator ==(VkBuildAccelerationStructureFlagBitsNV left, VkBuildAccelerationStructureFlagBitsNV right) => left.Equals(right);
            
            public static bool operator !=(VkBuildAccelerationStructureFlagBitsNV left, VkBuildAccelerationStructureFlagBitsNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkTransformMatrixNV : IEquatable<VkTransformMatrixNV>
        {
            public VkTransformMatrixNV(vulkan.VkTransformMatrixKHR value) => this.Value = value;
            
            public vulkan.VkTransformMatrixKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkTransformMatrixNV other && Equals(other);
            
            public bool Equals(VkTransformMatrixNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkTransformMatrixKHR (vulkan.VkTransformMatrixNV from) => from.Value;
            
            public static implicit operator vulkan.VkTransformMatrixNV (vulkan.VkTransformMatrixKHR from) => new vulkan.VkTransformMatrixNV(from);
            
            public static bool operator ==(VkTransformMatrixNV left, VkTransformMatrixNV right) => left.Equals(right);
            
            public static bool operator !=(VkTransformMatrixNV left, VkTransformMatrixNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkAabbPositionsNV : IEquatable<VkAabbPositionsNV>
        {
            public VkAabbPositionsNV(vulkan.VkAabbPositionsKHR value) => this.Value = value;
            
            public vulkan.VkAabbPositionsKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkAabbPositionsNV other && Equals(other);
            
            public bool Equals(VkAabbPositionsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkAabbPositionsKHR (vulkan.VkAabbPositionsNV from) => from.Value;
            
            public static implicit operator vulkan.VkAabbPositionsNV (vulkan.VkAabbPositionsKHR from) => new vulkan.VkAabbPositionsNV(from);
            
            public static bool operator ==(VkAabbPositionsNV left, VkAabbPositionsNV right) => left.Equals(right);
            
            public static bool operator !=(VkAabbPositionsNV left, VkAabbPositionsNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkAccelerationStructureInstanceNV : IEquatable<VkAccelerationStructureInstanceNV>
        {
            public VkAccelerationStructureInstanceNV(vulkan.VkAccelerationStructureInstanceKHR value) => this.Value = value;
            
            public vulkan.VkAccelerationStructureInstanceKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkAccelerationStructureInstanceNV other && Equals(other);
            
            public bool Equals(VkAccelerationStructureInstanceNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkAccelerationStructureInstanceKHR (vulkan.VkAccelerationStructureInstanceNV from) => from.Value;
            
            public static implicit operator vulkan.VkAccelerationStructureInstanceNV (vulkan.VkAccelerationStructureInstanceKHR from) => new vulkan.VkAccelerationStructureInstanceNV(from);
            
            public static bool operator ==(VkAccelerationStructureInstanceNV left, VkAccelerationStructureInstanceNV right) => left.Equals(right);
            
            public static bool operator !=(VkAccelerationStructureInstanceNV left, VkAccelerationStructureInstanceNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateAccelerationStructureNV : IEquatable<PFN_vkCreateAccelerationStructureNV>
        {
            public PFN_vkCreateAccelerationStructureNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureCreateInfoNV*, vulkan.VkAllocationCallbacks*, vulkan.VkAccelerationStructureNV*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureCreateInfoNV*, vulkan.VkAllocationCallbacks*, vulkan.VkAccelerationStructureNV*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateAccelerationStructureNV other && Equals(other);
            
            public bool Equals(PFN_vkCreateAccelerationStructureNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureCreateInfoNV*, vulkan.VkAllocationCallbacks*, vulkan.VkAccelerationStructureNV*, vulkan.VkResult> (vulkan.PFN_vkCreateAccelerationStructureNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateAccelerationStructureNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureCreateInfoNV*, vulkan.VkAllocationCallbacks*, vulkan.VkAccelerationStructureNV*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateAccelerationStructureNV(from);
            
            public static bool operator ==(PFN_vkCreateAccelerationStructureNV left, PFN_vkCreateAccelerationStructureNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateAccelerationStructureNV left, PFN_vkCreateAccelerationStructureNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyAccelerationStructureNV : IEquatable<PFN_vkDestroyAccelerationStructureNV>
        {
            public PFN_vkDestroyAccelerationStructureNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureNV, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureNV, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyAccelerationStructureNV other && Equals(other);
            
            public bool Equals(PFN_vkDestroyAccelerationStructureNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureNV, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyAccelerationStructureNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyAccelerationStructureNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureNV, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyAccelerationStructureNV(from);
            
            public static bool operator ==(PFN_vkDestroyAccelerationStructureNV left, PFN_vkDestroyAccelerationStructureNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyAccelerationStructureNV left, PFN_vkDestroyAccelerationStructureNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetAccelerationStructureMemoryRequirementsNV : IEquatable<PFN_vkGetAccelerationStructureMemoryRequirementsNV>
        {
            public PFN_vkGetAccelerationStructureMemoryRequirementsNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureMemoryRequirementsInfoNV*, vulkan.VkMemoryRequirements2KHR*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureMemoryRequirementsInfoNV*, vulkan.VkMemoryRequirements2KHR*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetAccelerationStructureMemoryRequirementsNV other && Equals(other);
            
            public bool Equals(PFN_vkGetAccelerationStructureMemoryRequirementsNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureMemoryRequirementsInfoNV*, vulkan.VkMemoryRequirements2KHR*, void> (vulkan.PFN_vkGetAccelerationStructureMemoryRequirementsNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetAccelerationStructureMemoryRequirementsNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureMemoryRequirementsInfoNV*, vulkan.VkMemoryRequirements2KHR*, void> from) => new vulkan.PFN_vkGetAccelerationStructureMemoryRequirementsNV(from);
            
            public static bool operator ==(PFN_vkGetAccelerationStructureMemoryRequirementsNV left, PFN_vkGetAccelerationStructureMemoryRequirementsNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetAccelerationStructureMemoryRequirementsNV left, PFN_vkGetAccelerationStructureMemoryRequirementsNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkBindAccelerationStructureMemoryNV : IEquatable<PFN_vkBindAccelerationStructureMemoryNV>
        {
            public PFN_vkBindAccelerationStructureMemoryNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindAccelerationStructureMemoryInfoNV*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindAccelerationStructureMemoryInfoNV*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkBindAccelerationStructureMemoryNV other && Equals(other);
            
            public bool Equals(PFN_vkBindAccelerationStructureMemoryNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindAccelerationStructureMemoryInfoNV*, vulkan.VkResult> (vulkan.PFN_vkBindAccelerationStructureMemoryNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkBindAccelerationStructureMemoryNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkBindAccelerationStructureMemoryInfoNV*, vulkan.VkResult> from) => new vulkan.PFN_vkBindAccelerationStructureMemoryNV(from);
            
            public static bool operator ==(PFN_vkBindAccelerationStructureMemoryNV left, PFN_vkBindAccelerationStructureMemoryNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkBindAccelerationStructureMemoryNV left, PFN_vkBindAccelerationStructureMemoryNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBuildAccelerationStructureNV : IEquatable<PFN_vkCmdBuildAccelerationStructureNV>
        {
            public PFN_vkCmdBuildAccelerationStructureNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkAccelerationStructureInfoNV*, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBool32, vulkan.VkAccelerationStructureNV, vulkan.VkAccelerationStructureNV, vulkan.VkBuffer, vulkan.VkDeviceSize, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkAccelerationStructureInfoNV*, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBool32, vulkan.VkAccelerationStructureNV, vulkan.VkAccelerationStructureNV, vulkan.VkBuffer, vulkan.VkDeviceSize, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBuildAccelerationStructureNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdBuildAccelerationStructureNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkAccelerationStructureInfoNV*, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBool32, vulkan.VkAccelerationStructureNV, vulkan.VkAccelerationStructureNV, vulkan.VkBuffer, vulkan.VkDeviceSize, void> (vulkan.PFN_vkCmdBuildAccelerationStructureNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBuildAccelerationStructureNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkAccelerationStructureInfoNV*, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBool32, vulkan.VkAccelerationStructureNV, vulkan.VkAccelerationStructureNV, vulkan.VkBuffer, vulkan.VkDeviceSize, void> from) => new vulkan.PFN_vkCmdBuildAccelerationStructureNV(from);
            
            public static bool operator ==(PFN_vkCmdBuildAccelerationStructureNV left, PFN_vkCmdBuildAccelerationStructureNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBuildAccelerationStructureNV left, PFN_vkCmdBuildAccelerationStructureNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyAccelerationStructureNV : IEquatable<PFN_vkCmdCopyAccelerationStructureNV>
        {
            public PFN_vkCmdCopyAccelerationStructureNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkAccelerationStructureNV, vulkan.VkAccelerationStructureNV, vulkan.VkCopyAccelerationStructureModeKHR, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkAccelerationStructureNV, vulkan.VkAccelerationStructureNV, vulkan.VkCopyAccelerationStructureModeKHR, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyAccelerationStructureNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyAccelerationStructureNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkAccelerationStructureNV, vulkan.VkAccelerationStructureNV, vulkan.VkCopyAccelerationStructureModeKHR, void> (vulkan.PFN_vkCmdCopyAccelerationStructureNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyAccelerationStructureNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkAccelerationStructureNV, vulkan.VkAccelerationStructureNV, vulkan.VkCopyAccelerationStructureModeKHR, void> from) => new vulkan.PFN_vkCmdCopyAccelerationStructureNV(from);
            
            public static bool operator ==(PFN_vkCmdCopyAccelerationStructureNV left, PFN_vkCmdCopyAccelerationStructureNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyAccelerationStructureNV left, PFN_vkCmdCopyAccelerationStructureNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdTraceRaysNV : IEquatable<PFN_vkCmdTraceRaysNV>
        {
            public PFN_vkCmdTraceRaysNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, uint, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, uint, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdTraceRaysNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdTraceRaysNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, uint, uint, uint, void> (vulkan.PFN_vkCmdTraceRaysNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdTraceRaysNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkDeviceSize, uint, uint, uint, void> from) => new vulkan.PFN_vkCmdTraceRaysNV(from);
            
            public static bool operator ==(PFN_vkCmdTraceRaysNV left, PFN_vkCmdTraceRaysNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdTraceRaysNV left, PFN_vkCmdTraceRaysNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateRayTracingPipelinesNV : IEquatable<PFN_vkCreateRayTracingPipelinesNV>
        {
            public PFN_vkCreateRayTracingPipelinesNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, uint, vulkan.VkRayTracingPipelineCreateInfoNV*, vulkan.VkAllocationCallbacks*, vulkan.VkPipeline*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, uint, vulkan.VkRayTracingPipelineCreateInfoNV*, vulkan.VkAllocationCallbacks*, vulkan.VkPipeline*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateRayTracingPipelinesNV other && Equals(other);
            
            public bool Equals(PFN_vkCreateRayTracingPipelinesNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, uint, vulkan.VkRayTracingPipelineCreateInfoNV*, vulkan.VkAllocationCallbacks*, vulkan.VkPipeline*, vulkan.VkResult> (vulkan.PFN_vkCreateRayTracingPipelinesNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateRayTracingPipelinesNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineCache, uint, vulkan.VkRayTracingPipelineCreateInfoNV*, vulkan.VkAllocationCallbacks*, vulkan.VkPipeline*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateRayTracingPipelinesNV(from);
            
            public static bool operator ==(PFN_vkCreateRayTracingPipelinesNV left, PFN_vkCreateRayTracingPipelinesNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateRayTracingPipelinesNV left, PFN_vkCreateRayTracingPipelinesNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetRayTracingShaderGroupHandlesKHR : IEquatable<PFN_vkGetRayTracingShaderGroupHandlesKHR>
        {
            public PFN_vkGetRayTracingShaderGroupHandlesKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, uint, nuint, void*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, uint, nuint, void*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetRayTracingShaderGroupHandlesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetRayTracingShaderGroupHandlesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, uint, nuint, void*, vulkan.VkResult> (vulkan.PFN_vkGetRayTracingShaderGroupHandlesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetRayTracingShaderGroupHandlesKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, uint, nuint, void*, vulkan.VkResult> from) => new vulkan.PFN_vkGetRayTracingShaderGroupHandlesKHR(from);
            
            public static bool operator ==(PFN_vkGetRayTracingShaderGroupHandlesKHR left, PFN_vkGetRayTracingShaderGroupHandlesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetRayTracingShaderGroupHandlesKHR left, PFN_vkGetRayTracingShaderGroupHandlesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetRayTracingShaderGroupHandlesNV : IEquatable<PFN_vkGetRayTracingShaderGroupHandlesNV>
        {
            public PFN_vkGetRayTracingShaderGroupHandlesNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, uint, nuint, void*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, uint, nuint, void*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetRayTracingShaderGroupHandlesNV other && Equals(other);
            
            public bool Equals(PFN_vkGetRayTracingShaderGroupHandlesNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, uint, nuint, void*, vulkan.VkResult> (vulkan.PFN_vkGetRayTracingShaderGroupHandlesNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetRayTracingShaderGroupHandlesNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, uint, nuint, void*, vulkan.VkResult> from) => new vulkan.PFN_vkGetRayTracingShaderGroupHandlesNV(from);
            
            public static bool operator ==(PFN_vkGetRayTracingShaderGroupHandlesNV left, PFN_vkGetRayTracingShaderGroupHandlesNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetRayTracingShaderGroupHandlesNV left, PFN_vkGetRayTracingShaderGroupHandlesNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetAccelerationStructureHandleNV : IEquatable<PFN_vkGetAccelerationStructureHandleNV>
        {
            public PFN_vkGetAccelerationStructureHandleNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureNV, nuint, void*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureNV, nuint, void*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetAccelerationStructureHandleNV other && Equals(other);
            
            public bool Equals(PFN_vkGetAccelerationStructureHandleNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureNV, nuint, void*, vulkan.VkResult> (vulkan.PFN_vkGetAccelerationStructureHandleNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetAccelerationStructureHandleNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureNV, nuint, void*, vulkan.VkResult> from) => new vulkan.PFN_vkGetAccelerationStructureHandleNV(from);
            
            public static bool operator ==(PFN_vkGetAccelerationStructureHandleNV left, PFN_vkGetAccelerationStructureHandleNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetAccelerationStructureHandleNV left, PFN_vkGetAccelerationStructureHandleNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdWriteAccelerationStructuresPropertiesNV : IEquatable<PFN_vkCmdWriteAccelerationStructuresPropertiesNV>
        {
            public PFN_vkCmdWriteAccelerationStructuresPropertiesNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkAccelerationStructureNV*, vulkan.VkQueryType, vulkan.VkQueryPool, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkAccelerationStructureNV*, vulkan.VkQueryType, vulkan.VkQueryPool, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdWriteAccelerationStructuresPropertiesNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdWriteAccelerationStructuresPropertiesNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkAccelerationStructureNV*, vulkan.VkQueryType, vulkan.VkQueryPool, uint, void> (vulkan.PFN_vkCmdWriteAccelerationStructuresPropertiesNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdWriteAccelerationStructuresPropertiesNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkAccelerationStructureNV*, vulkan.VkQueryType, vulkan.VkQueryPool, uint, void> from) => new vulkan.PFN_vkCmdWriteAccelerationStructuresPropertiesNV(from);
            
            public static bool operator ==(PFN_vkCmdWriteAccelerationStructuresPropertiesNV left, PFN_vkCmdWriteAccelerationStructuresPropertiesNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdWriteAccelerationStructuresPropertiesNV left, PFN_vkCmdWriteAccelerationStructuresPropertiesNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCompileDeferredNV : IEquatable<PFN_vkCompileDeferredNV>
        {
            public PFN_vkCompileDeferredNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCompileDeferredNV other && Equals(other);
            
            public bool Equals(PFN_vkCompileDeferredNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, vulkan.VkResult> (vulkan.PFN_vkCompileDeferredNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCompileDeferredNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, vulkan.VkResult> from) => new vulkan.PFN_vkCompileDeferredNV(from);
            
            public static bool operator ==(PFN_vkCompileDeferredNV left, PFN_vkCompileDeferredNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCompileDeferredNV left, PFN_vkCompileDeferredNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkQueueGlobalPriorityEXT : IEquatable<VkQueueGlobalPriorityEXT>
        {
            public VkQueueGlobalPriorityEXT(vulkan.VkQueueGlobalPriorityKHR value) => this.Value = value;
            
            public vulkan.VkQueueGlobalPriorityKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkQueueGlobalPriorityEXT other && Equals(other);
            
            public bool Equals(VkQueueGlobalPriorityEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkQueueGlobalPriorityKHR (vulkan.VkQueueGlobalPriorityEXT from) => from.Value;
            
            public static implicit operator vulkan.VkQueueGlobalPriorityEXT (vulkan.VkQueueGlobalPriorityKHR from) => new vulkan.VkQueueGlobalPriorityEXT(from);
            
            public static bool operator ==(VkQueueGlobalPriorityEXT left, VkQueueGlobalPriorityEXT right) => left.Equals(right);
            
            public static bool operator !=(VkQueueGlobalPriorityEXT left, VkQueueGlobalPriorityEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDeviceQueueGlobalPriorityCreateInfoEXT : IEquatable<VkDeviceQueueGlobalPriorityCreateInfoEXT>
        {
            public VkDeviceQueueGlobalPriorityCreateInfoEXT(vulkan.VkDeviceQueueGlobalPriorityCreateInfoKHR value) => this.Value = value;
            
            public vulkan.VkDeviceQueueGlobalPriorityCreateInfoKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkDeviceQueueGlobalPriorityCreateInfoEXT other && Equals(other);
            
            public bool Equals(VkDeviceQueueGlobalPriorityCreateInfoEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDeviceQueueGlobalPriorityCreateInfoKHR (vulkan.VkDeviceQueueGlobalPriorityCreateInfoEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDeviceQueueGlobalPriorityCreateInfoEXT (vulkan.VkDeviceQueueGlobalPriorityCreateInfoKHR from) => new vulkan.VkDeviceQueueGlobalPriorityCreateInfoEXT(from);
            
            public static bool operator ==(VkDeviceQueueGlobalPriorityCreateInfoEXT left, VkDeviceQueueGlobalPriorityCreateInfoEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDeviceQueueGlobalPriorityCreateInfoEXT left, VkDeviceQueueGlobalPriorityCreateInfoEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetMemoryHostPointerPropertiesEXT : IEquatable<PFN_vkGetMemoryHostPointerPropertiesEXT>
        {
            public PFN_vkGetMemoryHostPointerPropertiesEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkExternalMemoryHandleTypeFlagBits, void*, vulkan.VkMemoryHostPointerPropertiesEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkExternalMemoryHandleTypeFlagBits, void*, vulkan.VkMemoryHostPointerPropertiesEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetMemoryHostPointerPropertiesEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetMemoryHostPointerPropertiesEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkExternalMemoryHandleTypeFlagBits, void*, vulkan.VkMemoryHostPointerPropertiesEXT*, vulkan.VkResult> (vulkan.PFN_vkGetMemoryHostPointerPropertiesEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetMemoryHostPointerPropertiesEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkExternalMemoryHandleTypeFlagBits, void*, vulkan.VkMemoryHostPointerPropertiesEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkGetMemoryHostPointerPropertiesEXT(from);
            
            public static bool operator ==(PFN_vkGetMemoryHostPointerPropertiesEXT left, PFN_vkGetMemoryHostPointerPropertiesEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetMemoryHostPointerPropertiesEXT left, PFN_vkGetMemoryHostPointerPropertiesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdWriteBufferMarkerAMD : IEquatable<PFN_vkCmdWriteBufferMarkerAMD>
        {
            public PFN_vkCmdWriteBufferMarkerAMD(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlagBits, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlagBits, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdWriteBufferMarkerAMD other && Equals(other);
            
            public bool Equals(PFN_vkCmdWriteBufferMarkerAMD other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlagBits, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, void> (vulkan.PFN_vkCmdWriteBufferMarkerAMD from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdWriteBufferMarkerAMD (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineStageFlagBits, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, void> from) => new vulkan.PFN_vkCmdWriteBufferMarkerAMD(from);
            
            public static bool operator ==(PFN_vkCmdWriteBufferMarkerAMD left, PFN_vkCmdWriteBufferMarkerAMD right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdWriteBufferMarkerAMD left, PFN_vkCmdWriteBufferMarkerAMD right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT : IEquatable<PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT>
        {
            public PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkTimeDomainEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkTimeDomainEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkTimeDomainEXT*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkTimeDomainEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT left, PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT left, PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetCalibratedTimestampsEXT : IEquatable<PFN_vkGetCalibratedTimestampsEXT>
        {
            public PFN_vkGetCalibratedTimestampsEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkCalibratedTimestampInfoEXT*, ulong*, ulong*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkCalibratedTimestampInfoEXT*, ulong*, ulong*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetCalibratedTimestampsEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetCalibratedTimestampsEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkCalibratedTimestampInfoEXT*, ulong*, ulong*, vulkan.VkResult> (vulkan.PFN_vkGetCalibratedTimestampsEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetCalibratedTimestampsEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkCalibratedTimestampInfoEXT*, ulong*, ulong*, vulkan.VkResult> from) => new vulkan.PFN_vkGetCalibratedTimestampsEXT(from);
            
            public static bool operator ==(PFN_vkGetCalibratedTimestampsEXT left, PFN_vkGetCalibratedTimestampsEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetCalibratedTimestampsEXT left, PFN_vkGetCalibratedTimestampsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineCreationFeedbackFlagBitsEXT : IEquatable<VkPipelineCreationFeedbackFlagBitsEXT>
        {
            public VkPipelineCreationFeedbackFlagBitsEXT(vulkan.VkPipelineCreationFeedbackFlagBits value) => this.Value = value;
            
            public vulkan.VkPipelineCreationFeedbackFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineCreationFeedbackFlagBitsEXT other && Equals(other);
            
            public bool Equals(VkPipelineCreationFeedbackFlagBitsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPipelineCreationFeedbackFlagBits (vulkan.VkPipelineCreationFeedbackFlagBitsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineCreationFeedbackFlagBitsEXT (vulkan.VkPipelineCreationFeedbackFlagBits from) => new vulkan.VkPipelineCreationFeedbackFlagBitsEXT(from);
            
            public static bool operator ==(VkPipelineCreationFeedbackFlagBitsEXT left, VkPipelineCreationFeedbackFlagBitsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineCreationFeedbackFlagBitsEXT left, VkPipelineCreationFeedbackFlagBitsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineCreationFeedbackFlagsEXT : IEquatable<VkPipelineCreationFeedbackFlagsEXT>
        {
            public VkPipelineCreationFeedbackFlagsEXT(vulkan.VkPipelineCreationFeedbackFlags value) => this.Value = value;
            
            public vulkan.VkPipelineCreationFeedbackFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineCreationFeedbackFlagsEXT other && Equals(other);
            
            public bool Equals(VkPipelineCreationFeedbackFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPipelineCreationFeedbackFlags (vulkan.VkPipelineCreationFeedbackFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineCreationFeedbackFlagsEXT (vulkan.VkPipelineCreationFeedbackFlags from) => new vulkan.VkPipelineCreationFeedbackFlagsEXT(from);
            
            public static bool operator ==(VkPipelineCreationFeedbackFlagsEXT left, VkPipelineCreationFeedbackFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineCreationFeedbackFlagsEXT left, VkPipelineCreationFeedbackFlagsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineCreationFeedbackCreateInfoEXT : IEquatable<VkPipelineCreationFeedbackCreateInfoEXT>
        {
            public VkPipelineCreationFeedbackCreateInfoEXT(vulkan.VkPipelineCreationFeedbackCreateInfo value) => this.Value = value;
            
            public vulkan.VkPipelineCreationFeedbackCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineCreationFeedbackCreateInfoEXT other && Equals(other);
            
            public bool Equals(VkPipelineCreationFeedbackCreateInfoEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPipelineCreationFeedbackCreateInfo (vulkan.VkPipelineCreationFeedbackCreateInfoEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineCreationFeedbackCreateInfoEXT (vulkan.VkPipelineCreationFeedbackCreateInfo from) => new vulkan.VkPipelineCreationFeedbackCreateInfoEXT(from);
            
            public static bool operator ==(VkPipelineCreationFeedbackCreateInfoEXT left, VkPipelineCreationFeedbackCreateInfoEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineCreationFeedbackCreateInfoEXT left, VkPipelineCreationFeedbackCreateInfoEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineCreationFeedbackEXT : IEquatable<VkPipelineCreationFeedbackEXT>
        {
            public VkPipelineCreationFeedbackEXT(vulkan.VkPipelineCreationFeedback value) => this.Value = value;
            
            public vulkan.VkPipelineCreationFeedback Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineCreationFeedbackEXT other && Equals(other);
            
            public bool Equals(VkPipelineCreationFeedbackEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPipelineCreationFeedback (vulkan.VkPipelineCreationFeedbackEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineCreationFeedbackEXT (vulkan.VkPipelineCreationFeedback from) => new vulkan.VkPipelineCreationFeedbackEXT(from);
            
            public static bool operator ==(VkPipelineCreationFeedbackEXT left, VkPipelineCreationFeedbackEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineCreationFeedbackEXT left, VkPipelineCreationFeedbackEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawMeshTasksNV : IEquatable<PFN_vkCmdDrawMeshTasksNV>
        {
            public PFN_vkCmdDrawMeshTasksNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawMeshTasksNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawMeshTasksNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, void> (vulkan.PFN_vkCmdDrawMeshTasksNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawMeshTasksNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawMeshTasksNV(from);
            
            public static bool operator ==(PFN_vkCmdDrawMeshTasksNV left, PFN_vkCmdDrawMeshTasksNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawMeshTasksNV left, PFN_vkCmdDrawMeshTasksNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawMeshTasksIndirectNV : IEquatable<PFN_vkCmdDrawMeshTasksIndirectNV>
        {
            public PFN_vkCmdDrawMeshTasksIndirectNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawMeshTasksIndirectNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawMeshTasksIndirectNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> (vulkan.PFN_vkCmdDrawMeshTasksIndirectNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawMeshTasksIndirectNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawMeshTasksIndirectNV(from);
            
            public static bool operator ==(PFN_vkCmdDrawMeshTasksIndirectNV left, PFN_vkCmdDrawMeshTasksIndirectNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawMeshTasksIndirectNV left, PFN_vkCmdDrawMeshTasksIndirectNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawMeshTasksIndirectCountNV : IEquatable<PFN_vkCmdDrawMeshTasksIndirectCountNV>
        {
            public PFN_vkCmdDrawMeshTasksIndirectCountNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawMeshTasksIndirectCountNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawMeshTasksIndirectCountNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> (vulkan.PFN_vkCmdDrawMeshTasksIndirectCountNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawMeshTasksIndirectCountNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawMeshTasksIndirectCountNV(from);
            
            public static bool operator ==(PFN_vkCmdDrawMeshTasksIndirectCountNV left, PFN_vkCmdDrawMeshTasksIndirectCountNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawMeshTasksIndirectCountNV left, PFN_vkCmdDrawMeshTasksIndirectCountNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV : IEquatable<VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV>
        {
            public VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR (vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV (vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR from) => new vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(from);
            
            public static bool operator ==(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV left, VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV left, VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetExclusiveScissorEnableNV : IEquatable<PFN_vkCmdSetExclusiveScissorEnableNV>
        {
            public PFN_vkCmdSetExclusiveScissorEnableNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBool32*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBool32*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetExclusiveScissorEnableNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetExclusiveScissorEnableNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBool32*, void> (vulkan.PFN_vkCmdSetExclusiveScissorEnableNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetExclusiveScissorEnableNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBool32*, void> from) => new vulkan.PFN_vkCmdSetExclusiveScissorEnableNV(from);
            
            public static bool operator ==(PFN_vkCmdSetExclusiveScissorEnableNV left, PFN_vkCmdSetExclusiveScissorEnableNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetExclusiveScissorEnableNV left, PFN_vkCmdSetExclusiveScissorEnableNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetExclusiveScissorNV : IEquatable<PFN_vkCmdSetExclusiveScissorNV>
        {
            public PFN_vkCmdSetExclusiveScissorNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkRect2D*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkRect2D*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetExclusiveScissorNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetExclusiveScissorNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkRect2D*, void> (vulkan.PFN_vkCmdSetExclusiveScissorNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetExclusiveScissorNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkRect2D*, void> from) => new vulkan.PFN_vkCmdSetExclusiveScissorNV(from);
            
            public static bool operator ==(PFN_vkCmdSetExclusiveScissorNV left, PFN_vkCmdSetExclusiveScissorNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetExclusiveScissorNV left, PFN_vkCmdSetExclusiveScissorNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetCheckpointNV : IEquatable<PFN_vkCmdSetCheckpointNV>
        {
            public PFN_vkCmdSetCheckpointNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetCheckpointNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetCheckpointNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void*, void> (vulkan.PFN_vkCmdSetCheckpointNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetCheckpointNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void*, void> from) => new vulkan.PFN_vkCmdSetCheckpointNV(from);
            
            public static bool operator ==(PFN_vkCmdSetCheckpointNV left, PFN_vkCmdSetCheckpointNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetCheckpointNV left, PFN_vkCmdSetCheckpointNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetQueueCheckpointDataNV : IEquatable<PFN_vkGetQueueCheckpointDataNV>
        {
            public PFN_vkGetQueueCheckpointDataNV(delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint*, vulkan.VkCheckpointDataNV*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint*, vulkan.VkCheckpointDataNV*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetQueueCheckpointDataNV other && Equals(other);
            
            public bool Equals(PFN_vkGetQueueCheckpointDataNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint*, vulkan.VkCheckpointDataNV*, void> (vulkan.PFN_vkGetQueueCheckpointDataNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetQueueCheckpointDataNV (delegate*unmanaged[Stdcall]<vulkan.VkQueue, uint*, vulkan.VkCheckpointDataNV*, void> from) => new vulkan.PFN_vkGetQueueCheckpointDataNV(from);
            
            public static bool operator ==(PFN_vkGetQueueCheckpointDataNV left, PFN_vkGetQueueCheckpointDataNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetQueueCheckpointDataNV left, PFN_vkGetQueueCheckpointDataNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPerformanceConfigurationINTEL : IEquatable<VkPerformanceConfigurationINTEL>
        {
            public VkPerformanceConfigurationINTEL(vulkan.VkPerformanceConfigurationINTEL_T value) => this.Value = value;
            
            public vulkan.VkPerformanceConfigurationINTEL_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkPerformanceConfigurationINTEL other && Equals(other);
            
            public bool Equals(VkPerformanceConfigurationINTEL other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPerformanceConfigurationINTEL_T (vulkan.VkPerformanceConfigurationINTEL from) => from.Value;
            
            public static implicit operator vulkan.VkPerformanceConfigurationINTEL (vulkan.VkPerformanceConfigurationINTEL_T from) => new vulkan.VkPerformanceConfigurationINTEL(from);
            
            public static bool operator ==(VkPerformanceConfigurationINTEL left, VkPerformanceConfigurationINTEL right) => left.Equals(right);
            
            public static bool operator !=(VkPerformanceConfigurationINTEL left, VkPerformanceConfigurationINTEL right) => !left.Equals(right);
        }
        
        public readonly partial struct VkQueryPoolCreateInfoINTEL : IEquatable<VkQueryPoolCreateInfoINTEL>
        {
            public VkQueryPoolCreateInfoINTEL(vulkan.VkQueryPoolPerformanceQueryCreateInfoINTEL value) => this.Value = value;
            
            public vulkan.VkQueryPoolPerformanceQueryCreateInfoINTEL Value { get; }
            
            public override bool Equals(object obj) => obj is VkQueryPoolCreateInfoINTEL other && Equals(other);
            
            public bool Equals(VkQueryPoolCreateInfoINTEL other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkQueryPoolPerformanceQueryCreateInfoINTEL (vulkan.VkQueryPoolCreateInfoINTEL from) => from.Value;
            
            public static implicit operator vulkan.VkQueryPoolCreateInfoINTEL (vulkan.VkQueryPoolPerformanceQueryCreateInfoINTEL from) => new vulkan.VkQueryPoolCreateInfoINTEL(from);
            
            public static bool operator ==(VkQueryPoolCreateInfoINTEL left, VkQueryPoolCreateInfoINTEL right) => left.Equals(right);
            
            public static bool operator !=(VkQueryPoolCreateInfoINTEL left, VkQueryPoolCreateInfoINTEL right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkInitializePerformanceApiINTEL : IEquatable<PFN_vkInitializePerformanceApiINTEL>
        {
            public PFN_vkInitializePerformanceApiINTEL(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkInitializePerformanceApiInfoINTEL*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkInitializePerformanceApiInfoINTEL*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkInitializePerformanceApiINTEL other && Equals(other);
            
            public bool Equals(PFN_vkInitializePerformanceApiINTEL other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkInitializePerformanceApiInfoINTEL*, vulkan.VkResult> (vulkan.PFN_vkInitializePerformanceApiINTEL from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkInitializePerformanceApiINTEL (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkInitializePerformanceApiInfoINTEL*, vulkan.VkResult> from) => new vulkan.PFN_vkInitializePerformanceApiINTEL(from);
            
            public static bool operator ==(PFN_vkInitializePerformanceApiINTEL left, PFN_vkInitializePerformanceApiINTEL right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkInitializePerformanceApiINTEL left, PFN_vkInitializePerformanceApiINTEL right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkUninitializePerformanceApiINTEL : IEquatable<PFN_vkUninitializePerformanceApiINTEL>
        {
            public PFN_vkUninitializePerformanceApiINTEL(delegate*unmanaged[Stdcall]<vulkan.VkDevice, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkUninitializePerformanceApiINTEL other && Equals(other);
            
            public bool Equals(PFN_vkUninitializePerformanceApiINTEL other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, void> (vulkan.PFN_vkUninitializePerformanceApiINTEL from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkUninitializePerformanceApiINTEL (delegate*unmanaged[Stdcall]<vulkan.VkDevice, void> from) => new vulkan.PFN_vkUninitializePerformanceApiINTEL(from);
            
            public static bool operator ==(PFN_vkUninitializePerformanceApiINTEL left, PFN_vkUninitializePerformanceApiINTEL right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkUninitializePerformanceApiINTEL left, PFN_vkUninitializePerformanceApiINTEL right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetPerformanceMarkerINTEL : IEquatable<PFN_vkCmdSetPerformanceMarkerINTEL>
        {
            public PFN_vkCmdSetPerformanceMarkerINTEL(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPerformanceMarkerInfoINTEL*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPerformanceMarkerInfoINTEL*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetPerformanceMarkerINTEL other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetPerformanceMarkerINTEL other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPerformanceMarkerInfoINTEL*, vulkan.VkResult> (vulkan.PFN_vkCmdSetPerformanceMarkerINTEL from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetPerformanceMarkerINTEL (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPerformanceMarkerInfoINTEL*, vulkan.VkResult> from) => new vulkan.PFN_vkCmdSetPerformanceMarkerINTEL(from);
            
            public static bool operator ==(PFN_vkCmdSetPerformanceMarkerINTEL left, PFN_vkCmdSetPerformanceMarkerINTEL right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetPerformanceMarkerINTEL left, PFN_vkCmdSetPerformanceMarkerINTEL right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetPerformanceStreamMarkerINTEL : IEquatable<PFN_vkCmdSetPerformanceStreamMarkerINTEL>
        {
            public PFN_vkCmdSetPerformanceStreamMarkerINTEL(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPerformanceStreamMarkerInfoINTEL*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPerformanceStreamMarkerInfoINTEL*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetPerformanceStreamMarkerINTEL other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetPerformanceStreamMarkerINTEL other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPerformanceStreamMarkerInfoINTEL*, vulkan.VkResult> (vulkan.PFN_vkCmdSetPerformanceStreamMarkerINTEL from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetPerformanceStreamMarkerINTEL (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPerformanceStreamMarkerInfoINTEL*, vulkan.VkResult> from) => new vulkan.PFN_vkCmdSetPerformanceStreamMarkerINTEL(from);
            
            public static bool operator ==(PFN_vkCmdSetPerformanceStreamMarkerINTEL left, PFN_vkCmdSetPerformanceStreamMarkerINTEL right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetPerformanceStreamMarkerINTEL left, PFN_vkCmdSetPerformanceStreamMarkerINTEL right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetPerformanceOverrideINTEL : IEquatable<PFN_vkCmdSetPerformanceOverrideINTEL>
        {
            public PFN_vkCmdSetPerformanceOverrideINTEL(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPerformanceOverrideInfoINTEL*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPerformanceOverrideInfoINTEL*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetPerformanceOverrideINTEL other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetPerformanceOverrideINTEL other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPerformanceOverrideInfoINTEL*, vulkan.VkResult> (vulkan.PFN_vkCmdSetPerformanceOverrideINTEL from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetPerformanceOverrideINTEL (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPerformanceOverrideInfoINTEL*, vulkan.VkResult> from) => new vulkan.PFN_vkCmdSetPerformanceOverrideINTEL(from);
            
            public static bool operator ==(PFN_vkCmdSetPerformanceOverrideINTEL left, PFN_vkCmdSetPerformanceOverrideINTEL right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetPerformanceOverrideINTEL left, PFN_vkCmdSetPerformanceOverrideINTEL right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkAcquirePerformanceConfigurationINTEL : IEquatable<PFN_vkAcquirePerformanceConfigurationINTEL>
        {
            public PFN_vkAcquirePerformanceConfigurationINTEL(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPerformanceConfigurationAcquireInfoINTEL*, vulkan.VkPerformanceConfigurationINTEL*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPerformanceConfigurationAcquireInfoINTEL*, vulkan.VkPerformanceConfigurationINTEL*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkAcquirePerformanceConfigurationINTEL other && Equals(other);
            
            public bool Equals(PFN_vkAcquirePerformanceConfigurationINTEL other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPerformanceConfigurationAcquireInfoINTEL*, vulkan.VkPerformanceConfigurationINTEL*, vulkan.VkResult> (vulkan.PFN_vkAcquirePerformanceConfigurationINTEL from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkAcquirePerformanceConfigurationINTEL (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPerformanceConfigurationAcquireInfoINTEL*, vulkan.VkPerformanceConfigurationINTEL*, vulkan.VkResult> from) => new vulkan.PFN_vkAcquirePerformanceConfigurationINTEL(from);
            
            public static bool operator ==(PFN_vkAcquirePerformanceConfigurationINTEL left, PFN_vkAcquirePerformanceConfigurationINTEL right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkAcquirePerformanceConfigurationINTEL left, PFN_vkAcquirePerformanceConfigurationINTEL right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkReleasePerformanceConfigurationINTEL : IEquatable<PFN_vkReleasePerformanceConfigurationINTEL>
        {
            public PFN_vkReleasePerformanceConfigurationINTEL(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPerformanceConfigurationINTEL, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPerformanceConfigurationINTEL, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkReleasePerformanceConfigurationINTEL other && Equals(other);
            
            public bool Equals(PFN_vkReleasePerformanceConfigurationINTEL other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPerformanceConfigurationINTEL, vulkan.VkResult> (vulkan.PFN_vkReleasePerformanceConfigurationINTEL from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkReleasePerformanceConfigurationINTEL (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPerformanceConfigurationINTEL, vulkan.VkResult> from) => new vulkan.PFN_vkReleasePerformanceConfigurationINTEL(from);
            
            public static bool operator ==(PFN_vkReleasePerformanceConfigurationINTEL left, PFN_vkReleasePerformanceConfigurationINTEL right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkReleasePerformanceConfigurationINTEL left, PFN_vkReleasePerformanceConfigurationINTEL right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkQueueSetPerformanceConfigurationINTEL : IEquatable<PFN_vkQueueSetPerformanceConfigurationINTEL>
        {
            public PFN_vkQueueSetPerformanceConfigurationINTEL(delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkPerformanceConfigurationINTEL, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkPerformanceConfigurationINTEL, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkQueueSetPerformanceConfigurationINTEL other && Equals(other);
            
            public bool Equals(PFN_vkQueueSetPerformanceConfigurationINTEL other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkPerformanceConfigurationINTEL, vulkan.VkResult> (vulkan.PFN_vkQueueSetPerformanceConfigurationINTEL from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkQueueSetPerformanceConfigurationINTEL (delegate*unmanaged[Stdcall]<vulkan.VkQueue, vulkan.VkPerformanceConfigurationINTEL, vulkan.VkResult> from) => new vulkan.PFN_vkQueueSetPerformanceConfigurationINTEL(from);
            
            public static bool operator ==(PFN_vkQueueSetPerformanceConfigurationINTEL left, PFN_vkQueueSetPerformanceConfigurationINTEL right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkQueueSetPerformanceConfigurationINTEL left, PFN_vkQueueSetPerformanceConfigurationINTEL right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPerformanceParameterINTEL : IEquatable<PFN_vkGetPerformanceParameterINTEL>
        {
            public PFN_vkGetPerformanceParameterINTEL(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPerformanceParameterTypeINTEL, vulkan.VkPerformanceValueINTEL*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPerformanceParameterTypeINTEL, vulkan.VkPerformanceValueINTEL*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPerformanceParameterINTEL other && Equals(other);
            
            public bool Equals(PFN_vkGetPerformanceParameterINTEL other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPerformanceParameterTypeINTEL, vulkan.VkPerformanceValueINTEL*, vulkan.VkResult> (vulkan.PFN_vkGetPerformanceParameterINTEL from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPerformanceParameterINTEL (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPerformanceParameterTypeINTEL, vulkan.VkPerformanceValueINTEL*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPerformanceParameterINTEL(from);
            
            public static bool operator ==(PFN_vkGetPerformanceParameterINTEL left, PFN_vkGetPerformanceParameterINTEL right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPerformanceParameterINTEL left, PFN_vkGetPerformanceParameterINTEL right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkSetLocalDimmingAMD : IEquatable<PFN_vkSetLocalDimmingAMD>
        {
            public PFN_vkSetLocalDimmingAMD(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkSetLocalDimmingAMD other && Equals(other);
            
            public bool Equals(PFN_vkSetLocalDimmingAMD other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkBool32, void> (vulkan.PFN_vkSetLocalDimmingAMD from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkSetLocalDimmingAMD (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkBool32, void> from) => new vulkan.PFN_vkSetLocalDimmingAMD(from);
            
            public static bool operator ==(PFN_vkSetLocalDimmingAMD left, PFN_vkSetLocalDimmingAMD right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkSetLocalDimmingAMD left, PFN_vkSetLocalDimmingAMD right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceScalarBlockLayoutFeaturesEXT : IEquatable<VkPhysicalDeviceScalarBlockLayoutFeaturesEXT>
        {
            public VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(vulkan.VkPhysicalDeviceScalarBlockLayoutFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceScalarBlockLayoutFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceScalarBlockLayoutFeaturesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceScalarBlockLayoutFeatures (vulkan.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT (vulkan.VkPhysicalDeviceScalarBlockLayoutFeatures from) => new vulkan.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(from);
            
            public static bool operator ==(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT left, VkPhysicalDeviceScalarBlockLayoutFeaturesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT left, VkPhysicalDeviceScalarBlockLayoutFeaturesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceSubgroupSizeControlFeaturesEXT : IEquatable<VkPhysicalDeviceSubgroupSizeControlFeaturesEXT>
        {
            public VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(vulkan.VkPhysicalDeviceSubgroupSizeControlFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceSubgroupSizeControlFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceSubgroupSizeControlFeaturesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceSubgroupSizeControlFeatures (vulkan.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT (vulkan.VkPhysicalDeviceSubgroupSizeControlFeatures from) => new vulkan.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(from);
            
            public static bool operator ==(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT left, VkPhysicalDeviceSubgroupSizeControlFeaturesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT left, VkPhysicalDeviceSubgroupSizeControlFeaturesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceSubgroupSizeControlPropertiesEXT : IEquatable<VkPhysicalDeviceSubgroupSizeControlPropertiesEXT>
        {
            public VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(vulkan.VkPhysicalDeviceSubgroupSizeControlProperties value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceSubgroupSizeControlProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceSubgroupSizeControlPropertiesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceSubgroupSizeControlProperties (vulkan.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT (vulkan.VkPhysicalDeviceSubgroupSizeControlProperties from) => new vulkan.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(from);
            
            public static bool operator ==(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT left, VkPhysicalDeviceSubgroupSizeControlPropertiesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT left, VkPhysicalDeviceSubgroupSizeControlPropertiesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT : IEquatable<VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT>
        {
            public VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo value) => this.Value = value;
            
            public vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT other && Equals(other);
            
            public bool Equals(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo (vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT (vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo from) => new vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(from);
            
            public static bool operator ==(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT left, VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT left, VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceBufferAddressFeaturesEXT : IEquatable<VkPhysicalDeviceBufferAddressFeaturesEXT>
        {
            public VkPhysicalDeviceBufferAddressFeaturesEXT(vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceBufferAddressFeaturesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceBufferAddressFeaturesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT (vulkan.VkPhysicalDeviceBufferAddressFeaturesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceBufferAddressFeaturesEXT (vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT from) => new vulkan.VkPhysicalDeviceBufferAddressFeaturesEXT(from);
            
            public static bool operator ==(VkPhysicalDeviceBufferAddressFeaturesEXT left, VkPhysicalDeviceBufferAddressFeaturesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceBufferAddressFeaturesEXT left, VkPhysicalDeviceBufferAddressFeaturesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkBufferDeviceAddressInfoEXT : IEquatable<VkBufferDeviceAddressInfoEXT>
        {
            public VkBufferDeviceAddressInfoEXT(vulkan.VkBufferDeviceAddressInfo value) => this.Value = value;
            
            public vulkan.VkBufferDeviceAddressInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkBufferDeviceAddressInfoEXT other && Equals(other);
            
            public bool Equals(VkBufferDeviceAddressInfoEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBufferDeviceAddressInfo (vulkan.VkBufferDeviceAddressInfoEXT from) => from.Value;
            
            public static implicit operator vulkan.VkBufferDeviceAddressInfoEXT (vulkan.VkBufferDeviceAddressInfo from) => new vulkan.VkBufferDeviceAddressInfoEXT(from);
            
            public static bool operator ==(VkBufferDeviceAddressInfoEXT left, VkBufferDeviceAddressInfoEXT right) => left.Equals(right);
            
            public static bool operator !=(VkBufferDeviceAddressInfoEXT left, VkBufferDeviceAddressInfoEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetBufferDeviceAddressEXT : IEquatable<PFN_vkGetBufferDeviceAddressEXT>
        {
            public PFN_vkGetBufferDeviceAddressEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, vulkan.VkDeviceAddress> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, vulkan.VkDeviceAddress> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetBufferDeviceAddressEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetBufferDeviceAddressEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, vulkan.VkDeviceAddress> (vulkan.PFN_vkGetBufferDeviceAddressEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetBufferDeviceAddressEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferDeviceAddressInfo*, vulkan.VkDeviceAddress> from) => new vulkan.PFN_vkGetBufferDeviceAddressEXT(from);
            
            public static bool operator ==(PFN_vkGetBufferDeviceAddressEXT left, PFN_vkGetBufferDeviceAddressEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetBufferDeviceAddressEXT left, PFN_vkGetBufferDeviceAddressEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkToolPurposeFlagBitsEXT : IEquatable<VkToolPurposeFlagBitsEXT>
        {
            public VkToolPurposeFlagBitsEXT(vulkan.VkToolPurposeFlagBits value) => this.Value = value;
            
            public vulkan.VkToolPurposeFlagBits Value { get; }
            
            public override bool Equals(object obj) => obj is VkToolPurposeFlagBitsEXT other && Equals(other);
            
            public bool Equals(VkToolPurposeFlagBitsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkToolPurposeFlagBits (vulkan.VkToolPurposeFlagBitsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkToolPurposeFlagBitsEXT (vulkan.VkToolPurposeFlagBits from) => new vulkan.VkToolPurposeFlagBitsEXT(from);
            
            public static bool operator ==(VkToolPurposeFlagBitsEXT left, VkToolPurposeFlagBitsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkToolPurposeFlagBitsEXT left, VkToolPurposeFlagBitsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkToolPurposeFlagsEXT : IEquatable<VkToolPurposeFlagsEXT>
        {
            public VkToolPurposeFlagsEXT(vulkan.VkToolPurposeFlags value) => this.Value = value;
            
            public vulkan.VkToolPurposeFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkToolPurposeFlagsEXT other && Equals(other);
            
            public bool Equals(VkToolPurposeFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkToolPurposeFlags (vulkan.VkToolPurposeFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkToolPurposeFlagsEXT (vulkan.VkToolPurposeFlags from) => new vulkan.VkToolPurposeFlagsEXT(from);
            
            public static bool operator ==(VkToolPurposeFlagsEXT left, VkToolPurposeFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkToolPurposeFlagsEXT left, VkToolPurposeFlagsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceToolPropertiesEXT : IEquatable<VkPhysicalDeviceToolPropertiesEXT>
        {
            public VkPhysicalDeviceToolPropertiesEXT(vulkan.VkPhysicalDeviceToolProperties value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceToolProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceToolPropertiesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceToolPropertiesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceToolProperties (vulkan.VkPhysicalDeviceToolPropertiesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceToolPropertiesEXT (vulkan.VkPhysicalDeviceToolProperties from) => new vulkan.VkPhysicalDeviceToolPropertiesEXT(from);
            
            public static bool operator ==(VkPhysicalDeviceToolPropertiesEXT left, VkPhysicalDeviceToolPropertiesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceToolPropertiesEXT left, VkPhysicalDeviceToolPropertiesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceToolPropertiesEXT : IEquatable<PFN_vkGetPhysicalDeviceToolPropertiesEXT>
        {
            public PFN_vkGetPhysicalDeviceToolPropertiesEXT(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkPhysicalDeviceToolProperties*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkPhysicalDeviceToolProperties*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceToolPropertiesEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceToolPropertiesEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkPhysicalDeviceToolProperties*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceToolPropertiesEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceToolPropertiesEXT (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkPhysicalDeviceToolProperties*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceToolPropertiesEXT(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceToolPropertiesEXT left, PFN_vkGetPhysicalDeviceToolPropertiesEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceToolPropertiesEXT left, PFN_vkGetPhysicalDeviceToolPropertiesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImageStencilUsageCreateInfoEXT : IEquatable<VkImageStencilUsageCreateInfoEXT>
        {
            public VkImageStencilUsageCreateInfoEXT(vulkan.VkImageStencilUsageCreateInfo value) => this.Value = value;
            
            public vulkan.VkImageStencilUsageCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageStencilUsageCreateInfoEXT other && Equals(other);
            
            public bool Equals(VkImageStencilUsageCreateInfoEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkImageStencilUsageCreateInfo (vulkan.VkImageStencilUsageCreateInfoEXT from) => from.Value;
            
            public static implicit operator vulkan.VkImageStencilUsageCreateInfoEXT (vulkan.VkImageStencilUsageCreateInfo from) => new vulkan.VkImageStencilUsageCreateInfoEXT(from);
            
            public static bool operator ==(VkImageStencilUsageCreateInfoEXT left, VkImageStencilUsageCreateInfoEXT right) => left.Equals(right);
            
            public static bool operator !=(VkImageStencilUsageCreateInfoEXT left, VkImageStencilUsageCreateInfoEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV : IEquatable<PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV>
        {
            public PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkCooperativeMatrixPropertiesNV*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkCooperativeMatrixPropertiesNV*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkCooperativeMatrixPropertiesNV*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkCooperativeMatrixPropertiesNV*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV left, PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV left, PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV : IEquatable<PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV>
        {
            public PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkFramebufferMixedSamplesCombinationNV*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkFramebufferMixedSamplesCombinationNV*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkFramebufferMixedSamplesCombinationNV*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint*, vulkan.VkFramebufferMixedSamplesCombinationNV*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV left, PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV left, PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateHeadlessSurfaceEXT : IEquatable<PFN_vkCreateHeadlessSurfaceEXT>
        {
            public PFN_vkCreateHeadlessSurfaceEXT(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkHeadlessSurfaceCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkHeadlessSurfaceCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateHeadlessSurfaceEXT other && Equals(other);
            
            public bool Equals(PFN_vkCreateHeadlessSurfaceEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkHeadlessSurfaceCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateHeadlessSurfaceEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateHeadlessSurfaceEXT (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkHeadlessSurfaceCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateHeadlessSurfaceEXT(from);
            
            public static bool operator ==(PFN_vkCreateHeadlessSurfaceEXT left, PFN_vkCreateHeadlessSurfaceEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateHeadlessSurfaceEXT left, PFN_vkCreateHeadlessSurfaceEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetLineStippleEXT : IEquatable<PFN_vkCmdSetLineStippleEXT>
        {
            public PFN_vkCmdSetLineStippleEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, ushort, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, ushort, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetLineStippleEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetLineStippleEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, ushort, void> (vulkan.PFN_vkCmdSetLineStippleEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetLineStippleEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, ushort, void> from) => new vulkan.PFN_vkCmdSetLineStippleEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetLineStippleEXT left, PFN_vkCmdSetLineStippleEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetLineStippleEXT left, PFN_vkCmdSetLineStippleEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceHostQueryResetFeaturesEXT : IEquatable<VkPhysicalDeviceHostQueryResetFeaturesEXT>
        {
            public VkPhysicalDeviceHostQueryResetFeaturesEXT(vulkan.VkPhysicalDeviceHostQueryResetFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceHostQueryResetFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceHostQueryResetFeaturesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceHostQueryResetFeaturesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceHostQueryResetFeatures (vulkan.VkPhysicalDeviceHostQueryResetFeaturesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceHostQueryResetFeaturesEXT (vulkan.VkPhysicalDeviceHostQueryResetFeatures from) => new vulkan.VkPhysicalDeviceHostQueryResetFeaturesEXT(from);
            
            public static bool operator ==(VkPhysicalDeviceHostQueryResetFeaturesEXT left, VkPhysicalDeviceHostQueryResetFeaturesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceHostQueryResetFeaturesEXT left, VkPhysicalDeviceHostQueryResetFeaturesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkResetQueryPoolEXT : IEquatable<PFN_vkResetQueryPoolEXT>
        {
            public PFN_vkResetQueryPoolEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPool, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPool, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkResetQueryPoolEXT other && Equals(other);
            
            public bool Equals(PFN_vkResetQueryPoolEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPool, uint, uint, void> (vulkan.PFN_vkResetQueryPoolEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkResetQueryPoolEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkQueryPool, uint, uint, void> from) => new vulkan.PFN_vkResetQueryPoolEXT(from);
            
            public static bool operator ==(PFN_vkResetQueryPoolEXT left, PFN_vkResetQueryPoolEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkResetQueryPoolEXT left, PFN_vkResetQueryPoolEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetCullModeEXT : IEquatable<PFN_vkCmdSetCullModeEXT>
        {
            public PFN_vkCmdSetCullModeEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCullModeFlags, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCullModeFlags, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetCullModeEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetCullModeEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCullModeFlags, void> (vulkan.PFN_vkCmdSetCullModeEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetCullModeEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCullModeFlags, void> from) => new vulkan.PFN_vkCmdSetCullModeEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetCullModeEXT left, PFN_vkCmdSetCullModeEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetCullModeEXT left, PFN_vkCmdSetCullModeEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetFrontFaceEXT : IEquatable<PFN_vkCmdSetFrontFaceEXT>
        {
            public PFN_vkCmdSetFrontFaceEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkFrontFace, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkFrontFace, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetFrontFaceEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetFrontFaceEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkFrontFace, void> (vulkan.PFN_vkCmdSetFrontFaceEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetFrontFaceEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkFrontFace, void> from) => new vulkan.PFN_vkCmdSetFrontFaceEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetFrontFaceEXT left, PFN_vkCmdSetFrontFaceEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetFrontFaceEXT left, PFN_vkCmdSetFrontFaceEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetPrimitiveTopologyEXT : IEquatable<PFN_vkCmdSetPrimitiveTopologyEXT>
        {
            public PFN_vkCmdSetPrimitiveTopologyEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPrimitiveTopology, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPrimitiveTopology, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetPrimitiveTopologyEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetPrimitiveTopologyEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPrimitiveTopology, void> (vulkan.PFN_vkCmdSetPrimitiveTopologyEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetPrimitiveTopologyEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPrimitiveTopology, void> from) => new vulkan.PFN_vkCmdSetPrimitiveTopologyEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetPrimitiveTopologyEXT left, PFN_vkCmdSetPrimitiveTopologyEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetPrimitiveTopologyEXT left, PFN_vkCmdSetPrimitiveTopologyEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetViewportWithCountEXT : IEquatable<PFN_vkCmdSetViewportWithCountEXT>
        {
            public PFN_vkCmdSetViewportWithCountEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkViewport*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkViewport*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetViewportWithCountEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetViewportWithCountEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkViewport*, void> (vulkan.PFN_vkCmdSetViewportWithCountEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetViewportWithCountEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkViewport*, void> from) => new vulkan.PFN_vkCmdSetViewportWithCountEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetViewportWithCountEXT left, PFN_vkCmdSetViewportWithCountEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetViewportWithCountEXT left, PFN_vkCmdSetViewportWithCountEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetScissorWithCountEXT : IEquatable<PFN_vkCmdSetScissorWithCountEXT>
        {
            public PFN_vkCmdSetScissorWithCountEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkRect2D*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkRect2D*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetScissorWithCountEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetScissorWithCountEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkRect2D*, void> (vulkan.PFN_vkCmdSetScissorWithCountEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetScissorWithCountEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkRect2D*, void> from) => new vulkan.PFN_vkCmdSetScissorWithCountEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetScissorWithCountEXT left, PFN_vkCmdSetScissorWithCountEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetScissorWithCountEXT left, PFN_vkCmdSetScissorWithCountEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBindVertexBuffers2EXT : IEquatable<PFN_vkCmdBindVertexBuffers2EXT>
        {
            public PFN_vkCmdBindVertexBuffers2EXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBindVertexBuffers2EXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdBindVertexBuffers2EXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, void> (vulkan.PFN_vkCmdBindVertexBuffers2EXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBindVertexBuffers2EXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBuffer*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, vulkan.VkDeviceSize*, void> from) => new vulkan.PFN_vkCmdBindVertexBuffers2EXT(from);
            
            public static bool operator ==(PFN_vkCmdBindVertexBuffers2EXT left, PFN_vkCmdBindVertexBuffers2EXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBindVertexBuffers2EXT left, PFN_vkCmdBindVertexBuffers2EXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDepthTestEnableEXT : IEquatable<PFN_vkCmdSetDepthTestEnableEXT>
        {
            public PFN_vkCmdSetDepthTestEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDepthTestEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDepthTestEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetDepthTestEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDepthTestEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetDepthTestEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetDepthTestEnableEXT left, PFN_vkCmdSetDepthTestEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDepthTestEnableEXT left, PFN_vkCmdSetDepthTestEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDepthWriteEnableEXT : IEquatable<PFN_vkCmdSetDepthWriteEnableEXT>
        {
            public PFN_vkCmdSetDepthWriteEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDepthWriteEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDepthWriteEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetDepthWriteEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDepthWriteEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetDepthWriteEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetDepthWriteEnableEXT left, PFN_vkCmdSetDepthWriteEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDepthWriteEnableEXT left, PFN_vkCmdSetDepthWriteEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDepthCompareOpEXT : IEquatable<PFN_vkCmdSetDepthCompareOpEXT>
        {
            public PFN_vkCmdSetDepthCompareOpEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCompareOp, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCompareOp, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDepthCompareOpEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDepthCompareOpEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCompareOp, void> (vulkan.PFN_vkCmdSetDepthCompareOpEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDepthCompareOpEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCompareOp, void> from) => new vulkan.PFN_vkCmdSetDepthCompareOpEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetDepthCompareOpEXT left, PFN_vkCmdSetDepthCompareOpEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDepthCompareOpEXT left, PFN_vkCmdSetDepthCompareOpEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDepthBoundsTestEnableEXT : IEquatable<PFN_vkCmdSetDepthBoundsTestEnableEXT>
        {
            public PFN_vkCmdSetDepthBoundsTestEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDepthBoundsTestEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDepthBoundsTestEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetDepthBoundsTestEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDepthBoundsTestEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetDepthBoundsTestEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetDepthBoundsTestEnableEXT left, PFN_vkCmdSetDepthBoundsTestEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDepthBoundsTestEnableEXT left, PFN_vkCmdSetDepthBoundsTestEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetStencilTestEnableEXT : IEquatable<PFN_vkCmdSetStencilTestEnableEXT>
        {
            public PFN_vkCmdSetStencilTestEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetStencilTestEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetStencilTestEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetStencilTestEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetStencilTestEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetStencilTestEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetStencilTestEnableEXT left, PFN_vkCmdSetStencilTestEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetStencilTestEnableEXT left, PFN_vkCmdSetStencilTestEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetStencilOpEXT : IEquatable<PFN_vkCmdSetStencilOpEXT>
        {
            public PFN_vkCmdSetStencilOpEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, vulkan.VkStencilOp, vulkan.VkStencilOp, vulkan.VkStencilOp, vulkan.VkCompareOp, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, vulkan.VkStencilOp, vulkan.VkStencilOp, vulkan.VkStencilOp, vulkan.VkCompareOp, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetStencilOpEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetStencilOpEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, vulkan.VkStencilOp, vulkan.VkStencilOp, vulkan.VkStencilOp, vulkan.VkCompareOp, void> (vulkan.PFN_vkCmdSetStencilOpEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetStencilOpEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStencilFaceFlags, vulkan.VkStencilOp, vulkan.VkStencilOp, vulkan.VkStencilOp, vulkan.VkCompareOp, void> from) => new vulkan.PFN_vkCmdSetStencilOpEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetStencilOpEXT left, PFN_vkCmdSetStencilOpEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetStencilOpEXT left, PFN_vkCmdSetStencilOpEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkSubresourceLayout2EXT : IEquatable<VkSubresourceLayout2EXT>
        {
            public VkSubresourceLayout2EXT(vulkan.VkSubresourceLayout2KHR value) => this.Value = value;
            
            public vulkan.VkSubresourceLayout2KHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkSubresourceLayout2EXT other && Equals(other);
            
            public bool Equals(VkSubresourceLayout2EXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkSubresourceLayout2KHR (vulkan.VkSubresourceLayout2EXT from) => from.Value;
            
            public static implicit operator vulkan.VkSubresourceLayout2EXT (vulkan.VkSubresourceLayout2KHR from) => new vulkan.VkSubresourceLayout2EXT(from);
            
            public static bool operator ==(VkSubresourceLayout2EXT left, VkSubresourceLayout2EXT right) => left.Equals(right);
            
            public static bool operator !=(VkSubresourceLayout2EXT left, VkSubresourceLayout2EXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkImageSubresource2EXT : IEquatable<VkImageSubresource2EXT>
        {
            public VkImageSubresource2EXT(vulkan.VkImageSubresource2KHR value) => this.Value = value;
            
            public vulkan.VkImageSubresource2KHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageSubresource2EXT other && Equals(other);
            
            public bool Equals(VkImageSubresource2EXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkImageSubresource2KHR (vulkan.VkImageSubresource2EXT from) => from.Value;
            
            public static implicit operator vulkan.VkImageSubresource2EXT (vulkan.VkImageSubresource2KHR from) => new vulkan.VkImageSubresource2EXT(from);
            
            public static bool operator ==(VkImageSubresource2EXT left, VkImageSubresource2EXT right) => left.Equals(right);
            
            public static bool operator !=(VkImageSubresource2EXT left, VkImageSubresource2EXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCopyMemoryToImageEXT : IEquatable<PFN_vkCopyMemoryToImageEXT>
        {
            public PFN_vkCopyMemoryToImageEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCopyMemoryToImageInfoEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCopyMemoryToImageInfoEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCopyMemoryToImageEXT other && Equals(other);
            
            public bool Equals(PFN_vkCopyMemoryToImageEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCopyMemoryToImageInfoEXT*, vulkan.VkResult> (vulkan.PFN_vkCopyMemoryToImageEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCopyMemoryToImageEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCopyMemoryToImageInfoEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkCopyMemoryToImageEXT(from);
            
            public static bool operator ==(PFN_vkCopyMemoryToImageEXT left, PFN_vkCopyMemoryToImageEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCopyMemoryToImageEXT left, PFN_vkCopyMemoryToImageEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCopyImageToMemoryEXT : IEquatable<PFN_vkCopyImageToMemoryEXT>
        {
            public PFN_vkCopyImageToMemoryEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCopyImageToMemoryInfoEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCopyImageToMemoryInfoEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCopyImageToMemoryEXT other && Equals(other);
            
            public bool Equals(PFN_vkCopyImageToMemoryEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCopyImageToMemoryInfoEXT*, vulkan.VkResult> (vulkan.PFN_vkCopyImageToMemoryEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCopyImageToMemoryEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCopyImageToMemoryInfoEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkCopyImageToMemoryEXT(from);
            
            public static bool operator ==(PFN_vkCopyImageToMemoryEXT left, PFN_vkCopyImageToMemoryEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCopyImageToMemoryEXT left, PFN_vkCopyImageToMemoryEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCopyImageToImageEXT : IEquatable<PFN_vkCopyImageToImageEXT>
        {
            public PFN_vkCopyImageToImageEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCopyImageToImageInfoEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCopyImageToImageInfoEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCopyImageToImageEXT other && Equals(other);
            
            public bool Equals(PFN_vkCopyImageToImageEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCopyImageToImageInfoEXT*, vulkan.VkResult> (vulkan.PFN_vkCopyImageToImageEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCopyImageToImageEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkCopyImageToImageInfoEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkCopyImageToImageEXT(from);
            
            public static bool operator ==(PFN_vkCopyImageToImageEXT left, PFN_vkCopyImageToImageEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCopyImageToImageEXT left, PFN_vkCopyImageToImageEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkTransitionImageLayoutEXT : IEquatable<PFN_vkTransitionImageLayoutEXT>
        {
            public PFN_vkTransitionImageLayoutEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkHostImageLayoutTransitionInfoEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkHostImageLayoutTransitionInfoEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkTransitionImageLayoutEXT other && Equals(other);
            
            public bool Equals(PFN_vkTransitionImageLayoutEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkHostImageLayoutTransitionInfoEXT*, vulkan.VkResult> (vulkan.PFN_vkTransitionImageLayoutEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkTransitionImageLayoutEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkHostImageLayoutTransitionInfoEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkTransitionImageLayoutEXT(from);
            
            public static bool operator ==(PFN_vkTransitionImageLayoutEXT left, PFN_vkTransitionImageLayoutEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkTransitionImageLayoutEXT left, PFN_vkTransitionImageLayoutEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetImageSubresourceLayout2EXT : IEquatable<PFN_vkGetImageSubresourceLayout2EXT>
        {
            public PFN_vkGetImageSubresourceLayout2EXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkImageSubresource2KHR*, vulkan.VkSubresourceLayout2KHR*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkImageSubresource2KHR*, vulkan.VkSubresourceLayout2KHR*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetImageSubresourceLayout2EXT other && Equals(other);
            
            public bool Equals(PFN_vkGetImageSubresourceLayout2EXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkImageSubresource2KHR*, vulkan.VkSubresourceLayout2KHR*, void> (vulkan.PFN_vkGetImageSubresourceLayout2EXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetImageSubresourceLayout2EXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImage, vulkan.VkImageSubresource2KHR*, vulkan.VkSubresourceLayout2KHR*, void> from) => new vulkan.PFN_vkGetImageSubresourceLayout2EXT(from);
            
            public static bool operator ==(PFN_vkGetImageSubresourceLayout2EXT left, PFN_vkGetImageSubresourceLayout2EXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetImageSubresourceLayout2EXT left, PFN_vkGetImageSubresourceLayout2EXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkReleaseSwapchainImagesEXT : IEquatable<PFN_vkReleaseSwapchainImagesEXT>
        {
            public PFN_vkReleaseSwapchainImagesEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkReleaseSwapchainImagesInfoEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkReleaseSwapchainImagesInfoEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkReleaseSwapchainImagesEXT other && Equals(other);
            
            public bool Equals(PFN_vkReleaseSwapchainImagesEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkReleaseSwapchainImagesInfoEXT*, vulkan.VkResult> (vulkan.PFN_vkReleaseSwapchainImagesEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkReleaseSwapchainImagesEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkReleaseSwapchainImagesInfoEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkReleaseSwapchainImagesEXT(from);
            
            public static bool operator ==(PFN_vkReleaseSwapchainImagesEXT left, PFN_vkReleaseSwapchainImagesEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkReleaseSwapchainImagesEXT left, PFN_vkReleaseSwapchainImagesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT : IEquatable<VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT>
        {
            public VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures (vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT (vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures from) => new vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(from);
            
            public static bool operator ==(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT left, VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT left, VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetGeneratedCommandsMemoryRequirementsNV : IEquatable<PFN_vkGetGeneratedCommandsMemoryRequirementsNV>
        {
            public PFN_vkGetGeneratedCommandsMemoryRequirementsNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkGeneratedCommandsMemoryRequirementsInfoNV*, vulkan.VkMemoryRequirements2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkGeneratedCommandsMemoryRequirementsInfoNV*, vulkan.VkMemoryRequirements2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetGeneratedCommandsMemoryRequirementsNV other && Equals(other);
            
            public bool Equals(PFN_vkGetGeneratedCommandsMemoryRequirementsNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkGeneratedCommandsMemoryRequirementsInfoNV*, vulkan.VkMemoryRequirements2*, void> (vulkan.PFN_vkGetGeneratedCommandsMemoryRequirementsNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetGeneratedCommandsMemoryRequirementsNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkGeneratedCommandsMemoryRequirementsInfoNV*, vulkan.VkMemoryRequirements2*, void> from) => new vulkan.PFN_vkGetGeneratedCommandsMemoryRequirementsNV(from);
            
            public static bool operator ==(PFN_vkGetGeneratedCommandsMemoryRequirementsNV left, PFN_vkGetGeneratedCommandsMemoryRequirementsNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetGeneratedCommandsMemoryRequirementsNV left, PFN_vkGetGeneratedCommandsMemoryRequirementsNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdPreprocessGeneratedCommandsNV : IEquatable<PFN_vkCmdPreprocessGeneratedCommandsNV>
        {
            public PFN_vkCmdPreprocessGeneratedCommandsNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkGeneratedCommandsInfoNV*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkGeneratedCommandsInfoNV*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdPreprocessGeneratedCommandsNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdPreprocessGeneratedCommandsNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkGeneratedCommandsInfoNV*, void> (vulkan.PFN_vkCmdPreprocessGeneratedCommandsNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdPreprocessGeneratedCommandsNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkGeneratedCommandsInfoNV*, void> from) => new vulkan.PFN_vkCmdPreprocessGeneratedCommandsNV(from);
            
            public static bool operator ==(PFN_vkCmdPreprocessGeneratedCommandsNV left, PFN_vkCmdPreprocessGeneratedCommandsNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdPreprocessGeneratedCommandsNV left, PFN_vkCmdPreprocessGeneratedCommandsNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdExecuteGeneratedCommandsNV : IEquatable<PFN_vkCmdExecuteGeneratedCommandsNV>
        {
            public PFN_vkCmdExecuteGeneratedCommandsNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, vulkan.VkGeneratedCommandsInfoNV*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, vulkan.VkGeneratedCommandsInfoNV*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdExecuteGeneratedCommandsNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdExecuteGeneratedCommandsNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, vulkan.VkGeneratedCommandsInfoNV*, void> (vulkan.PFN_vkCmdExecuteGeneratedCommandsNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdExecuteGeneratedCommandsNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, vulkan.VkGeneratedCommandsInfoNV*, void> from) => new vulkan.PFN_vkCmdExecuteGeneratedCommandsNV(from);
            
            public static bool operator ==(PFN_vkCmdExecuteGeneratedCommandsNV left, PFN_vkCmdExecuteGeneratedCommandsNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdExecuteGeneratedCommandsNV left, PFN_vkCmdExecuteGeneratedCommandsNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBindPipelineShaderGroupNV : IEquatable<PFN_vkCmdBindPipelineShaderGroupNV>
        {
            public PFN_vkCmdBindPipelineShaderGroupNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipeline, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipeline, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBindPipelineShaderGroupNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdBindPipelineShaderGroupNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipeline, uint, void> (vulkan.PFN_vkCmdBindPipelineShaderGroupNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBindPipelineShaderGroupNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipeline, uint, void> from) => new vulkan.PFN_vkCmdBindPipelineShaderGroupNV(from);
            
            public static bool operator ==(PFN_vkCmdBindPipelineShaderGroupNV left, PFN_vkCmdBindPipelineShaderGroupNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBindPipelineShaderGroupNV left, PFN_vkCmdBindPipelineShaderGroupNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateIndirectCommandsLayoutNV : IEquatable<PFN_vkCreateIndirectCommandsLayoutNV>
        {
            public PFN_vkCreateIndirectCommandsLayoutNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkIndirectCommandsLayoutCreateInfoNV*, vulkan.VkAllocationCallbacks*, vulkan.VkIndirectCommandsLayoutNV*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkIndirectCommandsLayoutCreateInfoNV*, vulkan.VkAllocationCallbacks*, vulkan.VkIndirectCommandsLayoutNV*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateIndirectCommandsLayoutNV other && Equals(other);
            
            public bool Equals(PFN_vkCreateIndirectCommandsLayoutNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkIndirectCommandsLayoutCreateInfoNV*, vulkan.VkAllocationCallbacks*, vulkan.VkIndirectCommandsLayoutNV*, vulkan.VkResult> (vulkan.PFN_vkCreateIndirectCommandsLayoutNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateIndirectCommandsLayoutNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkIndirectCommandsLayoutCreateInfoNV*, vulkan.VkAllocationCallbacks*, vulkan.VkIndirectCommandsLayoutNV*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateIndirectCommandsLayoutNV(from);
            
            public static bool operator ==(PFN_vkCreateIndirectCommandsLayoutNV left, PFN_vkCreateIndirectCommandsLayoutNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateIndirectCommandsLayoutNV left, PFN_vkCreateIndirectCommandsLayoutNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyIndirectCommandsLayoutNV : IEquatable<PFN_vkDestroyIndirectCommandsLayoutNV>
        {
            public PFN_vkDestroyIndirectCommandsLayoutNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkIndirectCommandsLayoutNV, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkIndirectCommandsLayoutNV, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyIndirectCommandsLayoutNV other && Equals(other);
            
            public bool Equals(PFN_vkDestroyIndirectCommandsLayoutNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkIndirectCommandsLayoutNV, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyIndirectCommandsLayoutNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyIndirectCommandsLayoutNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkIndirectCommandsLayoutNV, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyIndirectCommandsLayoutNV(from);
            
            public static bool operator ==(PFN_vkDestroyIndirectCommandsLayoutNV left, PFN_vkDestroyIndirectCommandsLayoutNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyIndirectCommandsLayoutNV left, PFN_vkDestroyIndirectCommandsLayoutNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT : IEquatable<VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT>
        {
            public VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(vulkan.VkPhysicalDeviceTexelBufferAlignmentProperties value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceTexelBufferAlignmentProperties Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceTexelBufferAlignmentProperties (vulkan.VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT (vulkan.VkPhysicalDeviceTexelBufferAlignmentProperties from) => new vulkan.VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(from);
            
            public static bool operator ==(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT left, VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT left, VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDepthBias2EXT : IEquatable<PFN_vkCmdSetDepthBias2EXT>
        {
            public PFN_vkCmdSetDepthBias2EXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDepthBiasInfoEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDepthBiasInfoEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDepthBias2EXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDepthBias2EXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDepthBiasInfoEXT*, void> (vulkan.PFN_vkCmdSetDepthBias2EXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDepthBias2EXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDepthBiasInfoEXT*, void> from) => new vulkan.PFN_vkCmdSetDepthBias2EXT(from);
            
            public static bool operator ==(PFN_vkCmdSetDepthBias2EXT left, PFN_vkCmdSetDepthBias2EXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDepthBias2EXT left, PFN_vkCmdSetDepthBias2EXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkAcquireDrmDisplayEXT : IEquatable<PFN_vkAcquireDrmDisplayEXT>
        {
            public PFN_vkAcquireDrmDisplayEXT(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, int, vulkan.VkDisplayKHR, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, int, vulkan.VkDisplayKHR, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkAcquireDrmDisplayEXT other && Equals(other);
            
            public bool Equals(PFN_vkAcquireDrmDisplayEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, int, vulkan.VkDisplayKHR, vulkan.VkResult> (vulkan.PFN_vkAcquireDrmDisplayEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkAcquireDrmDisplayEXT (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, int, vulkan.VkDisplayKHR, vulkan.VkResult> from) => new vulkan.PFN_vkAcquireDrmDisplayEXT(from);
            
            public static bool operator ==(PFN_vkAcquireDrmDisplayEXT left, PFN_vkAcquireDrmDisplayEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkAcquireDrmDisplayEXT left, PFN_vkAcquireDrmDisplayEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDrmDisplayEXT : IEquatable<PFN_vkGetDrmDisplayEXT>
        {
            public PFN_vkGetDrmDisplayEXT(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, int, uint, vulkan.VkDisplayKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, int, uint, vulkan.VkDisplayKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDrmDisplayEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetDrmDisplayEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, int, uint, vulkan.VkDisplayKHR*, vulkan.VkResult> (vulkan.PFN_vkGetDrmDisplayEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDrmDisplayEXT (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, int, uint, vulkan.VkDisplayKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetDrmDisplayEXT(from);
            
            public static bool operator ==(PFN_vkGetDrmDisplayEXT left, PFN_vkGetDrmDisplayEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDrmDisplayEXT left, PFN_vkGetDrmDisplayEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPrivateDataSlotEXT : IEquatable<VkPrivateDataSlotEXT>
        {
            public VkPrivateDataSlotEXT(vulkan.VkPrivateDataSlot value) => this.Value = value;
            
            public vulkan.VkPrivateDataSlot Value { get; }
            
            public override bool Equals(object obj) => obj is VkPrivateDataSlotEXT other && Equals(other);
            
            public bool Equals(VkPrivateDataSlotEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPrivateDataSlot (vulkan.VkPrivateDataSlotEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPrivateDataSlotEXT (vulkan.VkPrivateDataSlot from) => new vulkan.VkPrivateDataSlotEXT(from);
            
            public static bool operator ==(VkPrivateDataSlotEXT left, VkPrivateDataSlotEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPrivateDataSlotEXT left, VkPrivateDataSlotEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPrivateDataSlotCreateFlagsEXT : IEquatable<VkPrivateDataSlotCreateFlagsEXT>
        {
            public VkPrivateDataSlotCreateFlagsEXT(vulkan.VkPrivateDataSlotCreateFlags value) => this.Value = value;
            
            public vulkan.VkPrivateDataSlotCreateFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkPrivateDataSlotCreateFlagsEXT other && Equals(other);
            
            public bool Equals(VkPrivateDataSlotCreateFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPrivateDataSlotCreateFlags (vulkan.VkPrivateDataSlotCreateFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPrivateDataSlotCreateFlagsEXT (vulkan.VkPrivateDataSlotCreateFlags from) => new vulkan.VkPrivateDataSlotCreateFlagsEXT(from);
            
            public static bool operator ==(VkPrivateDataSlotCreateFlagsEXT left, VkPrivateDataSlotCreateFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPrivateDataSlotCreateFlagsEXT left, VkPrivateDataSlotCreateFlagsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDevicePrivateDataFeaturesEXT : IEquatable<VkPhysicalDevicePrivateDataFeaturesEXT>
        {
            public VkPhysicalDevicePrivateDataFeaturesEXT(vulkan.VkPhysicalDevicePrivateDataFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDevicePrivateDataFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDevicePrivateDataFeaturesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDevicePrivateDataFeaturesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDevicePrivateDataFeatures (vulkan.VkPhysicalDevicePrivateDataFeaturesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDevicePrivateDataFeaturesEXT (vulkan.VkPhysicalDevicePrivateDataFeatures from) => new vulkan.VkPhysicalDevicePrivateDataFeaturesEXT(from);
            
            public static bool operator ==(VkPhysicalDevicePrivateDataFeaturesEXT left, VkPhysicalDevicePrivateDataFeaturesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDevicePrivateDataFeaturesEXT left, VkPhysicalDevicePrivateDataFeaturesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkDevicePrivateDataCreateInfoEXT : IEquatable<VkDevicePrivateDataCreateInfoEXT>
        {
            public VkDevicePrivateDataCreateInfoEXT(vulkan.VkDevicePrivateDataCreateInfo value) => this.Value = value;
            
            public vulkan.VkDevicePrivateDataCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkDevicePrivateDataCreateInfoEXT other && Equals(other);
            
            public bool Equals(VkDevicePrivateDataCreateInfoEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkDevicePrivateDataCreateInfo (vulkan.VkDevicePrivateDataCreateInfoEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDevicePrivateDataCreateInfoEXT (vulkan.VkDevicePrivateDataCreateInfo from) => new vulkan.VkDevicePrivateDataCreateInfoEXT(from);
            
            public static bool operator ==(VkDevicePrivateDataCreateInfoEXT left, VkDevicePrivateDataCreateInfoEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDevicePrivateDataCreateInfoEXT left, VkDevicePrivateDataCreateInfoEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPrivateDataSlotCreateInfoEXT : IEquatable<VkPrivateDataSlotCreateInfoEXT>
        {
            public VkPrivateDataSlotCreateInfoEXT(vulkan.VkPrivateDataSlotCreateInfo value) => this.Value = value;
            
            public vulkan.VkPrivateDataSlotCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkPrivateDataSlotCreateInfoEXT other && Equals(other);
            
            public bool Equals(VkPrivateDataSlotCreateInfoEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPrivateDataSlotCreateInfo (vulkan.VkPrivateDataSlotCreateInfoEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPrivateDataSlotCreateInfoEXT (vulkan.VkPrivateDataSlotCreateInfo from) => new vulkan.VkPrivateDataSlotCreateInfoEXT(from);
            
            public static bool operator ==(VkPrivateDataSlotCreateInfoEXT left, VkPrivateDataSlotCreateInfoEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPrivateDataSlotCreateInfoEXT left, VkPrivateDataSlotCreateInfoEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreatePrivateDataSlotEXT : IEquatable<PFN_vkCreatePrivateDataSlotEXT>
        {
            public PFN_vkCreatePrivateDataSlotEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPrivateDataSlotCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPrivateDataSlot*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPrivateDataSlotCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPrivateDataSlot*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreatePrivateDataSlotEXT other && Equals(other);
            
            public bool Equals(PFN_vkCreatePrivateDataSlotEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPrivateDataSlotCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPrivateDataSlot*, vulkan.VkResult> (vulkan.PFN_vkCreatePrivateDataSlotEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreatePrivateDataSlotEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPrivateDataSlotCreateInfo*, vulkan.VkAllocationCallbacks*, vulkan.VkPrivateDataSlot*, vulkan.VkResult> from) => new vulkan.PFN_vkCreatePrivateDataSlotEXT(from);
            
            public static bool operator ==(PFN_vkCreatePrivateDataSlotEXT left, PFN_vkCreatePrivateDataSlotEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreatePrivateDataSlotEXT left, PFN_vkCreatePrivateDataSlotEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyPrivateDataSlotEXT : IEquatable<PFN_vkDestroyPrivateDataSlotEXT>
        {
            public PFN_vkDestroyPrivateDataSlotEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPrivateDataSlot, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPrivateDataSlot, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyPrivateDataSlotEXT other && Equals(other);
            
            public bool Equals(PFN_vkDestroyPrivateDataSlotEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPrivateDataSlot, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyPrivateDataSlotEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyPrivateDataSlotEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPrivateDataSlot, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyPrivateDataSlotEXT(from);
            
            public static bool operator ==(PFN_vkDestroyPrivateDataSlotEXT left, PFN_vkDestroyPrivateDataSlotEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyPrivateDataSlotEXT left, PFN_vkDestroyPrivateDataSlotEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkSetPrivateDataEXT : IEquatable<PFN_vkSetPrivateDataEXT>
        {
            public PFN_vkSetPrivateDataEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkObjectType, ulong, vulkan.VkPrivateDataSlot, ulong, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkObjectType, ulong, vulkan.VkPrivateDataSlot, ulong, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkSetPrivateDataEXT other && Equals(other);
            
            public bool Equals(PFN_vkSetPrivateDataEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkObjectType, ulong, vulkan.VkPrivateDataSlot, ulong, vulkan.VkResult> (vulkan.PFN_vkSetPrivateDataEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkSetPrivateDataEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkObjectType, ulong, vulkan.VkPrivateDataSlot, ulong, vulkan.VkResult> from) => new vulkan.PFN_vkSetPrivateDataEXT(from);
            
            public static bool operator ==(PFN_vkSetPrivateDataEXT left, PFN_vkSetPrivateDataEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkSetPrivateDataEXT left, PFN_vkSetPrivateDataEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPrivateDataEXT : IEquatable<PFN_vkGetPrivateDataEXT>
        {
            public PFN_vkGetPrivateDataEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkObjectType, ulong, vulkan.VkPrivateDataSlot, ulong*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkObjectType, ulong, vulkan.VkPrivateDataSlot, ulong*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPrivateDataEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetPrivateDataEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkObjectType, ulong, vulkan.VkPrivateDataSlot, ulong*, void> (vulkan.PFN_vkGetPrivateDataEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPrivateDataEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkObjectType, ulong, vulkan.VkPrivateDataSlot, ulong*, void> from) => new vulkan.PFN_vkGetPrivateDataEXT(from);
            
            public static bool operator ==(PFN_vkGetPrivateDataEXT left, PFN_vkGetPrivateDataEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPrivateDataEXT left, PFN_vkGetPrivateDataEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT : IEquatable<VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT>
        {
            public VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(vulkan.VkPhysicalDevicePipelineCreationCacheControlFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDevicePipelineCreationCacheControlFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDevicePipelineCreationCacheControlFeatures (vulkan.VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT (vulkan.VkPhysicalDevicePipelineCreationCacheControlFeatures from) => new vulkan.VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(from);
            
            public static bool operator ==(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT left, VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT left, VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDescriptorSetLayoutSizeEXT : IEquatable<PFN_vkGetDescriptorSetLayoutSizeEXT>
        {
            public PFN_vkGetDescriptorSetLayoutSizeEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayout, vulkan.VkDeviceSize*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayout, vulkan.VkDeviceSize*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDescriptorSetLayoutSizeEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetDescriptorSetLayoutSizeEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayout, vulkan.VkDeviceSize*, void> (vulkan.PFN_vkGetDescriptorSetLayoutSizeEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDescriptorSetLayoutSizeEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayout, vulkan.VkDeviceSize*, void> from) => new vulkan.PFN_vkGetDescriptorSetLayoutSizeEXT(from);
            
            public static bool operator ==(PFN_vkGetDescriptorSetLayoutSizeEXT left, PFN_vkGetDescriptorSetLayoutSizeEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDescriptorSetLayoutSizeEXT left, PFN_vkGetDescriptorSetLayoutSizeEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDescriptorSetLayoutBindingOffsetEXT : IEquatable<PFN_vkGetDescriptorSetLayoutBindingOffsetEXT>
        {
            public PFN_vkGetDescriptorSetLayoutBindingOffsetEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayout, uint, vulkan.VkDeviceSize*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayout, uint, vulkan.VkDeviceSize*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDescriptorSetLayoutBindingOffsetEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetDescriptorSetLayoutBindingOffsetEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayout, uint, vulkan.VkDeviceSize*, void> (vulkan.PFN_vkGetDescriptorSetLayoutBindingOffsetEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDescriptorSetLayoutBindingOffsetEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetLayout, uint, vulkan.VkDeviceSize*, void> from) => new vulkan.PFN_vkGetDescriptorSetLayoutBindingOffsetEXT(from);
            
            public static bool operator ==(PFN_vkGetDescriptorSetLayoutBindingOffsetEXT left, PFN_vkGetDescriptorSetLayoutBindingOffsetEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDescriptorSetLayoutBindingOffsetEXT left, PFN_vkGetDescriptorSetLayoutBindingOffsetEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDescriptorEXT : IEquatable<PFN_vkGetDescriptorEXT>
        {
            public PFN_vkGetDescriptorEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorGetInfoEXT*, nuint, void*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorGetInfoEXT*, nuint, void*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDescriptorEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetDescriptorEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorGetInfoEXT*, nuint, void*, void> (vulkan.PFN_vkGetDescriptorEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDescriptorEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorGetInfoEXT*, nuint, void*, void> from) => new vulkan.PFN_vkGetDescriptorEXT(from);
            
            public static bool operator ==(PFN_vkGetDescriptorEXT left, PFN_vkGetDescriptorEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDescriptorEXT left, PFN_vkGetDescriptorEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBindDescriptorBuffersEXT : IEquatable<PFN_vkCmdBindDescriptorBuffersEXT>
        {
            public PFN_vkCmdBindDescriptorBuffersEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkDescriptorBufferBindingInfoEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkDescriptorBufferBindingInfoEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBindDescriptorBuffersEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdBindDescriptorBuffersEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkDescriptorBufferBindingInfoEXT*, void> (vulkan.PFN_vkCmdBindDescriptorBuffersEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBindDescriptorBuffersEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkDescriptorBufferBindingInfoEXT*, void> from) => new vulkan.PFN_vkCmdBindDescriptorBuffersEXT(from);
            
            public static bool operator ==(PFN_vkCmdBindDescriptorBuffersEXT left, PFN_vkCmdBindDescriptorBuffersEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBindDescriptorBuffersEXT left, PFN_vkCmdBindDescriptorBuffersEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDescriptorBufferOffsetsEXT : IEquatable<PFN_vkCmdSetDescriptorBufferOffsetsEXT>
        {
            public PFN_vkCmdSetDescriptorBufferOffsetsEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipelineLayout, uint, uint, uint*, vulkan.VkDeviceSize*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipelineLayout, uint, uint, uint*, vulkan.VkDeviceSize*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDescriptorBufferOffsetsEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDescriptorBufferOffsetsEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipelineLayout, uint, uint, uint*, vulkan.VkDeviceSize*, void> (vulkan.PFN_vkCmdSetDescriptorBufferOffsetsEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDescriptorBufferOffsetsEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipelineLayout, uint, uint, uint*, vulkan.VkDeviceSize*, void> from) => new vulkan.PFN_vkCmdSetDescriptorBufferOffsetsEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetDescriptorBufferOffsetsEXT left, PFN_vkCmdSetDescriptorBufferOffsetsEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDescriptorBufferOffsetsEXT left, PFN_vkCmdSetDescriptorBufferOffsetsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT : IEquatable<PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT>
        {
            public PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipelineLayout, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipelineLayout, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipelineLayout, uint, void> (vulkan.PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipelineLayout, uint, void> from) => new vulkan.PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(from);
            
            public static bool operator ==(PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT left, PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT left, PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT : IEquatable<PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT>
        {
            public PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> (vulkan.PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> from) => new vulkan.PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT(from);
            
            public static bool operator ==(PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT left, PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT left, PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetImageOpaqueCaptureDescriptorDataEXT : IEquatable<PFN_vkGetImageOpaqueCaptureDescriptorDataEXT>
        {
            public PFN_vkGetImageOpaqueCaptureDescriptorDataEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetImageOpaqueCaptureDescriptorDataEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetImageOpaqueCaptureDescriptorDataEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> (vulkan.PFN_vkGetImageOpaqueCaptureDescriptorDataEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetImageOpaqueCaptureDescriptorDataEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> from) => new vulkan.PFN_vkGetImageOpaqueCaptureDescriptorDataEXT(from);
            
            public static bool operator ==(PFN_vkGetImageOpaqueCaptureDescriptorDataEXT left, PFN_vkGetImageOpaqueCaptureDescriptorDataEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetImageOpaqueCaptureDescriptorDataEXT left, PFN_vkGetImageOpaqueCaptureDescriptorDataEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT : IEquatable<PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT>
        {
            public PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageViewCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageViewCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageViewCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> (vulkan.PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImageViewCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> from) => new vulkan.PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT(from);
            
            public static bool operator ==(PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT left, PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT left, PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT : IEquatable<PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT>
        {
            public PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> (vulkan.PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSamplerCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> from) => new vulkan.PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT(from);
            
            public static bool operator ==(PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT left, PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT left, PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT : IEquatable<PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT>
        {
            public PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> (vulkan.PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureCaptureDescriptorDataInfoEXT*, void*, vulkan.VkResult> from) => new vulkan.PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(from);
            
            public static bool operator ==(PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT left, PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT left, PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetFragmentShadingRateEnumNV : IEquatable<PFN_vkCmdSetFragmentShadingRateEnumNV>
        {
            public PFN_vkCmdSetFragmentShadingRateEnumNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkFragmentShadingRateNV, FixedArray2<vulkan.VkFragmentShadingRateCombinerOpKHR>, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkFragmentShadingRateNV, FixedArray2<vulkan.VkFragmentShadingRateCombinerOpKHR>, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetFragmentShadingRateEnumNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetFragmentShadingRateEnumNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkFragmentShadingRateNV, FixedArray2<vulkan.VkFragmentShadingRateCombinerOpKHR>, void> (vulkan.PFN_vkCmdSetFragmentShadingRateEnumNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetFragmentShadingRateEnumNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkFragmentShadingRateNV, FixedArray2<vulkan.VkFragmentShadingRateCombinerOpKHR>, void> from) => new vulkan.PFN_vkCmdSetFragmentShadingRateEnumNV(from);
            
            public static bool operator ==(PFN_vkCmdSetFragmentShadingRateEnumNV left, PFN_vkCmdSetFragmentShadingRateEnumNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetFragmentShadingRateEnumNV left, PFN_vkCmdSetFragmentShadingRateEnumNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceImageRobustnessFeaturesEXT : IEquatable<VkPhysicalDeviceImageRobustnessFeaturesEXT>
        {
            public VkPhysicalDeviceImageRobustnessFeaturesEXT(vulkan.VkPhysicalDeviceImageRobustnessFeatures value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceImageRobustnessFeatures Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceImageRobustnessFeaturesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceImageRobustnessFeaturesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceImageRobustnessFeatures (vulkan.VkPhysicalDeviceImageRobustnessFeaturesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceImageRobustnessFeaturesEXT (vulkan.VkPhysicalDeviceImageRobustnessFeatures from) => new vulkan.VkPhysicalDeviceImageRobustnessFeaturesEXT(from);
            
            public static bool operator ==(VkPhysicalDeviceImageRobustnessFeaturesEXT left, VkPhysicalDeviceImageRobustnessFeaturesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceImageRobustnessFeaturesEXT left, VkPhysicalDeviceImageRobustnessFeaturesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceFaultInfoEXT : IEquatable<PFN_vkGetDeviceFaultInfoEXT>
        {
            public PFN_vkGetDeviceFaultInfoEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceFaultCountsEXT*, vulkan.VkDeviceFaultInfoEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceFaultCountsEXT*, vulkan.VkDeviceFaultInfoEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceFaultInfoEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceFaultInfoEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceFaultCountsEXT*, vulkan.VkDeviceFaultInfoEXT*, vulkan.VkResult> (vulkan.PFN_vkGetDeviceFaultInfoEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceFaultInfoEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceFaultCountsEXT*, vulkan.VkDeviceFaultInfoEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkGetDeviceFaultInfoEXT(from);
            
            public static bool operator ==(PFN_vkGetDeviceFaultInfoEXT left, PFN_vkGetDeviceFaultInfoEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceFaultInfoEXT left, PFN_vkGetDeviceFaultInfoEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM : IEquatable<VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM>
        {
            public VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM(vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT (vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM (vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT from) => new vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM(from);
            
            public static bool operator ==(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM left, VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM left, VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE : IEquatable<VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE>
        {
            public VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT (vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE (vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT from) => new vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(from);
            
            public static bool operator ==(VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE left, VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE left, VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE right) => !left.Equals(right);
        }
        
        public readonly partial struct VkMutableDescriptorTypeListVALVE : IEquatable<VkMutableDescriptorTypeListVALVE>
        {
            public VkMutableDescriptorTypeListVALVE(vulkan.VkMutableDescriptorTypeListEXT value) => this.Value = value;
            
            public vulkan.VkMutableDescriptorTypeListEXT Value { get; }
            
            public override bool Equals(object obj) => obj is VkMutableDescriptorTypeListVALVE other && Equals(other);
            
            public bool Equals(VkMutableDescriptorTypeListVALVE other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkMutableDescriptorTypeListEXT (vulkan.VkMutableDescriptorTypeListVALVE from) => from.Value;
            
            public static implicit operator vulkan.VkMutableDescriptorTypeListVALVE (vulkan.VkMutableDescriptorTypeListEXT from) => new vulkan.VkMutableDescriptorTypeListVALVE(from);
            
            public static bool operator ==(VkMutableDescriptorTypeListVALVE left, VkMutableDescriptorTypeListVALVE right) => left.Equals(right);
            
            public static bool operator !=(VkMutableDescriptorTypeListVALVE left, VkMutableDescriptorTypeListVALVE right) => !left.Equals(right);
        }
        
        public readonly partial struct VkMutableDescriptorTypeCreateInfoVALVE : IEquatable<VkMutableDescriptorTypeCreateInfoVALVE>
        {
            public VkMutableDescriptorTypeCreateInfoVALVE(vulkan.VkMutableDescriptorTypeCreateInfoEXT value) => this.Value = value;
            
            public vulkan.VkMutableDescriptorTypeCreateInfoEXT Value { get; }
            
            public override bool Equals(object obj) => obj is VkMutableDescriptorTypeCreateInfoVALVE other && Equals(other);
            
            public bool Equals(VkMutableDescriptorTypeCreateInfoVALVE other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkMutableDescriptorTypeCreateInfoEXT (vulkan.VkMutableDescriptorTypeCreateInfoVALVE from) => from.Value;
            
            public static implicit operator vulkan.VkMutableDescriptorTypeCreateInfoVALVE (vulkan.VkMutableDescriptorTypeCreateInfoEXT from) => new vulkan.VkMutableDescriptorTypeCreateInfoVALVE(from);
            
            public static bool operator ==(VkMutableDescriptorTypeCreateInfoVALVE left, VkMutableDescriptorTypeCreateInfoVALVE right) => left.Equals(right);
            
            public static bool operator !=(VkMutableDescriptorTypeCreateInfoVALVE left, VkMutableDescriptorTypeCreateInfoVALVE right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetVertexInputEXT : IEquatable<PFN_vkCmdSetVertexInputEXT>
        {
            public PFN_vkCmdSetVertexInputEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkVertexInputBindingDescription2EXT*, uint, vulkan.VkVertexInputAttributeDescription2EXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkVertexInputBindingDescription2EXT*, uint, vulkan.VkVertexInputAttributeDescription2EXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetVertexInputEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetVertexInputEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkVertexInputBindingDescription2EXT*, uint, vulkan.VkVertexInputAttributeDescription2EXT*, void> (vulkan.PFN_vkCmdSetVertexInputEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetVertexInputEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkVertexInputBindingDescription2EXT*, uint, vulkan.VkVertexInputAttributeDescription2EXT*, void> from) => new vulkan.PFN_vkCmdSetVertexInputEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetVertexInputEXT left, PFN_vkCmdSetVertexInputEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetVertexInputEXT left, PFN_vkCmdSetVertexInputEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI : IEquatable<PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI>
        {
            public PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPass, vulkan.VkExtent2D*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPass, vulkan.VkExtent2D*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPass, vulkan.VkExtent2D*, vulkan.VkResult> (vulkan.PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderPass, vulkan.VkExtent2D*, vulkan.VkResult> from) => new vulkan.PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(from);
            
            public static bool operator ==(PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI left, PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI left, PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSubpassShadingHUAWEI : IEquatable<PFN_vkCmdSubpassShadingHUAWEI>
        {
            public PFN_vkCmdSubpassShadingHUAWEI(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSubpassShadingHUAWEI other && Equals(other);
            
            public bool Equals(PFN_vkCmdSubpassShadingHUAWEI other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> (vulkan.PFN_vkCmdSubpassShadingHUAWEI from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSubpassShadingHUAWEI (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, void> from) => new vulkan.PFN_vkCmdSubpassShadingHUAWEI(from);
            
            public static bool operator ==(PFN_vkCmdSubpassShadingHUAWEI left, PFN_vkCmdSubpassShadingHUAWEI right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSubpassShadingHUAWEI left, PFN_vkCmdSubpassShadingHUAWEI right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBindInvocationMaskHUAWEI : IEquatable<PFN_vkCmdBindInvocationMaskHUAWEI>
        {
            public PFN_vkCmdBindInvocationMaskHUAWEI(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImageView, vulkan.VkImageLayout, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImageView, vulkan.VkImageLayout, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBindInvocationMaskHUAWEI other && Equals(other);
            
            public bool Equals(PFN_vkCmdBindInvocationMaskHUAWEI other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImageView, vulkan.VkImageLayout, void> (vulkan.PFN_vkCmdBindInvocationMaskHUAWEI from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBindInvocationMaskHUAWEI (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImageView, vulkan.VkImageLayout, void> from) => new vulkan.PFN_vkCmdBindInvocationMaskHUAWEI(from);
            
            public static bool operator ==(PFN_vkCmdBindInvocationMaskHUAWEI left, PFN_vkCmdBindInvocationMaskHUAWEI right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBindInvocationMaskHUAWEI left, PFN_vkCmdBindInvocationMaskHUAWEI right) => !left.Equals(right);
        }
        
        public readonly partial struct VkRemoteAddressNV : IEquatable<VkRemoteAddressNV>
        {
            public VkRemoteAddressNV(void* value) => this.Value = value;
            
            public void* Value { get; }
            
            public override bool Equals(object obj) => obj is VkRemoteAddressNV other && Equals(other);
            
            public bool Equals(VkRemoteAddressNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator void* (vulkan.VkRemoteAddressNV from) => from.Value;
            
            public static implicit operator vulkan.VkRemoteAddressNV (void* from) => new vulkan.VkRemoteAddressNV(from);
            
            public static bool operator ==(VkRemoteAddressNV left, VkRemoteAddressNV right) => left.Equals(right);
            
            public static bool operator !=(VkRemoteAddressNV left, VkRemoteAddressNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetMemoryRemoteAddressNV : IEquatable<PFN_vkGetMemoryRemoteAddressNV>
        {
            public PFN_vkGetMemoryRemoteAddressNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetRemoteAddressInfoNV*, vulkan.VkRemoteAddressNV*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetRemoteAddressInfoNV*, vulkan.VkRemoteAddressNV*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetMemoryRemoteAddressNV other && Equals(other);
            
            public bool Equals(PFN_vkGetMemoryRemoteAddressNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetRemoteAddressInfoNV*, vulkan.VkRemoteAddressNV*, vulkan.VkResult> (vulkan.PFN_vkGetMemoryRemoteAddressNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetMemoryRemoteAddressNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetRemoteAddressInfoNV*, vulkan.VkRemoteAddressNV*, vulkan.VkResult> from) => new vulkan.PFN_vkGetMemoryRemoteAddressNV(from);
            
            public static bool operator ==(PFN_vkGetMemoryRemoteAddressNV left, PFN_vkGetMemoryRemoteAddressNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetMemoryRemoteAddressNV left, PFN_vkGetMemoryRemoteAddressNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPipelineInfoEXT : IEquatable<VkPipelineInfoEXT>
        {
            public VkPipelineInfoEXT(vulkan.VkPipelineInfoKHR value) => this.Value = value;
            
            public vulkan.VkPipelineInfoKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkPipelineInfoEXT other && Equals(other);
            
            public bool Equals(VkPipelineInfoEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPipelineInfoKHR (vulkan.VkPipelineInfoEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPipelineInfoEXT (vulkan.VkPipelineInfoKHR from) => new vulkan.VkPipelineInfoEXT(from);
            
            public static bool operator ==(VkPipelineInfoEXT left, VkPipelineInfoEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPipelineInfoEXT left, VkPipelineInfoEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPipelinePropertiesEXT : IEquatable<PFN_vkGetPipelinePropertiesEXT>
        {
            public PFN_vkGetPipelinePropertiesEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineInfoEXT*, vulkan.VkBaseOutStructure*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineInfoEXT*, vulkan.VkBaseOutStructure*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPipelinePropertiesEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetPipelinePropertiesEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineInfoEXT*, vulkan.VkBaseOutStructure*, vulkan.VkResult> (vulkan.PFN_vkGetPipelinePropertiesEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPipelinePropertiesEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineInfoEXT*, vulkan.VkBaseOutStructure*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPipelinePropertiesEXT(from);
            
            public static bool operator ==(PFN_vkGetPipelinePropertiesEXT left, PFN_vkGetPipelinePropertiesEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPipelinePropertiesEXT left, PFN_vkGetPipelinePropertiesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetPatchControlPointsEXT : IEquatable<PFN_vkCmdSetPatchControlPointsEXT>
        {
            public PFN_vkCmdSetPatchControlPointsEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetPatchControlPointsEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetPatchControlPointsEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> (vulkan.PFN_vkCmdSetPatchControlPointsEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetPatchControlPointsEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> from) => new vulkan.PFN_vkCmdSetPatchControlPointsEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetPatchControlPointsEXT left, PFN_vkCmdSetPatchControlPointsEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetPatchControlPointsEXT left, PFN_vkCmdSetPatchControlPointsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetRasterizerDiscardEnableEXT : IEquatable<PFN_vkCmdSetRasterizerDiscardEnableEXT>
        {
            public PFN_vkCmdSetRasterizerDiscardEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetRasterizerDiscardEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetRasterizerDiscardEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetRasterizerDiscardEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetRasterizerDiscardEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetRasterizerDiscardEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetRasterizerDiscardEnableEXT left, PFN_vkCmdSetRasterizerDiscardEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetRasterizerDiscardEnableEXT left, PFN_vkCmdSetRasterizerDiscardEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDepthBiasEnableEXT : IEquatable<PFN_vkCmdSetDepthBiasEnableEXT>
        {
            public PFN_vkCmdSetDepthBiasEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDepthBiasEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDepthBiasEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetDepthBiasEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDepthBiasEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetDepthBiasEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetDepthBiasEnableEXT left, PFN_vkCmdSetDepthBiasEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDepthBiasEnableEXT left, PFN_vkCmdSetDepthBiasEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetLogicOpEXT : IEquatable<PFN_vkCmdSetLogicOpEXT>
        {
            public PFN_vkCmdSetLogicOpEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkLogicOp, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkLogicOp, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetLogicOpEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetLogicOpEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkLogicOp, void> (vulkan.PFN_vkCmdSetLogicOpEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetLogicOpEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkLogicOp, void> from) => new vulkan.PFN_vkCmdSetLogicOpEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetLogicOpEXT left, PFN_vkCmdSetLogicOpEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetLogicOpEXT left, PFN_vkCmdSetLogicOpEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetPrimitiveRestartEnableEXT : IEquatable<PFN_vkCmdSetPrimitiveRestartEnableEXT>
        {
            public PFN_vkCmdSetPrimitiveRestartEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetPrimitiveRestartEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetPrimitiveRestartEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetPrimitiveRestartEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetPrimitiveRestartEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetPrimitiveRestartEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetPrimitiveRestartEnableEXT left, PFN_vkCmdSetPrimitiveRestartEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetPrimitiveRestartEnableEXT left, PFN_vkCmdSetPrimitiveRestartEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetColorWriteEnableEXT : IEquatable<PFN_vkCmdSetColorWriteEnableEXT>
        {
            public PFN_vkCmdSetColorWriteEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkBool32*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkBool32*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetColorWriteEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetColorWriteEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkBool32*, void> (vulkan.PFN_vkCmdSetColorWriteEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetColorWriteEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkBool32*, void> from) => new vulkan.PFN_vkCmdSetColorWriteEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetColorWriteEnableEXT left, PFN_vkCmdSetColorWriteEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetColorWriteEnableEXT left, PFN_vkCmdSetColorWriteEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT : IEquatable<VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT>
        {
            public VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR value) => this.Value = value;
            
            public vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT other && Equals(other);
            
            public bool Equals(VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR (vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT (vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR from) => new vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(from);
            
            public static bool operator ==(VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT left, VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT left, VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkQueueFamilyGlobalPriorityPropertiesEXT : IEquatable<VkQueueFamilyGlobalPriorityPropertiesEXT>
        {
            public VkQueueFamilyGlobalPriorityPropertiesEXT(vulkan.VkQueueFamilyGlobalPriorityPropertiesKHR value) => this.Value = value;
            
            public vulkan.VkQueueFamilyGlobalPriorityPropertiesKHR Value { get; }
            
            public override bool Equals(object obj) => obj is VkQueueFamilyGlobalPriorityPropertiesEXT other && Equals(other);
            
            public bool Equals(VkQueueFamilyGlobalPriorityPropertiesEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkQueueFamilyGlobalPriorityPropertiesKHR (vulkan.VkQueueFamilyGlobalPriorityPropertiesEXT from) => from.Value;
            
            public static implicit operator vulkan.VkQueueFamilyGlobalPriorityPropertiesEXT (vulkan.VkQueueFamilyGlobalPriorityPropertiesKHR from) => new vulkan.VkQueueFamilyGlobalPriorityPropertiesEXT(from);
            
            public static bool operator ==(VkQueueFamilyGlobalPriorityPropertiesEXT left, VkQueueFamilyGlobalPriorityPropertiesEXT right) => left.Equals(right);
            
            public static bool operator !=(VkQueueFamilyGlobalPriorityPropertiesEXT left, VkQueueFamilyGlobalPriorityPropertiesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawMultiEXT : IEquatable<PFN_vkCmdDrawMultiEXT>
        {
            public PFN_vkCmdDrawMultiEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkMultiDrawInfoEXT*, uint, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkMultiDrawInfoEXT*, uint, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawMultiEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawMultiEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkMultiDrawInfoEXT*, uint, uint, uint, void> (vulkan.PFN_vkCmdDrawMultiEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawMultiEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkMultiDrawInfoEXT*, uint, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawMultiEXT(from);
            
            public static bool operator ==(PFN_vkCmdDrawMultiEXT left, PFN_vkCmdDrawMultiEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawMultiEXT left, PFN_vkCmdDrawMultiEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawMultiIndexedEXT : IEquatable<PFN_vkCmdDrawMultiIndexedEXT>
        {
            public PFN_vkCmdDrawMultiIndexedEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkMultiDrawIndexedInfoEXT*, uint, uint, uint, int*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkMultiDrawIndexedInfoEXT*, uint, uint, uint, int*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawMultiIndexedEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawMultiIndexedEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkMultiDrawIndexedInfoEXT*, uint, uint, uint, int*, void> (vulkan.PFN_vkCmdDrawMultiIndexedEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawMultiIndexedEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkMultiDrawIndexedInfoEXT*, uint, uint, uint, int*, void> from) => new vulkan.PFN_vkCmdDrawMultiIndexedEXT(from);
            
            public static bool operator ==(PFN_vkCmdDrawMultiIndexedEXT left, PFN_vkCmdDrawMultiIndexedEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawMultiIndexedEXT left, PFN_vkCmdDrawMultiIndexedEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateMicromapEXT : IEquatable<PFN_vkCreateMicromapEXT>
        {
            public PFN_vkCreateMicromapEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMicromapCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkMicromapEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMicromapCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkMicromapEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateMicromapEXT other && Equals(other);
            
            public bool Equals(PFN_vkCreateMicromapEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMicromapCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkMicromapEXT*, vulkan.VkResult> (vulkan.PFN_vkCreateMicromapEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateMicromapEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMicromapCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkMicromapEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateMicromapEXT(from);
            
            public static bool operator ==(PFN_vkCreateMicromapEXT left, PFN_vkCreateMicromapEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateMicromapEXT left, PFN_vkCreateMicromapEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyMicromapEXT : IEquatable<PFN_vkDestroyMicromapEXT>
        {
            public PFN_vkDestroyMicromapEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMicromapEXT, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMicromapEXT, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyMicromapEXT other && Equals(other);
            
            public bool Equals(PFN_vkDestroyMicromapEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMicromapEXT, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyMicromapEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyMicromapEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMicromapEXT, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyMicromapEXT(from);
            
            public static bool operator ==(PFN_vkDestroyMicromapEXT left, PFN_vkDestroyMicromapEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyMicromapEXT left, PFN_vkDestroyMicromapEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBuildMicromapsEXT : IEquatable<PFN_vkCmdBuildMicromapsEXT>
        {
            public PFN_vkCmdBuildMicromapsEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkMicromapBuildInfoEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkMicromapBuildInfoEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBuildMicromapsEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdBuildMicromapsEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkMicromapBuildInfoEXT*, void> (vulkan.PFN_vkCmdBuildMicromapsEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBuildMicromapsEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkMicromapBuildInfoEXT*, void> from) => new vulkan.PFN_vkCmdBuildMicromapsEXT(from);
            
            public static bool operator ==(PFN_vkCmdBuildMicromapsEXT left, PFN_vkCmdBuildMicromapsEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBuildMicromapsEXT left, PFN_vkCmdBuildMicromapsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkBuildMicromapsEXT : IEquatable<PFN_vkBuildMicromapsEXT>
        {
            public PFN_vkBuildMicromapsEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, uint, vulkan.VkMicromapBuildInfoEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, uint, vulkan.VkMicromapBuildInfoEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkBuildMicromapsEXT other && Equals(other);
            
            public bool Equals(PFN_vkBuildMicromapsEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, uint, vulkan.VkMicromapBuildInfoEXT*, vulkan.VkResult> (vulkan.PFN_vkBuildMicromapsEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkBuildMicromapsEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, uint, vulkan.VkMicromapBuildInfoEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkBuildMicromapsEXT(from);
            
            public static bool operator ==(PFN_vkBuildMicromapsEXT left, PFN_vkBuildMicromapsEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkBuildMicromapsEXT left, PFN_vkBuildMicromapsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCopyMicromapEXT : IEquatable<PFN_vkCopyMicromapEXT>
        {
            public PFN_vkCopyMicromapEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyMicromapInfoEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyMicromapInfoEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCopyMicromapEXT other && Equals(other);
            
            public bool Equals(PFN_vkCopyMicromapEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyMicromapInfoEXT*, vulkan.VkResult> (vulkan.PFN_vkCopyMicromapEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCopyMicromapEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyMicromapInfoEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkCopyMicromapEXT(from);
            
            public static bool operator ==(PFN_vkCopyMicromapEXT left, PFN_vkCopyMicromapEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCopyMicromapEXT left, PFN_vkCopyMicromapEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCopyMicromapToMemoryEXT : IEquatable<PFN_vkCopyMicromapToMemoryEXT>
        {
            public PFN_vkCopyMicromapToMemoryEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyMicromapToMemoryInfoEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyMicromapToMemoryInfoEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCopyMicromapToMemoryEXT other && Equals(other);
            
            public bool Equals(PFN_vkCopyMicromapToMemoryEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyMicromapToMemoryInfoEXT*, vulkan.VkResult> (vulkan.PFN_vkCopyMicromapToMemoryEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCopyMicromapToMemoryEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyMicromapToMemoryInfoEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkCopyMicromapToMemoryEXT(from);
            
            public static bool operator ==(PFN_vkCopyMicromapToMemoryEXT left, PFN_vkCopyMicromapToMemoryEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCopyMicromapToMemoryEXT left, PFN_vkCopyMicromapToMemoryEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCopyMemoryToMicromapEXT : IEquatable<PFN_vkCopyMemoryToMicromapEXT>
        {
            public PFN_vkCopyMemoryToMicromapEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyMemoryToMicromapInfoEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyMemoryToMicromapInfoEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCopyMemoryToMicromapEXT other && Equals(other);
            
            public bool Equals(PFN_vkCopyMemoryToMicromapEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyMemoryToMicromapInfoEXT*, vulkan.VkResult> (vulkan.PFN_vkCopyMemoryToMicromapEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCopyMemoryToMicromapEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyMemoryToMicromapInfoEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkCopyMemoryToMicromapEXT(from);
            
            public static bool operator ==(PFN_vkCopyMemoryToMicromapEXT left, PFN_vkCopyMemoryToMicromapEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCopyMemoryToMicromapEXT left, PFN_vkCopyMemoryToMicromapEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkWriteMicromapsPropertiesEXT : IEquatable<PFN_vkWriteMicromapsPropertiesEXT>
        {
            public PFN_vkWriteMicromapsPropertiesEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkMicromapEXT*, vulkan.VkQueryType, nuint, void*, nuint, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkMicromapEXT*, vulkan.VkQueryType, nuint, void*, nuint, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkWriteMicromapsPropertiesEXT other && Equals(other);
            
            public bool Equals(PFN_vkWriteMicromapsPropertiesEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkMicromapEXT*, vulkan.VkQueryType, nuint, void*, nuint, vulkan.VkResult> (vulkan.PFN_vkWriteMicromapsPropertiesEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkWriteMicromapsPropertiesEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkMicromapEXT*, vulkan.VkQueryType, nuint, void*, nuint, vulkan.VkResult> from) => new vulkan.PFN_vkWriteMicromapsPropertiesEXT(from);
            
            public static bool operator ==(PFN_vkWriteMicromapsPropertiesEXT left, PFN_vkWriteMicromapsPropertiesEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkWriteMicromapsPropertiesEXT left, PFN_vkWriteMicromapsPropertiesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyMicromapEXT : IEquatable<PFN_vkCmdCopyMicromapEXT>
        {
            public PFN_vkCmdCopyMicromapEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyMicromapInfoEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyMicromapInfoEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyMicromapEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyMicromapEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyMicromapInfoEXT*, void> (vulkan.PFN_vkCmdCopyMicromapEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyMicromapEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyMicromapInfoEXT*, void> from) => new vulkan.PFN_vkCmdCopyMicromapEXT(from);
            
            public static bool operator ==(PFN_vkCmdCopyMicromapEXT left, PFN_vkCmdCopyMicromapEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyMicromapEXT left, PFN_vkCmdCopyMicromapEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyMicromapToMemoryEXT : IEquatable<PFN_vkCmdCopyMicromapToMemoryEXT>
        {
            public PFN_vkCmdCopyMicromapToMemoryEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyMicromapToMemoryInfoEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyMicromapToMemoryInfoEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyMicromapToMemoryEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyMicromapToMemoryEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyMicromapToMemoryInfoEXT*, void> (vulkan.PFN_vkCmdCopyMicromapToMemoryEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyMicromapToMemoryEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyMicromapToMemoryInfoEXT*, void> from) => new vulkan.PFN_vkCmdCopyMicromapToMemoryEXT(from);
            
            public static bool operator ==(PFN_vkCmdCopyMicromapToMemoryEXT left, PFN_vkCmdCopyMicromapToMemoryEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyMicromapToMemoryEXT left, PFN_vkCmdCopyMicromapToMemoryEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyMemoryToMicromapEXT : IEquatable<PFN_vkCmdCopyMemoryToMicromapEXT>
        {
            public PFN_vkCmdCopyMemoryToMicromapEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyMemoryToMicromapInfoEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyMemoryToMicromapInfoEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyMemoryToMicromapEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyMemoryToMicromapEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyMemoryToMicromapInfoEXT*, void> (vulkan.PFN_vkCmdCopyMemoryToMicromapEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyMemoryToMicromapEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyMemoryToMicromapInfoEXT*, void> from) => new vulkan.PFN_vkCmdCopyMemoryToMicromapEXT(from);
            
            public static bool operator ==(PFN_vkCmdCopyMemoryToMicromapEXT left, PFN_vkCmdCopyMemoryToMicromapEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyMemoryToMicromapEXT left, PFN_vkCmdCopyMemoryToMicromapEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdWriteMicromapsPropertiesEXT : IEquatable<PFN_vkCmdWriteMicromapsPropertiesEXT>
        {
            public PFN_vkCmdWriteMicromapsPropertiesEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkMicromapEXT*, vulkan.VkQueryType, vulkan.VkQueryPool, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkMicromapEXT*, vulkan.VkQueryType, vulkan.VkQueryPool, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdWriteMicromapsPropertiesEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdWriteMicromapsPropertiesEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkMicromapEXT*, vulkan.VkQueryType, vulkan.VkQueryPool, uint, void> (vulkan.PFN_vkCmdWriteMicromapsPropertiesEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdWriteMicromapsPropertiesEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkMicromapEXT*, vulkan.VkQueryType, vulkan.VkQueryPool, uint, void> from) => new vulkan.PFN_vkCmdWriteMicromapsPropertiesEXT(from);
            
            public static bool operator ==(PFN_vkCmdWriteMicromapsPropertiesEXT left, PFN_vkCmdWriteMicromapsPropertiesEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdWriteMicromapsPropertiesEXT left, PFN_vkCmdWriteMicromapsPropertiesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceMicromapCompatibilityEXT : IEquatable<PFN_vkGetDeviceMicromapCompatibilityEXT>
        {
            public PFN_vkGetDeviceMicromapCompatibilityEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMicromapVersionInfoEXT*, vulkan.VkAccelerationStructureCompatibilityKHR*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMicromapVersionInfoEXT*, vulkan.VkAccelerationStructureCompatibilityKHR*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceMicromapCompatibilityEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceMicromapCompatibilityEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMicromapVersionInfoEXT*, vulkan.VkAccelerationStructureCompatibilityKHR*, void> (vulkan.PFN_vkGetDeviceMicromapCompatibilityEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceMicromapCompatibilityEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMicromapVersionInfoEXT*, vulkan.VkAccelerationStructureCompatibilityKHR*, void> from) => new vulkan.PFN_vkGetDeviceMicromapCompatibilityEXT(from);
            
            public static bool operator ==(PFN_vkGetDeviceMicromapCompatibilityEXT left, PFN_vkGetDeviceMicromapCompatibilityEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceMicromapCompatibilityEXT left, PFN_vkGetDeviceMicromapCompatibilityEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetMicromapBuildSizesEXT : IEquatable<PFN_vkGetMicromapBuildSizesEXT>
        {
            public PFN_vkGetMicromapBuildSizesEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureBuildTypeKHR, vulkan.VkMicromapBuildInfoEXT*, vulkan.VkMicromapBuildSizesInfoEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureBuildTypeKHR, vulkan.VkMicromapBuildInfoEXT*, vulkan.VkMicromapBuildSizesInfoEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetMicromapBuildSizesEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetMicromapBuildSizesEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureBuildTypeKHR, vulkan.VkMicromapBuildInfoEXT*, vulkan.VkMicromapBuildSizesInfoEXT*, void> (vulkan.PFN_vkGetMicromapBuildSizesEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetMicromapBuildSizesEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureBuildTypeKHR, vulkan.VkMicromapBuildInfoEXT*, vulkan.VkMicromapBuildSizesInfoEXT*, void> from) => new vulkan.PFN_vkGetMicromapBuildSizesEXT(from);
            
            public static bool operator ==(PFN_vkGetMicromapBuildSizesEXT left, PFN_vkGetMicromapBuildSizesEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetMicromapBuildSizesEXT left, PFN_vkGetMicromapBuildSizesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawClusterHUAWEI : IEquatable<PFN_vkCmdDrawClusterHUAWEI>
        {
            public PFN_vkCmdDrawClusterHUAWEI(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawClusterHUAWEI other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawClusterHUAWEI other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, void> (vulkan.PFN_vkCmdDrawClusterHUAWEI from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawClusterHUAWEI (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawClusterHUAWEI(from);
            
            public static bool operator ==(PFN_vkCmdDrawClusterHUAWEI left, PFN_vkCmdDrawClusterHUAWEI right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawClusterHUAWEI left, PFN_vkCmdDrawClusterHUAWEI right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawClusterIndirectHUAWEI : IEquatable<PFN_vkCmdDrawClusterIndirectHUAWEI>
        {
            public PFN_vkCmdDrawClusterIndirectHUAWEI(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawClusterIndirectHUAWEI other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawClusterIndirectHUAWEI other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, void> (vulkan.PFN_vkCmdDrawClusterIndirectHUAWEI from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawClusterIndirectHUAWEI (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, void> from) => new vulkan.PFN_vkCmdDrawClusterIndirectHUAWEI(from);
            
            public static bool operator ==(PFN_vkCmdDrawClusterIndirectHUAWEI left, PFN_vkCmdDrawClusterIndirectHUAWEI right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawClusterIndirectHUAWEI left, PFN_vkCmdDrawClusterIndirectHUAWEI right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkSetDeviceMemoryPriorityEXT : IEquatable<PFN_vkSetDeviceMemoryPriorityEXT>
        {
            public PFN_vkSetDeviceMemoryPriorityEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, float, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, float, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkSetDeviceMemoryPriorityEXT other && Equals(other);
            
            public bool Equals(PFN_vkSetDeviceMemoryPriorityEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, float, void> (vulkan.PFN_vkSetDeviceMemoryPriorityEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkSetDeviceMemoryPriorityEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, float, void> from) => new vulkan.PFN_vkSetDeviceMemoryPriorityEXT(from);
            
            public static bool operator ==(PFN_vkSetDeviceMemoryPriorityEXT left, PFN_vkSetDeviceMemoryPriorityEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkSetDeviceMemoryPriorityEXT left, PFN_vkSetDeviceMemoryPriorityEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE : IEquatable<PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE>
        {
            public PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetBindingReferenceVALVE*, vulkan.VkDescriptorSetLayoutHostMappingInfoVALVE*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetBindingReferenceVALVE*, vulkan.VkDescriptorSetLayoutHostMappingInfoVALVE*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE other && Equals(other);
            
            public bool Equals(PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetBindingReferenceVALVE*, vulkan.VkDescriptorSetLayoutHostMappingInfoVALVE*, void> (vulkan.PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSetBindingReferenceVALVE*, vulkan.VkDescriptorSetLayoutHostMappingInfoVALVE*, void> from) => new vulkan.PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE(from);
            
            public static bool operator ==(PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE left, PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE left, PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDescriptorSetHostMappingVALVE : IEquatable<PFN_vkGetDescriptorSetHostMappingVALVE>
        {
            public PFN_vkGetDescriptorSetHostMappingVALVE(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSet, void**, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSet, void**, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDescriptorSetHostMappingVALVE other && Equals(other);
            
            public bool Equals(PFN_vkGetDescriptorSetHostMappingVALVE other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSet, void**, void> (vulkan.PFN_vkGetDescriptorSetHostMappingVALVE from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDescriptorSetHostMappingVALVE (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDescriptorSet, void**, void> from) => new vulkan.PFN_vkGetDescriptorSetHostMappingVALVE(from);
            
            public static bool operator ==(PFN_vkGetDescriptorSetHostMappingVALVE left, PFN_vkGetDescriptorSetHostMappingVALVE right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDescriptorSetHostMappingVALVE left, PFN_vkGetDescriptorSetHostMappingVALVE right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyMemoryIndirectNV : IEquatable<PFN_vkCmdCopyMemoryIndirectNV>
        {
            public PFN_vkCmdCopyMemoryIndirectNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDeviceAddress, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDeviceAddress, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyMemoryIndirectNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyMemoryIndirectNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDeviceAddress, uint, uint, void> (vulkan.PFN_vkCmdCopyMemoryIndirectNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyMemoryIndirectNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDeviceAddress, uint, uint, void> from) => new vulkan.PFN_vkCmdCopyMemoryIndirectNV(from);
            
            public static bool operator ==(PFN_vkCmdCopyMemoryIndirectNV left, PFN_vkCmdCopyMemoryIndirectNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyMemoryIndirectNV left, PFN_vkCmdCopyMemoryIndirectNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyMemoryToImageIndirectNV : IEquatable<PFN_vkCmdCopyMemoryToImageIndirectNV>
        {
            public PFN_vkCmdCopyMemoryToImageIndirectNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDeviceAddress, uint, uint, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkImageSubresourceLayers*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDeviceAddress, uint, uint, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkImageSubresourceLayers*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyMemoryToImageIndirectNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyMemoryToImageIndirectNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDeviceAddress, uint, uint, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkImageSubresourceLayers*, void> (vulkan.PFN_vkCmdCopyMemoryToImageIndirectNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyMemoryToImageIndirectNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDeviceAddress, uint, uint, vulkan.VkImage, vulkan.VkImageLayout, vulkan.VkImageSubresourceLayers*, void> from) => new vulkan.PFN_vkCmdCopyMemoryToImageIndirectNV(from);
            
            public static bool operator ==(PFN_vkCmdCopyMemoryToImageIndirectNV left, PFN_vkCmdCopyMemoryToImageIndirectNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyMemoryToImageIndirectNV left, PFN_vkCmdCopyMemoryToImageIndirectNV right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Flag bits for VkMemoryDecompressionMethodFlagBitsNV
        /// </summary>
        public readonly partial struct VkMemoryDecompressionMethodFlagBitsNV : IEquatable<VkMemoryDecompressionMethodFlagBitsNV>
        {
            public VkMemoryDecompressionMethodFlagBitsNV(vulkan.VkFlags64 value) => this.Value = value;
            
            public vulkan.VkFlags64 Value { get; }
            
            public override bool Equals(object obj) => obj is VkMemoryDecompressionMethodFlagBitsNV other && Equals(other);
            
            public bool Equals(VkMemoryDecompressionMethodFlagBitsNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags64 (vulkan.VkMemoryDecompressionMethodFlagBitsNV from) => from.Value;
            
            public static implicit operator vulkan.VkMemoryDecompressionMethodFlagBitsNV (vulkan.VkFlags64 from) => new vulkan.VkMemoryDecompressionMethodFlagBitsNV(from);
            
            public static bool operator ==(VkMemoryDecompressionMethodFlagBitsNV left, VkMemoryDecompressionMethodFlagBitsNV right) => left.Equals(right);
            
            public static bool operator !=(VkMemoryDecompressionMethodFlagBitsNV left, VkMemoryDecompressionMethodFlagBitsNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDecompressMemoryNV : IEquatable<PFN_vkCmdDecompressMemoryNV>
        {
            public PFN_vkCmdDecompressMemoryNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkDecompressMemoryRegionNV*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkDecompressMemoryRegionNV*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDecompressMemoryNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdDecompressMemoryNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkDecompressMemoryRegionNV*, void> (vulkan.PFN_vkCmdDecompressMemoryNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDecompressMemoryNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkDecompressMemoryRegionNV*, void> from) => new vulkan.PFN_vkCmdDecompressMemoryNV(from);
            
            public static bool operator ==(PFN_vkCmdDecompressMemoryNV left, PFN_vkCmdDecompressMemoryNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDecompressMemoryNV left, PFN_vkCmdDecompressMemoryNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDecompressMemoryIndirectCountNV : IEquatable<PFN_vkCmdDecompressMemoryIndirectCountNV>
        {
            public PFN_vkCmdDecompressMemoryIndirectCountNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDeviceAddress, vulkan.VkDeviceAddress, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDeviceAddress, vulkan.VkDeviceAddress, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDecompressMemoryIndirectCountNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdDecompressMemoryIndirectCountNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDeviceAddress, vulkan.VkDeviceAddress, uint, void> (vulkan.PFN_vkCmdDecompressMemoryIndirectCountNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDecompressMemoryIndirectCountNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkDeviceAddress, vulkan.VkDeviceAddress, uint, void> from) => new vulkan.PFN_vkCmdDecompressMemoryIndirectCountNV(from);
            
            public static bool operator ==(PFN_vkCmdDecompressMemoryIndirectCountNV left, PFN_vkCmdDecompressMemoryIndirectCountNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDecompressMemoryIndirectCountNV left, PFN_vkCmdDecompressMemoryIndirectCountNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPipelineIndirectMemoryRequirementsNV : IEquatable<PFN_vkGetPipelineIndirectMemoryRequirementsNV>
        {
            public PFN_vkGetPipelineIndirectMemoryRequirementsNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkComputePipelineCreateInfo*, vulkan.VkMemoryRequirements2*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkComputePipelineCreateInfo*, vulkan.VkMemoryRequirements2*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPipelineIndirectMemoryRequirementsNV other && Equals(other);
            
            public bool Equals(PFN_vkGetPipelineIndirectMemoryRequirementsNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkComputePipelineCreateInfo*, vulkan.VkMemoryRequirements2*, void> (vulkan.PFN_vkGetPipelineIndirectMemoryRequirementsNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPipelineIndirectMemoryRequirementsNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkComputePipelineCreateInfo*, vulkan.VkMemoryRequirements2*, void> from) => new vulkan.PFN_vkGetPipelineIndirectMemoryRequirementsNV(from);
            
            public static bool operator ==(PFN_vkGetPipelineIndirectMemoryRequirementsNV left, PFN_vkGetPipelineIndirectMemoryRequirementsNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPipelineIndirectMemoryRequirementsNV left, PFN_vkGetPipelineIndirectMemoryRequirementsNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdUpdatePipelineIndirectBufferNV : IEquatable<PFN_vkCmdUpdatePipelineIndirectBufferNV>
        {
            public PFN_vkCmdUpdatePipelineIndirectBufferNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipeline, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipeline, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdUpdatePipelineIndirectBufferNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdUpdatePipelineIndirectBufferNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipeline, void> (vulkan.PFN_vkCmdUpdatePipelineIndirectBufferNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdUpdatePipelineIndirectBufferNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPipelineBindPoint, vulkan.VkPipeline, void> from) => new vulkan.PFN_vkCmdUpdatePipelineIndirectBufferNV(from);
            
            public static bool operator ==(PFN_vkCmdUpdatePipelineIndirectBufferNV left, PFN_vkCmdUpdatePipelineIndirectBufferNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdUpdatePipelineIndirectBufferNV left, PFN_vkCmdUpdatePipelineIndirectBufferNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPipelineIndirectDeviceAddressNV : IEquatable<PFN_vkGetPipelineIndirectDeviceAddressNV>
        {
            public PFN_vkGetPipelineIndirectDeviceAddressNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineIndirectDeviceAddressInfoNV*, vulkan.VkDeviceAddress> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineIndirectDeviceAddressInfoNV*, vulkan.VkDeviceAddress> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPipelineIndirectDeviceAddressNV other && Equals(other);
            
            public bool Equals(PFN_vkGetPipelineIndirectDeviceAddressNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineIndirectDeviceAddressInfoNV*, vulkan.VkDeviceAddress> (vulkan.PFN_vkGetPipelineIndirectDeviceAddressNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPipelineIndirectDeviceAddressNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipelineIndirectDeviceAddressInfoNV*, vulkan.VkDeviceAddress> from) => new vulkan.PFN_vkGetPipelineIndirectDeviceAddressNV(from);
            
            public static bool operator ==(PFN_vkGetPipelineIndirectDeviceAddressNV left, PFN_vkGetPipelineIndirectDeviceAddressNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPipelineIndirectDeviceAddressNV left, PFN_vkGetPipelineIndirectDeviceAddressNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetTessellationDomainOriginEXT : IEquatable<PFN_vkCmdSetTessellationDomainOriginEXT>
        {
            public PFN_vkCmdSetTessellationDomainOriginEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkTessellationDomainOrigin, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkTessellationDomainOrigin, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetTessellationDomainOriginEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetTessellationDomainOriginEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkTessellationDomainOrigin, void> (vulkan.PFN_vkCmdSetTessellationDomainOriginEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetTessellationDomainOriginEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkTessellationDomainOrigin, void> from) => new vulkan.PFN_vkCmdSetTessellationDomainOriginEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetTessellationDomainOriginEXT left, PFN_vkCmdSetTessellationDomainOriginEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetTessellationDomainOriginEXT left, PFN_vkCmdSetTessellationDomainOriginEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDepthClampEnableEXT : IEquatable<PFN_vkCmdSetDepthClampEnableEXT>
        {
            public PFN_vkCmdSetDepthClampEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDepthClampEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDepthClampEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetDepthClampEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDepthClampEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetDepthClampEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetDepthClampEnableEXT left, PFN_vkCmdSetDepthClampEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDepthClampEnableEXT left, PFN_vkCmdSetDepthClampEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetPolygonModeEXT : IEquatable<PFN_vkCmdSetPolygonModeEXT>
        {
            public PFN_vkCmdSetPolygonModeEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPolygonMode, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPolygonMode, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetPolygonModeEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetPolygonModeEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPolygonMode, void> (vulkan.PFN_vkCmdSetPolygonModeEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetPolygonModeEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkPolygonMode, void> from) => new vulkan.PFN_vkCmdSetPolygonModeEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetPolygonModeEXT left, PFN_vkCmdSetPolygonModeEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetPolygonModeEXT left, PFN_vkCmdSetPolygonModeEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetRasterizationSamplesEXT : IEquatable<PFN_vkCmdSetRasterizationSamplesEXT>
        {
            public PFN_vkCmdSetRasterizationSamplesEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSampleCountFlagBits, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSampleCountFlagBits, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetRasterizationSamplesEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetRasterizationSamplesEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSampleCountFlagBits, void> (vulkan.PFN_vkCmdSetRasterizationSamplesEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetRasterizationSamplesEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSampleCountFlagBits, void> from) => new vulkan.PFN_vkCmdSetRasterizationSamplesEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetRasterizationSamplesEXT left, PFN_vkCmdSetRasterizationSamplesEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetRasterizationSamplesEXT left, PFN_vkCmdSetRasterizationSamplesEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetSampleMaskEXT : IEquatable<PFN_vkCmdSetSampleMaskEXT>
        {
            public PFN_vkCmdSetSampleMaskEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSampleCountFlagBits, vulkan.VkSampleMask*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSampleCountFlagBits, vulkan.VkSampleMask*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetSampleMaskEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetSampleMaskEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSampleCountFlagBits, vulkan.VkSampleMask*, void> (vulkan.PFN_vkCmdSetSampleMaskEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetSampleMaskEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkSampleCountFlagBits, vulkan.VkSampleMask*, void> from) => new vulkan.PFN_vkCmdSetSampleMaskEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetSampleMaskEXT left, PFN_vkCmdSetSampleMaskEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetSampleMaskEXT left, PFN_vkCmdSetSampleMaskEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetAlphaToCoverageEnableEXT : IEquatable<PFN_vkCmdSetAlphaToCoverageEnableEXT>
        {
            public PFN_vkCmdSetAlphaToCoverageEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetAlphaToCoverageEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetAlphaToCoverageEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetAlphaToCoverageEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetAlphaToCoverageEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetAlphaToCoverageEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetAlphaToCoverageEnableEXT left, PFN_vkCmdSetAlphaToCoverageEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetAlphaToCoverageEnableEXT left, PFN_vkCmdSetAlphaToCoverageEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetAlphaToOneEnableEXT : IEquatable<PFN_vkCmdSetAlphaToOneEnableEXT>
        {
            public PFN_vkCmdSetAlphaToOneEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetAlphaToOneEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetAlphaToOneEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetAlphaToOneEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetAlphaToOneEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetAlphaToOneEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetAlphaToOneEnableEXT left, PFN_vkCmdSetAlphaToOneEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetAlphaToOneEnableEXT left, PFN_vkCmdSetAlphaToOneEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetLogicOpEnableEXT : IEquatable<PFN_vkCmdSetLogicOpEnableEXT>
        {
            public PFN_vkCmdSetLogicOpEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetLogicOpEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetLogicOpEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetLogicOpEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetLogicOpEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetLogicOpEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetLogicOpEnableEXT left, PFN_vkCmdSetLogicOpEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetLogicOpEnableEXT left, PFN_vkCmdSetLogicOpEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetColorBlendEnableEXT : IEquatable<PFN_vkCmdSetColorBlendEnableEXT>
        {
            public PFN_vkCmdSetColorBlendEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBool32*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBool32*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetColorBlendEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetColorBlendEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBool32*, void> (vulkan.PFN_vkCmdSetColorBlendEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetColorBlendEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkBool32*, void> from) => new vulkan.PFN_vkCmdSetColorBlendEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetColorBlendEnableEXT left, PFN_vkCmdSetColorBlendEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetColorBlendEnableEXT left, PFN_vkCmdSetColorBlendEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetColorBlendEquationEXT : IEquatable<PFN_vkCmdSetColorBlendEquationEXT>
        {
            public PFN_vkCmdSetColorBlendEquationEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkColorBlendEquationEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkColorBlendEquationEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetColorBlendEquationEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetColorBlendEquationEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkColorBlendEquationEXT*, void> (vulkan.PFN_vkCmdSetColorBlendEquationEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetColorBlendEquationEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkColorBlendEquationEXT*, void> from) => new vulkan.PFN_vkCmdSetColorBlendEquationEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetColorBlendEquationEXT left, PFN_vkCmdSetColorBlendEquationEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetColorBlendEquationEXT left, PFN_vkCmdSetColorBlendEquationEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetColorWriteMaskEXT : IEquatable<PFN_vkCmdSetColorWriteMaskEXT>
        {
            public PFN_vkCmdSetColorWriteMaskEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkColorComponentFlags*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkColorComponentFlags*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetColorWriteMaskEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetColorWriteMaskEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkColorComponentFlags*, void> (vulkan.PFN_vkCmdSetColorWriteMaskEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetColorWriteMaskEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkColorComponentFlags*, void> from) => new vulkan.PFN_vkCmdSetColorWriteMaskEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetColorWriteMaskEXT left, PFN_vkCmdSetColorWriteMaskEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetColorWriteMaskEXT left, PFN_vkCmdSetColorWriteMaskEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetRasterizationStreamEXT : IEquatable<PFN_vkCmdSetRasterizationStreamEXT>
        {
            public PFN_vkCmdSetRasterizationStreamEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetRasterizationStreamEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetRasterizationStreamEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> (vulkan.PFN_vkCmdSetRasterizationStreamEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetRasterizationStreamEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> from) => new vulkan.PFN_vkCmdSetRasterizationStreamEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetRasterizationStreamEXT left, PFN_vkCmdSetRasterizationStreamEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetRasterizationStreamEXT left, PFN_vkCmdSetRasterizationStreamEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetConservativeRasterizationModeEXT : IEquatable<PFN_vkCmdSetConservativeRasterizationModeEXT>
        {
            public PFN_vkCmdSetConservativeRasterizationModeEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkConservativeRasterizationModeEXT, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkConservativeRasterizationModeEXT, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetConservativeRasterizationModeEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetConservativeRasterizationModeEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkConservativeRasterizationModeEXT, void> (vulkan.PFN_vkCmdSetConservativeRasterizationModeEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetConservativeRasterizationModeEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkConservativeRasterizationModeEXT, void> from) => new vulkan.PFN_vkCmdSetConservativeRasterizationModeEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetConservativeRasterizationModeEXT left, PFN_vkCmdSetConservativeRasterizationModeEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetConservativeRasterizationModeEXT left, PFN_vkCmdSetConservativeRasterizationModeEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT : IEquatable<PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT>
        {
            public PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, float, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, float, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, float, void> (vulkan.PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, float, void> from) => new vulkan.PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT left, PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT left, PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDepthClipEnableEXT : IEquatable<PFN_vkCmdSetDepthClipEnableEXT>
        {
            public PFN_vkCmdSetDepthClipEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDepthClipEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDepthClipEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetDepthClipEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDepthClipEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetDepthClipEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetDepthClipEnableEXT left, PFN_vkCmdSetDepthClipEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDepthClipEnableEXT left, PFN_vkCmdSetDepthClipEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetSampleLocationsEnableEXT : IEquatable<PFN_vkCmdSetSampleLocationsEnableEXT>
        {
            public PFN_vkCmdSetSampleLocationsEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetSampleLocationsEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetSampleLocationsEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetSampleLocationsEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetSampleLocationsEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetSampleLocationsEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetSampleLocationsEnableEXT left, PFN_vkCmdSetSampleLocationsEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetSampleLocationsEnableEXT left, PFN_vkCmdSetSampleLocationsEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetColorBlendAdvancedEXT : IEquatable<PFN_vkCmdSetColorBlendAdvancedEXT>
        {
            public PFN_vkCmdSetColorBlendAdvancedEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkColorBlendAdvancedEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkColorBlendAdvancedEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetColorBlendAdvancedEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetColorBlendAdvancedEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkColorBlendAdvancedEXT*, void> (vulkan.PFN_vkCmdSetColorBlendAdvancedEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetColorBlendAdvancedEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkColorBlendAdvancedEXT*, void> from) => new vulkan.PFN_vkCmdSetColorBlendAdvancedEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetColorBlendAdvancedEXT left, PFN_vkCmdSetColorBlendAdvancedEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetColorBlendAdvancedEXT left, PFN_vkCmdSetColorBlendAdvancedEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetProvokingVertexModeEXT : IEquatable<PFN_vkCmdSetProvokingVertexModeEXT>
        {
            public PFN_vkCmdSetProvokingVertexModeEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkProvokingVertexModeEXT, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkProvokingVertexModeEXT, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetProvokingVertexModeEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetProvokingVertexModeEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkProvokingVertexModeEXT, void> (vulkan.PFN_vkCmdSetProvokingVertexModeEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetProvokingVertexModeEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkProvokingVertexModeEXT, void> from) => new vulkan.PFN_vkCmdSetProvokingVertexModeEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetProvokingVertexModeEXT left, PFN_vkCmdSetProvokingVertexModeEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetProvokingVertexModeEXT left, PFN_vkCmdSetProvokingVertexModeEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetLineRasterizationModeEXT : IEquatable<PFN_vkCmdSetLineRasterizationModeEXT>
        {
            public PFN_vkCmdSetLineRasterizationModeEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkLineRasterizationModeEXT, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkLineRasterizationModeEXT, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetLineRasterizationModeEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetLineRasterizationModeEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkLineRasterizationModeEXT, void> (vulkan.PFN_vkCmdSetLineRasterizationModeEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetLineRasterizationModeEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkLineRasterizationModeEXT, void> from) => new vulkan.PFN_vkCmdSetLineRasterizationModeEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetLineRasterizationModeEXT left, PFN_vkCmdSetLineRasterizationModeEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetLineRasterizationModeEXT left, PFN_vkCmdSetLineRasterizationModeEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetLineStippleEnableEXT : IEquatable<PFN_vkCmdSetLineStippleEnableEXT>
        {
            public PFN_vkCmdSetLineStippleEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetLineStippleEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetLineStippleEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetLineStippleEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetLineStippleEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetLineStippleEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetLineStippleEnableEXT left, PFN_vkCmdSetLineStippleEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetLineStippleEnableEXT left, PFN_vkCmdSetLineStippleEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetDepthClipNegativeOneToOneEXT : IEquatable<PFN_vkCmdSetDepthClipNegativeOneToOneEXT>
        {
            public PFN_vkCmdSetDepthClipNegativeOneToOneEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetDepthClipNegativeOneToOneEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetDepthClipNegativeOneToOneEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetDepthClipNegativeOneToOneEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetDepthClipNegativeOneToOneEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetDepthClipNegativeOneToOneEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetDepthClipNegativeOneToOneEXT left, PFN_vkCmdSetDepthClipNegativeOneToOneEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetDepthClipNegativeOneToOneEXT left, PFN_vkCmdSetDepthClipNegativeOneToOneEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetViewportWScalingEnableNV : IEquatable<PFN_vkCmdSetViewportWScalingEnableNV>
        {
            public PFN_vkCmdSetViewportWScalingEnableNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetViewportWScalingEnableNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetViewportWScalingEnableNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetViewportWScalingEnableNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetViewportWScalingEnableNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetViewportWScalingEnableNV(from);
            
            public static bool operator ==(PFN_vkCmdSetViewportWScalingEnableNV left, PFN_vkCmdSetViewportWScalingEnableNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetViewportWScalingEnableNV left, PFN_vkCmdSetViewportWScalingEnableNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetViewportSwizzleNV : IEquatable<PFN_vkCmdSetViewportSwizzleNV>
        {
            public PFN_vkCmdSetViewportSwizzleNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkViewportSwizzleNV*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkViewportSwizzleNV*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetViewportSwizzleNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetViewportSwizzleNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkViewportSwizzleNV*, void> (vulkan.PFN_vkCmdSetViewportSwizzleNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetViewportSwizzleNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, vulkan.VkViewportSwizzleNV*, void> from) => new vulkan.PFN_vkCmdSetViewportSwizzleNV(from);
            
            public static bool operator ==(PFN_vkCmdSetViewportSwizzleNV left, PFN_vkCmdSetViewportSwizzleNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetViewportSwizzleNV left, PFN_vkCmdSetViewportSwizzleNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetCoverageToColorEnableNV : IEquatable<PFN_vkCmdSetCoverageToColorEnableNV>
        {
            public PFN_vkCmdSetCoverageToColorEnableNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetCoverageToColorEnableNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetCoverageToColorEnableNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetCoverageToColorEnableNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetCoverageToColorEnableNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetCoverageToColorEnableNV(from);
            
            public static bool operator ==(PFN_vkCmdSetCoverageToColorEnableNV left, PFN_vkCmdSetCoverageToColorEnableNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetCoverageToColorEnableNV left, PFN_vkCmdSetCoverageToColorEnableNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetCoverageToColorLocationNV : IEquatable<PFN_vkCmdSetCoverageToColorLocationNV>
        {
            public PFN_vkCmdSetCoverageToColorLocationNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetCoverageToColorLocationNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetCoverageToColorLocationNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> (vulkan.PFN_vkCmdSetCoverageToColorLocationNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetCoverageToColorLocationNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> from) => new vulkan.PFN_vkCmdSetCoverageToColorLocationNV(from);
            
            public static bool operator ==(PFN_vkCmdSetCoverageToColorLocationNV left, PFN_vkCmdSetCoverageToColorLocationNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetCoverageToColorLocationNV left, PFN_vkCmdSetCoverageToColorLocationNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetCoverageModulationModeNV : IEquatable<PFN_vkCmdSetCoverageModulationModeNV>
        {
            public PFN_vkCmdSetCoverageModulationModeNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCoverageModulationModeNV, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCoverageModulationModeNV, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetCoverageModulationModeNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetCoverageModulationModeNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCoverageModulationModeNV, void> (vulkan.PFN_vkCmdSetCoverageModulationModeNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetCoverageModulationModeNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCoverageModulationModeNV, void> from) => new vulkan.PFN_vkCmdSetCoverageModulationModeNV(from);
            
            public static bool operator ==(PFN_vkCmdSetCoverageModulationModeNV left, PFN_vkCmdSetCoverageModulationModeNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetCoverageModulationModeNV left, PFN_vkCmdSetCoverageModulationModeNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetCoverageModulationTableEnableNV : IEquatable<PFN_vkCmdSetCoverageModulationTableEnableNV>
        {
            public PFN_vkCmdSetCoverageModulationTableEnableNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetCoverageModulationTableEnableNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetCoverageModulationTableEnableNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetCoverageModulationTableEnableNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetCoverageModulationTableEnableNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetCoverageModulationTableEnableNV(from);
            
            public static bool operator ==(PFN_vkCmdSetCoverageModulationTableEnableNV left, PFN_vkCmdSetCoverageModulationTableEnableNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetCoverageModulationTableEnableNV left, PFN_vkCmdSetCoverageModulationTableEnableNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetCoverageModulationTableNV : IEquatable<PFN_vkCmdSetCoverageModulationTableNV>
        {
            public PFN_vkCmdSetCoverageModulationTableNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, float*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, float*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetCoverageModulationTableNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetCoverageModulationTableNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, float*, void> (vulkan.PFN_vkCmdSetCoverageModulationTableNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetCoverageModulationTableNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, float*, void> from) => new vulkan.PFN_vkCmdSetCoverageModulationTableNV(from);
            
            public static bool operator ==(PFN_vkCmdSetCoverageModulationTableNV left, PFN_vkCmdSetCoverageModulationTableNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetCoverageModulationTableNV left, PFN_vkCmdSetCoverageModulationTableNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetShadingRateImageEnableNV : IEquatable<PFN_vkCmdSetShadingRateImageEnableNV>
        {
            public PFN_vkCmdSetShadingRateImageEnableNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetShadingRateImageEnableNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetShadingRateImageEnableNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetShadingRateImageEnableNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetShadingRateImageEnableNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetShadingRateImageEnableNV(from);
            
            public static bool operator ==(PFN_vkCmdSetShadingRateImageEnableNV left, PFN_vkCmdSetShadingRateImageEnableNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetShadingRateImageEnableNV left, PFN_vkCmdSetShadingRateImageEnableNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetRepresentativeFragmentTestEnableNV : IEquatable<PFN_vkCmdSetRepresentativeFragmentTestEnableNV>
        {
            public PFN_vkCmdSetRepresentativeFragmentTestEnableNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetRepresentativeFragmentTestEnableNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetRepresentativeFragmentTestEnableNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> (vulkan.PFN_vkCmdSetRepresentativeFragmentTestEnableNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetRepresentativeFragmentTestEnableNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBool32, void> from) => new vulkan.PFN_vkCmdSetRepresentativeFragmentTestEnableNV(from);
            
            public static bool operator ==(PFN_vkCmdSetRepresentativeFragmentTestEnableNV left, PFN_vkCmdSetRepresentativeFragmentTestEnableNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetRepresentativeFragmentTestEnableNV left, PFN_vkCmdSetRepresentativeFragmentTestEnableNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetCoverageReductionModeNV : IEquatable<PFN_vkCmdSetCoverageReductionModeNV>
        {
            public PFN_vkCmdSetCoverageReductionModeNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCoverageReductionModeNV, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCoverageReductionModeNV, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetCoverageReductionModeNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetCoverageReductionModeNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCoverageReductionModeNV, void> (vulkan.PFN_vkCmdSetCoverageReductionModeNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetCoverageReductionModeNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCoverageReductionModeNV, void> from) => new vulkan.PFN_vkCmdSetCoverageReductionModeNV(from);
            
            public static bool operator ==(PFN_vkCmdSetCoverageReductionModeNV left, PFN_vkCmdSetCoverageReductionModeNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetCoverageReductionModeNV left, PFN_vkCmdSetCoverageReductionModeNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetShaderModuleIdentifierEXT : IEquatable<PFN_vkGetShaderModuleIdentifierEXT>
        {
            public PFN_vkGetShaderModuleIdentifierEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderModule, vulkan.VkShaderModuleIdentifierEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderModule, vulkan.VkShaderModuleIdentifierEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetShaderModuleIdentifierEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetShaderModuleIdentifierEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderModule, vulkan.VkShaderModuleIdentifierEXT*, void> (vulkan.PFN_vkGetShaderModuleIdentifierEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetShaderModuleIdentifierEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderModule, vulkan.VkShaderModuleIdentifierEXT*, void> from) => new vulkan.PFN_vkGetShaderModuleIdentifierEXT(from);
            
            public static bool operator ==(PFN_vkGetShaderModuleIdentifierEXT left, PFN_vkGetShaderModuleIdentifierEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetShaderModuleIdentifierEXT left, PFN_vkGetShaderModuleIdentifierEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetShaderModuleCreateInfoIdentifierEXT : IEquatable<PFN_vkGetShaderModuleCreateInfoIdentifierEXT>
        {
            public PFN_vkGetShaderModuleCreateInfoIdentifierEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderModuleCreateInfo*, vulkan.VkShaderModuleIdentifierEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderModuleCreateInfo*, vulkan.VkShaderModuleIdentifierEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetShaderModuleCreateInfoIdentifierEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetShaderModuleCreateInfoIdentifierEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderModuleCreateInfo*, vulkan.VkShaderModuleIdentifierEXT*, void> (vulkan.PFN_vkGetShaderModuleCreateInfoIdentifierEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetShaderModuleCreateInfoIdentifierEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderModuleCreateInfo*, vulkan.VkShaderModuleIdentifierEXT*, void> from) => new vulkan.PFN_vkGetShaderModuleCreateInfoIdentifierEXT(from);
            
            public static bool operator ==(PFN_vkGetShaderModuleCreateInfoIdentifierEXT left, PFN_vkGetShaderModuleCreateInfoIdentifierEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetShaderModuleCreateInfoIdentifierEXT left, PFN_vkGetShaderModuleCreateInfoIdentifierEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkOpticalFlowSessionNV : IEquatable<VkOpticalFlowSessionNV>
        {
            public VkOpticalFlowSessionNV(vulkan.VkOpticalFlowSessionNV_T value) => this.Value = value;
            
            public vulkan.VkOpticalFlowSessionNV_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkOpticalFlowSessionNV other && Equals(other);
            
            public bool Equals(VkOpticalFlowSessionNV other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkOpticalFlowSessionNV_T (vulkan.VkOpticalFlowSessionNV from) => from.Value;
            
            public static implicit operator vulkan.VkOpticalFlowSessionNV (vulkan.VkOpticalFlowSessionNV_T from) => new vulkan.VkOpticalFlowSessionNV(from);
            
            public static bool operator ==(VkOpticalFlowSessionNV left, VkOpticalFlowSessionNV right) => left.Equals(right);
            
            public static bool operator !=(VkOpticalFlowSessionNV left, VkOpticalFlowSessionNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV : IEquatable<PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV>
        {
            public PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkOpticalFlowImageFormatInfoNV*, uint*, vulkan.VkOpticalFlowImageFormatPropertiesNV*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkOpticalFlowImageFormatInfoNV*, uint*, vulkan.VkOpticalFlowImageFormatPropertiesNV*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkOpticalFlowImageFormatInfoNV*, uint*, vulkan.VkOpticalFlowImageFormatPropertiesNV*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkOpticalFlowImageFormatInfoNV*, uint*, vulkan.VkOpticalFlowImageFormatPropertiesNV*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV left, PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV left, PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateOpticalFlowSessionNV : IEquatable<PFN_vkCreateOpticalFlowSessionNV>
        {
            public PFN_vkCreateOpticalFlowSessionNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkOpticalFlowSessionCreateInfoNV*, vulkan.VkAllocationCallbacks*, vulkan.VkOpticalFlowSessionNV*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkOpticalFlowSessionCreateInfoNV*, vulkan.VkAllocationCallbacks*, vulkan.VkOpticalFlowSessionNV*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateOpticalFlowSessionNV other && Equals(other);
            
            public bool Equals(PFN_vkCreateOpticalFlowSessionNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkOpticalFlowSessionCreateInfoNV*, vulkan.VkAllocationCallbacks*, vulkan.VkOpticalFlowSessionNV*, vulkan.VkResult> (vulkan.PFN_vkCreateOpticalFlowSessionNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateOpticalFlowSessionNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkOpticalFlowSessionCreateInfoNV*, vulkan.VkAllocationCallbacks*, vulkan.VkOpticalFlowSessionNV*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateOpticalFlowSessionNV(from);
            
            public static bool operator ==(PFN_vkCreateOpticalFlowSessionNV left, PFN_vkCreateOpticalFlowSessionNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateOpticalFlowSessionNV left, PFN_vkCreateOpticalFlowSessionNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyOpticalFlowSessionNV : IEquatable<PFN_vkDestroyOpticalFlowSessionNV>
        {
            public PFN_vkDestroyOpticalFlowSessionNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkOpticalFlowSessionNV, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkOpticalFlowSessionNV, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyOpticalFlowSessionNV other && Equals(other);
            
            public bool Equals(PFN_vkDestroyOpticalFlowSessionNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkOpticalFlowSessionNV, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyOpticalFlowSessionNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyOpticalFlowSessionNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkOpticalFlowSessionNV, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyOpticalFlowSessionNV(from);
            
            public static bool operator ==(PFN_vkDestroyOpticalFlowSessionNV left, PFN_vkDestroyOpticalFlowSessionNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyOpticalFlowSessionNV left, PFN_vkDestroyOpticalFlowSessionNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkBindOpticalFlowSessionImageNV : IEquatable<PFN_vkBindOpticalFlowSessionImageNV>
        {
            public PFN_vkBindOpticalFlowSessionImageNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkOpticalFlowSessionNV, vulkan.VkOpticalFlowSessionBindingPointNV, vulkan.VkImageView, vulkan.VkImageLayout, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkOpticalFlowSessionNV, vulkan.VkOpticalFlowSessionBindingPointNV, vulkan.VkImageView, vulkan.VkImageLayout, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkBindOpticalFlowSessionImageNV other && Equals(other);
            
            public bool Equals(PFN_vkBindOpticalFlowSessionImageNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkOpticalFlowSessionNV, vulkan.VkOpticalFlowSessionBindingPointNV, vulkan.VkImageView, vulkan.VkImageLayout, vulkan.VkResult> (vulkan.PFN_vkBindOpticalFlowSessionImageNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkBindOpticalFlowSessionImageNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkOpticalFlowSessionNV, vulkan.VkOpticalFlowSessionBindingPointNV, vulkan.VkImageView, vulkan.VkImageLayout, vulkan.VkResult> from) => new vulkan.PFN_vkBindOpticalFlowSessionImageNV(from);
            
            public static bool operator ==(PFN_vkBindOpticalFlowSessionImageNV left, PFN_vkBindOpticalFlowSessionImageNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkBindOpticalFlowSessionImageNV left, PFN_vkBindOpticalFlowSessionImageNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdOpticalFlowExecuteNV : IEquatable<PFN_vkCmdOpticalFlowExecuteNV>
        {
            public PFN_vkCmdOpticalFlowExecuteNV(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkOpticalFlowSessionNV, vulkan.VkOpticalFlowExecuteInfoNV*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkOpticalFlowSessionNV, vulkan.VkOpticalFlowExecuteInfoNV*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdOpticalFlowExecuteNV other && Equals(other);
            
            public bool Equals(PFN_vkCmdOpticalFlowExecuteNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkOpticalFlowSessionNV, vulkan.VkOpticalFlowExecuteInfoNV*, void> (vulkan.PFN_vkCmdOpticalFlowExecuteNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdOpticalFlowExecuteNV (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkOpticalFlowSessionNV, vulkan.VkOpticalFlowExecuteInfoNV*, void> from) => new vulkan.PFN_vkCmdOpticalFlowExecuteNV(from);
            
            public static bool operator ==(PFN_vkCmdOpticalFlowExecuteNV left, PFN_vkCmdOpticalFlowExecuteNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdOpticalFlowExecuteNV left, PFN_vkCmdOpticalFlowExecuteNV right) => !left.Equals(right);
        }
        
        public readonly partial struct VkShaderEXT : IEquatable<VkShaderEXT>
        {
            public VkShaderEXT(vulkan.VkShaderEXT_T value) => this.Value = value;
            
            public vulkan.VkShaderEXT_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkShaderEXT other && Equals(other);
            
            public bool Equals(VkShaderEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkShaderEXT_T (vulkan.VkShaderEXT from) => from.Value;
            
            public static implicit operator vulkan.VkShaderEXT (vulkan.VkShaderEXT_T from) => new vulkan.VkShaderEXT(from);
            
            public static bool operator ==(VkShaderEXT left, VkShaderEXT right) => left.Equals(right);
            
            public static bool operator !=(VkShaderEXT left, VkShaderEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct VkShaderRequiredSubgroupSizeCreateInfoEXT : IEquatable<VkShaderRequiredSubgroupSizeCreateInfoEXT>
        {
            public VkShaderRequiredSubgroupSizeCreateInfoEXT(vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo value) => this.Value = value;
            
            public vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo Value { get; }
            
            public override bool Equals(object obj) => obj is VkShaderRequiredSubgroupSizeCreateInfoEXT other && Equals(other);
            
            public bool Equals(VkShaderRequiredSubgroupSizeCreateInfoEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo (vulkan.VkShaderRequiredSubgroupSizeCreateInfoEXT from) => from.Value;
            
            public static implicit operator vulkan.VkShaderRequiredSubgroupSizeCreateInfoEXT (vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo from) => new vulkan.VkShaderRequiredSubgroupSizeCreateInfoEXT(from);
            
            public static bool operator ==(VkShaderRequiredSubgroupSizeCreateInfoEXT left, VkShaderRequiredSubgroupSizeCreateInfoEXT right) => left.Equals(right);
            
            public static bool operator !=(VkShaderRequiredSubgroupSizeCreateInfoEXT left, VkShaderRequiredSubgroupSizeCreateInfoEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateShadersEXT : IEquatable<PFN_vkCreateShadersEXT>
        {
            public PFN_vkCreateShadersEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkShaderCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkShaderEXT*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkShaderCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkShaderEXT*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateShadersEXT other && Equals(other);
            
            public bool Equals(PFN_vkCreateShadersEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkShaderCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkShaderEXT*, vulkan.VkResult> (vulkan.PFN_vkCreateShadersEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateShadersEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkShaderCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkShaderEXT*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateShadersEXT(from);
            
            public static bool operator ==(PFN_vkCreateShadersEXT left, PFN_vkCreateShadersEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateShadersEXT left, PFN_vkCreateShadersEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyShaderEXT : IEquatable<PFN_vkDestroyShaderEXT>
        {
            public PFN_vkDestroyShaderEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderEXT, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderEXT, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyShaderEXT other && Equals(other);
            
            public bool Equals(PFN_vkDestroyShaderEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderEXT, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyShaderEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyShaderEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderEXT, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyShaderEXT(from);
            
            public static bool operator ==(PFN_vkDestroyShaderEXT left, PFN_vkDestroyShaderEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyShaderEXT left, PFN_vkDestroyShaderEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetShaderBinaryDataEXT : IEquatable<PFN_vkGetShaderBinaryDataEXT>
        {
            public PFN_vkGetShaderBinaryDataEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderEXT, nuint*, void*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderEXT, nuint*, void*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetShaderBinaryDataEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetShaderBinaryDataEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderEXT, nuint*, void*, vulkan.VkResult> (vulkan.PFN_vkGetShaderBinaryDataEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetShaderBinaryDataEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkShaderEXT, nuint*, void*, vulkan.VkResult> from) => new vulkan.PFN_vkGetShaderBinaryDataEXT(from);
            
            public static bool operator ==(PFN_vkGetShaderBinaryDataEXT left, PFN_vkGetShaderBinaryDataEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetShaderBinaryDataEXT left, PFN_vkGetShaderBinaryDataEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBindShadersEXT : IEquatable<PFN_vkCmdBindShadersEXT>
        {
            public PFN_vkCmdBindShadersEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkShaderStageFlagBits*, vulkan.VkShaderEXT*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkShaderStageFlagBits*, vulkan.VkShaderEXT*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBindShadersEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdBindShadersEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkShaderStageFlagBits*, vulkan.VkShaderEXT*, void> (vulkan.PFN_vkCmdBindShadersEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBindShadersEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkShaderStageFlagBits*, vulkan.VkShaderEXT*, void> from) => new vulkan.PFN_vkCmdBindShadersEXT(from);
            
            public static bool operator ==(PFN_vkCmdBindShadersEXT left, PFN_vkCmdBindShadersEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBindShadersEXT left, PFN_vkCmdBindShadersEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetFramebufferTilePropertiesQCOM : IEquatable<PFN_vkGetFramebufferTilePropertiesQCOM>
        {
            public PFN_vkGetFramebufferTilePropertiesQCOM(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFramebuffer, uint*, vulkan.VkTilePropertiesQCOM*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFramebuffer, uint*, vulkan.VkTilePropertiesQCOM*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetFramebufferTilePropertiesQCOM other && Equals(other);
            
            public bool Equals(PFN_vkGetFramebufferTilePropertiesQCOM other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFramebuffer, uint*, vulkan.VkTilePropertiesQCOM*, vulkan.VkResult> (vulkan.PFN_vkGetFramebufferTilePropertiesQCOM from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetFramebufferTilePropertiesQCOM (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFramebuffer, uint*, vulkan.VkTilePropertiesQCOM*, vulkan.VkResult> from) => new vulkan.PFN_vkGetFramebufferTilePropertiesQCOM(from);
            
            public static bool operator ==(PFN_vkGetFramebufferTilePropertiesQCOM left, PFN_vkGetFramebufferTilePropertiesQCOM right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetFramebufferTilePropertiesQCOM left, PFN_vkGetFramebufferTilePropertiesQCOM right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDynamicRenderingTilePropertiesQCOM : IEquatable<PFN_vkGetDynamicRenderingTilePropertiesQCOM>
        {
            public PFN_vkGetDynamicRenderingTilePropertiesQCOM(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderingInfo*, vulkan.VkTilePropertiesQCOM*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderingInfo*, vulkan.VkTilePropertiesQCOM*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDynamicRenderingTilePropertiesQCOM other && Equals(other);
            
            public bool Equals(PFN_vkGetDynamicRenderingTilePropertiesQCOM other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderingInfo*, vulkan.VkTilePropertiesQCOM*, vulkan.VkResult> (vulkan.PFN_vkGetDynamicRenderingTilePropertiesQCOM from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDynamicRenderingTilePropertiesQCOM (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkRenderingInfo*, vulkan.VkTilePropertiesQCOM*, vulkan.VkResult> from) => new vulkan.PFN_vkGetDynamicRenderingTilePropertiesQCOM(from);
            
            public static bool operator ==(PFN_vkGetDynamicRenderingTilePropertiesQCOM left, PFN_vkGetDynamicRenderingTilePropertiesQCOM right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDynamicRenderingTilePropertiesQCOM left, PFN_vkGetDynamicRenderingTilePropertiesQCOM right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT : IEquatable<PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT>
        {
            public PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImageAspectFlags, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImageAspectFlags, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImageAspectFlags, void> (vulkan.PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkImageAspectFlags, void> from) => new vulkan.PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT(from);
            
            public static bool operator ==(PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT left, PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT left, PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateAccelerationStructureKHR : IEquatable<PFN_vkCreateAccelerationStructureKHR>
        {
            public PFN_vkCreateAccelerationStructureKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkAccelerationStructureKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkAccelerationStructureKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateAccelerationStructureKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateAccelerationStructureKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkAccelerationStructureKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateAccelerationStructureKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateAccelerationStructureKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkAccelerationStructureKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateAccelerationStructureKHR(from);
            
            public static bool operator ==(PFN_vkCreateAccelerationStructureKHR left, PFN_vkCreateAccelerationStructureKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateAccelerationStructureKHR left, PFN_vkCreateAccelerationStructureKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkDestroyAccelerationStructureKHR : IEquatable<PFN_vkDestroyAccelerationStructureKHR>
        {
            public PFN_vkDestroyAccelerationStructureKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureKHR, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureKHR, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyAccelerationStructureKHR other && Equals(other);
            
            public bool Equals(PFN_vkDestroyAccelerationStructureKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureKHR, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyAccelerationStructureKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyAccelerationStructureKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureKHR, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyAccelerationStructureKHR(from);
            
            public static bool operator ==(PFN_vkDestroyAccelerationStructureKHR left, PFN_vkDestroyAccelerationStructureKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyAccelerationStructureKHR left, PFN_vkDestroyAccelerationStructureKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBuildAccelerationStructuresKHR : IEquatable<PFN_vkCmdBuildAccelerationStructuresKHR>
        {
            public PFN_vkCmdBuildAccelerationStructuresKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkAccelerationStructureBuildGeometryInfoKHR*, vulkan.VkAccelerationStructureBuildRangeInfoKHR**, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkAccelerationStructureBuildGeometryInfoKHR*, vulkan.VkAccelerationStructureBuildRangeInfoKHR**, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBuildAccelerationStructuresKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdBuildAccelerationStructuresKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkAccelerationStructureBuildGeometryInfoKHR*, vulkan.VkAccelerationStructureBuildRangeInfoKHR**, void> (vulkan.PFN_vkCmdBuildAccelerationStructuresKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBuildAccelerationStructuresKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkAccelerationStructureBuildGeometryInfoKHR*, vulkan.VkAccelerationStructureBuildRangeInfoKHR**, void> from) => new vulkan.PFN_vkCmdBuildAccelerationStructuresKHR(from);
            
            public static bool operator ==(PFN_vkCmdBuildAccelerationStructuresKHR left, PFN_vkCmdBuildAccelerationStructuresKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBuildAccelerationStructuresKHR left, PFN_vkCmdBuildAccelerationStructuresKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdBuildAccelerationStructuresIndirectKHR : IEquatable<PFN_vkCmdBuildAccelerationStructuresIndirectKHR>
        {
            public PFN_vkCmdBuildAccelerationStructuresIndirectKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkAccelerationStructureBuildGeometryInfoKHR*, vulkan.VkDeviceAddress*, uint*, uint**, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkAccelerationStructureBuildGeometryInfoKHR*, vulkan.VkDeviceAddress*, uint*, uint**, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdBuildAccelerationStructuresIndirectKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdBuildAccelerationStructuresIndirectKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkAccelerationStructureBuildGeometryInfoKHR*, vulkan.VkDeviceAddress*, uint*, uint**, void> (vulkan.PFN_vkCmdBuildAccelerationStructuresIndirectKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdBuildAccelerationStructuresIndirectKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkAccelerationStructureBuildGeometryInfoKHR*, vulkan.VkDeviceAddress*, uint*, uint**, void> from) => new vulkan.PFN_vkCmdBuildAccelerationStructuresIndirectKHR(from);
            
            public static bool operator ==(PFN_vkCmdBuildAccelerationStructuresIndirectKHR left, PFN_vkCmdBuildAccelerationStructuresIndirectKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdBuildAccelerationStructuresIndirectKHR left, PFN_vkCmdBuildAccelerationStructuresIndirectKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkBuildAccelerationStructuresKHR : IEquatable<PFN_vkBuildAccelerationStructuresKHR>
        {
            public PFN_vkBuildAccelerationStructuresKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, uint, vulkan.VkAccelerationStructureBuildGeometryInfoKHR*, vulkan.VkAccelerationStructureBuildRangeInfoKHR**, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, uint, vulkan.VkAccelerationStructureBuildGeometryInfoKHR*, vulkan.VkAccelerationStructureBuildRangeInfoKHR**, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkBuildAccelerationStructuresKHR other && Equals(other);
            
            public bool Equals(PFN_vkBuildAccelerationStructuresKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, uint, vulkan.VkAccelerationStructureBuildGeometryInfoKHR*, vulkan.VkAccelerationStructureBuildRangeInfoKHR**, vulkan.VkResult> (vulkan.PFN_vkBuildAccelerationStructuresKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkBuildAccelerationStructuresKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, uint, vulkan.VkAccelerationStructureBuildGeometryInfoKHR*, vulkan.VkAccelerationStructureBuildRangeInfoKHR**, vulkan.VkResult> from) => new vulkan.PFN_vkBuildAccelerationStructuresKHR(from);
            
            public static bool operator ==(PFN_vkBuildAccelerationStructuresKHR left, PFN_vkBuildAccelerationStructuresKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkBuildAccelerationStructuresKHR left, PFN_vkBuildAccelerationStructuresKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCopyAccelerationStructureKHR : IEquatable<PFN_vkCopyAccelerationStructureKHR>
        {
            public PFN_vkCopyAccelerationStructureKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyAccelerationStructureInfoKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyAccelerationStructureInfoKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCopyAccelerationStructureKHR other && Equals(other);
            
            public bool Equals(PFN_vkCopyAccelerationStructureKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyAccelerationStructureInfoKHR*, vulkan.VkResult> (vulkan.PFN_vkCopyAccelerationStructureKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCopyAccelerationStructureKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyAccelerationStructureInfoKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCopyAccelerationStructureKHR(from);
            
            public static bool operator ==(PFN_vkCopyAccelerationStructureKHR left, PFN_vkCopyAccelerationStructureKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCopyAccelerationStructureKHR left, PFN_vkCopyAccelerationStructureKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCopyAccelerationStructureToMemoryKHR : IEquatable<PFN_vkCopyAccelerationStructureToMemoryKHR>
        {
            public PFN_vkCopyAccelerationStructureToMemoryKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyAccelerationStructureToMemoryInfoKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyAccelerationStructureToMemoryInfoKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCopyAccelerationStructureToMemoryKHR other && Equals(other);
            
            public bool Equals(PFN_vkCopyAccelerationStructureToMemoryKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyAccelerationStructureToMemoryInfoKHR*, vulkan.VkResult> (vulkan.PFN_vkCopyAccelerationStructureToMemoryKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCopyAccelerationStructureToMemoryKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyAccelerationStructureToMemoryInfoKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCopyAccelerationStructureToMemoryKHR(from);
            
            public static bool operator ==(PFN_vkCopyAccelerationStructureToMemoryKHR left, PFN_vkCopyAccelerationStructureToMemoryKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCopyAccelerationStructureToMemoryKHR left, PFN_vkCopyAccelerationStructureToMemoryKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCopyMemoryToAccelerationStructureKHR : IEquatable<PFN_vkCopyMemoryToAccelerationStructureKHR>
        {
            public PFN_vkCopyMemoryToAccelerationStructureKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyMemoryToAccelerationStructureInfoKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyMemoryToAccelerationStructureInfoKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCopyMemoryToAccelerationStructureKHR other && Equals(other);
            
            public bool Equals(PFN_vkCopyMemoryToAccelerationStructureKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyMemoryToAccelerationStructureInfoKHR*, vulkan.VkResult> (vulkan.PFN_vkCopyMemoryToAccelerationStructureKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCopyMemoryToAccelerationStructureKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkCopyMemoryToAccelerationStructureInfoKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCopyMemoryToAccelerationStructureKHR(from);
            
            public static bool operator ==(PFN_vkCopyMemoryToAccelerationStructureKHR left, PFN_vkCopyMemoryToAccelerationStructureKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCopyMemoryToAccelerationStructureKHR left, PFN_vkCopyMemoryToAccelerationStructureKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkWriteAccelerationStructuresPropertiesKHR : IEquatable<PFN_vkWriteAccelerationStructuresPropertiesKHR>
        {
            public PFN_vkWriteAccelerationStructuresPropertiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkAccelerationStructureKHR*, vulkan.VkQueryType, nuint, void*, nuint, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkAccelerationStructureKHR*, vulkan.VkQueryType, nuint, void*, nuint, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkWriteAccelerationStructuresPropertiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkWriteAccelerationStructuresPropertiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkAccelerationStructureKHR*, vulkan.VkQueryType, nuint, void*, nuint, vulkan.VkResult> (vulkan.PFN_vkWriteAccelerationStructuresPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkWriteAccelerationStructuresPropertiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, uint, vulkan.VkAccelerationStructureKHR*, vulkan.VkQueryType, nuint, void*, nuint, vulkan.VkResult> from) => new vulkan.PFN_vkWriteAccelerationStructuresPropertiesKHR(from);
            
            public static bool operator ==(PFN_vkWriteAccelerationStructuresPropertiesKHR left, PFN_vkWriteAccelerationStructuresPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkWriteAccelerationStructuresPropertiesKHR left, PFN_vkWriteAccelerationStructuresPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyAccelerationStructureKHR : IEquatable<PFN_vkCmdCopyAccelerationStructureKHR>
        {
            public PFN_vkCmdCopyAccelerationStructureKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyAccelerationStructureInfoKHR*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyAccelerationStructureInfoKHR*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyAccelerationStructureKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyAccelerationStructureKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyAccelerationStructureInfoKHR*, void> (vulkan.PFN_vkCmdCopyAccelerationStructureKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyAccelerationStructureKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyAccelerationStructureInfoKHR*, void> from) => new vulkan.PFN_vkCmdCopyAccelerationStructureKHR(from);
            
            public static bool operator ==(PFN_vkCmdCopyAccelerationStructureKHR left, PFN_vkCmdCopyAccelerationStructureKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyAccelerationStructureKHR left, PFN_vkCmdCopyAccelerationStructureKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyAccelerationStructureToMemoryKHR : IEquatable<PFN_vkCmdCopyAccelerationStructureToMemoryKHR>
        {
            public PFN_vkCmdCopyAccelerationStructureToMemoryKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyAccelerationStructureToMemoryInfoKHR*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyAccelerationStructureToMemoryInfoKHR*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyAccelerationStructureToMemoryKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyAccelerationStructureToMemoryKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyAccelerationStructureToMemoryInfoKHR*, void> (vulkan.PFN_vkCmdCopyAccelerationStructureToMemoryKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyAccelerationStructureToMemoryKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyAccelerationStructureToMemoryInfoKHR*, void> from) => new vulkan.PFN_vkCmdCopyAccelerationStructureToMemoryKHR(from);
            
            public static bool operator ==(PFN_vkCmdCopyAccelerationStructureToMemoryKHR left, PFN_vkCmdCopyAccelerationStructureToMemoryKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyAccelerationStructureToMemoryKHR left, PFN_vkCmdCopyAccelerationStructureToMemoryKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdCopyMemoryToAccelerationStructureKHR : IEquatable<PFN_vkCmdCopyMemoryToAccelerationStructureKHR>
        {
            public PFN_vkCmdCopyMemoryToAccelerationStructureKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyMemoryToAccelerationStructureInfoKHR*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyMemoryToAccelerationStructureInfoKHR*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdCopyMemoryToAccelerationStructureKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdCopyMemoryToAccelerationStructureKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyMemoryToAccelerationStructureInfoKHR*, void> (vulkan.PFN_vkCmdCopyMemoryToAccelerationStructureKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdCopyMemoryToAccelerationStructureKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkCopyMemoryToAccelerationStructureInfoKHR*, void> from) => new vulkan.PFN_vkCmdCopyMemoryToAccelerationStructureKHR(from);
            
            public static bool operator ==(PFN_vkCmdCopyMemoryToAccelerationStructureKHR left, PFN_vkCmdCopyMemoryToAccelerationStructureKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdCopyMemoryToAccelerationStructureKHR left, PFN_vkCmdCopyMemoryToAccelerationStructureKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetAccelerationStructureDeviceAddressKHR : IEquatable<PFN_vkGetAccelerationStructureDeviceAddressKHR>
        {
            public PFN_vkGetAccelerationStructureDeviceAddressKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureDeviceAddressInfoKHR*, vulkan.VkDeviceAddress> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureDeviceAddressInfoKHR*, vulkan.VkDeviceAddress> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetAccelerationStructureDeviceAddressKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetAccelerationStructureDeviceAddressKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureDeviceAddressInfoKHR*, vulkan.VkDeviceAddress> (vulkan.PFN_vkGetAccelerationStructureDeviceAddressKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetAccelerationStructureDeviceAddressKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureDeviceAddressInfoKHR*, vulkan.VkDeviceAddress> from) => new vulkan.PFN_vkGetAccelerationStructureDeviceAddressKHR(from);
            
            public static bool operator ==(PFN_vkGetAccelerationStructureDeviceAddressKHR left, PFN_vkGetAccelerationStructureDeviceAddressKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetAccelerationStructureDeviceAddressKHR left, PFN_vkGetAccelerationStructureDeviceAddressKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdWriteAccelerationStructuresPropertiesKHR : IEquatable<PFN_vkCmdWriteAccelerationStructuresPropertiesKHR>
        {
            public PFN_vkCmdWriteAccelerationStructuresPropertiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkAccelerationStructureKHR*, vulkan.VkQueryType, vulkan.VkQueryPool, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkAccelerationStructureKHR*, vulkan.VkQueryType, vulkan.VkQueryPool, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdWriteAccelerationStructuresPropertiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdWriteAccelerationStructuresPropertiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkAccelerationStructureKHR*, vulkan.VkQueryType, vulkan.VkQueryPool, uint, void> (vulkan.PFN_vkCmdWriteAccelerationStructuresPropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdWriteAccelerationStructuresPropertiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, vulkan.VkAccelerationStructureKHR*, vulkan.VkQueryType, vulkan.VkQueryPool, uint, void> from) => new vulkan.PFN_vkCmdWriteAccelerationStructuresPropertiesKHR(from);
            
            public static bool operator ==(PFN_vkCmdWriteAccelerationStructuresPropertiesKHR left, PFN_vkCmdWriteAccelerationStructuresPropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdWriteAccelerationStructuresPropertiesKHR left, PFN_vkCmdWriteAccelerationStructuresPropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceAccelerationStructureCompatibilityKHR : IEquatable<PFN_vkGetDeviceAccelerationStructureCompatibilityKHR>
        {
            public PFN_vkGetDeviceAccelerationStructureCompatibilityKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureVersionInfoKHR*, vulkan.VkAccelerationStructureCompatibilityKHR*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureVersionInfoKHR*, vulkan.VkAccelerationStructureCompatibilityKHR*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceAccelerationStructureCompatibilityKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceAccelerationStructureCompatibilityKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureVersionInfoKHR*, vulkan.VkAccelerationStructureCompatibilityKHR*, void> (vulkan.PFN_vkGetDeviceAccelerationStructureCompatibilityKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceAccelerationStructureCompatibilityKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureVersionInfoKHR*, vulkan.VkAccelerationStructureCompatibilityKHR*, void> from) => new vulkan.PFN_vkGetDeviceAccelerationStructureCompatibilityKHR(from);
            
            public static bool operator ==(PFN_vkGetDeviceAccelerationStructureCompatibilityKHR left, PFN_vkGetDeviceAccelerationStructureCompatibilityKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceAccelerationStructureCompatibilityKHR left, PFN_vkGetDeviceAccelerationStructureCompatibilityKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetAccelerationStructureBuildSizesKHR : IEquatable<PFN_vkGetAccelerationStructureBuildSizesKHR>
        {
            public PFN_vkGetAccelerationStructureBuildSizesKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureBuildTypeKHR, vulkan.VkAccelerationStructureBuildGeometryInfoKHR*, uint*, vulkan.VkAccelerationStructureBuildSizesInfoKHR*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureBuildTypeKHR, vulkan.VkAccelerationStructureBuildGeometryInfoKHR*, uint*, vulkan.VkAccelerationStructureBuildSizesInfoKHR*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetAccelerationStructureBuildSizesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetAccelerationStructureBuildSizesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureBuildTypeKHR, vulkan.VkAccelerationStructureBuildGeometryInfoKHR*, uint*, vulkan.VkAccelerationStructureBuildSizesInfoKHR*, void> (vulkan.PFN_vkGetAccelerationStructureBuildSizesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetAccelerationStructureBuildSizesKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkAccelerationStructureBuildTypeKHR, vulkan.VkAccelerationStructureBuildGeometryInfoKHR*, uint*, vulkan.VkAccelerationStructureBuildSizesInfoKHR*, void> from) => new vulkan.PFN_vkGetAccelerationStructureBuildSizesKHR(from);
            
            public static bool operator ==(PFN_vkGetAccelerationStructureBuildSizesKHR left, PFN_vkGetAccelerationStructureBuildSizesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetAccelerationStructureBuildSizesKHR left, PFN_vkGetAccelerationStructureBuildSizesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdTraceRaysKHR : IEquatable<PFN_vkCmdTraceRaysKHR>
        {
            public PFN_vkCmdTraceRaysKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdTraceRaysKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdTraceRaysKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void> (vulkan.PFN_vkCmdTraceRaysKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdTraceRaysKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void> from) => new vulkan.PFN_vkCmdTraceRaysKHR(from);
            
            public static bool operator ==(PFN_vkCmdTraceRaysKHR left, PFN_vkCmdTraceRaysKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdTraceRaysKHR left, PFN_vkCmdTraceRaysKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateRayTracingPipelinesKHR : IEquatable<PFN_vkCreateRayTracingPipelinesKHR>
        {
            public PFN_vkCreateRayTracingPipelinesKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkPipelineCache, uint, vulkan.VkRayTracingPipelineCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkPipeline*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkPipelineCache, uint, vulkan.VkRayTracingPipelineCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkPipeline*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateRayTracingPipelinesKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateRayTracingPipelinesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkPipelineCache, uint, vulkan.VkRayTracingPipelineCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkPipeline*, vulkan.VkResult> (vulkan.PFN_vkCreateRayTracingPipelinesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateRayTracingPipelinesKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeferredOperationKHR, vulkan.VkPipelineCache, uint, vulkan.VkRayTracingPipelineCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkPipeline*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateRayTracingPipelinesKHR(from);
            
            public static bool operator ==(PFN_vkCreateRayTracingPipelinesKHR left, PFN_vkCreateRayTracingPipelinesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateRayTracingPipelinesKHR left, PFN_vkCreateRayTracingPipelinesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR : IEquatable<PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR>
        {
            public PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, uint, nuint, void*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, uint, nuint, void*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, uint, nuint, void*, vulkan.VkResult> (vulkan.PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, uint, nuint, void*, vulkan.VkResult> from) => new vulkan.PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(from);
            
            public static bool operator ==(PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR left, PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR left, PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdTraceRaysIndirectKHR : IEquatable<PFN_vkCmdTraceRaysIndirectKHR>
        {
            public PFN_vkCmdTraceRaysIndirectKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkDeviceAddress, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkDeviceAddress, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdTraceRaysIndirectKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdTraceRaysIndirectKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkDeviceAddress, void> (vulkan.PFN_vkCmdTraceRaysIndirectKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdTraceRaysIndirectKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkStridedDeviceAddressRegionKHR*, vulkan.VkDeviceAddress, void> from) => new vulkan.PFN_vkCmdTraceRaysIndirectKHR(from);
            
            public static bool operator ==(PFN_vkCmdTraceRaysIndirectKHR left, PFN_vkCmdTraceRaysIndirectKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdTraceRaysIndirectKHR left, PFN_vkCmdTraceRaysIndirectKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetRayTracingShaderGroupStackSizeKHR : IEquatable<PFN_vkGetRayTracingShaderGroupStackSizeKHR>
        {
            public PFN_vkGetRayTracingShaderGroupStackSizeKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, vulkan.VkShaderGroupShaderKHR, vulkan.VkDeviceSize> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, vulkan.VkShaderGroupShaderKHR, vulkan.VkDeviceSize> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetRayTracingShaderGroupStackSizeKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetRayTracingShaderGroupStackSizeKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, vulkan.VkShaderGroupShaderKHR, vulkan.VkDeviceSize> (vulkan.PFN_vkGetRayTracingShaderGroupStackSizeKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetRayTracingShaderGroupStackSizeKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPipeline, uint, vulkan.VkShaderGroupShaderKHR, vulkan.VkDeviceSize> from) => new vulkan.PFN_vkGetRayTracingShaderGroupStackSizeKHR(from);
            
            public static bool operator ==(PFN_vkGetRayTracingShaderGroupStackSizeKHR left, PFN_vkGetRayTracingShaderGroupStackSizeKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetRayTracingShaderGroupStackSizeKHR left, PFN_vkGetRayTracingShaderGroupStackSizeKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdSetRayTracingPipelineStackSizeKHR : IEquatable<PFN_vkCmdSetRayTracingPipelineStackSizeKHR>
        {
            public PFN_vkCmdSetRayTracingPipelineStackSizeKHR(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdSetRayTracingPipelineStackSizeKHR other && Equals(other);
            
            public bool Equals(PFN_vkCmdSetRayTracingPipelineStackSizeKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> (vulkan.PFN_vkCmdSetRayTracingPipelineStackSizeKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdSetRayTracingPipelineStackSizeKHR (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, void> from) => new vulkan.PFN_vkCmdSetRayTracingPipelineStackSizeKHR(from);
            
            public static bool operator ==(PFN_vkCmdSetRayTracingPipelineStackSizeKHR left, PFN_vkCmdSetRayTracingPipelineStackSizeKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdSetRayTracingPipelineStackSizeKHR left, PFN_vkCmdSetRayTracingPipelineStackSizeKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawMeshTasksEXT : IEquatable<PFN_vkCmdDrawMeshTasksEXT>
        {
            public PFN_vkCmdDrawMeshTasksEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawMeshTasksEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawMeshTasksEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, void> (vulkan.PFN_vkCmdDrawMeshTasksEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawMeshTasksEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, uint, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawMeshTasksEXT(from);
            
            public static bool operator ==(PFN_vkCmdDrawMeshTasksEXT left, PFN_vkCmdDrawMeshTasksEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawMeshTasksEXT left, PFN_vkCmdDrawMeshTasksEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawMeshTasksIndirectEXT : IEquatable<PFN_vkCmdDrawMeshTasksIndirectEXT>
        {
            public PFN_vkCmdDrawMeshTasksIndirectEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawMeshTasksIndirectEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawMeshTasksIndirectEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> (vulkan.PFN_vkCmdDrawMeshTasksIndirectEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawMeshTasksIndirectEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawMeshTasksIndirectEXT(from);
            
            public static bool operator ==(PFN_vkCmdDrawMeshTasksIndirectEXT left, PFN_vkCmdDrawMeshTasksIndirectEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawMeshTasksIndirectEXT left, PFN_vkCmdDrawMeshTasksIndirectEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCmdDrawMeshTasksIndirectCountEXT : IEquatable<PFN_vkCmdDrawMeshTasksIndirectCountEXT>
        {
            public PFN_vkCmdDrawMeshTasksIndirectCountEXT(delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCmdDrawMeshTasksIndirectCountEXT other && Equals(other);
            
            public bool Equals(PFN_vkCmdDrawMeshTasksIndirectCountEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> (vulkan.PFN_vkCmdDrawMeshTasksIndirectCountEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCmdDrawMeshTasksIndirectCountEXT (delegate*unmanaged[Stdcall]<vulkan.VkCommandBuffer, vulkan.VkBuffer, vulkan.VkDeviceSize, vulkan.VkBuffer, vulkan.VkDeviceSize, uint, uint, void> from) => new vulkan.PFN_vkCmdDrawMeshTasksIndirectCountEXT(from);
            
            public static bool operator ==(PFN_vkCmdDrawMeshTasksIndirectCountEXT left, PFN_vkCmdDrawMeshTasksIndirectCountEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCmdDrawMeshTasksIndirectCountEXT left, PFN_vkCmdDrawMeshTasksIndirectCountEXT right) => !left.Equals(right);
        }
        
        public const uint VK_VERSION_1_0 = 1;
        
        /// <summary>
        /// Patch version should always be set to 0
        /// </summary>
        public const uint VK_API_VERSION_1_0 = 4194304;
        
        public const uint VK_ATTACHMENT_UNUSED = 4294967295;
        
        public const uint VK_FALSE = 0;
        
        public const float VK_LOD_CLAMP_NONE = 1000;
        
        public const uint VK_QUEUE_FAMILY_IGNORED = 4294967295;
        
        public const uint VK_REMAINING_ARRAY_LAYERS = 4294967295;
        
        public const uint VK_REMAINING_MIP_LEVELS = 4294967295;
        
        public const uint VK_TRUE = 1;
        
        public const uint VK_MAX_MEMORY_TYPES = 32;
        
        public const uint VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = 256;
        
        public const uint VK_UUID_SIZE = 16;
        
        public const uint VK_MAX_EXTENSION_NAME_SIZE = 256;
        
        public const uint VK_MAX_DESCRIPTION_SIZE = 256;
        
        public const uint VK_MAX_MEMORY_HEAPS = 16;
        
        public const uint VK_VERSION_1_1 = 1;
        
        /// <summary>
        /// Patch version should always be set to 0
        /// </summary>
        public const uint VK_API_VERSION_1_1 = 4198400;
        
        public const uint VK_MAX_DEVICE_GROUP_SIZE = 32;
        
        public const uint VK_LUID_SIZE = 8;
        
        public const uint VK_QUEUE_FAMILY_EXTERNAL = 4294967294;
        
        public const uint VK_VERSION_1_2 = 1;
        
        /// <summary>
        /// Patch version should always be set to 0
        /// </summary>
        public const uint VK_API_VERSION_1_2 = 4202496;
        
        public const uint VK_MAX_DRIVER_NAME_SIZE = 256;
        
        public const uint VK_MAX_DRIVER_INFO_SIZE = 256;
        
        public const uint VK_VERSION_1_3 = 1;
        
        /// <summary>
        /// Patch version should always be set to 0
        /// </summary>
        public const uint VK_API_VERSION_1_3 = 4206592;
        
        public const int VK_KHR_surface = 1;
        
        public const int VK_KHR_SURFACE_SPEC_VERSION = 25;
        
        public const string VK_KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface";
        
        public const int VK_KHR_swapchain = 1;
        
        public const int VK_KHR_SWAPCHAIN_SPEC_VERSION = 70;
        
        public const string VK_KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain";
        
        public const int VK_KHR_display = 1;
        
        public const int VK_KHR_DISPLAY_SPEC_VERSION = 23;
        
        public const string VK_KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display";
        
        public const int VK_KHR_display_swapchain = 1;
        
        public const int VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = 10;
        
        public const string VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain";
        
        public const int VK_KHR_sampler_mirror_clamp_to_edge = 1;
        
        public const int VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = 3;
        
        public const string VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge";
        
        public const int VK_KHR_video_queue = 1;
        
        public const int VK_KHR_VIDEO_QUEUE_SPEC_VERSION = 8;
        
        public const string VK_KHR_VIDEO_QUEUE_EXTENSION_NAME = "VK_KHR_video_queue";
        
        public const int VK_KHR_video_decode_queue = 1;
        
        public const int VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION = 7;
        
        public const string VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME = "VK_KHR_video_decode_queue";
        
        public const int VK_KHR_video_decode_h264 = 1;
        
        public const int VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION = 8;
        
        public const string VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME = "VK_KHR_video_decode_h264";
        
        public const int VK_KHR_dynamic_rendering = 1;
        
        public const int VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION = 1;
        
        public const string VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME = "VK_KHR_dynamic_rendering";
        
        public const int VK_KHR_multiview = 1;
        
        public const int VK_KHR_MULTIVIEW_SPEC_VERSION = 1;
        
        public const string VK_KHR_MULTIVIEW_EXTENSION_NAME = "VK_KHR_multiview";
        
        public const int VK_KHR_get_physical_device_properties2 = 1;
        
        public const int VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION = 2;
        
        public const string VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_physical_device_properties2";
        
        public const int VK_KHR_device_group = 1;
        
        public const int VK_KHR_DEVICE_GROUP_SPEC_VERSION = 4;
        
        public const string VK_KHR_DEVICE_GROUP_EXTENSION_NAME = "VK_KHR_device_group";
        
        public const int VK_KHR_shader_draw_parameters = 1;
        
        public const int VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION = 1;
        
        public const string VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME = "VK_KHR_shader_draw_parameters";
        
        public const int VK_KHR_maintenance1 = 1;
        
        public const int VK_KHR_MAINTENANCE_1_SPEC_VERSION = 2;
        
        public const string VK_KHR_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_maintenance1";
        
        public const int VK_KHR_MAINTENANCE1_SPEC_VERSION = 2;
        
        public const string VK_KHR_MAINTENANCE1_EXTENSION_NAME = "VK_KHR_maintenance1";
        
        public const int VK_KHR_device_group_creation = 1;
        
        public const int VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION = 1;
        
        public const string VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME = "VK_KHR_device_group_creation";
        
        public const uint VK_MAX_DEVICE_GROUP_SIZE_KHR = 32;
        
        public const int VK_KHR_external_memory_capabilities = 1;
        
        public const int VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1;
        
        public const string VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_memory_capabilities";
        
        public const uint VK_LUID_SIZE_KHR = 8;
        
        public const int VK_KHR_external_memory = 1;
        
        public const int VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION = 1;
        
        public const string VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_KHR_external_memory";
        
        public const uint VK_QUEUE_FAMILY_EXTERNAL_KHR = 4294967294;
        
        public const int VK_KHR_external_memory_fd = 1;
        
        public const int VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION = 1;
        
        public const string VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME = "VK_KHR_external_memory_fd";
        
        public const int VK_KHR_external_semaphore_capabilities = 1;
        
        public const int VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION = 1;
        
        public const string VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_semaphore_capabilities";
        
        public const int VK_KHR_external_semaphore = 1;
        
        public const int VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION = 1;
        
        public const string VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_KHR_external_semaphore";
        
        public const int VK_KHR_external_semaphore_fd = 1;
        
        public const int VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION = 1;
        
        public const string VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME = "VK_KHR_external_semaphore_fd";
        
        public const int VK_KHR_push_descriptor = 1;
        
        public const int VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION = 2;
        
        public const string VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME = "VK_KHR_push_descriptor";
        
        public const int VK_KHR_shader_float16_int8 = 1;
        
        public const int VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION = 1;
        
        public const string VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME = "VK_KHR_shader_float16_int8";
        
        public const int VK_KHR_16bit_storage = 1;
        
        public const int VK_KHR_16BIT_STORAGE_SPEC_VERSION = 1;
        
        public const string VK_KHR_16BIT_STORAGE_EXTENSION_NAME = "VK_KHR_16bit_storage";
        
        public const int VK_KHR_incremental_present = 1;
        
        public const int VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION = 2;
        
        public const string VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME = "VK_KHR_incremental_present";
        
        public const int VK_KHR_descriptor_update_template = 1;
        
        public const int VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION = 1;
        
        public const string VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME = "VK_KHR_descriptor_update_template";
        
        public const int VK_KHR_imageless_framebuffer = 1;
        
        public const int VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION = 1;
        
        public const string VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME = "VK_KHR_imageless_framebuffer";
        
        public const int VK_KHR_create_renderpass2 = 1;
        
        public const int VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION = 1;
        
        public const string VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME = "VK_KHR_create_renderpass2";
        
        public const int VK_KHR_shared_presentable_image = 1;
        
        public const int VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION = 1;
        
        public const string VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME = "VK_KHR_shared_presentable_image";
        
        public const int VK_KHR_external_fence_capabilities = 1;
        
        public const int VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION = 1;
        
        public const string VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_fence_capabilities";
        
        public const int VK_KHR_external_fence = 1;
        
        public const int VK_KHR_EXTERNAL_FENCE_SPEC_VERSION = 1;
        
        public const string VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME = "VK_KHR_external_fence";
        
        public const int VK_KHR_external_fence_fd = 1;
        
        public const int VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION = 1;
        
        public const string VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME = "VK_KHR_external_fence_fd";
        
        public const int VK_KHR_performance_query = 1;
        
        public const int VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION = 1;
        
        public const string VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_KHR_performance_query";
        
        public const int VK_KHR_maintenance2 = 1;
        
        public const int VK_KHR_MAINTENANCE_2_SPEC_VERSION = 1;
        
        public const string VK_KHR_MAINTENANCE_2_EXTENSION_NAME = "VK_KHR_maintenance2";
        
        public const int VK_KHR_MAINTENANCE2_SPEC_VERSION = 1;
        
        public const string VK_KHR_MAINTENANCE2_EXTENSION_NAME = "VK_KHR_maintenance2";
        
        public const int VK_KHR_get_surface_capabilities2 = 1;
        
        public const int VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION = 1;
        
        public const string VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME = "VK_KHR_get_surface_capabilities2";
        
        public const int VK_KHR_variable_pointers = 1;
        
        public const int VK_KHR_VARIABLE_POINTERS_SPEC_VERSION = 1;
        
        public const string VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME = "VK_KHR_variable_pointers";
        
        public const int VK_KHR_get_display_properties2 = 1;
        
        public const int VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION = 1;
        
        public const string VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_display_properties2";
        
        public const int VK_KHR_dedicated_allocation = 1;
        
        public const int VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION = 3;
        
        public const string VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_KHR_dedicated_allocation";
        
        public const int VK_KHR_storage_buffer_storage_class = 1;
        
        public const int VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION = 1;
        
        public const string VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME = "VK_KHR_storage_buffer_storage_class";
        
        public const int VK_KHR_relaxed_block_layout = 1;
        
        public const int VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION = 1;
        
        public const string VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME = "VK_KHR_relaxed_block_layout";
        
        public const int VK_KHR_get_memory_requirements2 = 1;
        
        public const int VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION = 1;
        
        public const string VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME = "VK_KHR_get_memory_requirements2";
        
        public const int VK_KHR_image_format_list = 1;
        
        public const int VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION = 1;
        
        public const string VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME = "VK_KHR_image_format_list";
        
        public const int VK_KHR_sampler_ycbcr_conversion = 1;
        
        public const int VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION = 14;
        
        public const string VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME = "VK_KHR_sampler_ycbcr_conversion";
        
        public const int VK_KHR_bind_memory2 = 1;
        
        public const int VK_KHR_BIND_MEMORY_2_SPEC_VERSION = 1;
        
        public const string VK_KHR_BIND_MEMORY_2_EXTENSION_NAME = "VK_KHR_bind_memory2";
        
        public const int VK_KHR_maintenance3 = 1;
        
        public const int VK_KHR_MAINTENANCE_3_SPEC_VERSION = 1;
        
        public const string VK_KHR_MAINTENANCE_3_EXTENSION_NAME = "VK_KHR_maintenance3";
        
        public const int VK_KHR_MAINTENANCE3_SPEC_VERSION = 1;
        
        public const string VK_KHR_MAINTENANCE3_EXTENSION_NAME = "VK_KHR_maintenance3";
        
        public const int VK_KHR_draw_indirect_count = 1;
        
        public const int VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION = 1;
        
        public const string VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_KHR_draw_indirect_count";
        
        public const int VK_KHR_shader_subgroup_extended_types = 1;
        
        public const int VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION = 1;
        
        public const string VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME = "VK_KHR_shader_subgroup_extended_types";
        
        public const int VK_KHR_8bit_storage = 1;
        
        public const int VK_KHR_8BIT_STORAGE_SPEC_VERSION = 1;
        
        public const string VK_KHR_8BIT_STORAGE_EXTENSION_NAME = "VK_KHR_8bit_storage";
        
        public const int VK_KHR_shader_atomic_int64 = 1;
        
        public const int VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION = 1;
        
        public const string VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME = "VK_KHR_shader_atomic_int64";
        
        public const int VK_KHR_shader_clock = 1;
        
        public const int VK_KHR_SHADER_CLOCK_SPEC_VERSION = 1;
        
        public const string VK_KHR_SHADER_CLOCK_EXTENSION_NAME = "VK_KHR_shader_clock";
        
        public const int VK_KHR_video_decode_h265 = 1;
        
        public const int VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION = 7;
        
        public const string VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME = "VK_KHR_video_decode_h265";
        
        public const int VK_KHR_global_priority = 1;
        
        public const uint VK_MAX_GLOBAL_PRIORITY_SIZE_KHR = 16;
        
        public const int VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION = 1;
        
        public const string VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_KHR_global_priority";
        
        public const int VK_KHR_driver_properties = 1;
        
        public const int VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION = 1;
        
        public const string VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME = "VK_KHR_driver_properties";
        
        public const uint VK_MAX_DRIVER_NAME_SIZE_KHR = 256;
        
        public const uint VK_MAX_DRIVER_INFO_SIZE_KHR = 256;
        
        public const int VK_KHR_shader_float_controls = 1;
        
        public const int VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION = 4;
        
        public const string VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME = "VK_KHR_shader_float_controls";
        
        public const int VK_KHR_depth_stencil_resolve = 1;
        
        public const int VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION = 1;
        
        public const string VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME = "VK_KHR_depth_stencil_resolve";
        
        public const int VK_KHR_swapchain_mutable_format = 1;
        
        public const int VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION = 1;
        
        public const string VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME = "VK_KHR_swapchain_mutable_format";
        
        public const int VK_KHR_timeline_semaphore = 1;
        
        public const int VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION = 2;
        
        public const string VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME = "VK_KHR_timeline_semaphore";
        
        public const int VK_KHR_vulkan_memory_model = 1;
        
        public const int VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION = 3;
        
        public const string VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME = "VK_KHR_vulkan_memory_model";
        
        public const int VK_KHR_shader_terminate_invocation = 1;
        
        public const int VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION = 1;
        
        public const string VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME = "VK_KHR_shader_terminate_invocation";
        
        public const int VK_KHR_fragment_shading_rate = 1;
        
        public const int VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION = 2;
        
        public const string VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME = "VK_KHR_fragment_shading_rate";
        
        public const int VK_KHR_spirv_1_4 = 1;
        
        public const int VK_KHR_SPIRV_1_4_SPEC_VERSION = 1;
        
        public const string VK_KHR_SPIRV_1_4_EXTENSION_NAME = "VK_KHR_spirv_1_4";
        
        public const int VK_KHR_surface_protected_capabilities = 1;
        
        public const int VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION = 1;
        
        public const string VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME = "VK_KHR_surface_protected_capabilities";
        
        public const int VK_KHR_separate_depth_stencil_layouts = 1;
        
        public const int VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION = 1;
        
        public const string VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME = "VK_KHR_separate_depth_stencil_layouts";
        
        public const int VK_KHR_present_wait = 1;
        
        public const int VK_KHR_PRESENT_WAIT_SPEC_VERSION = 1;
        
        public const string VK_KHR_PRESENT_WAIT_EXTENSION_NAME = "VK_KHR_present_wait";
        
        public const int VK_KHR_uniform_buffer_standard_layout = 1;
        
        public const int VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION = 1;
        
        public const string VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME = "VK_KHR_uniform_buffer_standard_layout";
        
        public const int VK_KHR_buffer_device_address = 1;
        
        public const int VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 1;
        
        public const string VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_KHR_buffer_device_address";
        
        public const int VK_KHR_deferred_host_operations = 1;
        
        public const int VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION = 4;
        
        public const string VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME = "VK_KHR_deferred_host_operations";
        
        public const int VK_KHR_pipeline_executable_properties = 1;
        
        public const int VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION = 1;
        
        public const string VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME = "VK_KHR_pipeline_executable_properties";
        
        public const int VK_KHR_map_memory2 = 1;
        
        public const int VK_KHR_MAP_MEMORY_2_SPEC_VERSION = 1;
        
        public const string VK_KHR_MAP_MEMORY_2_EXTENSION_NAME = "VK_KHR_map_memory2";
        
        public const int VK_KHR_shader_integer_dot_product = 1;
        
        public const int VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION = 1;
        
        public const string VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME = "VK_KHR_shader_integer_dot_product";
        
        public const int VK_KHR_pipeline_library = 1;
        
        public const int VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION = 1;
        
        public const string VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_KHR_pipeline_library";
        
        public const int VK_KHR_shader_non_semantic_info = 1;
        
        public const int VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION = 1;
        
        public const string VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME = "VK_KHR_shader_non_semantic_info";
        
        public const int VK_KHR_present_id = 1;
        
        public const int VK_KHR_PRESENT_ID_SPEC_VERSION = 1;
        
        public const string VK_KHR_PRESENT_ID_EXTENSION_NAME = "VK_KHR_present_id";
        
        public const int VK_KHR_synchronization2 = 1;
        
        public const int VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION = 1;
        
        public const string VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME = "VK_KHR_synchronization2";
        
        public const int VK_KHR_fragment_shader_barycentric = 1;
        
        public const int VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = 1;
        
        public const string VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_KHR_fragment_shader_barycentric";
        
        public const int VK_KHR_shader_subgroup_uniform_control_flow = 1;
        
        public const int VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION = 1;
        
        public const string VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME = "VK_KHR_shader_subgroup_uniform_control_flow";
        
        public const int VK_KHR_zero_initialize_workgroup_memory = 1;
        
        public const int VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION = 1;
        
        public const string VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME = "VK_KHR_zero_initialize_workgroup_memory";
        
        public const int VK_KHR_workgroup_memory_explicit_layout = 1;
        
        public const int VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION = 1;
        
        public const string VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME = "VK_KHR_workgroup_memory_explicit_layout";
        
        public const int VK_KHR_copy_commands2 = 1;
        
        public const int VK_KHR_COPY_COMMANDS_2_SPEC_VERSION = 1;
        
        public const string VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME = "VK_KHR_copy_commands2";
        
        public const int VK_KHR_format_feature_flags2 = 1;
        
        public const int VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION = 2;
        
        public const string VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME = "VK_KHR_format_feature_flags2";
        
        public const int VK_KHR_ray_tracing_maintenance1 = 1;
        
        public const int VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION = 1;
        
        public const string VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_ray_tracing_maintenance1";
        
        public const int VK_KHR_portability_enumeration = 1;
        
        public const int VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION = 1;
        
        public const string VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME = "VK_KHR_portability_enumeration";
        
        public const int VK_KHR_maintenance4 = 1;
        
        public const int VK_KHR_MAINTENANCE_4_SPEC_VERSION = 2;
        
        public const string VK_KHR_MAINTENANCE_4_EXTENSION_NAME = "VK_KHR_maintenance4";
        
        public const int VK_KHR_maintenance5 = 1;
        
        public const int VK_KHR_MAINTENANCE_5_SPEC_VERSION = 1;
        
        public const string VK_KHR_MAINTENANCE_5_EXTENSION_NAME = "VK_KHR_maintenance5";
        
        public const int VK_KHR_ray_tracing_position_fetch = 1;
        
        public const int VK_KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION = 1;
        
        public const string VK_KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME = "VK_KHR_ray_tracing_position_fetch";
        
        public const int VK_KHR_cooperative_matrix = 1;
        
        public const int VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION = 2;
        
        public const string VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_KHR_cooperative_matrix";
        
        public const int VK_EXT_debug_report = 1;
        
        public const int VK_EXT_DEBUG_REPORT_SPEC_VERSION = 10;
        
        public const string VK_EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report";
        
        public const int VK_NV_glsl_shader = 1;
        
        public const int VK_NV_GLSL_SHADER_SPEC_VERSION = 1;
        
        public const string VK_NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader";
        
        public const int VK_EXT_depth_range_unrestricted = 1;
        
        public const int VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION = 1;
        
        public const string VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME = "VK_EXT_depth_range_unrestricted";
        
        public const int VK_IMG_filter_cubic = 1;
        
        public const int VK_IMG_FILTER_CUBIC_SPEC_VERSION = 1;
        
        public const string VK_IMG_FILTER_CUBIC_EXTENSION_NAME = "VK_IMG_filter_cubic";
        
        public const int VK_AMD_rasterization_order = 1;
        
        public const int VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION = 1;
        
        public const string VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME = "VK_AMD_rasterization_order";
        
        public const int VK_AMD_shader_trinary_minmax = 1;
        
        public const int VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION = 1;
        
        public const string VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME = "VK_AMD_shader_trinary_minmax";
        
        public const int VK_AMD_shader_explicit_vertex_parameter = 1;
        
        public const int VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION = 1;
        
        public const string VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME = "VK_AMD_shader_explicit_vertex_parameter";
        
        public const int VK_EXT_debug_marker = 1;
        
        public const int VK_EXT_DEBUG_MARKER_SPEC_VERSION = 4;
        
        public const string VK_EXT_DEBUG_MARKER_EXTENSION_NAME = "VK_EXT_debug_marker";
        
        public const int VK_AMD_gcn_shader = 1;
        
        public const int VK_AMD_GCN_SHADER_SPEC_VERSION = 1;
        
        public const string VK_AMD_GCN_SHADER_EXTENSION_NAME = "VK_AMD_gcn_shader";
        
        public const int VK_NV_dedicated_allocation = 1;
        
        public const int VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION = 1;
        
        public const string VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_NV_dedicated_allocation";
        
        public const int VK_EXT_transform_feedback = 1;
        
        public const int VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION = 1;
        
        public const string VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME = "VK_EXT_transform_feedback";
        
        public const int VK_NVX_binary_import = 1;
        
        public const int VK_NVX_BINARY_IMPORT_SPEC_VERSION = 1;
        
        public const string VK_NVX_BINARY_IMPORT_EXTENSION_NAME = "VK_NVX_binary_import";
        
        public const int VK_NVX_image_view_handle = 1;
        
        public const int VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION = 2;
        
        public const string VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME = "VK_NVX_image_view_handle";
        
        public const int VK_AMD_draw_indirect_count = 1;
        
        public const int VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION = 2;
        
        public const string VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_AMD_draw_indirect_count";
        
        public const int VK_AMD_negative_viewport_height = 1;
        
        public const int VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION = 1;
        
        public const string VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME = "VK_AMD_negative_viewport_height";
        
        public const int VK_AMD_gpu_shader_half_float = 1;
        
        public const int VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION = 2;
        
        public const string VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME = "VK_AMD_gpu_shader_half_float";
        
        public const int VK_AMD_shader_ballot = 1;
        
        public const int VK_AMD_SHADER_BALLOT_SPEC_VERSION = 1;
        
        public const string VK_AMD_SHADER_BALLOT_EXTENSION_NAME = "VK_AMD_shader_ballot";
        
        public const int VK_AMD_texture_gather_bias_lod = 1;
        
        public const int VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION = 1;
        
        public const string VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME = "VK_AMD_texture_gather_bias_lod";
        
        public const int VK_AMD_shader_info = 1;
        
        public const int VK_AMD_SHADER_INFO_SPEC_VERSION = 1;
        
        public const string VK_AMD_SHADER_INFO_EXTENSION_NAME = "VK_AMD_shader_info";
        
        public const int VK_AMD_shader_image_load_store_lod = 1;
        
        public const int VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION = 1;
        
        public const string VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME = "VK_AMD_shader_image_load_store_lod";
        
        public const int VK_NV_corner_sampled_image = 1;
        
        public const int VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION = 2;
        
        public const string VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME = "VK_NV_corner_sampled_image";
        
        public const int VK_IMG_format_pvrtc = 1;
        
        public const int VK_IMG_FORMAT_PVRTC_SPEC_VERSION = 1;
        
        public const string VK_IMG_FORMAT_PVRTC_EXTENSION_NAME = "VK_IMG_format_pvrtc";
        
        public const int VK_NV_external_memory_capabilities = 1;
        
        public const int VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1;
        
        public const string VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_NV_external_memory_capabilities";
        
        public const int VK_NV_external_memory = 1;
        
        public const int VK_NV_EXTERNAL_MEMORY_SPEC_VERSION = 1;
        
        public const string VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_NV_external_memory";
        
        public const int VK_EXT_validation_flags = 1;
        
        public const int VK_EXT_VALIDATION_FLAGS_SPEC_VERSION = 2;
        
        public const string VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME = "VK_EXT_validation_flags";
        
        public const int VK_EXT_shader_subgroup_ballot = 1;
        
        public const int VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION = 1;
        
        public const string VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME = "VK_EXT_shader_subgroup_ballot";
        
        public const int VK_EXT_shader_subgroup_vote = 1;
        
        public const int VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION = 1;
        
        public const string VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME = "VK_EXT_shader_subgroup_vote";
        
        public const int VK_EXT_texture_compression_astc_hdr = 1;
        
        public const int VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION = 1;
        
        public const string VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME = "VK_EXT_texture_compression_astc_hdr";
        
        public const int VK_EXT_astc_decode_mode = 1;
        
        public const int VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION = 1;
        
        public const string VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME = "VK_EXT_astc_decode_mode";
        
        public const int VK_EXT_pipeline_robustness = 1;
        
        public const int VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION = 1;
        
        public const string VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_pipeline_robustness";
        
        public const int VK_EXT_conditional_rendering = 1;
        
        public const int VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION = 2;
        
        public const string VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME = "VK_EXT_conditional_rendering";
        
        public const int VK_NV_clip_space_w_scaling = 1;
        
        public const int VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION = 1;
        
        public const string VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME = "VK_NV_clip_space_w_scaling";
        
        public const int VK_EXT_direct_mode_display = 1;
        
        public const int VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION = 1;
        
        public const string VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME = "VK_EXT_direct_mode_display";
        
        public const int VK_EXT_display_surface_counter = 1;
        
        public const int VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION = 1;
        
        public const string VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME = "VK_EXT_display_surface_counter";
        
        public const int VK_EXT_display_control = 1;
        
        public const int VK_EXT_DISPLAY_CONTROL_SPEC_VERSION = 1;
        
        public const string VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME = "VK_EXT_display_control";
        
        public const int VK_GOOGLE_display_timing = 1;
        
        public const int VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION = 1;
        
        public const string VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME = "VK_GOOGLE_display_timing";
        
        public const int VK_NV_sample_mask_override_coverage = 1;
        
        public const int VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION = 1;
        
        public const string VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME = "VK_NV_sample_mask_override_coverage";
        
        public const int VK_NV_geometry_shader_passthrough = 1;
        
        public const int VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION = 1;
        
        public const string VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME = "VK_NV_geometry_shader_passthrough";
        
        public const int VK_NV_viewport_array2 = 1;
        
        public const int VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION = 1;
        
        public const string VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME = "VK_NV_viewport_array2";
        
        public const int VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION = 1;
        
        public const string VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME = "VK_NV_viewport_array2";
        
        public const int VK_NVX_multiview_per_view_attributes = 1;
        
        public const int VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION = 1;
        
        public const string VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME = "VK_NVX_multiview_per_view_attributes";
        
        public const int VK_NV_viewport_swizzle = 1;
        
        public const int VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION = 1;
        
        public const string VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME = "VK_NV_viewport_swizzle";
        
        public const int VK_EXT_discard_rectangles = 1;
        
        public const int VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION = 2;
        
        public const string VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME = "VK_EXT_discard_rectangles";
        
        public const int VK_EXT_conservative_rasterization = 1;
        
        public const int VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION = 1;
        
        public const string VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_conservative_rasterization";
        
        public const int VK_EXT_depth_clip_enable = 1;
        
        public const int VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION = 1;
        
        public const string VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME = "VK_EXT_depth_clip_enable";
        
        public const int VK_EXT_swapchain_colorspace = 1;
        
        public const int VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION = 4;
        
        public const string VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME = "VK_EXT_swapchain_colorspace";
        
        public const int VK_EXT_hdr_metadata = 1;
        
        public const int VK_EXT_HDR_METADATA_SPEC_VERSION = 2;
        
        public const string VK_EXT_HDR_METADATA_EXTENSION_NAME = "VK_EXT_hdr_metadata";
        
        public const int VK_EXT_external_memory_dma_buf = 1;
        
        public const int VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION = 1;
        
        public const string VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME = "VK_EXT_external_memory_dma_buf";
        
        public const int VK_EXT_queue_family_foreign = 1;
        
        public const int VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION = 1;
        
        public const string VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME = "VK_EXT_queue_family_foreign";
        
        public const uint VK_QUEUE_FAMILY_FOREIGN_EXT = 4294967293;
        
        public const int VK_EXT_debug_utils = 1;
        
        public const int VK_EXT_DEBUG_UTILS_SPEC_VERSION = 2;
        
        public const string VK_EXT_DEBUG_UTILS_EXTENSION_NAME = "VK_EXT_debug_utils";
        
        public const int VK_EXT_sampler_filter_minmax = 1;
        
        public const int VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION = 2;
        
        public const string VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME = "VK_EXT_sampler_filter_minmax";
        
        public const int VK_AMD_gpu_shader_int16 = 1;
        
        public const int VK_AMD_GPU_SHADER_INT16_SPEC_VERSION = 2;
        
        public const string VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME = "VK_AMD_gpu_shader_int16";
        
        public const int VK_AMD_mixed_attachment_samples = 1;
        
        public const int VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION = 1;
        
        public const string VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME = "VK_AMD_mixed_attachment_samples";
        
        public const int VK_AMD_shader_fragment_mask = 1;
        
        public const int VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION = 1;
        
        public const string VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME = "VK_AMD_shader_fragment_mask";
        
        public const int VK_EXT_inline_uniform_block = 1;
        
        public const int VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION = 1;
        
        public const string VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME = "VK_EXT_inline_uniform_block";
        
        public const int VK_EXT_shader_stencil_export = 1;
        
        public const int VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION = 1;
        
        public const string VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME = "VK_EXT_shader_stencil_export";
        
        public const int VK_EXT_sample_locations = 1;
        
        public const int VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION = 1;
        
        public const string VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME = "VK_EXT_sample_locations";
        
        public const int VK_EXT_blend_operation_advanced = 1;
        
        public const int VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION = 2;
        
        public const string VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME = "VK_EXT_blend_operation_advanced";
        
        public const int VK_NV_fragment_coverage_to_color = 1;
        
        public const int VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION = 1;
        
        public const string VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME = "VK_NV_fragment_coverage_to_color";
        
        public const int VK_NV_framebuffer_mixed_samples = 1;
        
        public const int VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION = 1;
        
        public const string VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME = "VK_NV_framebuffer_mixed_samples";
        
        public const int VK_NV_fill_rectangle = 1;
        
        public const int VK_NV_FILL_RECTANGLE_SPEC_VERSION = 1;
        
        public const string VK_NV_FILL_RECTANGLE_EXTENSION_NAME = "VK_NV_fill_rectangle";
        
        public const int VK_NV_shader_sm_builtins = 1;
        
        public const int VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION = 1;
        
        public const string VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME = "VK_NV_shader_sm_builtins";
        
        public const int VK_EXT_post_depth_coverage = 1;
        
        public const int VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION = 1;
        
        public const string VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME = "VK_EXT_post_depth_coverage";
        
        public const int VK_EXT_image_drm_format_modifier = 1;
        
        public const int VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION = 2;
        
        public const string VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME = "VK_EXT_image_drm_format_modifier";
        
        public const int VK_EXT_validation_cache = 1;
        
        public const int VK_EXT_VALIDATION_CACHE_SPEC_VERSION = 1;
        
        public const string VK_EXT_VALIDATION_CACHE_EXTENSION_NAME = "VK_EXT_validation_cache";
        
        public const int VK_EXT_descriptor_indexing = 1;
        
        public const int VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION = 2;
        
        public const string VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME = "VK_EXT_descriptor_indexing";
        
        public const int VK_EXT_shader_viewport_index_layer = 1;
        
        public const int VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION = 1;
        
        public const string VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME = "VK_EXT_shader_viewport_index_layer";
        
        public const int VK_NV_shading_rate_image = 1;
        
        public const int VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION = 3;
        
        public const string VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME = "VK_NV_shading_rate_image";
        
        public const int VK_NV_ray_tracing = 1;
        
        public const int VK_NV_RAY_TRACING_SPEC_VERSION = 3;
        
        public const string VK_NV_RAY_TRACING_EXTENSION_NAME = "VK_NV_ray_tracing";
        
        public const uint VK_SHADER_UNUSED_KHR = 4294967295;
        
        public const uint VK_SHADER_UNUSED_NV = 4294967295;
        
        public const int VK_NV_representative_fragment_test = 1;
        
        public const int VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION = 2;
        
        public const string VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME = "VK_NV_representative_fragment_test";
        
        public const int VK_EXT_filter_cubic = 1;
        
        public const int VK_EXT_FILTER_CUBIC_SPEC_VERSION = 3;
        
        public const string VK_EXT_FILTER_CUBIC_EXTENSION_NAME = "VK_EXT_filter_cubic";
        
        public const int VK_QCOM_render_pass_shader_resolve = 1;
        
        public const int VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION = 4;
        
        public const string VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME = "VK_QCOM_render_pass_shader_resolve";
        
        public const int VK_EXT_global_priority = 1;
        
        public const int VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION = 2;
        
        public const string VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_EXT_global_priority";
        
        public const int VK_EXT_external_memory_host = 1;
        
        public const int VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION = 1;
        
        public const string VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME = "VK_EXT_external_memory_host";
        
        public const int VK_AMD_buffer_marker = 1;
        
        public const int VK_AMD_BUFFER_MARKER_SPEC_VERSION = 1;
        
        public const string VK_AMD_BUFFER_MARKER_EXTENSION_NAME = "VK_AMD_buffer_marker";
        
        public const int VK_AMD_pipeline_compiler_control = 1;
        
        public const int VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION = 1;
        
        public const string VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME = "VK_AMD_pipeline_compiler_control";
        
        public const int VK_EXT_calibrated_timestamps = 1;
        
        public const int VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION = 2;
        
        public const string VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_EXT_calibrated_timestamps";
        
        public const int VK_AMD_shader_core_properties = 1;
        
        public const int VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION = 2;
        
        public const string VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_AMD_shader_core_properties";
        
        public const int VK_AMD_memory_overallocation_behavior = 1;
        
        public const int VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION = 1;
        
        public const string VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME = "VK_AMD_memory_overallocation_behavior";
        
        public const int VK_EXT_vertex_attribute_divisor = 1;
        
        public const int VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = 3;
        
        public const string VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_EXT_vertex_attribute_divisor";
        
        public const int VK_EXT_pipeline_creation_feedback = 1;
        
        public const int VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION = 1;
        
        public const string VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME = "VK_EXT_pipeline_creation_feedback";
        
        public const int VK_NV_shader_subgroup_partitioned = 1;
        
        public const int VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION = 1;
        
        public const string VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME = "VK_NV_shader_subgroup_partitioned";
        
        public const int VK_NV_compute_shader_derivatives = 1;
        
        public const int VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = 1;
        
        public const string VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_NV_compute_shader_derivatives";
        
        public const int VK_NV_mesh_shader = 1;
        
        public const int VK_NV_MESH_SHADER_SPEC_VERSION = 1;
        
        public const string VK_NV_MESH_SHADER_EXTENSION_NAME = "VK_NV_mesh_shader";
        
        public const int VK_NV_fragment_shader_barycentric = 1;
        
        public const int VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = 1;
        
        public const string VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_NV_fragment_shader_barycentric";
        
        public const int VK_NV_shader_image_footprint = 1;
        
        public const int VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION = 2;
        
        public const string VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME = "VK_NV_shader_image_footprint";
        
        public const int VK_NV_scissor_exclusive = 1;
        
        public const int VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION = 2;
        
        public const string VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME = "VK_NV_scissor_exclusive";
        
        public const int VK_NV_device_diagnostic_checkpoints = 1;
        
        public const int VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION = 2;
        
        public const string VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME = "VK_NV_device_diagnostic_checkpoints";
        
        public const int VK_INTEL_shader_integer_functions2 = 1;
        
        public const int VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION = 1;
        
        public const string VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME = "VK_INTEL_shader_integer_functions2";
        
        public const int VK_INTEL_performance_query = 1;
        
        public const int VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION = 2;
        
        public const string VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_INTEL_performance_query";
        
        public const int VK_EXT_pci_bus_info = 1;
        
        public const int VK_EXT_PCI_BUS_INFO_SPEC_VERSION = 2;
        
        public const string VK_EXT_PCI_BUS_INFO_EXTENSION_NAME = "VK_EXT_pci_bus_info";
        
        public const int VK_AMD_display_native_hdr = 1;
        
        public const int VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION = 1;
        
        public const string VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME = "VK_AMD_display_native_hdr";
        
        public const int VK_EXT_fragment_density_map = 1;
        
        public const int VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION = 2;
        
        public const string VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME = "VK_EXT_fragment_density_map";
        
        public const int VK_EXT_scalar_block_layout = 1;
        
        public const int VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION = 1;
        
        public const string VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME = "VK_EXT_scalar_block_layout";
        
        public const int VK_GOOGLE_hlsl_functionality1 = 1;
        
        public const int VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION = 1;
        
        public const string VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME = "VK_GOOGLE_hlsl_functionality1";
        
        public const int VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION = 1;
        
        public const string VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME = "VK_GOOGLE_hlsl_functionality1";
        
        public const int VK_GOOGLE_decorate_string = 1;
        
        public const int VK_GOOGLE_DECORATE_STRING_SPEC_VERSION = 1;
        
        public const string VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME = "VK_GOOGLE_decorate_string";
        
        public const int VK_EXT_subgroup_size_control = 1;
        
        public const int VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION = 2;
        
        public const string VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME = "VK_EXT_subgroup_size_control";
        
        public const int VK_AMD_shader_core_properties2 = 1;
        
        public const int VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION = 1;
        
        public const string VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME = "VK_AMD_shader_core_properties2";
        
        public const int VK_AMD_device_coherent_memory = 1;
        
        public const int VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION = 1;
        
        public const string VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME = "VK_AMD_device_coherent_memory";
        
        public const int VK_EXT_shader_image_atomic_int64 = 1;
        
        public const int VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION = 1;
        
        public const string VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME = "VK_EXT_shader_image_atomic_int64";
        
        public const int VK_EXT_memory_budget = 1;
        
        public const int VK_EXT_MEMORY_BUDGET_SPEC_VERSION = 1;
        
        public const string VK_EXT_MEMORY_BUDGET_EXTENSION_NAME = "VK_EXT_memory_budget";
        
        public const int VK_EXT_memory_priority = 1;
        
        public const int VK_EXT_MEMORY_PRIORITY_SPEC_VERSION = 1;
        
        public const string VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME = "VK_EXT_memory_priority";
        
        public const int VK_NV_dedicated_allocation_image_aliasing = 1;
        
        public const int VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION = 1;
        
        public const string VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME = "VK_NV_dedicated_allocation_image_aliasing";
        
        public const int VK_EXT_buffer_device_address = 1;
        
        public const int VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 2;
        
        public const string VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_EXT_buffer_device_address";
        
        public const int VK_EXT_tooling_info = 1;
        
        public const int VK_EXT_TOOLING_INFO_SPEC_VERSION = 1;
        
        public const string VK_EXT_TOOLING_INFO_EXTENSION_NAME = "VK_EXT_tooling_info";
        
        public const int VK_EXT_separate_stencil_usage = 1;
        
        public const int VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION = 1;
        
        public const string VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME = "VK_EXT_separate_stencil_usage";
        
        public const int VK_EXT_validation_features = 1;
        
        public const int VK_EXT_VALIDATION_FEATURES_SPEC_VERSION = 5;
        
        public const string VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME = "VK_EXT_validation_features";
        
        public const int VK_NV_cooperative_matrix = 1;
        
        public const int VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION = 1;
        
        public const string VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_NV_cooperative_matrix";
        
        public const int VK_NV_coverage_reduction_mode = 1;
        
        public const int VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION = 1;
        
        public const string VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME = "VK_NV_coverage_reduction_mode";
        
        public const int VK_EXT_fragment_shader_interlock = 1;
        
        public const int VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION = 1;
        
        public const string VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME = "VK_EXT_fragment_shader_interlock";
        
        public const int VK_EXT_ycbcr_image_arrays = 1;
        
        public const int VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION = 1;
        
        public const string VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME = "VK_EXT_ycbcr_image_arrays";
        
        public const int VK_EXT_provoking_vertex = 1;
        
        public const int VK_EXT_PROVOKING_VERTEX_SPEC_VERSION = 1;
        
        public const string VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME = "VK_EXT_provoking_vertex";
        
        public const int VK_EXT_headless_surface = 1;
        
        public const int VK_EXT_HEADLESS_SURFACE_SPEC_VERSION = 1;
        
        public const string VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME = "VK_EXT_headless_surface";
        
        public const int VK_EXT_line_rasterization = 1;
        
        public const int VK_EXT_LINE_RASTERIZATION_SPEC_VERSION = 1;
        
        public const string VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_line_rasterization";
        
        public const int VK_EXT_shader_atomic_float = 1;
        
        public const int VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION = 1;
        
        public const string VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME = "VK_EXT_shader_atomic_float";
        
        public const int VK_EXT_host_query_reset = 1;
        
        public const int VK_EXT_HOST_QUERY_RESET_SPEC_VERSION = 1;
        
        public const string VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME = "VK_EXT_host_query_reset";
        
        public const int VK_EXT_index_type_uint8 = 1;
        
        public const int VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION = 1;
        
        public const string VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_EXT_index_type_uint8";
        
        public const int VK_EXT_extended_dynamic_state = 1;
        
        public const int VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION = 1;
        
        public const string VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_extended_dynamic_state";
        
        public const int VK_EXT_host_image_copy = 1;
        
        public const int VK_EXT_HOST_IMAGE_COPY_SPEC_VERSION = 1;
        
        public const string VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME = "VK_EXT_host_image_copy";
        
        public const int VK_EXT_shader_atomic_float2 = 1;
        
        public const int VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION = 1;
        
        public const string VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME = "VK_EXT_shader_atomic_float2";
        
        public const int VK_EXT_surface_maintenance1 = 1;
        
        public const int VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION = 1;
        
        public const string VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME = "VK_EXT_surface_maintenance1";
        
        public const int VK_EXT_swapchain_maintenance1 = 1;
        
        public const int VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION = 1;
        
        public const string VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME = "VK_EXT_swapchain_maintenance1";
        
        public const int VK_EXT_shader_demote_to_helper_invocation = 1;
        
        public const int VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION = 1;
        
        public const string VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME = "VK_EXT_shader_demote_to_helper_invocation";
        
        public const int VK_NV_device_generated_commands = 1;
        
        public const int VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = 3;
        
        public const string VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NV_device_generated_commands";
        
        public const int VK_NV_inherited_viewport_scissor = 1;
        
        public const int VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION = 1;
        
        public const string VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME = "VK_NV_inherited_viewport_scissor";
        
        public const int VK_EXT_texel_buffer_alignment = 1;
        
        public const int VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION = 1;
        
        public const string VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME = "VK_EXT_texel_buffer_alignment";
        
        public const int VK_QCOM_render_pass_transform = 1;
        
        public const int VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION = 3;
        
        public const string VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME = "VK_QCOM_render_pass_transform";
        
        public const int VK_EXT_depth_bias_control = 1;
        
        public const int VK_EXT_DEPTH_BIAS_CONTROL_SPEC_VERSION = 1;
        
        public const string VK_EXT_DEPTH_BIAS_CONTROL_EXTENSION_NAME = "VK_EXT_depth_bias_control";
        
        public const int VK_EXT_device_memory_report = 1;
        
        public const int VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION = 2;
        
        public const string VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME = "VK_EXT_device_memory_report";
        
        public const int VK_EXT_acquire_drm_display = 1;
        
        public const int VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION = 1;
        
        public const string VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME = "VK_EXT_acquire_drm_display";
        
        public const int VK_EXT_robustness2 = 1;
        
        public const int VK_EXT_ROBUSTNESS_2_SPEC_VERSION = 1;
        
        public const string VK_EXT_ROBUSTNESS_2_EXTENSION_NAME = "VK_EXT_robustness2";
        
        public const int VK_EXT_custom_border_color = 1;
        
        public const int VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION = 12;
        
        public const string VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME = "VK_EXT_custom_border_color";
        
        public const int VK_GOOGLE_user_type = 1;
        
        public const int VK_GOOGLE_USER_TYPE_SPEC_VERSION = 1;
        
        public const string VK_GOOGLE_USER_TYPE_EXTENSION_NAME = "VK_GOOGLE_user_type";
        
        public const int VK_NV_present_barrier = 1;
        
        public const int VK_NV_PRESENT_BARRIER_SPEC_VERSION = 1;
        
        public const string VK_NV_PRESENT_BARRIER_EXTENSION_NAME = "VK_NV_present_barrier";
        
        public const int VK_EXT_private_data = 1;
        
        public const int VK_EXT_PRIVATE_DATA_SPEC_VERSION = 1;
        
        public const string VK_EXT_PRIVATE_DATA_EXTENSION_NAME = "VK_EXT_private_data";
        
        public const int VK_EXT_pipeline_creation_cache_control = 1;
        
        public const int VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION = 3;
        
        public const string VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME = "VK_EXT_pipeline_creation_cache_control";
        
        public const int VK_NV_device_diagnostics_config = 1;
        
        public const int VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION = 2;
        
        public const string VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME = "VK_NV_device_diagnostics_config";
        
        public const int VK_QCOM_render_pass_store_ops = 1;
        
        public const int VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION = 2;
        
        public const string VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME = "VK_QCOM_render_pass_store_ops";
        
        public const int VK_NV_low_latency = 1;
        
        public const int VK_NV_LOW_LATENCY_SPEC_VERSION = 1;
        
        public const string VK_NV_LOW_LATENCY_EXTENSION_NAME = "VK_NV_low_latency";
        
        public const int VK_EXT_descriptor_buffer = 1;
        
        public const int VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION = 1;
        
        public const string VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME = "VK_EXT_descriptor_buffer";
        
        public const int VK_EXT_graphics_pipeline_library = 1;
        
        public const int VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION = 1;
        
        public const string VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_EXT_graphics_pipeline_library";
        
        public const int VK_AMD_shader_early_and_late_fragment_tests = 1;
        
        public const int VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION = 1;
        
        public const string VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME = "VK_AMD_shader_early_and_late_fragment_tests";
        
        public const int VK_NV_fragment_shading_rate_enums = 1;
        
        public const int VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION = 1;
        
        public const string VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME = "VK_NV_fragment_shading_rate_enums";
        
        public const int VK_NV_ray_tracing_motion_blur = 1;
        
        public const int VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION = 1;
        
        public const string VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME = "VK_NV_ray_tracing_motion_blur";
        
        public const int VK_EXT_ycbcr_2plane_444_formats = 1;
        
        public const int VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION = 1;
        
        public const string VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME = "VK_EXT_ycbcr_2plane_444_formats";
        
        public const int VK_EXT_fragment_density_map2 = 1;
        
        public const int VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION = 1;
        
        public const string VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME = "VK_EXT_fragment_density_map2";
        
        public const int VK_QCOM_rotated_copy_commands = 1;
        
        public const int VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION = 1;
        
        public const string VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME = "VK_QCOM_rotated_copy_commands";
        
        public const int VK_EXT_image_robustness = 1;
        
        public const int VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION = 1;
        
        public const string VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_image_robustness";
        
        public const int VK_EXT_image_compression_control = 1;
        
        public const int VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION = 1;
        
        public const string VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME = "VK_EXT_image_compression_control";
        
        public const int VK_EXT_attachment_feedback_loop_layout = 1;
        
        public const int VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION = 2;
        
        public const string VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME = "VK_EXT_attachment_feedback_loop_layout";
        
        public const int VK_EXT_4444_formats = 1;
        
        public const int VK_EXT_4444_FORMATS_SPEC_VERSION = 1;
        
        public const string VK_EXT_4444_FORMATS_EXTENSION_NAME = "VK_EXT_4444_formats";
        
        public const int VK_EXT_device_fault = 1;
        
        public const int VK_EXT_DEVICE_FAULT_SPEC_VERSION = 2;
        
        public const string VK_EXT_DEVICE_FAULT_EXTENSION_NAME = "VK_EXT_device_fault";
        
        public const int VK_ARM_rasterization_order_attachment_access = 1;
        
        public const int VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION = 1;
        
        public const string VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_ARM_rasterization_order_attachment_access";
        
        public const int VK_EXT_rgba10x6_formats = 1;
        
        public const int VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION = 1;
        
        public const string VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME = "VK_EXT_rgba10x6_formats";
        
        public const int VK_VALVE_mutable_descriptor_type = 1;
        
        public const int VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION = 1;
        
        public const string VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_VALVE_mutable_descriptor_type";
        
        public const int VK_EXT_vertex_input_dynamic_state = 1;
        
        public const int VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION = 2;
        
        public const string VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_vertex_input_dynamic_state";
        
        public const int VK_EXT_physical_device_drm = 1;
        
        public const int VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION = 1;
        
        public const string VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME = "VK_EXT_physical_device_drm";
        
        public const int VK_EXT_device_address_binding_report = 1;
        
        public const int VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION = 1;
        
        public const string VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME = "VK_EXT_device_address_binding_report";
        
        public const int VK_EXT_depth_clip_control = 1;
        
        public const int VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION = 1;
        
        public const string VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME = "VK_EXT_depth_clip_control";
        
        public const int VK_EXT_primitive_topology_list_restart = 1;
        
        public const int VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION = 1;
        
        public const string VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME = "VK_EXT_primitive_topology_list_restart";
        
        public const int VK_HUAWEI_subpass_shading = 1;
        
        public const int VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION = 3;
        
        public const string VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME = "VK_HUAWEI_subpass_shading";
        
        public const int VK_HUAWEI_invocation_mask = 1;
        
        public const int VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION = 1;
        
        public const string VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME = "VK_HUAWEI_invocation_mask";
        
        public const int VK_NV_external_memory_rdma = 1;
        
        public const int VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION = 1;
        
        public const string VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME = "VK_NV_external_memory_rdma";
        
        public const int VK_EXT_pipeline_properties = 1;
        
        public const int VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION = 1;
        
        public const string VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME = "VK_EXT_pipeline_properties";
        
        public const int VK_EXT_multisampled_render_to_single_sampled = 1;
        
        public const int VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION = 1;
        
        public const string VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME = "VK_EXT_multisampled_render_to_single_sampled";
        
        public const int VK_EXT_extended_dynamic_state2 = 1;
        
        public const int VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION = 1;
        
        public const string VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME = "VK_EXT_extended_dynamic_state2";
        
        public const int VK_EXT_color_write_enable = 1;
        
        public const int VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION = 1;
        
        public const string VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME = "VK_EXT_color_write_enable";
        
        public const int VK_EXT_primitives_generated_query = 1;
        
        public const int VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION = 1;
        
        public const string VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME = "VK_EXT_primitives_generated_query";
        
        public const int VK_EXT_global_priority_query = 1;
        
        public const int VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION = 1;
        
        public const string VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME = "VK_EXT_global_priority_query";
        
        public const uint VK_MAX_GLOBAL_PRIORITY_SIZE_EXT = 16;
        
        public const int VK_EXT_image_view_min_lod = 1;
        
        public const int VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION = 1;
        
        public const string VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME = "VK_EXT_image_view_min_lod";
        
        public const int VK_EXT_multi_draw = 1;
        
        public const int VK_EXT_MULTI_DRAW_SPEC_VERSION = 1;
        
        public const string VK_EXT_MULTI_DRAW_EXTENSION_NAME = "VK_EXT_multi_draw";
        
        public const int VK_EXT_image_2d_view_of_3d = 1;
        
        public const int VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION = 1;
        
        public const string VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME = "VK_EXT_image_2d_view_of_3d";
        
        public const int VK_EXT_shader_tile_image = 1;
        
        public const int VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION = 1;
        
        public const string VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME = "VK_EXT_shader_tile_image";
        
        public const int VK_EXT_opacity_micromap = 1;
        
        public const int VK_EXT_OPACITY_MICROMAP_SPEC_VERSION = 2;
        
        public const string VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME = "VK_EXT_opacity_micromap";
        
        public const int VK_EXT_load_store_op_none = 1;
        
        public const int VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION = 1;
        
        public const string VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME = "VK_EXT_load_store_op_none";
        
        public const int VK_HUAWEI_cluster_culling_shader = 1;
        
        public const int VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION = 2;
        
        public const string VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME = "VK_HUAWEI_cluster_culling_shader";
        
        public const int VK_EXT_border_color_swizzle = 1;
        
        public const int VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION = 1;
        
        public const string VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME = "VK_EXT_border_color_swizzle";
        
        public const int VK_EXT_pageable_device_local_memory = 1;
        
        public const int VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION = 1;
        
        public const string VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME = "VK_EXT_pageable_device_local_memory";
        
        public const int VK_ARM_shader_core_properties = 1;
        
        public const int VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION = 1;
        
        public const string VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_ARM_shader_core_properties";
        
        public const int VK_EXT_image_sliced_view_of_3d = 1;
        
        public const int VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION = 1;
        
        public const string VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME = "VK_EXT_image_sliced_view_of_3d";
        
        public const uint VK_REMAINING_3D_SLICES_EXT = 4294967295;
        
        public const int VK_VALVE_descriptor_set_host_mapping = 1;
        
        public const int VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION = 1;
        
        public const string VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME = "VK_VALVE_descriptor_set_host_mapping";
        
        public const int VK_EXT_depth_clamp_zero_one = 1;
        
        public const int VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION = 1;
        
        public const string VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME = "VK_EXT_depth_clamp_zero_one";
        
        public const int VK_EXT_non_seamless_cube_map = 1;
        
        public const int VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION = 1;
        
        public const string VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME = "VK_EXT_non_seamless_cube_map";
        
        public const int VK_QCOM_fragment_density_map_offset = 1;
        
        public const int VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION = 1;
        
        public const string VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME = "VK_QCOM_fragment_density_map_offset";
        
        public const int VK_NV_copy_memory_indirect = 1;
        
        public const int VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION = 1;
        
        public const string VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME = "VK_NV_copy_memory_indirect";
        
        public const int VK_NV_memory_decompression = 1;
        
        public const int VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION = 1;
        
        public const string VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME = "VK_NV_memory_decompression";
        
        public const int VK_NV_device_generated_commands_compute = 1;
        
        public const int VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_SPEC_VERSION = 2;
        
        public const string VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_EXTENSION_NAME = "VK_NV_device_generated_commands_compute";
        
        public const int VK_NV_linear_color_attachment = 1;
        
        public const int VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION = 1;
        
        public const string VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME = "VK_NV_linear_color_attachment";
        
        public const int VK_GOOGLE_surfaceless_query = 1;
        
        public const int VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION = 2;
        
        public const string VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME = "VK_GOOGLE_surfaceless_query";
        
        public const int VK_EXT_image_compression_control_swapchain = 1;
        
        public const int VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION = 1;
        
        public const string VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME = "VK_EXT_image_compression_control_swapchain";
        
        public const int VK_QCOM_image_processing = 1;
        
        public const int VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION = 1;
        
        public const string VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME = "VK_QCOM_image_processing";
        
        public const int VK_EXT_external_memory_acquire_unmodified = 1;
        
        public const int VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_SPEC_VERSION = 1;
        
        public const string VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXTENSION_NAME = "VK_EXT_external_memory_acquire_unmodified";
        
        public const int VK_EXT_extended_dynamic_state3 = 1;
        
        public const int VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION = 2;
        
        public const string VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME = "VK_EXT_extended_dynamic_state3";
        
        public const int VK_EXT_subpass_merge_feedback = 1;
        
        public const int VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION = 2;
        
        public const string VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME = "VK_EXT_subpass_merge_feedback";
        
        public const int VK_LUNARG_direct_driver_loading = 1;
        
        public const int VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION = 1;
        
        public const string VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME = "VK_LUNARG_direct_driver_loading";
        
        public const int VK_EXT_shader_module_identifier = 1;
        
        public const uint VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT = 32;
        
        public const int VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION = 1;
        
        public const string VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME = "VK_EXT_shader_module_identifier";
        
        public const int VK_EXT_rasterization_order_attachment_access = 1;
        
        public const int VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION = 1;
        
        public const string VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_EXT_rasterization_order_attachment_access";
        
        public const int VK_NV_optical_flow = 1;
        
        public const int VK_NV_OPTICAL_FLOW_SPEC_VERSION = 1;
        
        public const string VK_NV_OPTICAL_FLOW_EXTENSION_NAME = "VK_NV_optical_flow";
        
        public const int VK_EXT_legacy_dithering = 1;
        
        public const int VK_EXT_LEGACY_DITHERING_SPEC_VERSION = 1;
        
        public const string VK_EXT_LEGACY_DITHERING_EXTENSION_NAME = "VK_EXT_legacy_dithering";
        
        public const int VK_EXT_pipeline_protected_access = 1;
        
        public const int VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION = 1;
        
        public const string VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME = "VK_EXT_pipeline_protected_access";
        
        public const int VK_EXT_shader_object = 1;
        
        public const int VK_EXT_SHADER_OBJECT_SPEC_VERSION = 1;
        
        public const string VK_EXT_SHADER_OBJECT_EXTENSION_NAME = "VK_EXT_shader_object";
        
        public const int VK_QCOM_tile_properties = 1;
        
        public const int VK_QCOM_TILE_PROPERTIES_SPEC_VERSION = 1;
        
        public const string VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME = "VK_QCOM_tile_properties";
        
        public const int VK_SEC_amigo_profiling = 1;
        
        public const int VK_SEC_AMIGO_PROFILING_SPEC_VERSION = 1;
        
        public const string VK_SEC_AMIGO_PROFILING_EXTENSION_NAME = "VK_SEC_amigo_profiling";
        
        public const int VK_QCOM_multiview_per_view_viewports = 1;
        
        public const int VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION = 1;
        
        public const string VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME = "VK_QCOM_multiview_per_view_viewports";
        
        public const int VK_NV_ray_tracing_invocation_reorder = 1;
        
        public const int VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION = 1;
        
        public const string VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME = "VK_NV_ray_tracing_invocation_reorder";
        
        public const int VK_EXT_mutable_descriptor_type = 1;
        
        public const int VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION = 1;
        
        public const string VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_EXT_mutable_descriptor_type";
        
        public const int VK_ARM_shader_core_builtins = 1;
        
        public const int VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION = 2;
        
        public const string VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME = "VK_ARM_shader_core_builtins";
        
        public const int VK_EXT_pipeline_library_group_handles = 1;
        
        public const int VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION = 1;
        
        public const string VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME = "VK_EXT_pipeline_library_group_handles";
        
        public const int VK_EXT_dynamic_rendering_unused_attachments = 1;
        
        public const int VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_SPEC_VERSION = 1;
        
        public const string VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_EXTENSION_NAME = "VK_EXT_dynamic_rendering_unused_attachments";
        
        public const int VK_QCOM_multiview_per_view_render_areas = 1;
        
        public const int VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION = 1;
        
        public const string VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME = "VK_QCOM_multiview_per_view_render_areas";
        
        public const int VK_EXT_attachment_feedback_loop_dynamic_state = 1;
        
        public const int VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION = 1;
        
        public const string VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_attachment_feedback_loop_dynamic_state";
        
        public const int VK_KHR_acceleration_structure = 1;
        
        public const int VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION = 13;
        
        public const string VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME = "VK_KHR_acceleration_structure";
        
        public const int VK_KHR_ray_tracing_pipeline = 1;
        
        public const int VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION = 1;
        
        public const string VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME = "VK_KHR_ray_tracing_pipeline";
        
        public const int VK_KHR_ray_query = 1;
        
        public const int VK_KHR_RAY_QUERY_SPEC_VERSION = 1;
        
        public const string VK_KHR_RAY_QUERY_EXTENSION_NAME = "VK_KHR_ray_query";
        
        public const int VK_EXT_mesh_shader = 1;
        
        public const int VK_EXT_MESH_SHADER_SPEC_VERSION = 1;
        
        public const string VK_EXT_MESH_SHADER_EXTENSION_NAME = "VK_EXT_mesh_shader";
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateInstance")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateInstance(in vulkan.VkInstanceCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkInstance pInstance);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyInstance")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyInstance(vulkan.VkInstance instance, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkEnumeratePhysicalDevices")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkEnumeratePhysicalDevices(vulkan.VkInstance instance, ref uint pPhysicalDeviceCount, ref vulkan.VkPhysicalDevice pPhysicalDevices);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceFeatures")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceFeatures(vulkan.VkPhysicalDevice physicalDevice, ref vulkan.VkPhysicalDeviceFeatures pFeatures);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceFormatProperties")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceFormatProperties(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkFormat format, ref vulkan.VkFormatProperties pFormatProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceImageFormatProperties")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceImageFormatProperties(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkFormat format, vulkan.VkImageType type, vulkan.VkImageTiling tiling, vulkan.VkImageUsageFlags usage, vulkan.VkImageCreateFlags flags, ref vulkan.VkImageFormatProperties pImageFormatProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceProperties")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceProperties(vulkan.VkPhysicalDevice physicalDevice, ref vulkan.VkPhysicalDeviceProperties pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceQueueFamilyProperties(vulkan.VkPhysicalDevice physicalDevice, ref uint pQueueFamilyPropertyCount, ref vulkan.VkQueueFamilyProperties pQueueFamilyProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceMemoryProperties")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceMemoryProperties(vulkan.VkPhysicalDevice physicalDevice, ref vulkan.VkPhysicalDeviceMemoryProperties pMemoryProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetInstanceProcAddr")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.PFN_vkVoidFunction vkGetInstanceProcAddr(vulkan.VkInstance instance, byte* pName);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceProcAddr")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.PFN_vkVoidFunction vkGetDeviceProcAddr(vulkan.VkDevice device, byte* pName);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateDevice")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateDevice(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkDeviceCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkDevice pDevice);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyDevice")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyDevice(vulkan.VkDevice device, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkEnumerateInstanceExtensionProperties")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkEnumerateInstanceExtensionProperties(byte* pLayerName, ref uint pPropertyCount, ref vulkan.VkExtensionProperties pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkEnumerateDeviceExtensionProperties")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkEnumerateDeviceExtensionProperties(vulkan.VkPhysicalDevice physicalDevice, byte* pLayerName, ref uint pPropertyCount, ref vulkan.VkExtensionProperties pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkEnumerateInstanceLayerProperties")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkEnumerateInstanceLayerProperties(ref uint pPropertyCount, ref vulkan.VkLayerProperties pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkEnumerateDeviceLayerProperties")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkEnumerateDeviceLayerProperties(vulkan.VkPhysicalDevice physicalDevice, ref uint pPropertyCount, ref vulkan.VkLayerProperties pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceQueue")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDeviceQueue(vulkan.VkDevice device, uint queueFamilyIndex, uint queueIndex, ref vulkan.VkQueue pQueue);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkQueueSubmit")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkQueueSubmit(vulkan.VkQueue queue, uint submitCount, in vulkan.VkSubmitInfo pSubmits, vulkan.VkFence fence);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkQueueWaitIdle")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkQueueWaitIdle(vulkan.VkQueue queue);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDeviceWaitIdle")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkDeviceWaitIdle(vulkan.VkDevice device);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkAllocateMemory")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkAllocateMemory(vulkan.VkDevice device, in vulkan.VkMemoryAllocateInfo pAllocateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkDeviceMemory pMemory);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkFreeMemory")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkFreeMemory(vulkan.VkDevice device, vulkan.VkDeviceMemory memory, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkMapMemory")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkMapMemory(vulkan.VkDevice device, vulkan.VkDeviceMemory memory, vulkan.VkDeviceSize offset, vulkan.VkDeviceSize size, vulkan.VkMemoryMapFlags flags, ref void* ppData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkUnmapMemory")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkUnmapMemory(vulkan.VkDevice device, vulkan.VkDeviceMemory memory);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkFlushMappedMemoryRanges")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkFlushMappedMemoryRanges(vulkan.VkDevice device, uint memoryRangeCount, in vulkan.VkMappedMemoryRange pMemoryRanges);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkInvalidateMappedMemoryRanges")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkInvalidateMappedMemoryRanges(vulkan.VkDevice device, uint memoryRangeCount, in vulkan.VkMappedMemoryRange pMemoryRanges);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceMemoryCommitment")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDeviceMemoryCommitment(vulkan.VkDevice device, vulkan.VkDeviceMemory memory, ref vulkan.VkDeviceSize pCommittedMemoryInBytes);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkBindBufferMemory")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkBindBufferMemory(vulkan.VkDevice device, vulkan.VkBuffer buffer, vulkan.VkDeviceMemory memory, vulkan.VkDeviceSize memoryOffset);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkBindImageMemory")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkBindImageMemory(vulkan.VkDevice device, vulkan.VkImage image, vulkan.VkDeviceMemory memory, vulkan.VkDeviceSize memoryOffset);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetBufferMemoryRequirements")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetBufferMemoryRequirements(vulkan.VkDevice device, vulkan.VkBuffer buffer, ref vulkan.VkMemoryRequirements pMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetImageMemoryRequirements")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetImageMemoryRequirements(vulkan.VkDevice device, vulkan.VkImage image, ref vulkan.VkMemoryRequirements pMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetImageSparseMemoryRequirements")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetImageSparseMemoryRequirements(vulkan.VkDevice device, vulkan.VkImage image, ref uint pSparseMemoryRequirementCount, ref vulkan.VkSparseImageMemoryRequirements pSparseMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceSparseImageFormatProperties(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkFormat format, vulkan.VkImageType type, vulkan.VkSampleCountFlagBits samples, vulkan.VkImageUsageFlags usage, vulkan.VkImageTiling tiling, ref uint pPropertyCount, ref vulkan.VkSparseImageFormatProperties pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkQueueBindSparse")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkQueueBindSparse(vulkan.VkQueue queue, uint bindInfoCount, in vulkan.VkBindSparseInfo pBindInfo, vulkan.VkFence fence);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateFence")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateFence(vulkan.VkDevice device, in vulkan.VkFenceCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkFence pFence);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyFence")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyFence(vulkan.VkDevice device, vulkan.VkFence fence, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkResetFences")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkResetFences(vulkan.VkDevice device, uint fenceCount, ref vulkan.VkFence pFences);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetFenceStatus")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetFenceStatus(vulkan.VkDevice device, vulkan.VkFence fence);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkWaitForFences")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkWaitForFences(vulkan.VkDevice device, uint fenceCount, ref vulkan.VkFence pFences, vulkan.VkBool32 waitAll, ulong timeout);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateSemaphore")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateSemaphore(vulkan.VkDevice device, in vulkan.VkSemaphoreCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSemaphore pSemaphore);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroySemaphore")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroySemaphore(vulkan.VkDevice device, vulkan.VkSemaphore semaphore, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateEvent")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateEvent(vulkan.VkDevice device, in vulkan.VkEventCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkEvent pEvent);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyEvent")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyEvent(vulkan.VkDevice device, vulkan.VkEvent @event, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetEventStatus")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetEventStatus(vulkan.VkDevice device, vulkan.VkEvent @event);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkSetEvent")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkSetEvent(vulkan.VkDevice device, vulkan.VkEvent @event);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkResetEvent")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkResetEvent(vulkan.VkDevice device, vulkan.VkEvent @event);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateQueryPool")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateQueryPool(vulkan.VkDevice device, in vulkan.VkQueryPoolCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkQueryPool pQueryPool);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyQueryPool")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyQueryPool(vulkan.VkDevice device, vulkan.VkQueryPool queryPool, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetQueryPoolResults")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetQueryPoolResults(vulkan.VkDevice device, vulkan.VkQueryPool queryPool, uint firstQuery, uint queryCount, nuint dataSize, void* pData, vulkan.VkDeviceSize stride, vulkan.VkQueryResultFlags flags);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateBuffer")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateBuffer(vulkan.VkDevice device, in vulkan.VkBufferCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkBuffer pBuffer);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyBuffer")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyBuffer(vulkan.VkDevice device, vulkan.VkBuffer buffer, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateBufferView")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateBufferView(vulkan.VkDevice device, in vulkan.VkBufferViewCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkBufferView pView);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyBufferView")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyBufferView(vulkan.VkDevice device, vulkan.VkBufferView bufferView, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateImage")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateImage(vulkan.VkDevice device, in vulkan.VkImageCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkImage pImage);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyImage")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyImage(vulkan.VkDevice device, vulkan.VkImage image, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetImageSubresourceLayout")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetImageSubresourceLayout(vulkan.VkDevice device, vulkan.VkImage image, in vulkan.VkImageSubresource pSubresource, ref vulkan.VkSubresourceLayout pLayout);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateImageView")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateImageView(vulkan.VkDevice device, in vulkan.VkImageViewCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkImageView pView);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyImageView")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyImageView(vulkan.VkDevice device, vulkan.VkImageView imageView, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateShaderModule")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateShaderModule(vulkan.VkDevice device, in vulkan.VkShaderModuleCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkShaderModule pShaderModule);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyShaderModule")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyShaderModule(vulkan.VkDevice device, vulkan.VkShaderModule shaderModule, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreatePipelineCache")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreatePipelineCache(vulkan.VkDevice device, in vulkan.VkPipelineCacheCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkPipelineCache pPipelineCache);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyPipelineCache")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyPipelineCache(vulkan.VkDevice device, vulkan.VkPipelineCache pipelineCache, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPipelineCacheData")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPipelineCacheData(vulkan.VkDevice device, vulkan.VkPipelineCache pipelineCache, ref nuint pDataSize, void* pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkMergePipelineCaches")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkMergePipelineCaches(vulkan.VkDevice device, vulkan.VkPipelineCache dstCache, uint srcCacheCount, ref vulkan.VkPipelineCache pSrcCaches);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateGraphicsPipelines")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateGraphicsPipelines(vulkan.VkDevice device, vulkan.VkPipelineCache pipelineCache, uint createInfoCount, in vulkan.VkGraphicsPipelineCreateInfo pCreateInfos, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkPipeline pPipelines);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateComputePipelines")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateComputePipelines(vulkan.VkDevice device, vulkan.VkPipelineCache pipelineCache, uint createInfoCount, in vulkan.VkComputePipelineCreateInfo pCreateInfos, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkPipeline pPipelines);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyPipeline")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyPipeline(vulkan.VkDevice device, vulkan.VkPipeline pipeline, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreatePipelineLayout")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreatePipelineLayout(vulkan.VkDevice device, in vulkan.VkPipelineLayoutCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkPipelineLayout pPipelineLayout);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyPipelineLayout")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyPipelineLayout(vulkan.VkDevice device, vulkan.VkPipelineLayout pipelineLayout, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateSampler")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateSampler(vulkan.VkDevice device, in vulkan.VkSamplerCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSampler pSampler);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroySampler")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroySampler(vulkan.VkDevice device, vulkan.VkSampler sampler, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateDescriptorSetLayout")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateDescriptorSetLayout(vulkan.VkDevice device, in vulkan.VkDescriptorSetLayoutCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkDescriptorSetLayout pSetLayout);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyDescriptorSetLayout")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyDescriptorSetLayout(vulkan.VkDevice device, vulkan.VkDescriptorSetLayout descriptorSetLayout, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateDescriptorPool")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateDescriptorPool(vulkan.VkDevice device, in vulkan.VkDescriptorPoolCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkDescriptorPool pDescriptorPool);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyDescriptorPool")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyDescriptorPool(vulkan.VkDevice device, vulkan.VkDescriptorPool descriptorPool, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkResetDescriptorPool")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkResetDescriptorPool(vulkan.VkDevice device, vulkan.VkDescriptorPool descriptorPool, vulkan.VkDescriptorPoolResetFlags flags);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkAllocateDescriptorSets")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkAllocateDescriptorSets(vulkan.VkDevice device, in vulkan.VkDescriptorSetAllocateInfo pAllocateInfo, ref vulkan.VkDescriptorSet pDescriptorSets);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkFreeDescriptorSets")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkFreeDescriptorSets(vulkan.VkDevice device, vulkan.VkDescriptorPool descriptorPool, uint descriptorSetCount, ref vulkan.VkDescriptorSet pDescriptorSets);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkUpdateDescriptorSets")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkUpdateDescriptorSets(vulkan.VkDevice device, uint descriptorWriteCount, in vulkan.VkWriteDescriptorSet pDescriptorWrites, uint descriptorCopyCount, in vulkan.VkCopyDescriptorSet pDescriptorCopies);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateFramebuffer")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateFramebuffer(vulkan.VkDevice device, in vulkan.VkFramebufferCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkFramebuffer pFramebuffer);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyFramebuffer")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyFramebuffer(vulkan.VkDevice device, vulkan.VkFramebuffer framebuffer, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateRenderPass")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateRenderPass(vulkan.VkDevice device, in vulkan.VkRenderPassCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkRenderPass pRenderPass);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyRenderPass")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyRenderPass(vulkan.VkDevice device, vulkan.VkRenderPass renderPass, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetRenderAreaGranularity")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetRenderAreaGranularity(vulkan.VkDevice device, vulkan.VkRenderPass renderPass, ref vulkan.VkExtent2D pGranularity);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateCommandPool")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateCommandPool(vulkan.VkDevice device, in vulkan.VkCommandPoolCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkCommandPool pCommandPool);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyCommandPool")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyCommandPool(vulkan.VkDevice device, vulkan.VkCommandPool commandPool, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkResetCommandPool")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkResetCommandPool(vulkan.VkDevice device, vulkan.VkCommandPool commandPool, vulkan.VkCommandPoolResetFlags flags);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkAllocateCommandBuffers")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkAllocateCommandBuffers(vulkan.VkDevice device, in vulkan.VkCommandBufferAllocateInfo pAllocateInfo, ref vulkan.VkCommandBuffer pCommandBuffers);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkFreeCommandBuffers")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkFreeCommandBuffers(vulkan.VkDevice device, vulkan.VkCommandPool commandPool, uint commandBufferCount, ref vulkan.VkCommandBuffer pCommandBuffers);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkBeginCommandBuffer")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkBeginCommandBuffer(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkCommandBufferBeginInfo pBeginInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkEndCommandBuffer")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkEndCommandBuffer(vulkan.VkCommandBuffer commandBuffer);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkResetCommandBuffer")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkResetCommandBuffer(vulkan.VkCommandBuffer commandBuffer, vulkan.VkCommandBufferResetFlags flags);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBindPipeline")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBindPipeline(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPipelineBindPoint pipelineBindPoint, vulkan.VkPipeline pipeline);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetViewport")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetViewport(vulkan.VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, in vulkan.VkViewport pViewports);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetScissor")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetScissor(vulkan.VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, in vulkan.VkRect2D pScissors);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetLineWidth")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetLineWidth(vulkan.VkCommandBuffer commandBuffer, float lineWidth);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDepthBias")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDepthBias(vulkan.VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetBlendConstants")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetBlendConstants(vulkan.VkCommandBuffer commandBuffer, FixedArray4<float> blendConstants);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDepthBounds")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDepthBounds(vulkan.VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetStencilCompareMask")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetStencilCompareMask(vulkan.VkCommandBuffer commandBuffer, vulkan.VkStencilFaceFlags faceMask, uint compareMask);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetStencilWriteMask")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetStencilWriteMask(vulkan.VkCommandBuffer commandBuffer, vulkan.VkStencilFaceFlags faceMask, uint writeMask);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetStencilReference")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetStencilReference(vulkan.VkCommandBuffer commandBuffer, vulkan.VkStencilFaceFlags faceMask, uint reference);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBindDescriptorSets")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBindDescriptorSets(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPipelineBindPoint pipelineBindPoint, vulkan.VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, ref vulkan.VkDescriptorSet pDescriptorSets, uint dynamicOffsetCount, ref uint pDynamicOffsets);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBindIndexBuffer")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBindIndexBuffer(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer buffer, vulkan.VkDeviceSize offset, vulkan.VkIndexType indexType);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBindVertexBuffers")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBindVertexBuffers(vulkan.VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref vulkan.VkBuffer pBuffers, ref vulkan.VkDeviceSize pOffsets);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDraw")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDraw(vulkan.VkCommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawIndexed")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawIndexed(vulkan.VkCommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawIndirect")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawIndirect(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer buffer, vulkan.VkDeviceSize offset, uint drawCount, uint stride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawIndexedIndirect")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawIndexedIndirect(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer buffer, vulkan.VkDeviceSize offset, uint drawCount, uint stride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDispatch")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDispatch(vulkan.VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDispatchIndirect")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDispatchIndirect(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer buffer, vulkan.VkDeviceSize offset);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyBuffer")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyBuffer(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer srcBuffer, vulkan.VkBuffer dstBuffer, uint regionCount, in vulkan.VkBufferCopy pRegions);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyImage")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyImage(vulkan.VkCommandBuffer commandBuffer, vulkan.VkImage srcImage, vulkan.VkImageLayout srcImageLayout, vulkan.VkImage dstImage, vulkan.VkImageLayout dstImageLayout, uint regionCount, in vulkan.VkImageCopy pRegions);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBlitImage")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBlitImage(vulkan.VkCommandBuffer commandBuffer, vulkan.VkImage srcImage, vulkan.VkImageLayout srcImageLayout, vulkan.VkImage dstImage, vulkan.VkImageLayout dstImageLayout, uint regionCount, in vulkan.VkImageBlit pRegions, vulkan.VkFilter filter);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyBufferToImage")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyBufferToImage(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer srcBuffer, vulkan.VkImage dstImage, vulkan.VkImageLayout dstImageLayout, uint regionCount, in vulkan.VkBufferImageCopy pRegions);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyImageToBuffer")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyImageToBuffer(vulkan.VkCommandBuffer commandBuffer, vulkan.VkImage srcImage, vulkan.VkImageLayout srcImageLayout, vulkan.VkBuffer dstBuffer, uint regionCount, in vulkan.VkBufferImageCopy pRegions);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdUpdateBuffer")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdUpdateBuffer(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer dstBuffer, vulkan.VkDeviceSize dstOffset, vulkan.VkDeviceSize dataSize, void* pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdFillBuffer")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdFillBuffer(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer dstBuffer, vulkan.VkDeviceSize dstOffset, vulkan.VkDeviceSize size, uint data);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdClearColorImage")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdClearColorImage(vulkan.VkCommandBuffer commandBuffer, vulkan.VkImage image, vulkan.VkImageLayout imageLayout, in vulkan.VkClearColorValue pColor, uint rangeCount, in vulkan.VkImageSubresourceRange pRanges);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdClearDepthStencilImage")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdClearDepthStencilImage(vulkan.VkCommandBuffer commandBuffer, vulkan.VkImage image, vulkan.VkImageLayout imageLayout, in vulkan.VkClearDepthStencilValue pDepthStencil, uint rangeCount, in vulkan.VkImageSubresourceRange pRanges);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdClearAttachments")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdClearAttachments(vulkan.VkCommandBuffer commandBuffer, uint attachmentCount, in vulkan.VkClearAttachment pAttachments, uint rectCount, in vulkan.VkClearRect pRects);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdResolveImage")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdResolveImage(vulkan.VkCommandBuffer commandBuffer, vulkan.VkImage srcImage, vulkan.VkImageLayout srcImageLayout, vulkan.VkImage dstImage, vulkan.VkImageLayout dstImageLayout, uint regionCount, in vulkan.VkImageResolve pRegions);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetEvent")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetEvent(vulkan.VkCommandBuffer commandBuffer, vulkan.VkEvent @event, vulkan.VkPipelineStageFlags stageMask);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdResetEvent")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdResetEvent(vulkan.VkCommandBuffer commandBuffer, vulkan.VkEvent @event, vulkan.VkPipelineStageFlags stageMask);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdWaitEvents")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdWaitEvents(vulkan.VkCommandBuffer commandBuffer, uint eventCount, ref vulkan.VkEvent pEvents, vulkan.VkPipelineStageFlags srcStageMask, vulkan.VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, in vulkan.VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, in vulkan.VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, in vulkan.VkImageMemoryBarrier pImageMemoryBarriers);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdPipelineBarrier")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdPipelineBarrier(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPipelineStageFlags srcStageMask, vulkan.VkPipelineStageFlags dstStageMask, vulkan.VkDependencyFlags dependencyFlags, uint memoryBarrierCount, in vulkan.VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, in vulkan.VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, in vulkan.VkImageMemoryBarrier pImageMemoryBarriers);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBeginQuery")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBeginQuery(vulkan.VkCommandBuffer commandBuffer, vulkan.VkQueryPool queryPool, uint query, vulkan.VkQueryControlFlags flags);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdEndQuery")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdEndQuery(vulkan.VkCommandBuffer commandBuffer, vulkan.VkQueryPool queryPool, uint query);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdResetQueryPool")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdResetQueryPool(vulkan.VkCommandBuffer commandBuffer, vulkan.VkQueryPool queryPool, uint firstQuery, uint queryCount);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdWriteTimestamp")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdWriteTimestamp(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPipelineStageFlagBits pipelineStage, vulkan.VkQueryPool queryPool, uint query);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyQueryPoolResults")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyQueryPoolResults(vulkan.VkCommandBuffer commandBuffer, vulkan.VkQueryPool queryPool, uint firstQuery, uint queryCount, vulkan.VkBuffer dstBuffer, vulkan.VkDeviceSize dstOffset, vulkan.VkDeviceSize stride, vulkan.VkQueryResultFlags flags);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdPushConstants")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdPushConstants(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPipelineLayout layout, vulkan.VkShaderStageFlags stageFlags, uint offset, uint size, void* pValues);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBeginRenderPass")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBeginRenderPass(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkRenderPassBeginInfo pRenderPassBegin, vulkan.VkSubpassContents contents);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdNextSubpass")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdNextSubpass(vulkan.VkCommandBuffer commandBuffer, vulkan.VkSubpassContents contents);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdEndRenderPass")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdEndRenderPass(vulkan.VkCommandBuffer commandBuffer);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdExecuteCommands")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdExecuteCommands(vulkan.VkCommandBuffer commandBuffer, uint commandBufferCount, ref vulkan.VkCommandBuffer pCommandBuffers);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkEnumerateInstanceVersion")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkEnumerateInstanceVersion(ref uint pApiVersion);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkBindBufferMemory2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkBindBufferMemory2(vulkan.VkDevice device, uint bindInfoCount, in vulkan.VkBindBufferMemoryInfo pBindInfos);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkBindImageMemory2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkBindImageMemory2(vulkan.VkDevice device, uint bindInfoCount, in vulkan.VkBindImageMemoryInfo pBindInfos);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceGroupPeerMemoryFeatures")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDeviceGroupPeerMemoryFeatures(vulkan.VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, ref vulkan.VkPeerMemoryFeatureFlags pPeerMemoryFeatures);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDeviceMask")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDeviceMask(vulkan.VkCommandBuffer commandBuffer, uint deviceMask);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDispatchBase")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDispatchBase(vulkan.VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkEnumeratePhysicalDeviceGroups")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkEnumeratePhysicalDeviceGroups(vulkan.VkInstance instance, ref uint pPhysicalDeviceGroupCount, ref vulkan.VkPhysicalDeviceGroupProperties pPhysicalDeviceGroupProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetImageMemoryRequirements2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetImageMemoryRequirements2(vulkan.VkDevice device, in vulkan.VkImageMemoryRequirementsInfo2 pInfo, ref vulkan.VkMemoryRequirements2 pMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetBufferMemoryRequirements2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetBufferMemoryRequirements2(vulkan.VkDevice device, in vulkan.VkBufferMemoryRequirementsInfo2 pInfo, ref vulkan.VkMemoryRequirements2 pMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetImageSparseMemoryRequirements2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetImageSparseMemoryRequirements2(vulkan.VkDevice device, in vulkan.VkImageSparseMemoryRequirementsInfo2 pInfo, ref uint pSparseMemoryRequirementCount, ref vulkan.VkSparseImageMemoryRequirements2 pSparseMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceFeatures2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceFeatures2(vulkan.VkPhysicalDevice physicalDevice, ref vulkan.VkPhysicalDeviceFeatures2 pFeatures);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceProperties2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceProperties2(vulkan.VkPhysicalDevice physicalDevice, ref vulkan.VkPhysicalDeviceProperties2 pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceFormatProperties2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceFormatProperties2(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkFormat format, ref vulkan.VkFormatProperties2 pFormatProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceImageFormatProperties2(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkPhysicalDeviceImageFormatInfo2 pImageFormatInfo, ref vulkan.VkImageFormatProperties2 pImageFormatProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceQueueFamilyProperties2(vulkan.VkPhysicalDevice physicalDevice, ref uint pQueueFamilyPropertyCount, ref vulkan.VkQueueFamilyProperties2 pQueueFamilyProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceMemoryProperties2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceMemoryProperties2(vulkan.VkPhysicalDevice physicalDevice, ref vulkan.VkPhysicalDeviceMemoryProperties2 pMemoryProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceSparseImageFormatProperties2(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkPhysicalDeviceSparseImageFormatInfo2 pFormatInfo, ref uint pPropertyCount, ref vulkan.VkSparseImageFormatProperties2 pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkTrimCommandPool")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkTrimCommandPool(vulkan.VkDevice device, vulkan.VkCommandPool commandPool, vulkan.VkCommandPoolTrimFlags flags);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceQueue2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDeviceQueue2(vulkan.VkDevice device, in vulkan.VkDeviceQueueInfo2 pQueueInfo, ref vulkan.VkQueue pQueue);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateSamplerYcbcrConversion")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateSamplerYcbcrConversion(vulkan.VkDevice device, in vulkan.VkSamplerYcbcrConversionCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSamplerYcbcrConversion pYcbcrConversion);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroySamplerYcbcrConversion")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroySamplerYcbcrConversion(vulkan.VkDevice device, vulkan.VkSamplerYcbcrConversion ycbcrConversion, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateDescriptorUpdateTemplate")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateDescriptorUpdateTemplate(vulkan.VkDevice device, in vulkan.VkDescriptorUpdateTemplateCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkDescriptorUpdateTemplate pDescriptorUpdateTemplate);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyDescriptorUpdateTemplate")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyDescriptorUpdateTemplate(vulkan.VkDevice device, vulkan.VkDescriptorUpdateTemplate descriptorUpdateTemplate, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkUpdateDescriptorSetWithTemplate")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkUpdateDescriptorSetWithTemplate(vulkan.VkDevice device, vulkan.VkDescriptorSet descriptorSet, vulkan.VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceExternalBufferProperties")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceExternalBufferProperties(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkPhysicalDeviceExternalBufferInfo pExternalBufferInfo, ref vulkan.VkExternalBufferProperties pExternalBufferProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceExternalFenceProperties")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceExternalFenceProperties(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkPhysicalDeviceExternalFenceInfo pExternalFenceInfo, ref vulkan.VkExternalFenceProperties pExternalFenceProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceExternalSemaphoreProperties")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceExternalSemaphoreProperties(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkPhysicalDeviceExternalSemaphoreInfo pExternalSemaphoreInfo, ref vulkan.VkExternalSemaphoreProperties pExternalSemaphoreProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDescriptorSetLayoutSupport")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDescriptorSetLayoutSupport(vulkan.VkDevice device, in vulkan.VkDescriptorSetLayoutCreateInfo pCreateInfo, ref vulkan.VkDescriptorSetLayoutSupport pSupport);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawIndirectCount")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawIndirectCount(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer buffer, vulkan.VkDeviceSize offset, vulkan.VkBuffer countBuffer, vulkan.VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawIndexedIndirectCount")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawIndexedIndirectCount(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer buffer, vulkan.VkDeviceSize offset, vulkan.VkBuffer countBuffer, vulkan.VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateRenderPass2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateRenderPass2(vulkan.VkDevice device, in vulkan.VkRenderPassCreateInfo2 pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkRenderPass pRenderPass);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBeginRenderPass2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBeginRenderPass2(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkRenderPassBeginInfo pRenderPassBegin, in vulkan.VkSubpassBeginInfo pSubpassBeginInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdNextSubpass2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdNextSubpass2(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkSubpassBeginInfo pSubpassBeginInfo, in vulkan.VkSubpassEndInfo pSubpassEndInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdEndRenderPass2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdEndRenderPass2(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkSubpassEndInfo pSubpassEndInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkResetQueryPool")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkResetQueryPool(vulkan.VkDevice device, vulkan.VkQueryPool queryPool, uint firstQuery, uint queryCount);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetSemaphoreCounterValue")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetSemaphoreCounterValue(vulkan.VkDevice device, vulkan.VkSemaphore semaphore, ref ulong pValue);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkWaitSemaphores")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkWaitSemaphores(vulkan.VkDevice device, in vulkan.VkSemaphoreWaitInfo pWaitInfo, ulong timeout);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkSignalSemaphore")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkSignalSemaphore(vulkan.VkDevice device, in vulkan.VkSemaphoreSignalInfo pSignalInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetBufferDeviceAddress")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkDeviceAddress vkGetBufferDeviceAddress(vulkan.VkDevice device, in vulkan.VkBufferDeviceAddressInfo pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetBufferOpaqueCaptureAddress")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial ulong vkGetBufferOpaqueCaptureAddress(vulkan.VkDevice device, in vulkan.VkBufferDeviceAddressInfo pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddress")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial ulong vkGetDeviceMemoryOpaqueCaptureAddress(vulkan.VkDevice device, in vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceToolProperties")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceToolProperties(vulkan.VkPhysicalDevice physicalDevice, ref uint pToolCount, ref vulkan.VkPhysicalDeviceToolProperties pToolProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreatePrivateDataSlot")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreatePrivateDataSlot(vulkan.VkDevice device, in vulkan.VkPrivateDataSlotCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkPrivateDataSlot pPrivateDataSlot);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyPrivateDataSlot")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyPrivateDataSlot(vulkan.VkDevice device, vulkan.VkPrivateDataSlot privateDataSlot, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkSetPrivateData")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkSetPrivateData(vulkan.VkDevice device, vulkan.VkObjectType objectType, ulong objectHandle, vulkan.VkPrivateDataSlot privateDataSlot, ulong data);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPrivateData")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPrivateData(vulkan.VkDevice device, vulkan.VkObjectType objectType, ulong objectHandle, vulkan.VkPrivateDataSlot privateDataSlot, ref ulong pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetEvent2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetEvent2(vulkan.VkCommandBuffer commandBuffer, vulkan.VkEvent @event, in vulkan.VkDependencyInfo pDependencyInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdResetEvent2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdResetEvent2(vulkan.VkCommandBuffer commandBuffer, vulkan.VkEvent @event, vulkan.VkPipelineStageFlags2 stageMask);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdWaitEvents2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdWaitEvents2(vulkan.VkCommandBuffer commandBuffer, uint eventCount, ref vulkan.VkEvent pEvents, in vulkan.VkDependencyInfo pDependencyInfos);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdPipelineBarrier2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdPipelineBarrier2(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkDependencyInfo pDependencyInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdWriteTimestamp2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdWriteTimestamp2(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPipelineStageFlags2 stage, vulkan.VkQueryPool queryPool, uint query);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkQueueSubmit2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkQueueSubmit2(vulkan.VkQueue queue, uint submitCount, in vulkan.VkSubmitInfo2 pSubmits, vulkan.VkFence fence);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyBuffer2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyBuffer2(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkCopyBufferInfo2 pCopyBufferInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyImage2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyImage2(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkCopyImageInfo2 pCopyImageInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyBufferToImage2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyBufferToImage2(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkCopyBufferToImageInfo2 pCopyBufferToImageInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyImageToBuffer2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyImageToBuffer2(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkCopyImageToBufferInfo2 pCopyImageToBufferInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBlitImage2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBlitImage2(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkBlitImageInfo2 pBlitImageInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdResolveImage2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdResolveImage2(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkResolveImageInfo2 pResolveImageInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBeginRendering")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBeginRendering(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkRenderingInfo pRenderingInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdEndRendering")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdEndRendering(vulkan.VkCommandBuffer commandBuffer);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetCullMode")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetCullMode(vulkan.VkCommandBuffer commandBuffer, vulkan.VkCullModeFlags cullMode);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetFrontFace")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetFrontFace(vulkan.VkCommandBuffer commandBuffer, vulkan.VkFrontFace frontFace);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetPrimitiveTopology")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetPrimitiveTopology(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPrimitiveTopology primitiveTopology);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetViewportWithCount")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetViewportWithCount(vulkan.VkCommandBuffer commandBuffer, uint viewportCount, in vulkan.VkViewport pViewports);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetScissorWithCount")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetScissorWithCount(vulkan.VkCommandBuffer commandBuffer, uint scissorCount, in vulkan.VkRect2D pScissors);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBindVertexBuffers2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBindVertexBuffers2(vulkan.VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref vulkan.VkBuffer pBuffers, ref vulkan.VkDeviceSize pOffsets, ref vulkan.VkDeviceSize pSizes, ref vulkan.VkDeviceSize pStrides);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDepthTestEnable")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDepthTestEnable(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 depthTestEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDepthWriteEnable")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDepthWriteEnable(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 depthWriteEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDepthCompareOp")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDepthCompareOp(vulkan.VkCommandBuffer commandBuffer, vulkan.VkCompareOp depthCompareOp);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDepthBoundsTestEnable")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDepthBoundsTestEnable(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 depthBoundsTestEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetStencilTestEnable")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetStencilTestEnable(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 stencilTestEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetStencilOp")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetStencilOp(vulkan.VkCommandBuffer commandBuffer, vulkan.VkStencilFaceFlags faceMask, vulkan.VkStencilOp failOp, vulkan.VkStencilOp passOp, vulkan.VkStencilOp depthFailOp, vulkan.VkCompareOp compareOp);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetRasterizerDiscardEnable")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetRasterizerDiscardEnable(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 rasterizerDiscardEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDepthBiasEnable")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDepthBiasEnable(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 depthBiasEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetPrimitiveRestartEnable")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetPrimitiveRestartEnable(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 primitiveRestartEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceBufferMemoryRequirements")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDeviceBufferMemoryRequirements(vulkan.VkDevice device, in vulkan.VkDeviceBufferMemoryRequirements pInfo, ref vulkan.VkMemoryRequirements2 pMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceImageMemoryRequirements")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDeviceImageMemoryRequirements(vulkan.VkDevice device, in vulkan.VkDeviceImageMemoryRequirements pInfo, ref vulkan.VkMemoryRequirements2 pMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceImageSparseMemoryRequirements")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDeviceImageSparseMemoryRequirements(vulkan.VkDevice device, in vulkan.VkDeviceImageMemoryRequirements pInfo, ref uint pSparseMemoryRequirementCount, ref vulkan.VkSparseImageMemoryRequirements2 pSparseMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroySurfaceKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroySurfaceKHR(vulkan.VkInstance instance, vulkan.VkSurfaceKHR surface, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceSurfaceSupportKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceSurfaceSupportKHR(vulkan.VkPhysicalDevice physicalDevice, uint queueFamilyIndex, vulkan.VkSurfaceKHR surface, ref vulkan.VkBool32 pSupported);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilitiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkSurfaceKHR surface, ref vulkan.VkSurfaceCapabilitiesKHR pSurfaceCapabilities);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceSurfaceFormatsKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkSurfaceKHR surface, ref uint pSurfaceFormatCount, ref vulkan.VkSurfaceFormatKHR pSurfaceFormats);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceSurfacePresentModesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkSurfaceKHR surface, ref uint pPresentModeCount, ref vulkan.VkPresentModeKHR pPresentModes);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateSwapchainKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateSwapchainKHR(vulkan.VkDevice device, in vulkan.VkSwapchainCreateInfoKHR pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSwapchainKHR pSwapchain);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroySwapchainKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroySwapchainKHR(vulkan.VkDevice device, vulkan.VkSwapchainKHR swapchain, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetSwapchainImagesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetSwapchainImagesKHR(vulkan.VkDevice device, vulkan.VkSwapchainKHR swapchain, ref uint pSwapchainImageCount, ref vulkan.VkImage pSwapchainImages);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkAcquireNextImageKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkAcquireNextImageKHR(vulkan.VkDevice device, vulkan.VkSwapchainKHR swapchain, ulong timeout, vulkan.VkSemaphore semaphore, vulkan.VkFence fence, ref uint pImageIndex);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkQueuePresentKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkQueuePresentKHR(vulkan.VkQueue queue, in vulkan.VkPresentInfoKHR pPresentInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceGroupPresentCapabilitiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetDeviceGroupPresentCapabilitiesKHR(vulkan.VkDevice device, ref vulkan.VkDeviceGroupPresentCapabilitiesKHR pDeviceGroupPresentCapabilities);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceGroupSurfacePresentModesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetDeviceGroupSurfacePresentModesKHR(vulkan.VkDevice device, vulkan.VkSurfaceKHR surface, ref vulkan.VkDeviceGroupPresentModeFlagsKHR pModes);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDevicePresentRectanglesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDevicePresentRectanglesKHR(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkSurfaceKHR surface, ref uint pRectCount, ref vulkan.VkRect2D pRects);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkAcquireNextImage2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkAcquireNextImage2KHR(vulkan.VkDevice device, in vulkan.VkAcquireNextImageInfoKHR pAcquireInfo, ref uint pImageIndex);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceDisplayPropertiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(vulkan.VkPhysicalDevice physicalDevice, ref uint pPropertyCount, ref vulkan.VkDisplayPropertiesKHR pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceDisplayPlanePropertiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(vulkan.VkPhysicalDevice physicalDevice, ref uint pPropertyCount, ref vulkan.VkDisplayPlanePropertiesKHR pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDisplayPlaneSupportedDisplaysKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetDisplayPlaneSupportedDisplaysKHR(vulkan.VkPhysicalDevice physicalDevice, uint planeIndex, ref uint pDisplayCount, ref vulkan.VkDisplayKHR pDisplays);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDisplayModePropertiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetDisplayModePropertiesKHR(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkDisplayKHR display, ref uint pPropertyCount, ref vulkan.VkDisplayModePropertiesKHR pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateDisplayModeKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateDisplayModeKHR(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkDisplayKHR display, in vulkan.VkDisplayModeCreateInfoKHR pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkDisplayModeKHR pMode);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDisplayPlaneCapabilitiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetDisplayPlaneCapabilitiesKHR(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkDisplayModeKHR mode, uint planeIndex, ref vulkan.VkDisplayPlaneCapabilitiesKHR pCapabilities);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateDisplayPlaneSurfaceKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateDisplayPlaneSurfaceKHR(vulkan.VkInstance instance, in vulkan.VkDisplaySurfaceCreateInfoKHR pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSurfaceKHR pSurface);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateSharedSwapchainsKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateSharedSwapchainsKHR(vulkan.VkDevice device, uint swapchainCount, in vulkan.VkSwapchainCreateInfoKHR pCreateInfos, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSwapchainKHR pSwapchains);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceVideoCapabilitiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceVideoCapabilitiesKHR(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkVideoProfileInfoKHR pVideoProfile, ref vulkan.VkVideoCapabilitiesKHR pCapabilities);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceVideoFormatPropertiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceVideoFormatPropertiesKHR(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkPhysicalDeviceVideoFormatInfoKHR pVideoFormatInfo, ref uint pVideoFormatPropertyCount, ref vulkan.VkVideoFormatPropertiesKHR pVideoFormatProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateVideoSessionKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateVideoSessionKHR(vulkan.VkDevice device, in vulkan.VkVideoSessionCreateInfoKHR pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkVideoSessionKHR pVideoSession);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyVideoSessionKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyVideoSessionKHR(vulkan.VkDevice device, vulkan.VkVideoSessionKHR videoSession, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetVideoSessionMemoryRequirementsKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetVideoSessionMemoryRequirementsKHR(vulkan.VkDevice device, vulkan.VkVideoSessionKHR videoSession, ref uint pMemoryRequirementsCount, ref vulkan.VkVideoSessionMemoryRequirementsKHR pMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkBindVideoSessionMemoryKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkBindVideoSessionMemoryKHR(vulkan.VkDevice device, vulkan.VkVideoSessionKHR videoSession, uint bindSessionMemoryInfoCount, in vulkan.VkBindVideoSessionMemoryInfoKHR pBindSessionMemoryInfos);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateVideoSessionParametersKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateVideoSessionParametersKHR(vulkan.VkDevice device, in vulkan.VkVideoSessionParametersCreateInfoKHR pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkVideoSessionParametersKHR pVideoSessionParameters);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkUpdateVideoSessionParametersKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkUpdateVideoSessionParametersKHR(vulkan.VkDevice device, vulkan.VkVideoSessionParametersKHR videoSessionParameters, in vulkan.VkVideoSessionParametersUpdateInfoKHR pUpdateInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyVideoSessionParametersKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyVideoSessionParametersKHR(vulkan.VkDevice device, vulkan.VkVideoSessionParametersKHR videoSessionParameters, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBeginVideoCodingKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBeginVideoCodingKHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkVideoBeginCodingInfoKHR pBeginInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdEndVideoCodingKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdEndVideoCodingKHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkVideoEndCodingInfoKHR pEndCodingInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdControlVideoCodingKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdControlVideoCodingKHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkVideoCodingControlInfoKHR pCodingControlInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDecodeVideoKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDecodeVideoKHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkVideoDecodeInfoKHR pDecodeInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBeginRenderingKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBeginRenderingKHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkRenderingInfo pRenderingInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdEndRenderingKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdEndRenderingKHR(vulkan.VkCommandBuffer commandBuffer);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceFeatures2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceFeatures2KHR(vulkan.VkPhysicalDevice physicalDevice, ref vulkan.VkPhysicalDeviceFeatures2 pFeatures);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceProperties2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceProperties2KHR(vulkan.VkPhysicalDevice physicalDevice, ref vulkan.VkPhysicalDeviceProperties2 pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceFormatProperties2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceFormatProperties2KHR(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkFormat format, ref vulkan.VkFormatProperties2 pFormatProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkPhysicalDeviceImageFormatInfo2 pImageFormatInfo, ref vulkan.VkImageFormatProperties2 pImageFormatProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceQueueFamilyProperties2KHR(vulkan.VkPhysicalDevice physicalDevice, ref uint pQueueFamilyPropertyCount, ref vulkan.VkQueueFamilyProperties2 pQueueFamilyProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceMemoryProperties2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceMemoryProperties2KHR(vulkan.VkPhysicalDevice physicalDevice, ref vulkan.VkPhysicalDeviceMemoryProperties2 pMemoryProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkPhysicalDeviceSparseImageFormatInfo2 pFormatInfo, ref uint pPropertyCount, ref vulkan.VkSparseImageFormatProperties2 pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceGroupPeerMemoryFeaturesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDeviceGroupPeerMemoryFeaturesKHR(vulkan.VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, ref vulkan.VkPeerMemoryFeatureFlags pPeerMemoryFeatures);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDeviceMaskKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDeviceMaskKHR(vulkan.VkCommandBuffer commandBuffer, uint deviceMask);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDispatchBaseKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDispatchBaseKHR(vulkan.VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkTrimCommandPoolKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkTrimCommandPoolKHR(vulkan.VkDevice device, vulkan.VkCommandPool commandPool, vulkan.VkCommandPoolTrimFlags flags);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkEnumeratePhysicalDeviceGroupsKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkEnumeratePhysicalDeviceGroupsKHR(vulkan.VkInstance instance, ref uint pPhysicalDeviceGroupCount, ref vulkan.VkPhysicalDeviceGroupProperties pPhysicalDeviceGroupProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceExternalBufferPropertiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceExternalBufferPropertiesKHR(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkPhysicalDeviceExternalBufferInfo pExternalBufferInfo, ref vulkan.VkExternalBufferProperties pExternalBufferProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetMemoryFdKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetMemoryFdKHR(vulkan.VkDevice device, in vulkan.VkMemoryGetFdInfoKHR pGetFdInfo, ref int pFd);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetMemoryFdPropertiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetMemoryFdPropertiesKHR(vulkan.VkDevice device, vulkan.VkExternalMemoryHandleTypeFlagBits handleType, int fd, ref vulkan.VkMemoryFdPropertiesKHR pMemoryFdProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkPhysicalDeviceExternalSemaphoreInfo pExternalSemaphoreInfo, ref vulkan.VkExternalSemaphoreProperties pExternalSemaphoreProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkImportSemaphoreFdKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkImportSemaphoreFdKHR(vulkan.VkDevice device, in vulkan.VkImportSemaphoreFdInfoKHR pImportSemaphoreFdInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetSemaphoreFdKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetSemaphoreFdKHR(vulkan.VkDevice device, in vulkan.VkSemaphoreGetFdInfoKHR pGetFdInfo, ref int pFd);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdPushDescriptorSetKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdPushDescriptorSetKHR(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPipelineBindPoint pipelineBindPoint, vulkan.VkPipelineLayout layout, uint set, uint descriptorWriteCount, in vulkan.VkWriteDescriptorSet pDescriptorWrites);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdPushDescriptorSetWithTemplateKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdPushDescriptorSetWithTemplateKHR(vulkan.VkCommandBuffer commandBuffer, vulkan.VkDescriptorUpdateTemplate descriptorUpdateTemplate, vulkan.VkPipelineLayout layout, uint set, void* pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateDescriptorUpdateTemplateKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateDescriptorUpdateTemplateKHR(vulkan.VkDevice device, in vulkan.VkDescriptorUpdateTemplateCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkDescriptorUpdateTemplate pDescriptorUpdateTemplate);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyDescriptorUpdateTemplateKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyDescriptorUpdateTemplateKHR(vulkan.VkDevice device, vulkan.VkDescriptorUpdateTemplate descriptorUpdateTemplate, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkUpdateDescriptorSetWithTemplateKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkUpdateDescriptorSetWithTemplateKHR(vulkan.VkDevice device, vulkan.VkDescriptorSet descriptorSet, vulkan.VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateRenderPass2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateRenderPass2KHR(vulkan.VkDevice device, in vulkan.VkRenderPassCreateInfo2 pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkRenderPass pRenderPass);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBeginRenderPass2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBeginRenderPass2KHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkRenderPassBeginInfo pRenderPassBegin, in vulkan.VkSubpassBeginInfo pSubpassBeginInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdNextSubpass2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdNextSubpass2KHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkSubpassBeginInfo pSubpassBeginInfo, in vulkan.VkSubpassEndInfo pSubpassEndInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdEndRenderPass2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdEndRenderPass2KHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkSubpassEndInfo pSubpassEndInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetSwapchainStatusKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetSwapchainStatusKHR(vulkan.VkDevice device, vulkan.VkSwapchainKHR swapchain);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceExternalFencePropertiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceExternalFencePropertiesKHR(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkPhysicalDeviceExternalFenceInfo pExternalFenceInfo, ref vulkan.VkExternalFenceProperties pExternalFenceProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkImportFenceFdKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkImportFenceFdKHR(vulkan.VkDevice device, in vulkan.VkImportFenceFdInfoKHR pImportFenceFdInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetFenceFdKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetFenceFdKHR(vulkan.VkDevice device, in vulkan.VkFenceGetFdInfoKHR pGetFdInfo, ref int pFd);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(vulkan.VkPhysicalDevice physicalDevice, uint queueFamilyIndex, ref uint pCounterCount, ref vulkan.VkPerformanceCounterKHR pCounters, ref vulkan.VkPerformanceCounterDescriptionKHR pCounterDescriptions);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkQueryPoolPerformanceCreateInfoKHR pPerformanceQueryCreateInfo, ref uint pNumPasses);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkAcquireProfilingLockKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkAcquireProfilingLockKHR(vulkan.VkDevice device, in vulkan.VkAcquireProfilingLockInfoKHR pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkReleaseProfilingLockKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkReleaseProfilingLockKHR(vulkan.VkDevice device);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkPhysicalDeviceSurfaceInfo2KHR pSurfaceInfo, ref vulkan.VkSurfaceCapabilities2KHR pSurfaceCapabilities);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceSurfaceFormats2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkPhysicalDeviceSurfaceInfo2KHR pSurfaceInfo, ref uint pSurfaceFormatCount, ref vulkan.VkSurfaceFormat2KHR pSurfaceFormats);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceDisplayProperties2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceDisplayProperties2KHR(vulkan.VkPhysicalDevice physicalDevice, ref uint pPropertyCount, ref vulkan.VkDisplayProperties2KHR pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceDisplayPlaneProperties2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(vulkan.VkPhysicalDevice physicalDevice, ref uint pPropertyCount, ref vulkan.VkDisplayPlaneProperties2KHR pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDisplayModeProperties2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetDisplayModeProperties2KHR(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkDisplayKHR display, ref uint pPropertyCount, ref vulkan.VkDisplayModeProperties2KHR pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDisplayPlaneCapabilities2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetDisplayPlaneCapabilities2KHR(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkDisplayPlaneInfo2KHR pDisplayPlaneInfo, ref vulkan.VkDisplayPlaneCapabilities2KHR pCapabilities);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetImageMemoryRequirements2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetImageMemoryRequirements2KHR(vulkan.VkDevice device, in vulkan.VkImageMemoryRequirementsInfo2 pInfo, ref vulkan.VkMemoryRequirements2 pMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetBufferMemoryRequirements2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetBufferMemoryRequirements2KHR(vulkan.VkDevice device, in vulkan.VkBufferMemoryRequirementsInfo2 pInfo, ref vulkan.VkMemoryRequirements2 pMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetImageSparseMemoryRequirements2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetImageSparseMemoryRequirements2KHR(vulkan.VkDevice device, in vulkan.VkImageSparseMemoryRequirementsInfo2 pInfo, ref uint pSparseMemoryRequirementCount, ref vulkan.VkSparseImageMemoryRequirements2 pSparseMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateSamplerYcbcrConversionKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateSamplerYcbcrConversionKHR(vulkan.VkDevice device, in vulkan.VkSamplerYcbcrConversionCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSamplerYcbcrConversion pYcbcrConversion);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroySamplerYcbcrConversionKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroySamplerYcbcrConversionKHR(vulkan.VkDevice device, vulkan.VkSamplerYcbcrConversion ycbcrConversion, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkBindBufferMemory2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkBindBufferMemory2KHR(vulkan.VkDevice device, uint bindInfoCount, in vulkan.VkBindBufferMemoryInfo pBindInfos);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkBindImageMemory2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkBindImageMemory2KHR(vulkan.VkDevice device, uint bindInfoCount, in vulkan.VkBindImageMemoryInfo pBindInfos);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDescriptorSetLayoutSupportKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDescriptorSetLayoutSupportKHR(vulkan.VkDevice device, in vulkan.VkDescriptorSetLayoutCreateInfo pCreateInfo, ref vulkan.VkDescriptorSetLayoutSupport pSupport);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawIndirectCountKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawIndirectCountKHR(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer buffer, vulkan.VkDeviceSize offset, vulkan.VkBuffer countBuffer, vulkan.VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawIndexedIndirectCountKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawIndexedIndirectCountKHR(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer buffer, vulkan.VkDeviceSize offset, vulkan.VkBuffer countBuffer, vulkan.VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetSemaphoreCounterValueKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetSemaphoreCounterValueKHR(vulkan.VkDevice device, vulkan.VkSemaphore semaphore, ref ulong pValue);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkWaitSemaphoresKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkWaitSemaphoresKHR(vulkan.VkDevice device, in vulkan.VkSemaphoreWaitInfo pWaitInfo, ulong timeout);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkSignalSemaphoreKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkSignalSemaphoreKHR(vulkan.VkDevice device, in vulkan.VkSemaphoreSignalInfo pSignalInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceFragmentShadingRatesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(vulkan.VkPhysicalDevice physicalDevice, ref uint pFragmentShadingRateCount, ref vulkan.VkPhysicalDeviceFragmentShadingRateKHR pFragmentShadingRates);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetFragmentShadingRateKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetFragmentShadingRateKHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkExtent2D pFragmentSize, FixedArray2<vulkan.VkFragmentShadingRateCombinerOpKHR> combinerOps);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkWaitForPresentKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkWaitForPresentKHR(vulkan.VkDevice device, vulkan.VkSwapchainKHR swapchain, ulong presentId, ulong timeout);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetBufferDeviceAddressKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkDeviceAddress vkGetBufferDeviceAddressKHR(vulkan.VkDevice device, in vulkan.VkBufferDeviceAddressInfo pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetBufferOpaqueCaptureAddressKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial ulong vkGetBufferOpaqueCaptureAddressKHR(vulkan.VkDevice device, in vulkan.VkBufferDeviceAddressInfo pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddressKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial ulong vkGetDeviceMemoryOpaqueCaptureAddressKHR(vulkan.VkDevice device, in vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateDeferredOperationKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateDeferredOperationKHR(vulkan.VkDevice device, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkDeferredOperationKHR pDeferredOperation);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyDeferredOperationKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyDeferredOperationKHR(vulkan.VkDevice device, vulkan.VkDeferredOperationKHR operation, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeferredOperationMaxConcurrencyKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial uint vkGetDeferredOperationMaxConcurrencyKHR(vulkan.VkDevice device, vulkan.VkDeferredOperationKHR operation);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeferredOperationResultKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetDeferredOperationResultKHR(vulkan.VkDevice device, vulkan.VkDeferredOperationKHR operation);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDeferredOperationJoinKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkDeferredOperationJoinKHR(vulkan.VkDevice device, vulkan.VkDeferredOperationKHR operation);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPipelineExecutablePropertiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPipelineExecutablePropertiesKHR(vulkan.VkDevice device, in vulkan.VkPipelineInfoKHR pPipelineInfo, ref uint pExecutableCount, ref vulkan.VkPipelineExecutablePropertiesKHR pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPipelineExecutableStatisticsKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPipelineExecutableStatisticsKHR(vulkan.VkDevice device, in vulkan.VkPipelineExecutableInfoKHR pExecutableInfo, ref uint pStatisticCount, ref vulkan.VkPipelineExecutableStatisticKHR pStatistics);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPipelineExecutableInternalRepresentationsKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPipelineExecutableInternalRepresentationsKHR(vulkan.VkDevice device, in vulkan.VkPipelineExecutableInfoKHR pExecutableInfo, ref uint pInternalRepresentationCount, ref vulkan.VkPipelineExecutableInternalRepresentationKHR pInternalRepresentations);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkMapMemory2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkMapMemory2KHR(vulkan.VkDevice device, in vulkan.VkMemoryMapInfoKHR pMemoryMapInfo, ref void* ppData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkUnmapMemory2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkUnmapMemory2KHR(vulkan.VkDevice device, in vulkan.VkMemoryUnmapInfoKHR pMemoryUnmapInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetEvent2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetEvent2KHR(vulkan.VkCommandBuffer commandBuffer, vulkan.VkEvent @event, in vulkan.VkDependencyInfo pDependencyInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdResetEvent2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdResetEvent2KHR(vulkan.VkCommandBuffer commandBuffer, vulkan.VkEvent @event, vulkan.VkPipelineStageFlags2 stageMask);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdWaitEvents2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdWaitEvents2KHR(vulkan.VkCommandBuffer commandBuffer, uint eventCount, ref vulkan.VkEvent pEvents, in vulkan.VkDependencyInfo pDependencyInfos);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdPipelineBarrier2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdPipelineBarrier2KHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkDependencyInfo pDependencyInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdWriteTimestamp2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdWriteTimestamp2KHR(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPipelineStageFlags2 stage, vulkan.VkQueryPool queryPool, uint query);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkQueueSubmit2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkQueueSubmit2KHR(vulkan.VkQueue queue, uint submitCount, in vulkan.VkSubmitInfo2 pSubmits, vulkan.VkFence fence);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdWriteBufferMarker2AMD")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdWriteBufferMarker2AMD(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPipelineStageFlags2 stage, vulkan.VkBuffer dstBuffer, vulkan.VkDeviceSize dstOffset, uint marker);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetQueueCheckpointData2NV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetQueueCheckpointData2NV(vulkan.VkQueue queue, ref uint pCheckpointDataCount, ref vulkan.VkCheckpointData2NV pCheckpointData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyBuffer2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyBuffer2KHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkCopyBufferInfo2 pCopyBufferInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyImage2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyImage2KHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkCopyImageInfo2 pCopyImageInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyBufferToImage2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyBufferToImage2KHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkCopyBufferToImageInfo2 pCopyBufferToImageInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyImageToBuffer2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyImageToBuffer2KHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkCopyImageToBufferInfo2 pCopyImageToBufferInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBlitImage2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBlitImage2KHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkBlitImageInfo2 pBlitImageInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdResolveImage2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdResolveImage2KHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkResolveImageInfo2 pResolveImageInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdTraceRaysIndirect2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdTraceRaysIndirect2KHR(vulkan.VkCommandBuffer commandBuffer, vulkan.VkDeviceAddress indirectDeviceAddress);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceBufferMemoryRequirementsKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDeviceBufferMemoryRequirementsKHR(vulkan.VkDevice device, in vulkan.VkDeviceBufferMemoryRequirements pInfo, ref vulkan.VkMemoryRequirements2 pMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceImageMemoryRequirementsKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDeviceImageMemoryRequirementsKHR(vulkan.VkDevice device, in vulkan.VkDeviceImageMemoryRequirements pInfo, ref vulkan.VkMemoryRequirements2 pMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceImageSparseMemoryRequirementsKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDeviceImageSparseMemoryRequirementsKHR(vulkan.VkDevice device, in vulkan.VkDeviceImageMemoryRequirements pInfo, ref uint pSparseMemoryRequirementCount, ref vulkan.VkSparseImageMemoryRequirements2 pSparseMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBindIndexBuffer2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBindIndexBuffer2KHR(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer buffer, vulkan.VkDeviceSize offset, vulkan.VkDeviceSize size, vulkan.VkIndexType indexType);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetRenderingAreaGranularityKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetRenderingAreaGranularityKHR(vulkan.VkDevice device, in vulkan.VkRenderingAreaInfoKHR pRenderingAreaInfo, ref vulkan.VkExtent2D pGranularity);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceImageSubresourceLayoutKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDeviceImageSubresourceLayoutKHR(vulkan.VkDevice device, in vulkan.VkDeviceImageSubresourceInfoKHR pInfo, ref vulkan.VkSubresourceLayout2KHR pLayout);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetImageSubresourceLayout2KHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetImageSubresourceLayout2KHR(vulkan.VkDevice device, vulkan.VkImage image, in vulkan.VkImageSubresource2KHR pSubresource, ref vulkan.VkSubresourceLayout2KHR pLayout);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(vulkan.VkPhysicalDevice physicalDevice, ref uint pPropertyCount, ref vulkan.VkCooperativeMatrixPropertiesKHR pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateDebugReportCallbackEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateDebugReportCallbackEXT(vulkan.VkInstance instance, in vulkan.VkDebugReportCallbackCreateInfoEXT pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkDebugReportCallbackEXT pCallback);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyDebugReportCallbackEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyDebugReportCallbackEXT(vulkan.VkInstance instance, vulkan.VkDebugReportCallbackEXT callback, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDebugReportMessageEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDebugReportMessageEXT(vulkan.VkInstance instance, vulkan.VkDebugReportFlagsEXT flags, vulkan.VkDebugReportObjectTypeEXT objectType, ulong @object, nuint location, int messageCode, byte* pLayerPrefix, byte* pMessage);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDebugMarkerSetObjectTagEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkDebugMarkerSetObjectTagEXT(vulkan.VkDevice device, in vulkan.VkDebugMarkerObjectTagInfoEXT pTagInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDebugMarkerSetObjectNameEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkDebugMarkerSetObjectNameEXT(vulkan.VkDevice device, in vulkan.VkDebugMarkerObjectNameInfoEXT pNameInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDebugMarkerBeginEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDebugMarkerBeginEXT(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkDebugMarkerMarkerInfoEXT pMarkerInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDebugMarkerEndEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDebugMarkerEndEXT(vulkan.VkCommandBuffer commandBuffer);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDebugMarkerInsertEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDebugMarkerInsertEXT(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkDebugMarkerMarkerInfoEXT pMarkerInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBindTransformFeedbackBuffersEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBindTransformFeedbackBuffersEXT(vulkan.VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref vulkan.VkBuffer pBuffers, ref vulkan.VkDeviceSize pOffsets, ref vulkan.VkDeviceSize pSizes);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBeginTransformFeedbackEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBeginTransformFeedbackEXT(vulkan.VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, ref vulkan.VkBuffer pCounterBuffers, ref vulkan.VkDeviceSize pCounterBufferOffsets);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdEndTransformFeedbackEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdEndTransformFeedbackEXT(vulkan.VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, ref vulkan.VkBuffer pCounterBuffers, ref vulkan.VkDeviceSize pCounterBufferOffsets);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBeginQueryIndexedEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBeginQueryIndexedEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkQueryPool queryPool, uint query, vulkan.VkQueryControlFlags flags, uint index);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdEndQueryIndexedEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdEndQueryIndexedEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkQueryPool queryPool, uint query, uint index);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawIndirectByteCountEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawIndirectByteCountEXT(vulkan.VkCommandBuffer commandBuffer, uint instanceCount, uint firstInstance, vulkan.VkBuffer counterBuffer, vulkan.VkDeviceSize counterBufferOffset, uint counterOffset, uint vertexStride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateCuModuleNVX")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateCuModuleNVX(vulkan.VkDevice device, in vulkan.VkCuModuleCreateInfoNVX pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkCuModuleNVX pModule);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateCuFunctionNVX")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateCuFunctionNVX(vulkan.VkDevice device, in vulkan.VkCuFunctionCreateInfoNVX pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkCuFunctionNVX pFunction);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyCuModuleNVX")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyCuModuleNVX(vulkan.VkDevice device, vulkan.VkCuModuleNVX module, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyCuFunctionNVX")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyCuFunctionNVX(vulkan.VkDevice device, vulkan.VkCuFunctionNVX function, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCuLaunchKernelNVX")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCuLaunchKernelNVX(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkCuLaunchInfoNVX pLaunchInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetImageViewHandleNVX")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial uint vkGetImageViewHandleNVX(vulkan.VkDevice device, in vulkan.VkImageViewHandleInfoNVX pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetImageViewAddressNVX")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetImageViewAddressNVX(vulkan.VkDevice device, vulkan.VkImageView imageView, ref vulkan.VkImageViewAddressPropertiesNVX pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawIndirectCountAMD")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawIndirectCountAMD(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer buffer, vulkan.VkDeviceSize offset, vulkan.VkBuffer countBuffer, vulkan.VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawIndexedIndirectCountAMD")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawIndexedIndirectCountAMD(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer buffer, vulkan.VkDeviceSize offset, vulkan.VkBuffer countBuffer, vulkan.VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetShaderInfoAMD")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetShaderInfoAMD(vulkan.VkDevice device, vulkan.VkPipeline pipeline, vulkan.VkShaderStageFlagBits shaderStage, vulkan.VkShaderInfoTypeAMD infoType, ref nuint pInfoSize, void* pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceExternalImageFormatPropertiesNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkFormat format, vulkan.VkImageType type, vulkan.VkImageTiling tiling, vulkan.VkImageUsageFlags usage, vulkan.VkImageCreateFlags flags, vulkan.VkExternalMemoryHandleTypeFlagsNV externalHandleType, ref vulkan.VkExternalImageFormatPropertiesNV pExternalImageFormatProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBeginConditionalRenderingEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBeginConditionalRenderingEXT(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkConditionalRenderingBeginInfoEXT pConditionalRenderingBegin);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdEndConditionalRenderingEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdEndConditionalRenderingEXT(vulkan.VkCommandBuffer commandBuffer);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetViewportWScalingNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetViewportWScalingNV(vulkan.VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, in vulkan.VkViewportWScalingNV pViewportWScalings);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkReleaseDisplayEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkReleaseDisplayEXT(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkDisplayKHR display);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2EXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkSurfaceKHR surface, ref vulkan.VkSurfaceCapabilities2EXT pSurfaceCapabilities);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDisplayPowerControlEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkDisplayPowerControlEXT(vulkan.VkDevice device, vulkan.VkDisplayKHR display, in vulkan.VkDisplayPowerInfoEXT pDisplayPowerInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkRegisterDeviceEventEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkRegisterDeviceEventEXT(vulkan.VkDevice device, in vulkan.VkDeviceEventInfoEXT pDeviceEventInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkFence pFence);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkRegisterDisplayEventEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkRegisterDisplayEventEXT(vulkan.VkDevice device, vulkan.VkDisplayKHR display, in vulkan.VkDisplayEventInfoEXT pDisplayEventInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkFence pFence);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetSwapchainCounterEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetSwapchainCounterEXT(vulkan.VkDevice device, vulkan.VkSwapchainKHR swapchain, vulkan.VkSurfaceCounterFlagBitsEXT counter, ref ulong pCounterValue);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetRefreshCycleDurationGOOGLE")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetRefreshCycleDurationGOOGLE(vulkan.VkDevice device, vulkan.VkSwapchainKHR swapchain, ref vulkan.VkRefreshCycleDurationGOOGLE pDisplayTimingProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPastPresentationTimingGOOGLE")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPastPresentationTimingGOOGLE(vulkan.VkDevice device, vulkan.VkSwapchainKHR swapchain, ref uint pPresentationTimingCount, ref vulkan.VkPastPresentationTimingGOOGLE pPresentationTimings);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDiscardRectangleEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDiscardRectangleEXT(vulkan.VkCommandBuffer commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, in vulkan.VkRect2D pDiscardRectangles);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDiscardRectangleEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDiscardRectangleEnableEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 discardRectangleEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDiscardRectangleModeEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDiscardRectangleModeEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkDiscardRectangleModeEXT discardRectangleMode);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkSetHdrMetadataEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkSetHdrMetadataEXT(vulkan.VkDevice device, uint swapchainCount, ref vulkan.VkSwapchainKHR pSwapchains, in vulkan.VkHdrMetadataEXT pMetadata);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkSetDebugUtilsObjectNameEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkSetDebugUtilsObjectNameEXT(vulkan.VkDevice device, in vulkan.VkDebugUtilsObjectNameInfoEXT pNameInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkSetDebugUtilsObjectTagEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkSetDebugUtilsObjectTagEXT(vulkan.VkDevice device, in vulkan.VkDebugUtilsObjectTagInfoEXT pTagInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkQueueBeginDebugUtilsLabelEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkQueueBeginDebugUtilsLabelEXT(vulkan.VkQueue queue, in vulkan.VkDebugUtilsLabelEXT pLabelInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkQueueEndDebugUtilsLabelEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkQueueEndDebugUtilsLabelEXT(vulkan.VkQueue queue);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkQueueInsertDebugUtilsLabelEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkQueueInsertDebugUtilsLabelEXT(vulkan.VkQueue queue, in vulkan.VkDebugUtilsLabelEXT pLabelInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBeginDebugUtilsLabelEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBeginDebugUtilsLabelEXT(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkDebugUtilsLabelEXT pLabelInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdEndDebugUtilsLabelEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdEndDebugUtilsLabelEXT(vulkan.VkCommandBuffer commandBuffer);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdInsertDebugUtilsLabelEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdInsertDebugUtilsLabelEXT(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkDebugUtilsLabelEXT pLabelInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateDebugUtilsMessengerEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateDebugUtilsMessengerEXT(vulkan.VkInstance instance, in vulkan.VkDebugUtilsMessengerCreateInfoEXT pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkDebugUtilsMessengerEXT pMessenger);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyDebugUtilsMessengerEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyDebugUtilsMessengerEXT(vulkan.VkInstance instance, vulkan.VkDebugUtilsMessengerEXT messenger, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkSubmitDebugUtilsMessageEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkSubmitDebugUtilsMessageEXT(vulkan.VkInstance instance, vulkan.VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, vulkan.VkDebugUtilsMessageTypeFlagsEXT messageTypes, in vulkan.VkDebugUtilsMessengerCallbackDataEXT pCallbackData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetSampleLocationsEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetSampleLocationsEXT(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkSampleLocationsInfoEXT pSampleLocationsInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceMultisamplePropertiesEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPhysicalDeviceMultisamplePropertiesEXT(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkSampleCountFlagBits samples, ref vulkan.VkMultisamplePropertiesEXT pMultisampleProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetImageDrmFormatModifierPropertiesEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetImageDrmFormatModifierPropertiesEXT(vulkan.VkDevice device, vulkan.VkImage image, ref vulkan.VkImageDrmFormatModifierPropertiesEXT pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateValidationCacheEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateValidationCacheEXT(vulkan.VkDevice device, in vulkan.VkValidationCacheCreateInfoEXT pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkValidationCacheEXT pValidationCache);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyValidationCacheEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyValidationCacheEXT(vulkan.VkDevice device, vulkan.VkValidationCacheEXT validationCache, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkMergeValidationCachesEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkMergeValidationCachesEXT(vulkan.VkDevice device, vulkan.VkValidationCacheEXT dstCache, uint srcCacheCount, ref vulkan.VkValidationCacheEXT pSrcCaches);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetValidationCacheDataEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetValidationCacheDataEXT(vulkan.VkDevice device, vulkan.VkValidationCacheEXT validationCache, ref nuint pDataSize, void* pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBindShadingRateImageNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBindShadingRateImageNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkImageView imageView, vulkan.VkImageLayout imageLayout);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetViewportShadingRatePaletteNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetViewportShadingRatePaletteNV(vulkan.VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, in vulkan.VkShadingRatePaletteNV pShadingRatePalettes);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetCoarseSampleOrderNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetCoarseSampleOrderNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkCoarseSampleOrderTypeNV sampleOrderType, uint customSampleOrderCount, in vulkan.VkCoarseSampleOrderCustomNV pCustomSampleOrders);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateAccelerationStructureNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateAccelerationStructureNV(vulkan.VkDevice device, in vulkan.VkAccelerationStructureCreateInfoNV pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkAccelerationStructureNV pAccelerationStructure);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyAccelerationStructureNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyAccelerationStructureNV(vulkan.VkDevice device, vulkan.VkAccelerationStructureNV accelerationStructure, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetAccelerationStructureMemoryRequirementsNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetAccelerationStructureMemoryRequirementsNV(vulkan.VkDevice device, in vulkan.VkAccelerationStructureMemoryRequirementsInfoNV pInfo, ref vulkan.VkMemoryRequirements2KHR pMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkBindAccelerationStructureMemoryNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkBindAccelerationStructureMemoryNV(vulkan.VkDevice device, uint bindInfoCount, in vulkan.VkBindAccelerationStructureMemoryInfoNV pBindInfos);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBuildAccelerationStructureNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBuildAccelerationStructureNV(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkAccelerationStructureInfoNV pInfo, vulkan.VkBuffer instanceData, vulkan.VkDeviceSize instanceOffset, vulkan.VkBool32 update, vulkan.VkAccelerationStructureNV dst, vulkan.VkAccelerationStructureNV src, vulkan.VkBuffer scratch, vulkan.VkDeviceSize scratchOffset);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyAccelerationStructureNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyAccelerationStructureNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkAccelerationStructureNV dst, vulkan.VkAccelerationStructureNV src, vulkan.VkCopyAccelerationStructureModeKHR mode);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdTraceRaysNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdTraceRaysNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer raygenShaderBindingTableBuffer, vulkan.VkDeviceSize raygenShaderBindingOffset, vulkan.VkBuffer missShaderBindingTableBuffer, vulkan.VkDeviceSize missShaderBindingOffset, vulkan.VkDeviceSize missShaderBindingStride, vulkan.VkBuffer hitShaderBindingTableBuffer, vulkan.VkDeviceSize hitShaderBindingOffset, vulkan.VkDeviceSize hitShaderBindingStride, vulkan.VkBuffer callableShaderBindingTableBuffer, vulkan.VkDeviceSize callableShaderBindingOffset, vulkan.VkDeviceSize callableShaderBindingStride, uint width, uint height, uint depth);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateRayTracingPipelinesNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateRayTracingPipelinesNV(vulkan.VkDevice device, vulkan.VkPipelineCache pipelineCache, uint createInfoCount, in vulkan.VkRayTracingPipelineCreateInfoNV pCreateInfos, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkPipeline pPipelines);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetRayTracingShaderGroupHandlesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetRayTracingShaderGroupHandlesKHR(vulkan.VkDevice device, vulkan.VkPipeline pipeline, uint firstGroup, uint groupCount, nuint dataSize, void* pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetRayTracingShaderGroupHandlesNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetRayTracingShaderGroupHandlesNV(vulkan.VkDevice device, vulkan.VkPipeline pipeline, uint firstGroup, uint groupCount, nuint dataSize, void* pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetAccelerationStructureHandleNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetAccelerationStructureHandleNV(vulkan.VkDevice device, vulkan.VkAccelerationStructureNV accelerationStructure, nuint dataSize, void* pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdWriteAccelerationStructuresPropertiesNV(vulkan.VkCommandBuffer commandBuffer, uint accelerationStructureCount, ref vulkan.VkAccelerationStructureNV pAccelerationStructures, vulkan.VkQueryType queryType, vulkan.VkQueryPool queryPool, uint firstQuery);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCompileDeferredNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCompileDeferredNV(vulkan.VkDevice device, vulkan.VkPipeline pipeline, uint shader);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetMemoryHostPointerPropertiesEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetMemoryHostPointerPropertiesEXT(vulkan.VkDevice device, vulkan.VkExternalMemoryHandleTypeFlagBits handleType, void* pHostPointer, ref vulkan.VkMemoryHostPointerPropertiesEXT pMemoryHostPointerProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdWriteBufferMarkerAMD")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdWriteBufferMarkerAMD(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPipelineStageFlagBits pipelineStage, vulkan.VkBuffer dstBuffer, vulkan.VkDeviceSize dstOffset, uint marker);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(vulkan.VkPhysicalDevice physicalDevice, ref uint pTimeDomainCount, ref vulkan.VkTimeDomainEXT pTimeDomains);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetCalibratedTimestampsEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetCalibratedTimestampsEXT(vulkan.VkDevice device, uint timestampCount, in vulkan.VkCalibratedTimestampInfoEXT pTimestampInfos, ref ulong pTimestamps, ref ulong pMaxDeviation);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawMeshTasksNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawMeshTasksNV(vulkan.VkCommandBuffer commandBuffer, uint taskCount, uint firstTask);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawMeshTasksIndirectNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawMeshTasksIndirectNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer buffer, vulkan.VkDeviceSize offset, uint drawCount, uint stride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawMeshTasksIndirectCountNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawMeshTasksIndirectCountNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer buffer, vulkan.VkDeviceSize offset, vulkan.VkBuffer countBuffer, vulkan.VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetExclusiveScissorEnableNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetExclusiveScissorEnableNV(vulkan.VkCommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, ref vulkan.VkBool32 pExclusiveScissorEnables);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetExclusiveScissorNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetExclusiveScissorNV(vulkan.VkCommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, in vulkan.VkRect2D pExclusiveScissors);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetCheckpointNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetCheckpointNV(vulkan.VkCommandBuffer commandBuffer, void* pCheckpointMarker);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetQueueCheckpointDataNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetQueueCheckpointDataNV(vulkan.VkQueue queue, ref uint pCheckpointDataCount, ref vulkan.VkCheckpointDataNV pCheckpointData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkInitializePerformanceApiINTEL")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkInitializePerformanceApiINTEL(vulkan.VkDevice device, in vulkan.VkInitializePerformanceApiInfoINTEL pInitializeInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkUninitializePerformanceApiINTEL")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkUninitializePerformanceApiINTEL(vulkan.VkDevice device);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetPerformanceMarkerINTEL")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCmdSetPerformanceMarkerINTEL(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkPerformanceMarkerInfoINTEL pMarkerInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetPerformanceStreamMarkerINTEL")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCmdSetPerformanceStreamMarkerINTEL(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkPerformanceStreamMarkerInfoINTEL pMarkerInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetPerformanceOverrideINTEL")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCmdSetPerformanceOverrideINTEL(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkPerformanceOverrideInfoINTEL pOverrideInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkAcquirePerformanceConfigurationINTEL")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkAcquirePerformanceConfigurationINTEL(vulkan.VkDevice device, in vulkan.VkPerformanceConfigurationAcquireInfoINTEL pAcquireInfo, ref vulkan.VkPerformanceConfigurationINTEL pConfiguration);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkReleasePerformanceConfigurationINTEL")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkReleasePerformanceConfigurationINTEL(vulkan.VkDevice device, vulkan.VkPerformanceConfigurationINTEL configuration);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkQueueSetPerformanceConfigurationINTEL")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkQueueSetPerformanceConfigurationINTEL(vulkan.VkQueue queue, vulkan.VkPerformanceConfigurationINTEL configuration);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPerformanceParameterINTEL")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPerformanceParameterINTEL(vulkan.VkDevice device, vulkan.VkPerformanceParameterTypeINTEL parameter, ref vulkan.VkPerformanceValueINTEL pValue);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkSetLocalDimmingAMD")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkSetLocalDimmingAMD(vulkan.VkDevice device, vulkan.VkSwapchainKHR swapChain, vulkan.VkBool32 localDimmingEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetBufferDeviceAddressEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkDeviceAddress vkGetBufferDeviceAddressEXT(vulkan.VkDevice device, in vulkan.VkBufferDeviceAddressInfo pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceToolPropertiesEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceToolPropertiesEXT(vulkan.VkPhysicalDevice physicalDevice, ref uint pToolCount, ref vulkan.VkPhysicalDeviceToolProperties pToolProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(vulkan.VkPhysicalDevice physicalDevice, ref uint pPropertyCount, ref vulkan.VkCooperativeMatrixPropertiesNV pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(vulkan.VkPhysicalDevice physicalDevice, ref uint pCombinationCount, ref vulkan.VkFramebufferMixedSamplesCombinationNV pCombinations);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateHeadlessSurfaceEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateHeadlessSurfaceEXT(vulkan.VkInstance instance, in vulkan.VkHeadlessSurfaceCreateInfoEXT pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSurfaceKHR pSurface);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetLineStippleEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetLineStippleEXT(vulkan.VkCommandBuffer commandBuffer, uint lineStippleFactor, ushort lineStipplePattern);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkResetQueryPoolEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkResetQueryPoolEXT(vulkan.VkDevice device, vulkan.VkQueryPool queryPool, uint firstQuery, uint queryCount);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetCullModeEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetCullModeEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkCullModeFlags cullMode);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetFrontFaceEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetFrontFaceEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkFrontFace frontFace);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetPrimitiveTopologyEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetPrimitiveTopologyEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPrimitiveTopology primitiveTopology);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetViewportWithCountEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetViewportWithCountEXT(vulkan.VkCommandBuffer commandBuffer, uint viewportCount, in vulkan.VkViewport pViewports);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetScissorWithCountEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetScissorWithCountEXT(vulkan.VkCommandBuffer commandBuffer, uint scissorCount, in vulkan.VkRect2D pScissors);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBindVertexBuffers2EXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBindVertexBuffers2EXT(vulkan.VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref vulkan.VkBuffer pBuffers, ref vulkan.VkDeviceSize pOffsets, ref vulkan.VkDeviceSize pSizes, ref vulkan.VkDeviceSize pStrides);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDepthTestEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDepthTestEnableEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 depthTestEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDepthWriteEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDepthWriteEnableEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 depthWriteEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDepthCompareOpEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDepthCompareOpEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkCompareOp depthCompareOp);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDepthBoundsTestEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDepthBoundsTestEnableEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 depthBoundsTestEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetStencilTestEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetStencilTestEnableEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 stencilTestEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetStencilOpEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetStencilOpEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkStencilFaceFlags faceMask, vulkan.VkStencilOp failOp, vulkan.VkStencilOp passOp, vulkan.VkStencilOp depthFailOp, vulkan.VkCompareOp compareOp);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCopyMemoryToImageEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCopyMemoryToImageEXT(vulkan.VkDevice device, in vulkan.VkCopyMemoryToImageInfoEXT pCopyMemoryToImageInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCopyImageToMemoryEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCopyImageToMemoryEXT(vulkan.VkDevice device, in vulkan.VkCopyImageToMemoryInfoEXT pCopyImageToMemoryInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCopyImageToImageEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCopyImageToImageEXT(vulkan.VkDevice device, in vulkan.VkCopyImageToImageInfoEXT pCopyImageToImageInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkTransitionImageLayoutEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkTransitionImageLayoutEXT(vulkan.VkDevice device, uint transitionCount, in vulkan.VkHostImageLayoutTransitionInfoEXT pTransitions);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetImageSubresourceLayout2EXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetImageSubresourceLayout2EXT(vulkan.VkDevice device, vulkan.VkImage image, in vulkan.VkImageSubresource2KHR pSubresource, ref vulkan.VkSubresourceLayout2KHR pLayout);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkReleaseSwapchainImagesEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkReleaseSwapchainImagesEXT(vulkan.VkDevice device, in vulkan.VkReleaseSwapchainImagesInfoEXT pReleaseInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetGeneratedCommandsMemoryRequirementsNV(vulkan.VkDevice device, in vulkan.VkGeneratedCommandsMemoryRequirementsInfoNV pInfo, ref vulkan.VkMemoryRequirements2 pMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdPreprocessGeneratedCommandsNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdPreprocessGeneratedCommandsNV(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkGeneratedCommandsInfoNV pGeneratedCommandsInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdExecuteGeneratedCommandsNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdExecuteGeneratedCommandsNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 isPreprocessed, in vulkan.VkGeneratedCommandsInfoNV pGeneratedCommandsInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBindPipelineShaderGroupNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBindPipelineShaderGroupNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPipelineBindPoint pipelineBindPoint, vulkan.VkPipeline pipeline, uint groupIndex);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateIndirectCommandsLayoutNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateIndirectCommandsLayoutNV(vulkan.VkDevice device, in vulkan.VkIndirectCommandsLayoutCreateInfoNV pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkIndirectCommandsLayoutNV pIndirectCommandsLayout);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyIndirectCommandsLayoutNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyIndirectCommandsLayoutNV(vulkan.VkDevice device, vulkan.VkIndirectCommandsLayoutNV indirectCommandsLayout, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDepthBias2EXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDepthBias2EXT(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkDepthBiasInfoEXT pDepthBiasInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkAcquireDrmDisplayEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkAcquireDrmDisplayEXT(vulkan.VkPhysicalDevice physicalDevice, int drmFd, vulkan.VkDisplayKHR display);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDrmDisplayEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetDrmDisplayEXT(vulkan.VkPhysicalDevice physicalDevice, int drmFd, uint connectorId, ref vulkan.VkDisplayKHR display);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreatePrivateDataSlotEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreatePrivateDataSlotEXT(vulkan.VkDevice device, in vulkan.VkPrivateDataSlotCreateInfo pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkPrivateDataSlot pPrivateDataSlot);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyPrivateDataSlotEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyPrivateDataSlotEXT(vulkan.VkDevice device, vulkan.VkPrivateDataSlot privateDataSlot, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkSetPrivateDataEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkSetPrivateDataEXT(vulkan.VkDevice device, vulkan.VkObjectType objectType, ulong objectHandle, vulkan.VkPrivateDataSlot privateDataSlot, ulong data);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPrivateDataEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPrivateDataEXT(vulkan.VkDevice device, vulkan.VkObjectType objectType, ulong objectHandle, vulkan.VkPrivateDataSlot privateDataSlot, ref ulong pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDescriptorSetLayoutSizeEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDescriptorSetLayoutSizeEXT(vulkan.VkDevice device, vulkan.VkDescriptorSetLayout layout, ref vulkan.VkDeviceSize pLayoutSizeInBytes);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDescriptorSetLayoutBindingOffsetEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDescriptorSetLayoutBindingOffsetEXT(vulkan.VkDevice device, vulkan.VkDescriptorSetLayout layout, uint binding, ref vulkan.VkDeviceSize pOffset);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDescriptorEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDescriptorEXT(vulkan.VkDevice device, in vulkan.VkDescriptorGetInfoEXT pDescriptorInfo, nuint dataSize, void* pDescriptor);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBindDescriptorBuffersEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBindDescriptorBuffersEXT(vulkan.VkCommandBuffer commandBuffer, uint bufferCount, in vulkan.VkDescriptorBufferBindingInfoEXT pBindingInfos);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDescriptorBufferOffsetsEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDescriptorBufferOffsetsEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPipelineBindPoint pipelineBindPoint, vulkan.VkPipelineLayout layout, uint firstSet, uint setCount, ref uint pBufferIndices, ref vulkan.VkDeviceSize pOffsets);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplersEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBindDescriptorBufferEmbeddedSamplersEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPipelineBindPoint pipelineBindPoint, vulkan.VkPipelineLayout layout, uint set);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetBufferOpaqueCaptureDescriptorDataEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetBufferOpaqueCaptureDescriptorDataEXT(vulkan.VkDevice device, in vulkan.VkBufferCaptureDescriptorDataInfoEXT pInfo, void* pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetImageOpaqueCaptureDescriptorDataEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetImageOpaqueCaptureDescriptorDataEXT(vulkan.VkDevice device, in vulkan.VkImageCaptureDescriptorDataInfoEXT pInfo, void* pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetImageViewOpaqueCaptureDescriptorDataEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetImageViewOpaqueCaptureDescriptorDataEXT(vulkan.VkDevice device, in vulkan.VkImageViewCaptureDescriptorDataInfoEXT pInfo, void* pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetSamplerOpaqueCaptureDescriptorDataEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetSamplerOpaqueCaptureDescriptorDataEXT(vulkan.VkDevice device, in vulkan.VkSamplerCaptureDescriptorDataInfoEXT pInfo, void* pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(vulkan.VkDevice device, in vulkan.VkAccelerationStructureCaptureDescriptorDataInfoEXT pInfo, void* pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetFragmentShadingRateEnumNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetFragmentShadingRateEnumNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkFragmentShadingRateNV shadingRate, FixedArray2<vulkan.VkFragmentShadingRateCombinerOpKHR> combinerOps);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceFaultInfoEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetDeviceFaultInfoEXT(vulkan.VkDevice device, ref vulkan.VkDeviceFaultCountsEXT pFaultCounts, ref vulkan.VkDeviceFaultInfoEXT pFaultInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetVertexInputEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetVertexInputEXT(vulkan.VkCommandBuffer commandBuffer, uint vertexBindingDescriptionCount, in vulkan.VkVertexInputBindingDescription2EXT pVertexBindingDescriptions, uint vertexAttributeDescriptionCount, in vulkan.VkVertexInputAttributeDescription2EXT pVertexAttributeDescriptions);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(vulkan.VkDevice device, vulkan.VkRenderPass renderpass, ref vulkan.VkExtent2D pMaxWorkgroupSize);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSubpassShadingHUAWEI")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSubpassShadingHUAWEI(vulkan.VkCommandBuffer commandBuffer);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBindInvocationMaskHUAWEI")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBindInvocationMaskHUAWEI(vulkan.VkCommandBuffer commandBuffer, vulkan.VkImageView imageView, vulkan.VkImageLayout imageLayout);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetMemoryRemoteAddressNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetMemoryRemoteAddressNV(vulkan.VkDevice device, in vulkan.VkMemoryGetRemoteAddressInfoNV pMemoryGetRemoteAddressInfo, ref vulkan.VkRemoteAddressNV pAddress);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPipelinePropertiesEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPipelinePropertiesEXT(vulkan.VkDevice device, ref vulkan.VkPipelineInfoEXT pPipelineInfo, ref vulkan.VkBaseOutStructure pPipelineProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetPatchControlPointsEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetPatchControlPointsEXT(vulkan.VkCommandBuffer commandBuffer, uint patchControlPoints);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetRasterizerDiscardEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetRasterizerDiscardEnableEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 rasterizerDiscardEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDepthBiasEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDepthBiasEnableEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 depthBiasEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetLogicOpEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetLogicOpEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkLogicOp logicOp);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetPrimitiveRestartEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetPrimitiveRestartEnableEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 primitiveRestartEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetColorWriteEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetColorWriteEnableEXT(vulkan.VkCommandBuffer commandBuffer, uint attachmentCount, ref vulkan.VkBool32 pColorWriteEnables);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawMultiEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawMultiEXT(vulkan.VkCommandBuffer commandBuffer, uint drawCount, in vulkan.VkMultiDrawInfoEXT pVertexInfo, uint instanceCount, uint firstInstance, uint stride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawMultiIndexedEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawMultiIndexedEXT(vulkan.VkCommandBuffer commandBuffer, uint drawCount, in vulkan.VkMultiDrawIndexedInfoEXT pIndexInfo, uint instanceCount, uint firstInstance, uint stride, ref int pVertexOffset);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateMicromapEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateMicromapEXT(vulkan.VkDevice device, in vulkan.VkMicromapCreateInfoEXT pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkMicromapEXT pMicromap);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyMicromapEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyMicromapEXT(vulkan.VkDevice device, vulkan.VkMicromapEXT micromap, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBuildMicromapsEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBuildMicromapsEXT(vulkan.VkCommandBuffer commandBuffer, uint infoCount, in vulkan.VkMicromapBuildInfoEXT pInfos);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkBuildMicromapsEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkBuildMicromapsEXT(vulkan.VkDevice device, vulkan.VkDeferredOperationKHR deferredOperation, uint infoCount, in vulkan.VkMicromapBuildInfoEXT pInfos);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCopyMicromapEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCopyMicromapEXT(vulkan.VkDevice device, vulkan.VkDeferredOperationKHR deferredOperation, in vulkan.VkCopyMicromapInfoEXT pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCopyMicromapToMemoryEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCopyMicromapToMemoryEXT(vulkan.VkDevice device, vulkan.VkDeferredOperationKHR deferredOperation, in vulkan.VkCopyMicromapToMemoryInfoEXT pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCopyMemoryToMicromapEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCopyMemoryToMicromapEXT(vulkan.VkDevice device, vulkan.VkDeferredOperationKHR deferredOperation, in vulkan.VkCopyMemoryToMicromapInfoEXT pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkWriteMicromapsPropertiesEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkWriteMicromapsPropertiesEXT(vulkan.VkDevice device, uint micromapCount, ref vulkan.VkMicromapEXT pMicromaps, vulkan.VkQueryType queryType, nuint dataSize, void* pData, nuint stride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyMicromapEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyMicromapEXT(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkCopyMicromapInfoEXT pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyMicromapToMemoryEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyMicromapToMemoryEXT(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkCopyMicromapToMemoryInfoEXT pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyMemoryToMicromapEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyMemoryToMicromapEXT(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkCopyMemoryToMicromapInfoEXT pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdWriteMicromapsPropertiesEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdWriteMicromapsPropertiesEXT(vulkan.VkCommandBuffer commandBuffer, uint micromapCount, ref vulkan.VkMicromapEXT pMicromaps, vulkan.VkQueryType queryType, vulkan.VkQueryPool queryPool, uint firstQuery);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceMicromapCompatibilityEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDeviceMicromapCompatibilityEXT(vulkan.VkDevice device, in vulkan.VkMicromapVersionInfoEXT pVersionInfo, ref vulkan.VkAccelerationStructureCompatibilityKHR pCompatibility);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetMicromapBuildSizesEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetMicromapBuildSizesEXT(vulkan.VkDevice device, vulkan.VkAccelerationStructureBuildTypeKHR buildType, in vulkan.VkMicromapBuildInfoEXT pBuildInfo, ref vulkan.VkMicromapBuildSizesInfoEXT pSizeInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawClusterHUAWEI")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawClusterHUAWEI(vulkan.VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawClusterIndirectHUAWEI")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawClusterIndirectHUAWEI(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer buffer, vulkan.VkDeviceSize offset);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkSetDeviceMemoryPriorityEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkSetDeviceMemoryPriorityEXT(vulkan.VkDevice device, vulkan.VkDeviceMemory memory, float priority);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDescriptorSetLayoutHostMappingInfoVALVE")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDescriptorSetLayoutHostMappingInfoVALVE(vulkan.VkDevice device, in vulkan.VkDescriptorSetBindingReferenceVALVE pBindingReference, ref vulkan.VkDescriptorSetLayoutHostMappingInfoVALVE pHostMapping);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDescriptorSetHostMappingVALVE")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDescriptorSetHostMappingVALVE(vulkan.VkDevice device, vulkan.VkDescriptorSet descriptorSet, ref void* ppData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyMemoryIndirectNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyMemoryIndirectNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkDeviceAddress copyBufferAddress, uint copyCount, uint stride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyMemoryToImageIndirectNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyMemoryToImageIndirectNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkDeviceAddress copyBufferAddress, uint copyCount, uint stride, vulkan.VkImage dstImage, vulkan.VkImageLayout dstImageLayout, in vulkan.VkImageSubresourceLayers pImageSubresources);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDecompressMemoryNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDecompressMemoryNV(vulkan.VkCommandBuffer commandBuffer, uint decompressRegionCount, in vulkan.VkDecompressMemoryRegionNV pDecompressMemoryRegions);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDecompressMemoryIndirectCountNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDecompressMemoryIndirectCountNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkDeviceAddress indirectCommandsAddress, vulkan.VkDeviceAddress indirectCommandsCountAddress, uint stride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPipelineIndirectMemoryRequirementsNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetPipelineIndirectMemoryRequirementsNV(vulkan.VkDevice device, in vulkan.VkComputePipelineCreateInfo pCreateInfo, ref vulkan.VkMemoryRequirements2 pMemoryRequirements);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdUpdatePipelineIndirectBufferNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdUpdatePipelineIndirectBufferNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPipelineBindPoint pipelineBindPoint, vulkan.VkPipeline pipeline);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPipelineIndirectDeviceAddressNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkDeviceAddress vkGetPipelineIndirectDeviceAddressNV(vulkan.VkDevice device, in vulkan.VkPipelineIndirectDeviceAddressInfoNV pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetTessellationDomainOriginEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetTessellationDomainOriginEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkTessellationDomainOrigin domainOrigin);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDepthClampEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDepthClampEnableEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 depthClampEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetPolygonModeEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetPolygonModeEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkPolygonMode polygonMode);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetRasterizationSamplesEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetRasterizationSamplesEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkSampleCountFlagBits rasterizationSamples);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetSampleMaskEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetSampleMaskEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkSampleCountFlagBits samples, ref vulkan.VkSampleMask pSampleMask);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetAlphaToCoverageEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetAlphaToCoverageEnableEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 alphaToCoverageEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetAlphaToOneEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetAlphaToOneEnableEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 alphaToOneEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetLogicOpEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetLogicOpEnableEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 logicOpEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetColorBlendEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetColorBlendEnableEXT(vulkan.VkCommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, ref vulkan.VkBool32 pColorBlendEnables);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetColorBlendEquationEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetColorBlendEquationEXT(vulkan.VkCommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, in vulkan.VkColorBlendEquationEXT pColorBlendEquations);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetColorWriteMaskEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetColorWriteMaskEXT(vulkan.VkCommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, ref vulkan.VkColorComponentFlags pColorWriteMasks);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetRasterizationStreamEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetRasterizationStreamEXT(vulkan.VkCommandBuffer commandBuffer, uint rasterizationStream);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetConservativeRasterizationModeEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetConservativeRasterizationModeEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkConservativeRasterizationModeEXT conservativeRasterizationMode);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetExtraPrimitiveOverestimationSizeEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetExtraPrimitiveOverestimationSizeEXT(vulkan.VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDepthClipEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDepthClipEnableEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 depthClipEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetSampleLocationsEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetSampleLocationsEnableEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 sampleLocationsEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetColorBlendAdvancedEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetColorBlendAdvancedEXT(vulkan.VkCommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, in vulkan.VkColorBlendAdvancedEXT pColorBlendAdvanced);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetProvokingVertexModeEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetProvokingVertexModeEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkProvokingVertexModeEXT provokingVertexMode);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetLineRasterizationModeEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetLineRasterizationModeEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkLineRasterizationModeEXT lineRasterizationMode);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetLineStippleEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetLineStippleEnableEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 stippledLineEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetDepthClipNegativeOneToOneEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetDepthClipNegativeOneToOneEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 negativeOneToOne);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetViewportWScalingEnableNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetViewportWScalingEnableNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 viewportWScalingEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetViewportSwizzleNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetViewportSwizzleNV(vulkan.VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, in vulkan.VkViewportSwizzleNV pViewportSwizzles);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetCoverageToColorEnableNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetCoverageToColorEnableNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 coverageToColorEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetCoverageToColorLocationNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetCoverageToColorLocationNV(vulkan.VkCommandBuffer commandBuffer, uint coverageToColorLocation);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetCoverageModulationModeNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetCoverageModulationModeNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkCoverageModulationModeNV coverageModulationMode);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetCoverageModulationTableEnableNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetCoverageModulationTableEnableNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 coverageModulationTableEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetCoverageModulationTableNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetCoverageModulationTableNV(vulkan.VkCommandBuffer commandBuffer, uint coverageModulationTableCount, ref float pCoverageModulationTable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetShadingRateImageEnableNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetShadingRateImageEnableNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 shadingRateImageEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetRepresentativeFragmentTestEnableNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetRepresentativeFragmentTestEnableNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBool32 representativeFragmentTestEnable);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetCoverageReductionModeNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetCoverageReductionModeNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkCoverageReductionModeNV coverageReductionMode);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetShaderModuleIdentifierEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetShaderModuleIdentifierEXT(vulkan.VkDevice device, vulkan.VkShaderModule shaderModule, ref vulkan.VkShaderModuleIdentifierEXT pIdentifier);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetShaderModuleCreateInfoIdentifierEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetShaderModuleCreateInfoIdentifierEXT(vulkan.VkDevice device, in vulkan.VkShaderModuleCreateInfo pCreateInfo, ref vulkan.VkShaderModuleIdentifierEXT pIdentifier);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceOpticalFlowImageFormatsNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceOpticalFlowImageFormatsNV(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkOpticalFlowImageFormatInfoNV pOpticalFlowImageFormatInfo, ref uint pFormatCount, ref vulkan.VkOpticalFlowImageFormatPropertiesNV pImageFormatProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateOpticalFlowSessionNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateOpticalFlowSessionNV(vulkan.VkDevice device, in vulkan.VkOpticalFlowSessionCreateInfoNV pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkOpticalFlowSessionNV pSession);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyOpticalFlowSessionNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyOpticalFlowSessionNV(vulkan.VkDevice device, vulkan.VkOpticalFlowSessionNV session, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkBindOpticalFlowSessionImageNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkBindOpticalFlowSessionImageNV(vulkan.VkDevice device, vulkan.VkOpticalFlowSessionNV session, vulkan.VkOpticalFlowSessionBindingPointNV bindingPoint, vulkan.VkImageView view, vulkan.VkImageLayout layout);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdOpticalFlowExecuteNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdOpticalFlowExecuteNV(vulkan.VkCommandBuffer commandBuffer, vulkan.VkOpticalFlowSessionNV session, in vulkan.VkOpticalFlowExecuteInfoNV pExecuteInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateShadersEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateShadersEXT(vulkan.VkDevice device, uint createInfoCount, in vulkan.VkShaderCreateInfoEXT pCreateInfos, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkShaderEXT pShaders);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyShaderEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyShaderEXT(vulkan.VkDevice device, vulkan.VkShaderEXT shader, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetShaderBinaryDataEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetShaderBinaryDataEXT(vulkan.VkDevice device, vulkan.VkShaderEXT shader, ref nuint pDataSize, void* pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBindShadersEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBindShadersEXT(vulkan.VkCommandBuffer commandBuffer, uint stageCount, ref vulkan.VkShaderStageFlagBits pStages, ref vulkan.VkShaderEXT pShaders);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetFramebufferTilePropertiesQCOM")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetFramebufferTilePropertiesQCOM(vulkan.VkDevice device, vulkan.VkFramebuffer framebuffer, ref uint pPropertiesCount, ref vulkan.VkTilePropertiesQCOM pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDynamicRenderingTilePropertiesQCOM")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetDynamicRenderingTilePropertiesQCOM(vulkan.VkDevice device, in vulkan.VkRenderingInfo pRenderingInfo, ref vulkan.VkTilePropertiesQCOM pProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetAttachmentFeedbackLoopEnableEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetAttachmentFeedbackLoopEnableEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkImageAspectFlags aspectMask);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateAccelerationStructureKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateAccelerationStructureKHR(vulkan.VkDevice device, in vulkan.VkAccelerationStructureCreateInfoKHR pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkAccelerationStructureKHR pAccelerationStructure);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyAccelerationStructureKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyAccelerationStructureKHR(vulkan.VkDevice device, vulkan.VkAccelerationStructureKHR accelerationStructure, in vulkan.VkAllocationCallbacks pAllocator);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBuildAccelerationStructuresKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBuildAccelerationStructuresKHR(vulkan.VkCommandBuffer commandBuffer, uint infoCount, in vulkan.VkAccelerationStructureBuildGeometryInfoKHR pInfos, ref vulkan.VkAccelerationStructureBuildRangeInfoKHR* ppBuildRangeInfos);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdBuildAccelerationStructuresIndirectKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdBuildAccelerationStructuresIndirectKHR(vulkan.VkCommandBuffer commandBuffer, uint infoCount, in vulkan.VkAccelerationStructureBuildGeometryInfoKHR pInfos, ref vulkan.VkDeviceAddress pIndirectDeviceAddresses, ref uint pIndirectStrides, ref uint* ppMaxPrimitiveCounts);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkBuildAccelerationStructuresKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkBuildAccelerationStructuresKHR(vulkan.VkDevice device, vulkan.VkDeferredOperationKHR deferredOperation, uint infoCount, in vulkan.VkAccelerationStructureBuildGeometryInfoKHR pInfos, ref vulkan.VkAccelerationStructureBuildRangeInfoKHR* ppBuildRangeInfos);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCopyAccelerationStructureKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCopyAccelerationStructureKHR(vulkan.VkDevice device, vulkan.VkDeferredOperationKHR deferredOperation, in vulkan.VkCopyAccelerationStructureInfoKHR pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCopyAccelerationStructureToMemoryKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCopyAccelerationStructureToMemoryKHR(vulkan.VkDevice device, vulkan.VkDeferredOperationKHR deferredOperation, in vulkan.VkCopyAccelerationStructureToMemoryInfoKHR pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCopyMemoryToAccelerationStructureKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCopyMemoryToAccelerationStructureKHR(vulkan.VkDevice device, vulkan.VkDeferredOperationKHR deferredOperation, in vulkan.VkCopyMemoryToAccelerationStructureInfoKHR pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkWriteAccelerationStructuresPropertiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkWriteAccelerationStructuresPropertiesKHR(vulkan.VkDevice device, uint accelerationStructureCount, ref vulkan.VkAccelerationStructureKHR pAccelerationStructures, vulkan.VkQueryType queryType, nuint dataSize, void* pData, nuint stride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyAccelerationStructureKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyAccelerationStructureKHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkCopyAccelerationStructureInfoKHR pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyAccelerationStructureToMemoryKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyAccelerationStructureToMemoryKHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkCopyAccelerationStructureToMemoryInfoKHR pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdCopyMemoryToAccelerationStructureKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdCopyMemoryToAccelerationStructureKHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkCopyMemoryToAccelerationStructureInfoKHR pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetAccelerationStructureDeviceAddressKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkDeviceAddress vkGetAccelerationStructureDeviceAddressKHR(vulkan.VkDevice device, in vulkan.VkAccelerationStructureDeviceAddressInfoKHR pInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdWriteAccelerationStructuresPropertiesKHR(vulkan.VkCommandBuffer commandBuffer, uint accelerationStructureCount, ref vulkan.VkAccelerationStructureKHR pAccelerationStructures, vulkan.VkQueryType queryType, vulkan.VkQueryPool queryPool, uint firstQuery);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceAccelerationStructureCompatibilityKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetDeviceAccelerationStructureCompatibilityKHR(vulkan.VkDevice device, in vulkan.VkAccelerationStructureVersionInfoKHR pVersionInfo, ref vulkan.VkAccelerationStructureCompatibilityKHR pCompatibility);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetAccelerationStructureBuildSizesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkGetAccelerationStructureBuildSizesKHR(vulkan.VkDevice device, vulkan.VkAccelerationStructureBuildTypeKHR buildType, in vulkan.VkAccelerationStructureBuildGeometryInfoKHR pBuildInfo, ref uint pMaxPrimitiveCounts, ref vulkan.VkAccelerationStructureBuildSizesInfoKHR pSizeInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdTraceRaysKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdTraceRaysKHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkStridedDeviceAddressRegionKHR pRaygenShaderBindingTable, in vulkan.VkStridedDeviceAddressRegionKHR pMissShaderBindingTable, in vulkan.VkStridedDeviceAddressRegionKHR pHitShaderBindingTable, in vulkan.VkStridedDeviceAddressRegionKHR pCallableShaderBindingTable, uint width, uint height, uint depth);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateRayTracingPipelinesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateRayTracingPipelinesKHR(vulkan.VkDevice device, vulkan.VkDeferredOperationKHR deferredOperation, vulkan.VkPipelineCache pipelineCache, uint createInfoCount, in vulkan.VkRayTracingPipelineCreateInfoKHR pCreateInfos, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkPipeline pPipelines);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(vulkan.VkDevice device, vulkan.VkPipeline pipeline, uint firstGroup, uint groupCount, nuint dataSize, void* pData);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdTraceRaysIndirectKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdTraceRaysIndirectKHR(vulkan.VkCommandBuffer commandBuffer, in vulkan.VkStridedDeviceAddressRegionKHR pRaygenShaderBindingTable, in vulkan.VkStridedDeviceAddressRegionKHR pMissShaderBindingTable, in vulkan.VkStridedDeviceAddressRegionKHR pHitShaderBindingTable, in vulkan.VkStridedDeviceAddressRegionKHR pCallableShaderBindingTable, vulkan.VkDeviceAddress indirectDeviceAddress);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetRayTracingShaderGroupStackSizeKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkDeviceSize vkGetRayTracingShaderGroupStackSizeKHR(vulkan.VkDevice device, vulkan.VkPipeline pipeline, uint group, vulkan.VkShaderGroupShaderKHR groupShader);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdSetRayTracingPipelineStackSizeKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdSetRayTracingPipelineStackSizeKHR(vulkan.VkCommandBuffer commandBuffer, uint pipelineStackSize);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawMeshTasksEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawMeshTasksEXT(vulkan.VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawMeshTasksIndirectEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawMeshTasksIndirectEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer buffer, vulkan.VkDeviceSize offset, uint drawCount, uint stride);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCmdDrawMeshTasksIndirectCountEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkCmdDrawMeshTasksIndirectCountEXT(vulkan.VkCommandBuffer commandBuffer, vulkan.VkBuffer buffer, vulkan.VkDeviceSize offset, vulkan.VkBuffer countBuffer, vulkan.VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);
    }
}
