//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        /// <summary>
        /// Structure specifying parameters of a newly created DirectFB surface object
        /// </summary>
        /// <remarks>
        /// <para>Extension: VK_EXT_directfb_surface</para>
        /// </remarks>
        public partial struct VkDirectFBSurfaceCreateInfoEXT()
        {
            /// <summary>
            /// A <see cref="T:VkStructureType"/> value identifying this structure.
            /// </summary>
            public vulkan.VkStructureType sType = VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT;
            
            /// <summary>
            /// `NULL` or a pointer to a structure extending this structure.
            /// </summary>
            public void* pNext;
            
            /// <summary>
            /// Reserved for future use.
            /// </summary>
            public vulkan.VkDirectFBSurfaceCreateFlagsEXT flags;
            
            /// <summary>
            /// A pointer to the <c>IDirectFB</c> main interface of DirectFB.
            /// </summary>
            public void* dfb;
            
            /// <summary>
            /// A pointer to a <c>IDirectFBSurface</c> surface interface.
            /// </summary>
            public void* surface;
        }
        
        /// <remarks>
        /// <para>Extension: VK_EXT_directfb_surface</para>
        /// </remarks>
        public readonly partial struct VkDirectFBSurfaceCreateFlagsEXT : IEquatable<vulkan.VkDirectFBSurfaceCreateFlagsEXT>
        {
            public VkDirectFBSurfaceCreateFlagsEXT(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkDirectFBSurfaceCreateFlagsEXT other && Equals(other);
            
            public bool Equals(VkDirectFBSurfaceCreateFlagsEXT other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkDirectFBSurfaceCreateFlagsEXT from) => from.Value;
            
            public static implicit operator vulkan.VkDirectFBSurfaceCreateFlagsEXT (vulkan.VkFlags from) => new vulkan.VkDirectFBSurfaceCreateFlagsEXT(from);
            
            public static bool operator ==(VkDirectFBSurfaceCreateFlagsEXT left, VkDirectFBSurfaceCreateFlagsEXT right) => left.Equals(right);
            
            public static bool operator !=(VkDirectFBSurfaceCreateFlagsEXT left, VkDirectFBSurfaceCreateFlagsEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateDirectFBSurfaceEXT : IEquatable<vulkan.PFN_vkCreateDirectFBSurfaceEXT>, IvkInstanceFunctionPointer<vulkan.PFN_vkCreateDirectFBSurfaceEXT>
        {
            public PFN_vkCreateDirectFBSurfaceEXT(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDirectFBSurfaceCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDirectFBSurfaceCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateDirectFBSurfaceEXT other && Equals(other);
            
            public bool Equals(PFN_vkCreateDirectFBSurfaceEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDirectFBSurfaceCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateDirectFBSurfaceEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateDirectFBSurfaceEXT (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkDirectFBSurfaceCreateInfoEXT*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateDirectFBSurfaceEXT(from);
            
            public static bool operator ==(PFN_vkCreateDirectFBSurfaceEXT left, PFN_vkCreateDirectFBSurfaceEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateDirectFBSurfaceEXT left, PFN_vkCreateDirectFBSurfaceEXT right) => !left.Equals(right);
            
            /// <summary>
            /// Gets the prototype of the function `vkCreateDirectFBSurfaceEXT`.
            /// </summary>
            public static ReadOnlyMemoryUtf8 Name => "vkCreateDirectFBSurfaceEXT"u8;
            
            /// <summary>
            /// Create a <see cref="T:VkSurfaceKHR"/> object for a DirectFB surface
            /// </summary>
            /// <param name="instance">The instance to associate the surface with.</param>
            /// <param name="pCreateInfo">A pointer to a <see cref="T:VkDirectFBSurfaceCreateInfoEXT"/> structure containing parameters affecting the creation of the surface object.</param>
            /// <param name="pAllocator">The allocator used for host memory allocated for the surface object when there is no more specific allocator available (see Memory Allocation). This parameter is optional.</param>
            /// <param name="pSurface">A pointer to a <see cref="T:VkSurfaceKHR"/> handle in which the created surface object is returned.</param>
            /// <remarks>
            /// <list type="bullet">
            /// <listheader><description>On success, this command returns: </description></listheader><item><description><c>VK_SUCCESS</c></description></item>
            /// </list>
            /// <list type="bullet">
            /// <listheader><description>On failure, this command returns: </description></listheader><item><description><c>VK_ERROR_OUT_OF_HOST_MEMORY</c></description></item><item><description><c>VK_ERROR_OUT_OF_DEVICE_MEMORY</c></description></item>
            /// </list>
            /// <para>Extension: VK_EXT_directfb_surface</para>
            /// </remarks>
            public vulkan.VkResult Invoke(vulkan.VkInstance instance, vulkan.VkDirectFBSurfaceCreateInfoEXT* pCreateInfo, vulkan.VkAllocationCallbacks* pAllocator, vulkan.VkSurfaceKHR* pSurface)
            {
                return Value(instance, pCreateInfo, pAllocator, pSurface);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
            
            /// <summary>
            /// Create a <see cref="T:VkSurfaceKHR"/> object for a DirectFB surface
            /// </summary>
            /// <param name="instance">The instance to associate the surface with.</param>
            /// <param name="pCreateInfo">A pointer to a <see cref="T:VkDirectFBSurfaceCreateInfoEXT"/> structure containing parameters affecting the creation of the surface object.</param>
            /// <param name="pAllocator">The allocator used for host memory allocated for the surface object when there is no more specific allocator available (see Memory Allocation). This parameter is optional.</param>
            /// <param name="pSurface">A pointer to a <see cref="T:VkSurfaceKHR"/> handle in which the created surface object is returned.</param>
            /// <remarks>
            /// <list type="bullet">
            /// <listheader><description>On success, this command returns: </description></listheader><item><description><c>VK_SUCCESS</c></description></item>
            /// </list>
            /// <list type="bullet">
            /// <listheader><description>On failure, this command returns: </description></listheader><item><description><c>VK_ERROR_OUT_OF_HOST_MEMORY</c></description></item><item><description><c>VK_ERROR_OUT_OF_DEVICE_MEMORY</c></description></item>
            /// </list>
            /// <para>Extension: VK_EXT_directfb_surface</para>
            /// </remarks>
            public vulkan.VkResult Invoke(vulkan.VkInstance instance, in vulkan.VkDirectFBSurfaceCreateInfoEXT pCreateInfo, vulkan.VkAllocationCallbacks* pAllocator, out vulkan.VkSurfaceKHR pSurface)
            {
                fixed (vulkan.VkDirectFBSurfaceCreateInfoEXT* __pCreateInfo_local = &pCreateInfo)
                fixed (vulkan.VkSurfaceKHR* __pSurface_local = &pSurface)
                return this.Invoke(instance, __pCreateInfo_local, pAllocator, __pSurface_local);
            }
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT : IEquatable<vulkan.PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT>, IvkInstanceFunctionPointer<vulkan.PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT>
        {
            public PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, void*, vulkan.VkBool32> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, void*, vulkan.VkBool32> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, void*, vulkan.VkBool32> (vulkan.PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, void*, vulkan.VkBool32> from) => new vulkan.PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT left, PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT left, PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT right) => !left.Equals(right);
            
            /// <summary>
            /// Gets the prototype of the function `vkGetPhysicalDeviceDirectFBPresentationSupportEXT`.
            /// </summary>
            public static ReadOnlyMemoryUtf8 Name => "vkGetPhysicalDeviceDirectFBPresentationSupportEXT"u8;
            
            /// <summary>
            /// Query physical device for presentation with DirectFB
            /// </summary>
            /// <param name="physicalDevice">The physical device.</param>
            /// <param name="queueFamilyIndex">The queue family index.</param>
            /// <param name="dfb">A pointer to the <c>IDirectFB</c> main interface of DirectFB.</param>
            /// <remarks>
            /// <para>Extension: VK_EXT_directfb_surface</para>
            /// </remarks>
            public vulkan.VkBool32 Invoke(vulkan.VkPhysicalDevice physicalDevice, uint queueFamilyIndex, void* dfb)
            {
                return Value(physicalDevice, queueFamilyIndex, dfb);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public const int VK_EXT_directfb_surface = 1;
        
        public const int VK_EXT_DIRECTFB_SURFACE_SPEC_VERSION = 1;
        
        public static ReadOnlyMemoryUtf8 VK_EXT_DIRECTFB_SURFACE_EXTENSION_NAME => "VK_EXT_directfb_surface"u8;
    }
}
