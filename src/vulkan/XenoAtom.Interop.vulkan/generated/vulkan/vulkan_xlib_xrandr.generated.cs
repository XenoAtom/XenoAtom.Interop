//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        public readonly partial struct PFN_vkAcquireXlibDisplayEXT : IEquatable<PFN_vkAcquireXlibDisplayEXT>, IvkFunctionPointer
        {
            public PFN_vkAcquireXlibDisplayEXT(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, void*, vulkan.VkDisplayKHR, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, void*, vulkan.VkDisplayKHR, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkAcquireXlibDisplayEXT other && Equals(other);
            
            public bool Equals(PFN_vkAcquireXlibDisplayEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, void*, vulkan.VkDisplayKHR, vulkan.VkResult> (vulkan.PFN_vkAcquireXlibDisplayEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkAcquireXlibDisplayEXT (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, void*, vulkan.VkDisplayKHR, vulkan.VkResult> from) => new vulkan.PFN_vkAcquireXlibDisplayEXT(from);
            
            public static bool operator ==(PFN_vkAcquireXlibDisplayEXT left, PFN_vkAcquireXlibDisplayEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkAcquireXlibDisplayEXT left, PFN_vkAcquireXlibDisplayEXT right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkPhysicalDevice physicalDevice, void* dpy, vulkan.VkDisplayKHR display)
            {
                return Value(physicalDevice, dpy, display);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkGetRandROutputDisplayEXT : IEquatable<PFN_vkGetRandROutputDisplayEXT>, IvkFunctionPointer
        {
            public PFN_vkGetRandROutputDisplayEXT(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, void*, nuint, vulkan.VkDisplayKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, void*, nuint, vulkan.VkDisplayKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetRandROutputDisplayEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetRandROutputDisplayEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, void*, nuint, vulkan.VkDisplayKHR*, vulkan.VkResult> (vulkan.PFN_vkGetRandROutputDisplayEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetRandROutputDisplayEXT (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, void*, nuint, vulkan.VkDisplayKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetRandROutputDisplayEXT(from);
            
            public static bool operator ==(PFN_vkGetRandROutputDisplayEXT left, PFN_vkGetRandROutputDisplayEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetRandROutputDisplayEXT left, PFN_vkGetRandROutputDisplayEXT right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkPhysicalDevice physicalDevice, void* dpy, nuint rrOutput, ref vulkan.VkDisplayKHR pDisplay)
            {
                fixed (vulkan.VkDisplayKHR* __pDisplay = &pDisplay)
                return Value(physicalDevice, dpy, rrOutput, __pDisplay);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public const int VK_EXT_acquire_xlib_display = 1;
        
        public const int VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION = 1;
        
        public static ReadOnlySpanUtf8 VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME => "VK_EXT_acquire_xlib_display"u8;
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkAcquireXlibDisplayEXT> vkAcquireXlibDisplayEXT_ => new("vkAcquireXlibDisplayEXT"u8);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkGetRandROutputDisplayEXT> vkGetRandROutputDisplayEXT_ => new("vkGetRandROutputDisplayEXT"u8);
    }
}
