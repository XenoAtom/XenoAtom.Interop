//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        public readonly partial struct PFN_vkAcquireXlibDisplayEXT : IEquatable<vulkan.PFN_vkAcquireXlibDisplayEXT>, IvkFunctionPointer<vulkan.PFN_vkAcquireXlibDisplayEXT>
        {
            public PFN_vkAcquireXlibDisplayEXT(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, void*, vulkan.VkDisplayKHR, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, void*, vulkan.VkDisplayKHR, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkAcquireXlibDisplayEXT other && Equals(other);
            
            public bool Equals(PFN_vkAcquireXlibDisplayEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, void*, vulkan.VkDisplayKHR, vulkan.VkResult> (vulkan.PFN_vkAcquireXlibDisplayEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkAcquireXlibDisplayEXT (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, void*, vulkan.VkDisplayKHR, vulkan.VkResult> from) => new vulkan.PFN_vkAcquireXlibDisplayEXT(from);
            
            public static bool operator ==(PFN_vkAcquireXlibDisplayEXT left, PFN_vkAcquireXlibDisplayEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkAcquireXlibDisplayEXT left, PFN_vkAcquireXlibDisplayEXT right) => !left.Equals(right);
            
            /// <summary>
            /// Gets the prototype of the function `vkAcquireXlibDisplayEXT`.
            /// </summary>
            public static ReadOnlyMemoryUtf8 Name => "vkAcquireXlibDisplayEXT"u8;
            
            /// <summary>
            /// Acquire access to a VkDisplayKHR using Xlib
            /// </summary>
            /// <param name="physicalDevice">The physical device the display is on.</param>
            /// <param name="dpy">A connection to the X11 server that currently owns <paramref name="display"/>.</param>
            /// <param name="display">The display the caller wishes to control in Vulkan.</param>
            /// <remarks>
            /// <list type="bullet">
            /// <listheader><description>On success, this command returns: </description></listheader><item><description><c>VK_SUCCESS</c></description></item>
            /// </list>
            /// <list type="bullet">
            /// <listheader><description>On failure, this command returns: </description></listheader><item><description><c>VK_ERROR_OUT_OF_HOST_MEMORY</c></description></item><item><description><c>VK_ERROR_INITIALIZATION_FAILED</c></description></item>
            /// </list>
            /// <para>Extension: VK_EXT_acquire_xlib_display</para>
            /// </remarks>
            public vulkan.VkResult Invoke(vulkan.VkPhysicalDevice physicalDevice, void* dpy, vulkan.VkDisplayKHR display)
            {
                return Value(physicalDevice, dpy, display);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkGetRandROutputDisplayEXT : IEquatable<vulkan.PFN_vkGetRandROutputDisplayEXT>, IvkFunctionPointer<vulkan.PFN_vkGetRandROutputDisplayEXT>
        {
            public PFN_vkGetRandROutputDisplayEXT(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, void*, nuint, vulkan.VkDisplayKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, void*, nuint, vulkan.VkDisplayKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetRandROutputDisplayEXT other && Equals(other);
            
            public bool Equals(PFN_vkGetRandROutputDisplayEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, void*, nuint, vulkan.VkDisplayKHR*, vulkan.VkResult> (vulkan.PFN_vkGetRandROutputDisplayEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetRandROutputDisplayEXT (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, void*, nuint, vulkan.VkDisplayKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetRandROutputDisplayEXT(from);
            
            public static bool operator ==(PFN_vkGetRandROutputDisplayEXT left, PFN_vkGetRandROutputDisplayEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetRandROutputDisplayEXT left, PFN_vkGetRandROutputDisplayEXT right) => !left.Equals(right);
            
            /// <summary>
            /// Gets the prototype of the function `vkGetRandROutputDisplayEXT`.
            /// </summary>
            public static ReadOnlyMemoryUtf8 Name => "vkGetRandROutputDisplayEXT"u8;
            
            /// <summary>
            /// Query the VkDisplayKHR corresponding to an X11 RandR Output
            /// </summary>
            /// <param name="physicalDevice">The physical device to query the display handle on.</param>
            /// <param name="dpy">A connection to the X11 server from which <paramref name="rrOutput"/> was queried.</param>
            /// <param name="rrOutput">An X11 RandR output ID.</param>
            /// <param name="pDisplay">The corresponding <see cref="T:VkDisplayKHR"/> handle will be returned here.</param>
            /// <remarks>
            /// <list type="bullet">
            /// <listheader><description>On success, this command returns: </description></listheader><item><description><c>VK_SUCCESS</c></description></item>
            /// </list>
            /// <list type="bullet">
            /// <listheader><description>On failure, this command returns: </description></listheader><item><description><c>VK_ERROR_OUT_OF_HOST_MEMORY</c></description></item>
            /// </list>
            /// <para>Extension: VK_EXT_acquire_xlib_display</para>
            /// </remarks>
            public vulkan.VkResult Invoke(vulkan.VkPhysicalDevice physicalDevice, void* dpy, nuint rrOutput, vulkan.VkDisplayKHR* pDisplay)
            {
                return Value(physicalDevice, dpy, rrOutput, pDisplay);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
            
            /// <summary>
            /// Query the VkDisplayKHR corresponding to an X11 RandR Output
            /// </summary>
            /// <param name="physicalDevice">The physical device to query the display handle on.</param>
            /// <param name="dpy">A connection to the X11 server from which <paramref name="rrOutput"/> was queried.</param>
            /// <param name="rrOutput">An X11 RandR output ID.</param>
            /// <param name="pDisplay">The corresponding <see cref="T:VkDisplayKHR"/> handle will be returned here.</param>
            /// <remarks>
            /// <list type="bullet">
            /// <listheader><description>On success, this command returns: </description></listheader><item><description><c>VK_SUCCESS</c></description></item>
            /// </list>
            /// <list type="bullet">
            /// <listheader><description>On failure, this command returns: </description></listheader><item><description><c>VK_ERROR_OUT_OF_HOST_MEMORY</c></description></item>
            /// </list>
            /// <para>Extension: VK_EXT_acquire_xlib_display</para>
            /// </remarks>
            public vulkan.VkResult Invoke(vulkan.VkPhysicalDevice physicalDevice, void* dpy, nuint rrOutput, out vulkan.VkDisplayKHR pDisplay)
            {
                fixed (vulkan.VkDisplayKHR* __pDisplay_local = &pDisplay)
                return this.Invoke(physicalDevice, dpy, rrOutput, __pDisplay_local);
            }
        }
        
        public const int VK_EXT_acquire_xlib_display = 1;
        
        public const int VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION = 1;
        
        public static ReadOnlyMemoryUtf8 VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME => "VK_EXT_acquire_xlib_display"u8;
    }
}
