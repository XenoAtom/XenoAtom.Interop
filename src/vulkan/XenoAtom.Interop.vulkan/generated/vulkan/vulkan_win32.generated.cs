//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        public enum VkFullScreenExclusiveEXT : uint
        {
            VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = unchecked((uint)0),
            
            VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = unchecked((uint)1),
            
            VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = unchecked((uint)2),
            
            VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = unchecked((uint)3),
            
            VK_FULL_SCREEN_EXCLUSIVE_MAX_ENUM_EXT = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkFullScreenExclusiveEXT VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = VkFullScreenExclusiveEXT.VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT;
        
        public const vulkan.VkFullScreenExclusiveEXT VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = VkFullScreenExclusiveEXT.VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT;
        
        public const vulkan.VkFullScreenExclusiveEXT VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = VkFullScreenExclusiveEXT.VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT;
        
        public const vulkan.VkFullScreenExclusiveEXT VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = VkFullScreenExclusiveEXT.VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT;
        
        public const vulkan.VkFullScreenExclusiveEXT VK_FULL_SCREEN_EXCLUSIVE_MAX_ENUM_EXT = VkFullScreenExclusiveEXT.VK_FULL_SCREEN_EXCLUSIVE_MAX_ENUM_EXT;
        
        public partial struct VkWin32SurfaceCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkWin32SurfaceCreateFlagsKHR flags;
            
            public nint hinstance;
            
            public nint hwnd;
        }
        
        public readonly partial struct VkWin32SurfaceCreateFlagsKHR : IEquatable<VkWin32SurfaceCreateFlagsKHR>
        {
            public VkWin32SurfaceCreateFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkWin32SurfaceCreateFlagsKHR other && Equals(other);
            
            public bool Equals(VkWin32SurfaceCreateFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkWin32SurfaceCreateFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkWin32SurfaceCreateFlagsKHR (vulkan.VkFlags from) => new vulkan.VkWin32SurfaceCreateFlagsKHR(from);
            
            public static bool operator ==(VkWin32SurfaceCreateFlagsKHR left, VkWin32SurfaceCreateFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkWin32SurfaceCreateFlagsKHR left, VkWin32SurfaceCreateFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkImportMemoryWin32HandleInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalMemoryHandleTypeFlagBits handleType;
            
            public nint handle;
            
            public char* name;
        }
        
        public partial struct VkExportMemoryWin32HandleInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public void* pAttributes;
            
            public uint dwAccess;
            
            public char* name;
        }
        
        public partial struct VkMemoryWin32HandlePropertiesKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint memoryTypeBits;
        }
        
        public partial struct VkMemoryGetWin32HandleInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceMemory memory;
            
            public vulkan.VkExternalMemoryHandleTypeFlagBits handleType;
        }
        
        public partial struct VkWin32KeyedMutexAcquireReleaseInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint acquireCount;
            
            public vulkan.VkDeviceMemory* pAcquireSyncs;
            
            public ulong* pAcquireKeys;
            
            public uint* pAcquireTimeouts;
            
            public uint releaseCount;
            
            public vulkan.VkDeviceMemory* pReleaseSyncs;
            
            public ulong* pReleaseKeys;
        }
        
        public partial struct VkImportSemaphoreWin32HandleInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSemaphore semaphore;
            
            public vulkan.VkSemaphoreImportFlags flags;
            
            public vulkan.VkExternalSemaphoreHandleTypeFlagBits handleType;
            
            public nint handle;
            
            public char* name;
        }
        
        public partial struct VkExportSemaphoreWin32HandleInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public void* pAttributes;
            
            public uint dwAccess;
            
            public char* name;
        }
        
        public partial struct VkD3D12FenceSubmitInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint waitSemaphoreValuesCount;
            
            public ulong* pWaitSemaphoreValues;
            
            public uint signalSemaphoreValuesCount;
            
            public ulong* pSignalSemaphoreValues;
        }
        
        public partial struct VkSemaphoreGetWin32HandleInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSemaphore semaphore;
            
            public vulkan.VkExternalSemaphoreHandleTypeFlagBits handleType;
        }
        
        public partial struct VkImportFenceWin32HandleInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFence fence;
            
            public vulkan.VkFenceImportFlags flags;
            
            public vulkan.VkExternalFenceHandleTypeFlagBits handleType;
            
            public nint handle;
            
            public char* name;
        }
        
        public partial struct VkExportFenceWin32HandleInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public void* pAttributes;
            
            public uint dwAccess;
            
            public char* name;
        }
        
        public partial struct VkFenceGetWin32HandleInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFence fence;
            
            public vulkan.VkExternalFenceHandleTypeFlagBits handleType;
        }
        
        public partial struct VkImportMemoryWin32HandleInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalMemoryHandleTypeFlagsNV handleType;
            
            public nint handle;
        }
        
        public partial struct VkExportMemoryWin32HandleInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public void* pAttributes;
            
            public uint dwAccess;
        }
        
        public partial struct VkWin32KeyedMutexAcquireReleaseInfoNV
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint acquireCount;
            
            public vulkan.VkDeviceMemory* pAcquireSyncs;
            
            public ulong* pAcquireKeys;
            
            public uint* pAcquireTimeoutMilliseconds;
            
            public uint releaseCount;
            
            public vulkan.VkDeviceMemory* pReleaseSyncs;
            
            public ulong* pReleaseKeys;
        }
        
        public partial struct VkSurfaceFullScreenExclusiveInfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFullScreenExclusiveEXT fullScreenExclusive;
        }
        
        public partial struct VkSurfaceCapabilitiesFullScreenExclusiveEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 fullScreenExclusiveSupported;
        }
        
        public partial struct VkSurfaceFullScreenExclusiveWin32InfoEXT
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public nint hmonitor;
        }
        
        public readonly partial struct PFN_vkCreateWin32SurfaceKHR : IEquatable<PFN_vkCreateWin32SurfaceKHR>
        {
            public PFN_vkCreateWin32SurfaceKHR(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkWin32SurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkWin32SurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateWin32SurfaceKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateWin32SurfaceKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkWin32SurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateWin32SurfaceKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateWin32SurfaceKHR (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkWin32SurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateWin32SurfaceKHR(from);
            
            public static bool operator ==(PFN_vkCreateWin32SurfaceKHR left, PFN_vkCreateWin32SurfaceKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateWin32SurfaceKHR left, PFN_vkCreateWin32SurfaceKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR : IEquatable<PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR>
        {
            public PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan.VkBool32> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan.VkBool32> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan.VkBool32> (vulkan.PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan.VkBool32> from) => new vulkan.PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR left, PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR left, PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetMemoryWin32HandleKHR : IEquatable<PFN_vkGetMemoryWin32HandleKHR>
        {
            public PFN_vkGetMemoryWin32HandleKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetWin32HandleInfoKHR*, nint*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetWin32HandleInfoKHR*, nint*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetMemoryWin32HandleKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetMemoryWin32HandleKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetWin32HandleInfoKHR*, nint*, vulkan.VkResult> (vulkan.PFN_vkGetMemoryWin32HandleKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetMemoryWin32HandleKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetWin32HandleInfoKHR*, nint*, vulkan.VkResult> from) => new vulkan.PFN_vkGetMemoryWin32HandleKHR(from);
            
            public static bool operator ==(PFN_vkGetMemoryWin32HandleKHR left, PFN_vkGetMemoryWin32HandleKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetMemoryWin32HandleKHR left, PFN_vkGetMemoryWin32HandleKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetMemoryWin32HandlePropertiesKHR : IEquatable<PFN_vkGetMemoryWin32HandlePropertiesKHR>
        {
            public PFN_vkGetMemoryWin32HandlePropertiesKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkExternalMemoryHandleTypeFlagBits, nint, vulkan.VkMemoryWin32HandlePropertiesKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkExternalMemoryHandleTypeFlagBits, nint, vulkan.VkMemoryWin32HandlePropertiesKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetMemoryWin32HandlePropertiesKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetMemoryWin32HandlePropertiesKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkExternalMemoryHandleTypeFlagBits, nint, vulkan.VkMemoryWin32HandlePropertiesKHR*, vulkan.VkResult> (vulkan.PFN_vkGetMemoryWin32HandlePropertiesKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetMemoryWin32HandlePropertiesKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkExternalMemoryHandleTypeFlagBits, nint, vulkan.VkMemoryWin32HandlePropertiesKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetMemoryWin32HandlePropertiesKHR(from);
            
            public static bool operator ==(PFN_vkGetMemoryWin32HandlePropertiesKHR left, PFN_vkGetMemoryWin32HandlePropertiesKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetMemoryWin32HandlePropertiesKHR left, PFN_vkGetMemoryWin32HandlePropertiesKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkImportSemaphoreWin32HandleKHR : IEquatable<PFN_vkImportSemaphoreWin32HandleKHR>
        {
            public PFN_vkImportSemaphoreWin32HandleKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportSemaphoreWin32HandleInfoKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportSemaphoreWin32HandleInfoKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkImportSemaphoreWin32HandleKHR other && Equals(other);
            
            public bool Equals(PFN_vkImportSemaphoreWin32HandleKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportSemaphoreWin32HandleInfoKHR*, vulkan.VkResult> (vulkan.PFN_vkImportSemaphoreWin32HandleKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkImportSemaphoreWin32HandleKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportSemaphoreWin32HandleInfoKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkImportSemaphoreWin32HandleKHR(from);
            
            public static bool operator ==(PFN_vkImportSemaphoreWin32HandleKHR left, PFN_vkImportSemaphoreWin32HandleKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkImportSemaphoreWin32HandleKHR left, PFN_vkImportSemaphoreWin32HandleKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetSemaphoreWin32HandleKHR : IEquatable<PFN_vkGetSemaphoreWin32HandleKHR>
        {
            public PFN_vkGetSemaphoreWin32HandleKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreGetWin32HandleInfoKHR*, nint*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreGetWin32HandleInfoKHR*, nint*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetSemaphoreWin32HandleKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetSemaphoreWin32HandleKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreGetWin32HandleInfoKHR*, nint*, vulkan.VkResult> (vulkan.PFN_vkGetSemaphoreWin32HandleKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetSemaphoreWin32HandleKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreGetWin32HandleInfoKHR*, nint*, vulkan.VkResult> from) => new vulkan.PFN_vkGetSemaphoreWin32HandleKHR(from);
            
            public static bool operator ==(PFN_vkGetSemaphoreWin32HandleKHR left, PFN_vkGetSemaphoreWin32HandleKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetSemaphoreWin32HandleKHR left, PFN_vkGetSemaphoreWin32HandleKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkImportFenceWin32HandleKHR : IEquatable<PFN_vkImportFenceWin32HandleKHR>
        {
            public PFN_vkImportFenceWin32HandleKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportFenceWin32HandleInfoKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportFenceWin32HandleInfoKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkImportFenceWin32HandleKHR other && Equals(other);
            
            public bool Equals(PFN_vkImportFenceWin32HandleKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportFenceWin32HandleInfoKHR*, vulkan.VkResult> (vulkan.PFN_vkImportFenceWin32HandleKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkImportFenceWin32HandleKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportFenceWin32HandleInfoKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkImportFenceWin32HandleKHR(from);
            
            public static bool operator ==(PFN_vkImportFenceWin32HandleKHR left, PFN_vkImportFenceWin32HandleKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkImportFenceWin32HandleKHR left, PFN_vkImportFenceWin32HandleKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetFenceWin32HandleKHR : IEquatable<PFN_vkGetFenceWin32HandleKHR>
        {
            public PFN_vkGetFenceWin32HandleKHR(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFenceGetWin32HandleInfoKHR*, nint*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFenceGetWin32HandleInfoKHR*, nint*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetFenceWin32HandleKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetFenceWin32HandleKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFenceGetWin32HandleInfoKHR*, nint*, vulkan.VkResult> (vulkan.PFN_vkGetFenceWin32HandleKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetFenceWin32HandleKHR (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkFenceGetWin32HandleInfoKHR*, nint*, vulkan.VkResult> from) => new vulkan.PFN_vkGetFenceWin32HandleKHR(from);
            
            public static bool operator ==(PFN_vkGetFenceWin32HandleKHR left, PFN_vkGetFenceWin32HandleKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetFenceWin32HandleKHR left, PFN_vkGetFenceWin32HandleKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetMemoryWin32HandleNV : IEquatable<PFN_vkGetMemoryWin32HandleNV>
        {
            public PFN_vkGetMemoryWin32HandleNV(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, vulkan.VkExternalMemoryHandleTypeFlagsNV, nint*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, vulkan.VkExternalMemoryHandleTypeFlagsNV, nint*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetMemoryWin32HandleNV other && Equals(other);
            
            public bool Equals(PFN_vkGetMemoryWin32HandleNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, vulkan.VkExternalMemoryHandleTypeFlagsNV, nint*, vulkan.VkResult> (vulkan.PFN_vkGetMemoryWin32HandleNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetMemoryWin32HandleNV (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkDeviceMemory, vulkan.VkExternalMemoryHandleTypeFlagsNV, nint*, vulkan.VkResult> from) => new vulkan.PFN_vkGetMemoryWin32HandleNV(from);
            
            public static bool operator ==(PFN_vkGetMemoryWin32HandleNV left, PFN_vkGetMemoryWin32HandleNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetMemoryWin32HandleNV left, PFN_vkGetMemoryWin32HandleNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT : IEquatable<PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT>
        {
            public PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSurfaceInfo2KHR*, uint*, vulkan.VkPresentModeKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSurfaceInfo2KHR*, uint*, vulkan.VkPresentModeKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSurfaceInfo2KHR*, uint*, vulkan.VkPresentModeKHR*, vulkan.VkResult> (vulkan.PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkPhysicalDeviceSurfaceInfo2KHR*, uint*, vulkan.VkPresentModeKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT left, PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT left, PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkAcquireFullScreenExclusiveModeEXT : IEquatable<PFN_vkAcquireFullScreenExclusiveModeEXT>
        {
            public PFN_vkAcquireFullScreenExclusiveModeEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkAcquireFullScreenExclusiveModeEXT other && Equals(other);
            
            public bool Equals(PFN_vkAcquireFullScreenExclusiveModeEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkResult> (vulkan.PFN_vkAcquireFullScreenExclusiveModeEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkAcquireFullScreenExclusiveModeEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkResult> from) => new vulkan.PFN_vkAcquireFullScreenExclusiveModeEXT(from);
            
            public static bool operator ==(PFN_vkAcquireFullScreenExclusiveModeEXT left, PFN_vkAcquireFullScreenExclusiveModeEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkAcquireFullScreenExclusiveModeEXT left, PFN_vkAcquireFullScreenExclusiveModeEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkReleaseFullScreenExclusiveModeEXT : IEquatable<PFN_vkReleaseFullScreenExclusiveModeEXT>
        {
            public PFN_vkReleaseFullScreenExclusiveModeEXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkReleaseFullScreenExclusiveModeEXT other && Equals(other);
            
            public bool Equals(PFN_vkReleaseFullScreenExclusiveModeEXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkResult> (vulkan.PFN_vkReleaseFullScreenExclusiveModeEXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkReleaseFullScreenExclusiveModeEXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSwapchainKHR, vulkan.VkResult> from) => new vulkan.PFN_vkReleaseFullScreenExclusiveModeEXT(from);
            
            public static bool operator ==(PFN_vkReleaseFullScreenExclusiveModeEXT left, PFN_vkReleaseFullScreenExclusiveModeEXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkReleaseFullScreenExclusiveModeEXT left, PFN_vkReleaseFullScreenExclusiveModeEXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetDeviceGroupSurfacePresentModes2EXT : IEquatable<PFN_vkGetDeviceGroupSurfacePresentModes2EXT>
        {
            public PFN_vkGetDeviceGroupSurfacePresentModes2EXT(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPhysicalDeviceSurfaceInfo2KHR*, vulkan.VkDeviceGroupPresentModeFlagsKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPhysicalDeviceSurfaceInfo2KHR*, vulkan.VkDeviceGroupPresentModeFlagsKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetDeviceGroupSurfacePresentModes2EXT other && Equals(other);
            
            public bool Equals(PFN_vkGetDeviceGroupSurfacePresentModes2EXT other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPhysicalDeviceSurfaceInfo2KHR*, vulkan.VkDeviceGroupPresentModeFlagsKHR*, vulkan.VkResult> (vulkan.PFN_vkGetDeviceGroupSurfacePresentModes2EXT from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetDeviceGroupSurfacePresentModes2EXT (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkPhysicalDeviceSurfaceInfo2KHR*, vulkan.VkDeviceGroupPresentModeFlagsKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetDeviceGroupSurfacePresentModes2EXT(from);
            
            public static bool operator ==(PFN_vkGetDeviceGroupSurfacePresentModes2EXT left, PFN_vkGetDeviceGroupSurfacePresentModes2EXT right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetDeviceGroupSurfacePresentModes2EXT left, PFN_vkGetDeviceGroupSurfacePresentModes2EXT right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkAcquireWinrtDisplayNV : IEquatable<PFN_vkAcquireWinrtDisplayNV>
        {
            public PFN_vkAcquireWinrtDisplayNV(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkAcquireWinrtDisplayNV other && Equals(other);
            
            public bool Equals(PFN_vkAcquireWinrtDisplayNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, vulkan.VkResult> (vulkan.PFN_vkAcquireWinrtDisplayNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkAcquireWinrtDisplayNV (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, vulkan.VkDisplayKHR, vulkan.VkResult> from) => new vulkan.PFN_vkAcquireWinrtDisplayNV(from);
            
            public static bool operator ==(PFN_vkAcquireWinrtDisplayNV left, PFN_vkAcquireWinrtDisplayNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkAcquireWinrtDisplayNV left, PFN_vkAcquireWinrtDisplayNV right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetWinrtDisplayNV : IEquatable<PFN_vkGetWinrtDisplayNV>
        {
            public PFN_vkGetWinrtDisplayNV(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan.VkDisplayKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan.VkDisplayKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetWinrtDisplayNV other && Equals(other);
            
            public bool Equals(PFN_vkGetWinrtDisplayNV other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan.VkDisplayKHR*, vulkan.VkResult> (vulkan.PFN_vkGetWinrtDisplayNV from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetWinrtDisplayNV (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan.VkDisplayKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkGetWinrtDisplayNV(from);
            
            public static bool operator ==(PFN_vkGetWinrtDisplayNV left, PFN_vkGetWinrtDisplayNV right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetWinrtDisplayNV left, PFN_vkGetWinrtDisplayNV right) => !left.Equals(right);
        }
        
        public const int VK_KHR_win32_surface = 1;
        
        public const int VK_KHR_WIN32_SURFACE_SPEC_VERSION = 6;
        
        public const string VK_KHR_WIN32_SURFACE_EXTENSION_NAME = "VK_KHR_win32_surface";
        
        public const int VK_KHR_external_memory_win32 = 1;
        
        public const int VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION = 1;
        
        public const string VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME = "VK_KHR_external_memory_win32";
        
        public const int VK_KHR_win32_keyed_mutex = 1;
        
        public const int VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION = 1;
        
        public const string VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME = "VK_KHR_win32_keyed_mutex";
        
        public const int VK_KHR_external_semaphore_win32 = 1;
        
        public const int VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION = 1;
        
        public const string VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME = "VK_KHR_external_semaphore_win32";
        
        public const int VK_KHR_external_fence_win32 = 1;
        
        public const int VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION = 1;
        
        public const string VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME = "VK_KHR_external_fence_win32";
        
        public const int VK_NV_external_memory_win32 = 1;
        
        public const int VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION = 1;
        
        public const string VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME = "VK_NV_external_memory_win32";
        
        public const int VK_NV_win32_keyed_mutex = 1;
        
        public const int VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION = 2;
        
        public const string VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME = "VK_NV_win32_keyed_mutex";
        
        public const int VK_EXT_full_screen_exclusive = 1;
        
        public const int VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION = 4;
        
        public const string VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME = "VK_EXT_full_screen_exclusive";
        
        public const int VK_NV_acquire_winrt_display = 1;
        
        public const int VK_NV_ACQUIRE_WINRT_DISPLAY_SPEC_VERSION = 1;
        
        public const string VK_NV_ACQUIRE_WINRT_DISPLAY_EXTENSION_NAME = "VK_NV_acquire_winrt_display";
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateWin32SurfaceKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateWin32SurfaceKHR(vulkan.VkInstance instance, in vulkan.VkWin32SurfaceCreateInfoKHR pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSurfaceKHR pSurface);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceWin32PresentationSupportKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkBool32 vkGetPhysicalDeviceWin32PresentationSupportKHR(vulkan.VkPhysicalDevice physicalDevice, uint queueFamilyIndex);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetMemoryWin32HandleKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetMemoryWin32HandleKHR(vulkan.VkDevice device, in vulkan.VkMemoryGetWin32HandleInfoKHR pGetWin32HandleInfo, ref nint pHandle);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetMemoryWin32HandlePropertiesKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetMemoryWin32HandlePropertiesKHR(vulkan.VkDevice device, vulkan.VkExternalMemoryHandleTypeFlagBits handleType, nint handle, ref vulkan.VkMemoryWin32HandlePropertiesKHR pMemoryWin32HandleProperties);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkImportSemaphoreWin32HandleKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkImportSemaphoreWin32HandleKHR(vulkan.VkDevice device, in vulkan.VkImportSemaphoreWin32HandleInfoKHR pImportSemaphoreWin32HandleInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetSemaphoreWin32HandleKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetSemaphoreWin32HandleKHR(vulkan.VkDevice device, in vulkan.VkSemaphoreGetWin32HandleInfoKHR pGetWin32HandleInfo, ref nint pHandle);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkImportFenceWin32HandleKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkImportFenceWin32HandleKHR(vulkan.VkDevice device, in vulkan.VkImportFenceWin32HandleInfoKHR pImportFenceWin32HandleInfo);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetFenceWin32HandleKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetFenceWin32HandleKHR(vulkan.VkDevice device, in vulkan.VkFenceGetWin32HandleInfoKHR pGetWin32HandleInfo, ref nint pHandle);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetMemoryWin32HandleNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetMemoryWin32HandleNV(vulkan.VkDevice device, vulkan.VkDeviceMemory memory, vulkan.VkExternalMemoryHandleTypeFlagsNV handleType, ref nint pHandle);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceSurfacePresentModes2EXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetPhysicalDeviceSurfacePresentModes2EXT(vulkan.VkPhysicalDevice physicalDevice, in vulkan.VkPhysicalDeviceSurfaceInfo2KHR pSurfaceInfo, ref uint pPresentModeCount, ref vulkan.VkPresentModeKHR pPresentModes);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkAcquireFullScreenExclusiveModeEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkAcquireFullScreenExclusiveModeEXT(vulkan.VkDevice device, vulkan.VkSwapchainKHR swapchain);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkReleaseFullScreenExclusiveModeEXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkReleaseFullScreenExclusiveModeEXT(vulkan.VkDevice device, vulkan.VkSwapchainKHR swapchain);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetDeviceGroupSurfacePresentModes2EXT")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetDeviceGroupSurfacePresentModes2EXT(vulkan.VkDevice device, in vulkan.VkPhysicalDeviceSurfaceInfo2KHR pSurfaceInfo, ref vulkan.VkDeviceGroupPresentModeFlagsKHR pModes);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkAcquireWinrtDisplayNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkAcquireWinrtDisplayNV(vulkan.VkPhysicalDevice physicalDevice, vulkan.VkDisplayKHR display);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetWinrtDisplayNV")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetWinrtDisplayNV(vulkan.VkPhysicalDevice physicalDevice, uint deviceRelativeId, ref vulkan.VkDisplayKHR pDisplay);
    }
}
