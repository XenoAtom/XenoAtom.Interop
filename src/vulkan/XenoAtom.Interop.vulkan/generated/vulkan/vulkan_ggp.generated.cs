//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        public partial struct VkStreamDescriptorSurfaceCreateInfoGGP
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkStreamDescriptorSurfaceCreateFlagsGGP flags;
            
            public int streamDescriptor;
        }
        
        public readonly partial struct VkStreamDescriptorSurfaceCreateFlagsGGP : IEquatable<VkStreamDescriptorSurfaceCreateFlagsGGP>
        {
            public VkStreamDescriptorSurfaceCreateFlagsGGP(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkStreamDescriptorSurfaceCreateFlagsGGP other && Equals(other);
            
            public bool Equals(VkStreamDescriptorSurfaceCreateFlagsGGP other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkStreamDescriptorSurfaceCreateFlagsGGP from) => from.Value;
            
            public static implicit operator vulkan.VkStreamDescriptorSurfaceCreateFlagsGGP (vulkan.VkFlags from) => new vulkan.VkStreamDescriptorSurfaceCreateFlagsGGP(from);
            
            public static bool operator ==(VkStreamDescriptorSurfaceCreateFlagsGGP left, VkStreamDescriptorSurfaceCreateFlagsGGP right) => left.Equals(right);
            
            public static bool operator !=(VkStreamDescriptorSurfaceCreateFlagsGGP left, VkStreamDescriptorSurfaceCreateFlagsGGP right) => !left.Equals(right);
        }
        
        public partial struct VkPresentFrameTokenGGP
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint frameToken;
        }
        
        public readonly partial struct PFN_vkCreateStreamDescriptorSurfaceGGP : IEquatable<PFN_vkCreateStreamDescriptorSurfaceGGP>, IvkFunctionPointer
        {
            public PFN_vkCreateStreamDescriptorSurfaceGGP(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkStreamDescriptorSurfaceCreateInfoGGP*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkStreamDescriptorSurfaceCreateInfoGGP*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateStreamDescriptorSurfaceGGP other && Equals(other);
            
            public bool Equals(PFN_vkCreateStreamDescriptorSurfaceGGP other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkStreamDescriptorSurfaceCreateInfoGGP*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateStreamDescriptorSurfaceGGP from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateStreamDescriptorSurfaceGGP (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkStreamDescriptorSurfaceCreateInfoGGP*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateStreamDescriptorSurfaceGGP(from);
            
            public static bool operator ==(PFN_vkCreateStreamDescriptorSurfaceGGP left, PFN_vkCreateStreamDescriptorSurfaceGGP right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateStreamDescriptorSurfaceGGP left, PFN_vkCreateStreamDescriptorSurfaceGGP right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkInstance instance, in vulkan.VkStreamDescriptorSurfaceCreateInfoGGP pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSurfaceKHR pSurface)
            {
                fixed (vulkan.VkStreamDescriptorSurfaceCreateInfoGGP* __pCreateInfo = &pCreateInfo)
                fixed (vulkan.VkAllocationCallbacks* __pAllocator = &pAllocator)
                fixed (vulkan.VkSurfaceKHR* __pSurface = &pSurface)
                return Value(instance, __pCreateInfo, __pAllocator, __pSurface);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateStreamDescriptorSurfaceGGP")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateStreamDescriptorSurfaceGGP(vulkan.VkInstance instance, in vulkan.VkStreamDescriptorSurfaceCreateInfoGGP pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSurfaceKHR pSurface);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkCreateStreamDescriptorSurfaceGGP> vkCreateStreamDescriptorSurfaceGGP_ => new("vkCreateStreamDescriptorSurfaceGGP"u8);
    }
}
