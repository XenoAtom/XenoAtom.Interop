//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        public partial struct VkMacOSSurfaceCreateInfoMVK
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkMacOSSurfaceCreateFlagsMVK flags;
            
            public void* pView;
        }
        
        public readonly partial struct VkMacOSSurfaceCreateFlagsMVK : IEquatable<VkMacOSSurfaceCreateFlagsMVK>
        {
            public VkMacOSSurfaceCreateFlagsMVK(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkMacOSSurfaceCreateFlagsMVK other && Equals(other);
            
            public bool Equals(VkMacOSSurfaceCreateFlagsMVK other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkMacOSSurfaceCreateFlagsMVK from) => from.Value;
            
            public static implicit operator vulkan.VkMacOSSurfaceCreateFlagsMVK (vulkan.VkFlags from) => new vulkan.VkMacOSSurfaceCreateFlagsMVK(from);
            
            public static bool operator ==(VkMacOSSurfaceCreateFlagsMVK left, VkMacOSSurfaceCreateFlagsMVK right) => left.Equals(right);
            
            public static bool operator !=(VkMacOSSurfaceCreateFlagsMVK left, VkMacOSSurfaceCreateFlagsMVK right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateMacOSSurfaceMVK : IEquatable<PFN_vkCreateMacOSSurfaceMVK>
        {
            public PFN_vkCreateMacOSSurfaceMVK(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkMacOSSurfaceCreateInfoMVK*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkMacOSSurfaceCreateInfoMVK*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateMacOSSurfaceMVK other && Equals(other);
            
            public bool Equals(PFN_vkCreateMacOSSurfaceMVK other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkMacOSSurfaceCreateInfoMVK*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateMacOSSurfaceMVK from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateMacOSSurfaceMVK (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkMacOSSurfaceCreateInfoMVK*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateMacOSSurfaceMVK(from);
            
            public static bool operator ==(PFN_vkCreateMacOSSurfaceMVK left, PFN_vkCreateMacOSSurfaceMVK right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateMacOSSurfaceMVK left, PFN_vkCreateMacOSSurfaceMVK right) => !left.Equals(right);
        }
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateMacOSSurfaceMVK")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateMacOSSurfaceMVK(vulkan.VkInstance instance, in vulkan.VkMacOSSurfaceCreateInfoMVK pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSurfaceKHR pSurface);
    }
}
