//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        /// <summary>
        /// Structure specifying parameters of a newly created iOS surface object
        /// </summary>
        public partial struct VkIOSSurfaceCreateInfoMVK
        {
            /// <summary>
            /// A <see cref="T:VkStructureType"/> value identifying this structure.
            /// </summary>
            public vulkan.VkStructureType sType;
            
            /// <summary>
            /// `NULL` or a pointer to a structure extending this structure.
            /// </summary>
            public void* pNext;
            
            /// <summary>
            /// Reserved for future use.
            /// </summary>
            public vulkan.VkIOSSurfaceCreateFlagsMVK flags;
            
            /// <summary>
            /// A reference to either a basetype:CAMetalLayer object or a code:UIView object.
            /// </summary>
            public void* pView;
        }
        
        public readonly partial struct VkIOSSurfaceCreateFlagsMVK : IEquatable<VkIOSSurfaceCreateFlagsMVK>
        {
            public VkIOSSurfaceCreateFlagsMVK(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkIOSSurfaceCreateFlagsMVK other && Equals(other);
            
            public bool Equals(VkIOSSurfaceCreateFlagsMVK other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkIOSSurfaceCreateFlagsMVK from) => from.Value;
            
            public static implicit operator vulkan.VkIOSSurfaceCreateFlagsMVK (vulkan.VkFlags from) => new vulkan.VkIOSSurfaceCreateFlagsMVK(from);
            
            public static bool operator ==(VkIOSSurfaceCreateFlagsMVK left, VkIOSSurfaceCreateFlagsMVK right) => left.Equals(right);
            
            public static bool operator !=(VkIOSSurfaceCreateFlagsMVK left, VkIOSSurfaceCreateFlagsMVK right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateIOSSurfaceMVK : IEquatable<PFN_vkCreateIOSSurfaceMVK>, IvkFunctionPointer
        {
            public PFN_vkCreateIOSSurfaceMVK(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkIOSSurfaceCreateInfoMVK*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkIOSSurfaceCreateInfoMVK*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateIOSSurfaceMVK other && Equals(other);
            
            public bool Equals(PFN_vkCreateIOSSurfaceMVK other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkIOSSurfaceCreateInfoMVK*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateIOSSurfaceMVK from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateIOSSurfaceMVK (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkIOSSurfaceCreateInfoMVK*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateIOSSurfaceMVK(from);
            
            public static bool operator ==(PFN_vkCreateIOSSurfaceMVK left, PFN_vkCreateIOSSurfaceMVK right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateIOSSurfaceMVK left, PFN_vkCreateIOSSurfaceMVK right) => !left.Equals(right);
            
            /// <summary>
            /// Create a VkSurfaceKHR object for an iOS UIView
            /// </summary>
            /// <param name="instance">The instance with which to associate the surface.</param>
            /// <param name="pCreateInfo">A pointer to a <see cref="T:VkIOSSurfaceCreateInfoMVK"/> structure containing parameters affecting the creation of the surface object.</param>
            /// <param name="pAllocator">The allocator used for host memory allocated for the surface object when there is no more specific allocator available (see &lt;&lt;memory-allocation,Memory Allocation&gt;&gt;).</param>
            /// <param name="pSurface">A pointer to a <see cref="T:VkSurfaceKHR"/> handle in which the created surface object is returned.</param>
            public vulkan.VkResult Invoke(vulkan.VkInstance instance, in vulkan.VkIOSSurfaceCreateInfoMVK pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, out vulkan.VkSurfaceKHR pSurface)
            {
                fixed (vulkan.VkIOSSurfaceCreateInfoMVK* __pCreateInfo = &pCreateInfo)
                fixed (vulkan.VkAllocationCallbacks* __pAllocator = &pAllocator)
                fixed (vulkan.VkSurfaceKHR* __pSurface = &pSurface)
                return Value(instance, __pCreateInfo, __pAllocator, __pSurface);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        /// <summary>
        /// Create a VkSurfaceKHR object for an iOS UIView
        /// </summary>
        /// <param name="instance">The instance with which to associate the surface.</param>
        /// <param name="pCreateInfo">A pointer to a <see cref="T:VkIOSSurfaceCreateInfoMVK"/> structure containing parameters affecting the creation of the surface object.</param>
        /// <param name="pAllocator">The allocator used for host memory allocated for the surface object when there is no more specific allocator available (see &lt;&lt;memory-allocation,Memory Allocation&gt;&gt;).</param>
        /// <param name="pSurface">A pointer to a <see cref="T:VkSurfaceKHR"/> handle in which the created surface object is returned.</param>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateIOSSurfaceMVK")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateIOSSurfaceMVK(vulkan.VkInstance instance, in vulkan.VkIOSSurfaceCreateInfoMVK pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, out vulkan.VkSurfaceKHR pSurface);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkCreateIOSSurfaceMVK> vkCreateIOSSurfaceMVK_ => new("vkCreateIOSSurfaceMVK"u8);
    }
}
