//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        /// <summary>
        /// Windows and Linux ICDs will treat VkSurfaceKHR as a pointer to a struct that
        /// contains the platform-specific connection and surface information.
        /// </summary>
        public enum VkIcdWsiPlatform : uint
        {
            VK_ICD_WSI_PLATFORM_MIR = unchecked((uint)0),
            
            VK_ICD_WSI_PLATFORM_WAYLAND = unchecked((uint)1),
            
            VK_ICD_WSI_PLATFORM_WIN32 = unchecked((uint)2),
            
            VK_ICD_WSI_PLATFORM_XCB = unchecked((uint)3),
            
            VK_ICD_WSI_PLATFORM_XLIB = unchecked((uint)4),
            
            VK_ICD_WSI_PLATFORM_ANDROID = unchecked((uint)5),
            
            VK_ICD_WSI_PLATFORM_MACOS = unchecked((uint)6),
            
            VK_ICD_WSI_PLATFORM_IOS = unchecked((uint)7),
            
            VK_ICD_WSI_PLATFORM_DISPLAY = unchecked((uint)8),
            
            VK_ICD_WSI_PLATFORM_HEADLESS = unchecked((uint)9),
            
            VK_ICD_WSI_PLATFORM_METAL = unchecked((uint)10),
            
            VK_ICD_WSI_PLATFORM_DIRECTFB = unchecked((uint)11),
            
            VK_ICD_WSI_PLATFORM_VI = unchecked((uint)12),
            
            VK_ICD_WSI_PLATFORM_GGP = unchecked((uint)13),
            
            VK_ICD_WSI_PLATFORM_SCREEN = unchecked((uint)14),
            
            VK_ICD_WSI_PLATFORM_FUCHSIA = unchecked((uint)15),
        }
        
        public const vulkan.VkIcdWsiPlatform VK_ICD_WSI_PLATFORM_MIR = VkIcdWsiPlatform.VK_ICD_WSI_PLATFORM_MIR;
        
        public const vulkan.VkIcdWsiPlatform VK_ICD_WSI_PLATFORM_WAYLAND = VkIcdWsiPlatform.VK_ICD_WSI_PLATFORM_WAYLAND;
        
        public const vulkan.VkIcdWsiPlatform VK_ICD_WSI_PLATFORM_WIN32 = VkIcdWsiPlatform.VK_ICD_WSI_PLATFORM_WIN32;
        
        public const vulkan.VkIcdWsiPlatform VK_ICD_WSI_PLATFORM_XCB = VkIcdWsiPlatform.VK_ICD_WSI_PLATFORM_XCB;
        
        public const vulkan.VkIcdWsiPlatform VK_ICD_WSI_PLATFORM_XLIB = VkIcdWsiPlatform.VK_ICD_WSI_PLATFORM_XLIB;
        
        public const vulkan.VkIcdWsiPlatform VK_ICD_WSI_PLATFORM_ANDROID = VkIcdWsiPlatform.VK_ICD_WSI_PLATFORM_ANDROID;
        
        public const vulkan.VkIcdWsiPlatform VK_ICD_WSI_PLATFORM_MACOS = VkIcdWsiPlatform.VK_ICD_WSI_PLATFORM_MACOS;
        
        public const vulkan.VkIcdWsiPlatform VK_ICD_WSI_PLATFORM_IOS = VkIcdWsiPlatform.VK_ICD_WSI_PLATFORM_IOS;
        
        public const vulkan.VkIcdWsiPlatform VK_ICD_WSI_PLATFORM_DISPLAY = VkIcdWsiPlatform.VK_ICD_WSI_PLATFORM_DISPLAY;
        
        public const vulkan.VkIcdWsiPlatform VK_ICD_WSI_PLATFORM_HEADLESS = VkIcdWsiPlatform.VK_ICD_WSI_PLATFORM_HEADLESS;
        
        public const vulkan.VkIcdWsiPlatform VK_ICD_WSI_PLATFORM_METAL = VkIcdWsiPlatform.VK_ICD_WSI_PLATFORM_METAL;
        
        public const vulkan.VkIcdWsiPlatform VK_ICD_WSI_PLATFORM_DIRECTFB = VkIcdWsiPlatform.VK_ICD_WSI_PLATFORM_DIRECTFB;
        
        public const vulkan.VkIcdWsiPlatform VK_ICD_WSI_PLATFORM_VI = VkIcdWsiPlatform.VK_ICD_WSI_PLATFORM_VI;
        
        public const vulkan.VkIcdWsiPlatform VK_ICD_WSI_PLATFORM_GGP = VkIcdWsiPlatform.VK_ICD_WSI_PLATFORM_GGP;
        
        public const vulkan.VkIcdWsiPlatform VK_ICD_WSI_PLATFORM_SCREEN = VkIcdWsiPlatform.VK_ICD_WSI_PLATFORM_SCREEN;
        
        public const vulkan.VkIcdWsiPlatform VK_ICD_WSI_PLATFORM_FUCHSIA = VkIcdWsiPlatform.VK_ICD_WSI_PLATFORM_FUCHSIA;
        
        [global::System.Runtime.InteropServices.StructLayout(LayoutKind.Explicit)]
        public partial struct VK_LOADER_DATA
        {
            [FieldOffset(0)]
            public nuint loaderMagic;
            
            [FieldOffset(0)]
            public void* loaderData;
        }
        
        public partial struct VkIcdSurfaceBase
        {
            public vulkan.VkIcdWsiPlatform platform;
        }
        
        public partial struct VkIcdSurfaceWayland
        {
            public vulkan.VkIcdSurfaceBase @base;
            
            public vulkan.wl_display display;
            
            public vulkan.wl_surface surface;
        }
        
        public partial struct VkIcdSurfaceWin32
        {
            public vulkan.VkIcdSurfaceBase @base;
            
            public nint hinstance;
            
            public nint hwnd;
        }
        
        public partial struct VkIcdSurfaceXcb
        {
            public vulkan.VkIcdSurfaceBase @base;
            
            public void* connection;
            
            public uint window;
        }
        
        public partial struct VkIcdSurfaceXlib
        {
            public vulkan.VkIcdSurfaceBase @base;
            
            public void* dpy;
            
            public nuint window;
        }
        
        public partial struct VkIcdSurfaceDirectFB
        {
            public vulkan.VkIcdSurfaceBase @base;
            
            public void* dfb;
            
            public void* surface;
        }
        
        public partial struct VkIcdSurfaceAndroid
        {
            public vulkan.VkIcdSurfaceBase @base;
            
            public vulkan.ANativeWindow window;
        }
        
        public partial struct VkIcdSurfaceMacOS
        {
            public vulkan.VkIcdSurfaceBase @base;
            
            public void* pView;
        }
        
        public partial struct VkIcdSurfaceIOS
        {
            public vulkan.VkIcdSurfaceBase @base;
            
            public void* pView;
        }
        
        public partial struct VkIcdSurfaceGgp
        {
            public vulkan.VkIcdSurfaceBase @base;
            
            public int streamDescriptor;
        }
        
        public partial struct VkIcdSurfaceDisplay
        {
            public vulkan.VkIcdSurfaceBase @base;
            
            public vulkan.VkDisplayModeKHR displayMode;
            
            public uint planeIndex;
            
            public uint planeStackIndex;
            
            public vulkan.VkSurfaceTransformFlagBitsKHR transform;
            
            public float globalAlpha;
            
            public vulkan.VkDisplayPlaneAlphaFlagBitsKHR alphaMode;
            
            public vulkan.VkExtent2D imageExtent;
        }
        
        public partial struct VkIcdSurfaceHeadless
        {
            public vulkan.VkIcdSurfaceBase @base;
        }
        
        public partial struct VkIcdSurfaceMetal
        {
            public vulkan.VkIcdSurfaceBase @base;
            
            public void* pLayer;
        }
        
        public partial struct VkIcdSurfaceVi
        {
            public vulkan.VkIcdSurfaceBase @base;
            
            public void* window;
        }
        
        public partial struct VkIcdSurfaceScreen
        {
            public vulkan.VkIcdSurfaceBase @base;
            
            public vulkan._screen_context context;
            
            public vulkan._screen_window window;
        }
        
        public partial struct VkIcdSurfaceImagePipe
        {
            public vulkan.VkIcdSurfaceBase @base;
        }
        
        /// <summary>
        /// Typedef for use in the interfaces below
        /// </summary>
        public readonly partial struct PFN_GetPhysicalDeviceProcAddr : IEquatable<vulkan.PFN_GetPhysicalDeviceProcAddr>
        {
            public PFN_GetPhysicalDeviceProcAddr(delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_GetPhysicalDeviceProcAddr other && Equals(other);
            
            public bool Equals(PFN_GetPhysicalDeviceProcAddr other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> (vulkan.PFN_GetPhysicalDeviceProcAddr from) => from.Value;
            
            public static implicit operator vulkan.PFN_GetPhysicalDeviceProcAddr (delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> from) => new vulkan.PFN_GetPhysicalDeviceProcAddr(from);
            
            public static bool operator ==(PFN_GetPhysicalDeviceProcAddr left, PFN_GetPhysicalDeviceProcAddr right) => left.Equals(right);
            
            public static bool operator !=(PFN_GetPhysicalDeviceProcAddr left, PFN_GetPhysicalDeviceProcAddr right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Old typedefs that don't follow a proper naming convention but are preserved for compatibility
        /// </summary>
        public readonly partial struct PFN_vkNegotiateLoaderICDInterfaceVersion : IEquatable<vulkan.PFN_vkNegotiateLoaderICDInterfaceVersion>
        {
            public PFN_vkNegotiateLoaderICDInterfaceVersion(delegate*unmanaged[Stdcall]<uint*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<uint*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkNegotiateLoaderICDInterfaceVersion other && Equals(other);
            
            public bool Equals(PFN_vkNegotiateLoaderICDInterfaceVersion other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<uint*, vulkan.VkResult> (vulkan.PFN_vkNegotiateLoaderICDInterfaceVersion from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkNegotiateLoaderICDInterfaceVersion (delegate*unmanaged[Stdcall]<uint*, vulkan.VkResult> from) => new vulkan.PFN_vkNegotiateLoaderICDInterfaceVersion(from);
            
            public static bool operator ==(PFN_vkNegotiateLoaderICDInterfaceVersion left, PFN_vkNegotiateLoaderICDInterfaceVersion right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkNegotiateLoaderICDInterfaceVersion left, PFN_vkNegotiateLoaderICDInterfaceVersion right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedefs for loader/ICD interface
        /// </summary>
        public readonly partial struct PFN_vk_icdNegotiateLoaderICDInterfaceVersion : IEquatable<vulkan.PFN_vk_icdNegotiateLoaderICDInterfaceVersion>, IvkFunctionPointer<vulkan.PFN_vk_icdNegotiateLoaderICDInterfaceVersion>
        {
            public PFN_vk_icdNegotiateLoaderICDInterfaceVersion(delegate*unmanaged[Stdcall]<uint*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<uint*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vk_icdNegotiateLoaderICDInterfaceVersion other && Equals(other);
            
            public bool Equals(PFN_vk_icdNegotiateLoaderICDInterfaceVersion other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<uint*, vulkan.VkResult> (vulkan.PFN_vk_icdNegotiateLoaderICDInterfaceVersion from) => from.Value;
            
            public static implicit operator vulkan.PFN_vk_icdNegotiateLoaderICDInterfaceVersion (delegate*unmanaged[Stdcall]<uint*, vulkan.VkResult> from) => new vulkan.PFN_vk_icdNegotiateLoaderICDInterfaceVersion(from);
            
            public static bool operator ==(PFN_vk_icdNegotiateLoaderICDInterfaceVersion left, PFN_vk_icdNegotiateLoaderICDInterfaceVersion right) => left.Equals(right);
            
            public static bool operator !=(PFN_vk_icdNegotiateLoaderICDInterfaceVersion left, PFN_vk_icdNegotiateLoaderICDInterfaceVersion right) => !left.Equals(right);
            
            /// <summary>
            /// Gets the prototype of the function `vk_icdNegotiateLoaderICDInterfaceVersion`.
            /// </summary>
            public static ReadOnlyMemoryUtf8 Name => "vk_icdNegotiateLoaderICDInterfaceVersion"u8;
            
            public vulkan.VkResult Invoke(uint* pVersion)
            {
                return Value(pVersion);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vk_icdGetInstanceProcAddr : IEquatable<vulkan.PFN_vk_icdGetInstanceProcAddr>, IvkInstanceFunctionPointer<vulkan.PFN_vk_icdGetInstanceProcAddr>
        {
            public PFN_vk_icdGetInstanceProcAddr(delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vk_icdGetInstanceProcAddr other && Equals(other);
            
            public bool Equals(PFN_vk_icdGetInstanceProcAddr other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> (vulkan.PFN_vk_icdGetInstanceProcAddr from) => from.Value;
            
            public static implicit operator vulkan.PFN_vk_icdGetInstanceProcAddr (delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> from) => new vulkan.PFN_vk_icdGetInstanceProcAddr(from);
            
            public static bool operator ==(PFN_vk_icdGetInstanceProcAddr left, PFN_vk_icdGetInstanceProcAddr right) => left.Equals(right);
            
            public static bool operator !=(PFN_vk_icdGetInstanceProcAddr left, PFN_vk_icdGetInstanceProcAddr right) => !left.Equals(right);
            
            /// <summary>
            /// Gets the prototype of the function `vk_icdGetInstanceProcAddr`.
            /// </summary>
            public static ReadOnlyMemoryUtf8 Name => "vk_icdGetInstanceProcAddr"u8;
            
            public vulkan.PFN_vkVoidFunction Invoke(vulkan.VkInstance instance, byte* pName)
            {
                return Value(instance, pName);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vk_icdGetPhysicalDeviceProcAddr : IEquatable<vulkan.PFN_vk_icdGetPhysicalDeviceProcAddr>, IvkInstanceFunctionPointer<vulkan.PFN_vk_icdGetPhysicalDeviceProcAddr>
        {
            public PFN_vk_icdGetPhysicalDeviceProcAddr(delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vk_icdGetPhysicalDeviceProcAddr other && Equals(other);
            
            public bool Equals(PFN_vk_icdGetPhysicalDeviceProcAddr other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> (vulkan.PFN_vk_icdGetPhysicalDeviceProcAddr from) => from.Value;
            
            public static implicit operator vulkan.PFN_vk_icdGetPhysicalDeviceProcAddr (delegate*unmanaged[Stdcall]<vulkan.VkInstance, byte*, vulkan.PFN_vkVoidFunction> from) => new vulkan.PFN_vk_icdGetPhysicalDeviceProcAddr(from);
            
            public static bool operator ==(PFN_vk_icdGetPhysicalDeviceProcAddr left, PFN_vk_icdGetPhysicalDeviceProcAddr right) => left.Equals(right);
            
            public static bool operator !=(PFN_vk_icdGetPhysicalDeviceProcAddr left, PFN_vk_icdGetPhysicalDeviceProcAddr right) => !left.Equals(right);
            
            /// <summary>
            /// Gets the prototype of the function `vk_icdGetPhysicalDeviceProcAddr`.
            /// </summary>
            public static ReadOnlyMemoryUtf8 Name => "vk_icdGetPhysicalDeviceProcAddr"u8;
            
            public vulkan.PFN_vkVoidFunction Invoke(vulkan.VkInstance instance, byte* pName)
            {
                return Value(instance, pName);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vk_icdEnumerateAdapterPhysicalDevices : IEquatable<vulkan.PFN_vk_icdEnumerateAdapterPhysicalDevices>, IvkInstanceFunctionPointer<vulkan.PFN_vk_icdEnumerateAdapterPhysicalDevices>
        {
            public PFN_vk_icdEnumerateAdapterPhysicalDevices(delegate*unmanaged[Stdcall]<vulkan.VkInstance, ulong, uint*, vulkan.VkPhysicalDevice*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, ulong, uint*, vulkan.VkPhysicalDevice*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vk_icdEnumerateAdapterPhysicalDevices other && Equals(other);
            
            public bool Equals(PFN_vk_icdEnumerateAdapterPhysicalDevices other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, ulong, uint*, vulkan.VkPhysicalDevice*, vulkan.VkResult> (vulkan.PFN_vk_icdEnumerateAdapterPhysicalDevices from) => from.Value;
            
            public static implicit operator vulkan.PFN_vk_icdEnumerateAdapterPhysicalDevices (delegate*unmanaged[Stdcall]<vulkan.VkInstance, ulong, uint*, vulkan.VkPhysicalDevice*, vulkan.VkResult> from) => new vulkan.PFN_vk_icdEnumerateAdapterPhysicalDevices(from);
            
            public static bool operator ==(PFN_vk_icdEnumerateAdapterPhysicalDevices left, PFN_vk_icdEnumerateAdapterPhysicalDevices right) => left.Equals(right);
            
            public static bool operator !=(PFN_vk_icdEnumerateAdapterPhysicalDevices left, PFN_vk_icdEnumerateAdapterPhysicalDevices right) => !left.Equals(right);
            
            /// <summary>
            /// Gets the prototype of the function `vk_icdEnumerateAdapterPhysicalDevices`.
            /// </summary>
            public static ReadOnlyMemoryUtf8 Name => "vk_icdEnumerateAdapterPhysicalDevices"u8;
            
            public vulkan.VkResult Invoke(vulkan.VkInstance instance, ulong adapterLUID, uint* pPhysicalDeviceCount, vulkan.VkPhysicalDevice* pPhysicalDevices)
            {
                return Value(instance, adapterLUID, pPhysicalDeviceCount, pPhysicalDevices);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vk_icdNegotiateLoaderICDInterfaceVersion")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vk_icdNegotiateLoaderICDInterfaceVersion(uint* pVersion);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vk_icdGetInstanceProcAddr")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.PFN_vkVoidFunction vk_icdGetInstanceProcAddr(vulkan.VkInstance instance, byte* pName);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vk_icdGetPhysicalDeviceProcAddr")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.PFN_vkVoidFunction vk_icdGetPhysicalDeviceProcAddr(vulkan.VkInstance instance, byte* pName);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vk_icdEnumerateAdapterPhysicalDevices")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vk_icdEnumerateAdapterPhysicalDevices(vulkan.VkInstance instance, ulong adapterLUID, uint* pPhysicalDeviceCount, vulkan.VkPhysicalDevice* pPhysicalDevices);
    }
}
