//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        public partial struct VkXlibSurfaceCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkXlibSurfaceCreateFlagsKHR flags;
            
            public void* dpy;
            
            public nuint window;
        }
        
        public readonly partial struct VkXlibSurfaceCreateFlagsKHR : IEquatable<VkXlibSurfaceCreateFlagsKHR>
        {
            public VkXlibSurfaceCreateFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkXlibSurfaceCreateFlagsKHR other && Equals(other);
            
            public bool Equals(VkXlibSurfaceCreateFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkXlibSurfaceCreateFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkXlibSurfaceCreateFlagsKHR (vulkan.VkFlags from) => new vulkan.VkXlibSurfaceCreateFlagsKHR(from);
            
            public static bool operator ==(VkXlibSurfaceCreateFlagsKHR left, VkXlibSurfaceCreateFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkXlibSurfaceCreateFlagsKHR left, VkXlibSurfaceCreateFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateXlibSurfaceKHR : IEquatable<PFN_vkCreateXlibSurfaceKHR>, IvkFunctionPointer
        {
            public PFN_vkCreateXlibSurfaceKHR(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkXlibSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkXlibSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateXlibSurfaceKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateXlibSurfaceKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkXlibSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateXlibSurfaceKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateXlibSurfaceKHR (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkXlibSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateXlibSurfaceKHR(from);
            
            public static bool operator ==(PFN_vkCreateXlibSurfaceKHR left, PFN_vkCreateXlibSurfaceKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateXlibSurfaceKHR left, PFN_vkCreateXlibSurfaceKHR right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkInstance instance, in vulkan.VkXlibSurfaceCreateInfoKHR pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSurfaceKHR pSurface)
            {
                fixed (vulkan.VkXlibSurfaceCreateInfoKHR* __pCreateInfo = &pCreateInfo)
                fixed (vulkan.VkAllocationCallbacks* __pAllocator = &pAllocator)
                fixed (vulkan.VkSurfaceKHR* __pSurface = &pSurface)
                return Value(instance, __pCreateInfo, __pAllocator, __pSurface);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR : IEquatable<PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR>, IvkFunctionPointer
        {
            public PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, void*, nuint, vulkan.VkBool32> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, void*, nuint, vulkan.VkBool32> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, void*, nuint, vulkan.VkBool32> (vulkan.PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, void*, nuint, vulkan.VkBool32> from) => new vulkan.PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR left, PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR left, PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR right) => !left.Equals(right);
            
            public vulkan.VkBool32 Invoke(vulkan.VkPhysicalDevice physicalDevice, uint queueFamilyIndex, void* dpy, nuint visualID)
            {
                return Value(physicalDevice, queueFamilyIndex, dpy, visualID);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public const int VK_KHR_xlib_surface = 1;
        
        public const int VK_KHR_XLIB_SURFACE_SPEC_VERSION = 6;
        
        public static ReadOnlySpanUtf8 VK_KHR_XLIB_SURFACE_EXTENSION_NAME => "VK_KHR_xlib_surface"u8;
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkCreateXlibSurfaceKHR> vkCreateXlibSurfaceKHR_ => new("vkCreateXlibSurfaceKHR"u8);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR> vkGetPhysicalDeviceXlibPresentationSupportKHR_ => new("vkGetPhysicalDeviceXlibPresentationSupportKHR"u8);
    }
}
