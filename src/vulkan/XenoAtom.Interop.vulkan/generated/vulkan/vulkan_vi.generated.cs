//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        /// <summary>
        /// Structure specifying parameters of a newly created VI surface object
        /// </summary>
        /// <remarks>
        /// <para>Extension: VK_NN_vi_surface</para>
        /// </remarks>
        public partial struct VkViSurfaceCreateInfoNN
        {
            /// <summary>
            /// A <see cref="T:VkStructureType"/> value identifying this structure.
            /// </summary>
            public vulkan.VkStructureType sType;
            
            /// <summary>
            /// `NULL` or a pointer to a structure extending this structure.
            /// </summary>
            public void* pNext;
            
            /// <summary>
            /// Reserved for future use.
            /// </summary>
            public vulkan.VkViSurfaceCreateFlagsNN flags;
            
            /// <summary>
            /// The <c>nn</c>::<c>NativeWindowHandle</c> for the <c>nn</c>::<c>Layer</c> with which to associate the surface.
            /// </summary>
            public void* window;
        }
        
        /// <remarks>
        /// <para>Extension: VK_NN_vi_surface</para>
        /// </remarks>
        public readonly partial struct VkViSurfaceCreateFlagsNN : IEquatable<VkViSurfaceCreateFlagsNN>
        {
            public VkViSurfaceCreateFlagsNN(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkViSurfaceCreateFlagsNN other && Equals(other);
            
            public bool Equals(VkViSurfaceCreateFlagsNN other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkViSurfaceCreateFlagsNN from) => from.Value;
            
            public static implicit operator vulkan.VkViSurfaceCreateFlagsNN (vulkan.VkFlags from) => new vulkan.VkViSurfaceCreateFlagsNN(from);
            
            public static bool operator ==(VkViSurfaceCreateFlagsNN left, VkViSurfaceCreateFlagsNN right) => left.Equals(right);
            
            public static bool operator !=(VkViSurfaceCreateFlagsNN left, VkViSurfaceCreateFlagsNN right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateViSurfaceNN : IEquatable<PFN_vkCreateViSurfaceNN>, IvkFunctionPointer
        {
            public PFN_vkCreateViSurfaceNN(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkViSurfaceCreateInfoNN*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkViSurfaceCreateInfoNN*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateViSurfaceNN other && Equals(other);
            
            public bool Equals(PFN_vkCreateViSurfaceNN other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkViSurfaceCreateInfoNN*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateViSurfaceNN from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateViSurfaceNN (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkViSurfaceCreateInfoNN*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateViSurfaceNN(from);
            
            public static bool operator ==(PFN_vkCreateViSurfaceNN left, PFN_vkCreateViSurfaceNN right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateViSurfaceNN left, PFN_vkCreateViSurfaceNN right) => !left.Equals(right);
            
            /// <summary>
            /// Create a <see cref="T:VkSurfaceKHR"/> object for a VI layer
            /// </summary>
            /// <param name="instance">The instance with which to associate the surface.</param>
            /// <param name="pCreateInfo">A pointer to a <see cref="T:VkViSurfaceCreateInfoNN"/> structure containing parameters affecting the creation of the surface object.</param>
            /// <param name="pAllocator">The allocator used for host memory allocated for the surface object when there is no more specific allocator available (see Memory Allocation). This parameter is optional.</param>
            /// <param name="pSurface">A pointer to a <see cref="T:VkSurfaceKHR"/> handle in which the created surface object is returned.</param>
            /// <remarks>
            /// <list type="bullet">
            /// <listheader><description>On success, this command returns: </description></listheader><item><description><c>VK_SUCCESS</c></description></item>
            /// </list>
            /// <list type="bullet">
            /// <listheader><description>On failure, this command returns: </description></listheader><item><description><c>VK_ERROR_OUT_OF_HOST_MEMORY</c></description></item><item><description><c>VK_ERROR_OUT_OF_DEVICE_MEMORY</c></description></item><item><description><c>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</c></description></item>
            /// </list>
            /// <para>Extension: VK_NN_vi_surface</para>
            /// </remarks>
            public vulkan.VkResult Invoke(vulkan.VkInstance instance, vulkan.VkViSurfaceCreateInfoNN* pCreateInfo, vulkan.VkAllocationCallbacks* pAllocator, vulkan.VkSurfaceKHR* pSurface)
            {
                return Value(instance, pCreateInfo, pAllocator, pSurface);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        /// <summary>
        /// Create a <see cref="T:VkSurfaceKHR"/> object for a VI layer
        /// </summary>
        /// <param name="instance">The instance with which to associate the surface.</param>
        /// <param name="pCreateInfo">A pointer to a <see cref="T:VkViSurfaceCreateInfoNN"/> structure containing parameters affecting the creation of the surface object.</param>
        /// <param name="pAllocator">The allocator used for host memory allocated for the surface object when there is no more specific allocator available (see Memory Allocation). This parameter is optional.</param>
        /// <param name="pSurface">A pointer to a <see cref="T:VkSurfaceKHR"/> handle in which the created surface object is returned.</param>
        /// <remarks>
        /// <list type="bullet">
        /// <listheader><description>On success, this command returns: </description></listheader><item><description><c>VK_SUCCESS</c></description></item>
        /// </list>
        /// <list type="bullet">
        /// <listheader><description>On failure, this command returns: </description></listheader><item><description><c>VK_ERROR_OUT_OF_HOST_MEMORY</c></description></item><item><description><c>VK_ERROR_OUT_OF_DEVICE_MEMORY</c></description></item><item><description><c>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</c></description></item>
        /// </list>
        /// <para>Extension: VK_NN_vi_surface</para>
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateViSurfaceNN")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateViSurfaceNN(vulkan.VkInstance instance, vulkan.VkViSurfaceCreateInfoNN* pCreateInfo, vulkan.VkAllocationCallbacks* pAllocator, vulkan.VkSurfaceKHR* pSurface);
        
        /// <summary>
        /// Create a <see cref="T:VkSurfaceKHR"/> object for a VI layer
        /// </summary>
        /// <param name="instance">The instance with which to associate the surface.</param>
        /// <param name="pCreateInfo">A pointer to a <see cref="T:VkViSurfaceCreateInfoNN"/> structure containing parameters affecting the creation of the surface object.</param>
        /// <param name="pAllocator">The allocator used for host memory allocated for the surface object when there is no more specific allocator available (see Memory Allocation). This parameter is optional.</param>
        /// <param name="pSurface">A pointer to a <see cref="T:VkSurfaceKHR"/> handle in which the created surface object is returned.</param>
        /// <remarks>
        /// <list type="bullet">
        /// <listheader><description>On success, this command returns: </description></listheader><item><description><c>VK_SUCCESS</c></description></item>
        /// </list>
        /// <list type="bullet">
        /// <listheader><description>On failure, this command returns: </description></listheader><item><description><c>VK_ERROR_OUT_OF_HOST_MEMORY</c></description></item><item><description><c>VK_ERROR_OUT_OF_DEVICE_MEMORY</c></description></item><item><description><c>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</c></description></item>
        /// </list>
        /// <para>Extension: VK_NN_vi_surface</para>
        /// </remarks>
        public static vulkan.VkResult vkCreateViSurfaceNN(vulkan.VkInstance instance, in vulkan.VkViSurfaceCreateInfoNN pCreateInfo, vulkan.VkAllocationCallbacks* pAllocator, out vulkan.VkSurfaceKHR pSurface)
        {
            fixed (vulkan.VkViSurfaceCreateInfoNN* __pCreateInfo_local = &pCreateInfo)
            fixed (vulkan.VkSurfaceKHR* __pSurface_local = &pSurface)
            return vkCreateViSurfaceNN(instance, __pCreateInfo_local, pAllocator, __pSurface_local);
        }
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkCreateViSurfaceNN> vkCreateViSurfaceNN_ => new("vkCreateViSurfaceNN"u8);
    }
}
