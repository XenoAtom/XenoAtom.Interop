//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        public partial struct VkScreenSurfaceCreateInfoQNX
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkScreenSurfaceCreateFlagsQNX flags;
            
            public vulkan._screen_context context;
            
            public vulkan._screen_window window;
        }
        
        public readonly partial struct VkScreenSurfaceCreateFlagsQNX : IEquatable<VkScreenSurfaceCreateFlagsQNX>
        {
            public VkScreenSurfaceCreateFlagsQNX(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkScreenSurfaceCreateFlagsQNX other && Equals(other);
            
            public bool Equals(VkScreenSurfaceCreateFlagsQNX other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkScreenSurfaceCreateFlagsQNX from) => from.Value;
            
            public static implicit operator vulkan.VkScreenSurfaceCreateFlagsQNX (vulkan.VkFlags from) => new vulkan.VkScreenSurfaceCreateFlagsQNX(from);
            
            public static bool operator ==(VkScreenSurfaceCreateFlagsQNX left, VkScreenSurfaceCreateFlagsQNX right) => left.Equals(right);
            
            public static bool operator !=(VkScreenSurfaceCreateFlagsQNX left, VkScreenSurfaceCreateFlagsQNX right) => !left.Equals(right);
        }
        
        public partial struct VkScreenBufferPropertiesQNX
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceSize allocationSize;
            
            public uint memoryTypeBits;
        }
        
        public partial struct VkScreenBufferFormatPropertiesQNX
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFormat format;
            
            public ulong externalFormat;
            
            public ulong screenUsage;
            
            public vulkan.VkFormatFeatureFlags formatFeatures;
            
            public vulkan.VkComponentMapping samplerYcbcrConversionComponents;
            
            public vulkan.VkSamplerYcbcrModelConversion suggestedYcbcrModel;
            
            public vulkan.VkSamplerYcbcrRange suggestedYcbcrRange;
            
            public vulkan.VkChromaLocation suggestedXChromaOffset;
            
            public vulkan.VkChromaLocation suggestedYChromaOffset;
        }
        
        public partial struct VkImportScreenBufferInfoQNX
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan._screen_buffer buffer;
        }
        
        public partial struct VkExternalFormatQNX
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public ulong externalFormat;
        }
        
        public partial struct VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBool32 screenBufferImport;
        }
        
        public readonly partial struct PFN_vkCreateScreenSurfaceQNX : IEquatable<PFN_vkCreateScreenSurfaceQNX>, IvkFunctionPointer
        {
            public PFN_vkCreateScreenSurfaceQNX(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkScreenSurfaceCreateInfoQNX*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkScreenSurfaceCreateInfoQNX*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateScreenSurfaceQNX other && Equals(other);
            
            public bool Equals(PFN_vkCreateScreenSurfaceQNX other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkScreenSurfaceCreateInfoQNX*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateScreenSurfaceQNX from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateScreenSurfaceQNX (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkScreenSurfaceCreateInfoQNX*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateScreenSurfaceQNX(from);
            
            public static bool operator ==(PFN_vkCreateScreenSurfaceQNX left, PFN_vkCreateScreenSurfaceQNX right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateScreenSurfaceQNX left, PFN_vkCreateScreenSurfaceQNX right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkInstance instance, in vulkan.VkScreenSurfaceCreateInfoQNX pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSurfaceKHR pSurface)
            {
                fixed (vulkan.VkScreenSurfaceCreateInfoQNX* __pCreateInfo = &pCreateInfo)
                fixed (vulkan.VkAllocationCallbacks* __pAllocator = &pAllocator)
                fixed (vulkan.VkSurfaceKHR* __pSurface = &pSurface)
                return Value(instance, __pCreateInfo, __pAllocator, __pSurface);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX : IEquatable<PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX>, IvkFunctionPointer
        {
            public PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan._screen_window, vulkan.VkBool32> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan._screen_window, vulkan.VkBool32> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan._screen_window, vulkan.VkBool32> (vulkan.PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan._screen_window, vulkan.VkBool32> from) => new vulkan.PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX left, PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX left, PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX right) => !left.Equals(right);
            
            public vulkan.VkBool32 Invoke(vulkan.VkPhysicalDevice physicalDevice, uint queueFamilyIndex, vulkan._screen_window window)
            {
                return Value(physicalDevice, queueFamilyIndex, window);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkGetScreenBufferPropertiesQNX : IEquatable<PFN_vkGetScreenBufferPropertiesQNX>, IvkFunctionPointer
        {
            public PFN_vkGetScreenBufferPropertiesQNX(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan._screen_buffer, vulkan.VkScreenBufferPropertiesQNX*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan._screen_buffer, vulkan.VkScreenBufferPropertiesQNX*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetScreenBufferPropertiesQNX other && Equals(other);
            
            public bool Equals(PFN_vkGetScreenBufferPropertiesQNX other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan._screen_buffer, vulkan.VkScreenBufferPropertiesQNX*, vulkan.VkResult> (vulkan.PFN_vkGetScreenBufferPropertiesQNX from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetScreenBufferPropertiesQNX (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan._screen_buffer, vulkan.VkScreenBufferPropertiesQNX*, vulkan.VkResult> from) => new vulkan.PFN_vkGetScreenBufferPropertiesQNX(from);
            
            public static bool operator ==(PFN_vkGetScreenBufferPropertiesQNX left, PFN_vkGetScreenBufferPropertiesQNX right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetScreenBufferPropertiesQNX left, PFN_vkGetScreenBufferPropertiesQNX right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkDevice device, vulkan._screen_buffer buffer, ref vulkan.VkScreenBufferPropertiesQNX pProperties)
            {
                fixed (vulkan.VkScreenBufferPropertiesQNX* __pProperties = &pProperties)
                return Value(device, buffer, __pProperties);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateScreenSurfaceQNX")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateScreenSurfaceQNX(vulkan.VkInstance instance, in vulkan.VkScreenSurfaceCreateInfoQNX pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSurfaceKHR pSurface);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkCreateScreenSurfaceQNX> vkCreateScreenSurfaceQNX_ => new("vkCreateScreenSurfaceQNX"u8);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceScreenPresentationSupportQNX")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkBool32 vkGetPhysicalDeviceScreenPresentationSupportQNX(vulkan.VkPhysicalDevice physicalDevice, uint queueFamilyIndex, vulkan._screen_window window);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX> vkGetPhysicalDeviceScreenPresentationSupportQNX_ => new("vkGetPhysicalDeviceScreenPresentationSupportQNX"u8);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetScreenBufferPropertiesQNX")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetScreenBufferPropertiesQNX(vulkan.VkDevice device, vulkan._screen_buffer buffer, ref vulkan.VkScreenBufferPropertiesQNX pProperties);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkGetScreenBufferPropertiesQNX> vkGetScreenBufferPropertiesQNX_ => new("vkGetScreenBufferPropertiesQNX"u8);
    }
}
