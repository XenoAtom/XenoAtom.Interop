//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        public partial struct VkWaylandSurfaceCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkWaylandSurfaceCreateFlagsKHR flags;
            
            public vulkan.wl_display display;
            
            public vulkan.wl_surface surface;
        }
        
        public readonly partial struct VkWaylandSurfaceCreateFlagsKHR : IEquatable<VkWaylandSurfaceCreateFlagsKHR>
        {
            public VkWaylandSurfaceCreateFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkWaylandSurfaceCreateFlagsKHR other && Equals(other);
            
            public bool Equals(VkWaylandSurfaceCreateFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkWaylandSurfaceCreateFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkWaylandSurfaceCreateFlagsKHR (vulkan.VkFlags from) => new vulkan.VkWaylandSurfaceCreateFlagsKHR(from);
            
            public static bool operator ==(VkWaylandSurfaceCreateFlagsKHR left, VkWaylandSurfaceCreateFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkWaylandSurfaceCreateFlagsKHR left, VkWaylandSurfaceCreateFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateWaylandSurfaceKHR : IEquatable<PFN_vkCreateWaylandSurfaceKHR>, IvkFunctionPointer
        {
            public PFN_vkCreateWaylandSurfaceKHR(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkWaylandSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkWaylandSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateWaylandSurfaceKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateWaylandSurfaceKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkWaylandSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateWaylandSurfaceKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateWaylandSurfaceKHR (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkWaylandSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateWaylandSurfaceKHR(from);
            
            public static bool operator ==(PFN_vkCreateWaylandSurfaceKHR left, PFN_vkCreateWaylandSurfaceKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateWaylandSurfaceKHR left, PFN_vkCreateWaylandSurfaceKHR right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkInstance instance, in vulkan.VkWaylandSurfaceCreateInfoKHR pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSurfaceKHR pSurface)
            {
                fixed (vulkan.VkWaylandSurfaceCreateInfoKHR* __pCreateInfo = &pCreateInfo)
                fixed (vulkan.VkAllocationCallbacks* __pAllocator = &pAllocator)
                fixed (vulkan.VkSurfaceKHR* __pSurface = &pSurface)
                return Value(instance, __pCreateInfo, __pAllocator, __pSurface);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR : IEquatable<PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR>, IvkFunctionPointer
        {
            public PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan.wl_display, vulkan.VkBool32> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan.wl_display, vulkan.VkBool32> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan.wl_display, vulkan.VkBool32> (vulkan.PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, vulkan.wl_display, vulkan.VkBool32> from) => new vulkan.PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR left, PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR left, PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR right) => !left.Equals(right);
            
            public vulkan.VkBool32 Invoke(vulkan.VkPhysicalDevice physicalDevice, uint queueFamilyIndex, vulkan.wl_display display)
            {
                return Value(physicalDevice, queueFamilyIndex, display);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public const int VK_KHR_wayland_surface = 1;
        
        public const int VK_KHR_WAYLAND_SURFACE_SPEC_VERSION = 6;
        
        public static ReadOnlySpanUtf8 VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME => "VK_KHR_wayland_surface"u8;
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkCreateWaylandSurfaceKHR> vkCreateWaylandSurfaceKHR_ => new("vkCreateWaylandSurfaceKHR"u8);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR> vkGetPhysicalDeviceWaylandPresentationSupportKHR_ => new("vkGetPhysicalDeviceWaylandPresentationSupportKHR"u8);
    }
}
