//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        [Flags]
        public enum VkImageConstraintsInfoFlagBitsFUCHSIA : uint
        {
            VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_RARELY_FUCHSIA = unchecked((uint)1),
            
            VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_OFTEN_FUCHSIA = unchecked((uint)2),
            
            VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_RARELY_FUCHSIA = unchecked((uint)4),
            
            VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_OFTEN_FUCHSIA = unchecked((uint)8),
            
            VK_IMAGE_CONSTRAINTS_INFO_PROTECTED_OPTIONAL_FUCHSIA = unchecked((uint)16),
            
            VK_IMAGE_CONSTRAINTS_INFO_FLAG_BITS_MAX_ENUM_FUCHSIA = unchecked((uint)2147483647),
        }
        
        public const vulkan.VkImageConstraintsInfoFlagBitsFUCHSIA VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_RARELY_FUCHSIA = VkImageConstraintsInfoFlagBitsFUCHSIA.VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_RARELY_FUCHSIA;
        
        public const vulkan.VkImageConstraintsInfoFlagBitsFUCHSIA VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_OFTEN_FUCHSIA = VkImageConstraintsInfoFlagBitsFUCHSIA.VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_OFTEN_FUCHSIA;
        
        public const vulkan.VkImageConstraintsInfoFlagBitsFUCHSIA VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_RARELY_FUCHSIA = VkImageConstraintsInfoFlagBitsFUCHSIA.VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_RARELY_FUCHSIA;
        
        public const vulkan.VkImageConstraintsInfoFlagBitsFUCHSIA VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_OFTEN_FUCHSIA = VkImageConstraintsInfoFlagBitsFUCHSIA.VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_OFTEN_FUCHSIA;
        
        public const vulkan.VkImageConstraintsInfoFlagBitsFUCHSIA VK_IMAGE_CONSTRAINTS_INFO_PROTECTED_OPTIONAL_FUCHSIA = VkImageConstraintsInfoFlagBitsFUCHSIA.VK_IMAGE_CONSTRAINTS_INFO_PROTECTED_OPTIONAL_FUCHSIA;
        
        public const vulkan.VkImageConstraintsInfoFlagBitsFUCHSIA VK_IMAGE_CONSTRAINTS_INFO_FLAG_BITS_MAX_ENUM_FUCHSIA = VkImageConstraintsInfoFlagBitsFUCHSIA.VK_IMAGE_CONSTRAINTS_INFO_FLAG_BITS_MAX_ENUM_FUCHSIA;
        
        public partial struct VkImagePipeSurfaceCreateInfoFUCHSIA
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImagePipeSurfaceCreateFlagsFUCHSIA flags;
            
            public uint imagePipeHandle;
        }
        
        public readonly partial struct VkImagePipeSurfaceCreateFlagsFUCHSIA : IEquatable<VkImagePipeSurfaceCreateFlagsFUCHSIA>
        {
            public VkImagePipeSurfaceCreateFlagsFUCHSIA(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkImagePipeSurfaceCreateFlagsFUCHSIA other && Equals(other);
            
            public bool Equals(VkImagePipeSurfaceCreateFlagsFUCHSIA other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkImagePipeSurfaceCreateFlagsFUCHSIA from) => from.Value;
            
            public static implicit operator vulkan.VkImagePipeSurfaceCreateFlagsFUCHSIA (vulkan.VkFlags from) => new vulkan.VkImagePipeSurfaceCreateFlagsFUCHSIA(from);
            
            public static bool operator ==(VkImagePipeSurfaceCreateFlagsFUCHSIA left, VkImagePipeSurfaceCreateFlagsFUCHSIA right) => left.Equals(right);
            
            public static bool operator !=(VkImagePipeSurfaceCreateFlagsFUCHSIA left, VkImagePipeSurfaceCreateFlagsFUCHSIA right) => !left.Equals(right);
        }
        
        public partial struct VkImportMemoryZirconHandleInfoFUCHSIA
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkExternalMemoryHandleTypeFlagBits handleType;
            
            public uint handle;
        }
        
        public partial struct VkMemoryZirconHandlePropertiesFUCHSIA
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint memoryTypeBits;
        }
        
        public partial struct VkMemoryGetZirconHandleInfoFUCHSIA
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceMemory memory;
            
            public vulkan.VkExternalMemoryHandleTypeFlagBits handleType;
        }
        
        public partial struct VkImportSemaphoreZirconHandleInfoFUCHSIA
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSemaphore semaphore;
            
            public vulkan.VkSemaphoreImportFlags flags;
            
            public vulkan.VkExternalSemaphoreHandleTypeFlagBits handleType;
            
            public uint zirconHandle;
        }
        
        public partial struct VkSemaphoreGetZirconHandleInfoFUCHSIA
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkSemaphore semaphore;
            
            public vulkan.VkExternalSemaphoreHandleTypeFlagBits handleType;
        }
        
        public partial struct VkBufferCollectionCreateInfoFUCHSIA
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint collectionToken;
        }
        
        public partial struct VkImportMemoryBufferCollectionFUCHSIA
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBufferCollectionFUCHSIA collection;
            
            public uint index;
        }
        
        public readonly partial struct VkBufferCollectionFUCHSIA : IEquatable<VkBufferCollectionFUCHSIA>
        {
            public VkBufferCollectionFUCHSIA(vulkan.VkBufferCollectionFUCHSIA_T value) => this.Value = value;
            
            public vulkan.VkBufferCollectionFUCHSIA_T Value { get; }
            
            public override bool Equals(object obj) => obj is VkBufferCollectionFUCHSIA other && Equals(other);
            
            public bool Equals(VkBufferCollectionFUCHSIA other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkBufferCollectionFUCHSIA_T (vulkan.VkBufferCollectionFUCHSIA from) => from.Value;
            
            public static implicit operator vulkan.VkBufferCollectionFUCHSIA (vulkan.VkBufferCollectionFUCHSIA_T from) => new vulkan.VkBufferCollectionFUCHSIA(from);
            
            public static bool operator ==(VkBufferCollectionFUCHSIA left, VkBufferCollectionFUCHSIA right) => left.Equals(right);
            
            public static bool operator !=(VkBufferCollectionFUCHSIA left, VkBufferCollectionFUCHSIA right) => !left.Equals(right);
        }
        
        public partial struct VkBufferCollectionImageCreateInfoFUCHSIA
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBufferCollectionFUCHSIA collection;
            
            public uint index;
        }
        
        public partial struct VkBufferCollectionConstraintsInfoFUCHSIA
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint minBufferCount;
            
            public uint maxBufferCount;
            
            public uint minBufferCountForCamping;
            
            public uint minBufferCountForDedicatedSlack;
            
            public uint minBufferCountForSharedSlack;
        }
        
        public partial struct VkBufferConstraintsInfoFUCHSIA
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBufferCreateInfo createInfo;
            
            public vulkan.VkFormatFeatureFlags requiredFormatFeatures;
            
            public vulkan.VkBufferCollectionConstraintsInfoFUCHSIA bufferCollectionConstraints;
        }
        
        public partial struct VkBufferCollectionBufferCreateInfoFUCHSIA
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkBufferCollectionFUCHSIA collection;
            
            public uint index;
        }
        
        public partial struct VkSysmemColorSpaceFUCHSIA
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint colorSpace;
        }
        
        public partial struct VkBufferCollectionPropertiesFUCHSIA
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint memoryTypeBits;
            
            public uint bufferCount;
            
            public uint createInfoIndex;
            
            public ulong sysmemPixelFormat;
            
            public vulkan.VkFormatFeatureFlags formatFeatures;
            
            public vulkan.VkSysmemColorSpaceFUCHSIA sysmemColorSpaceIndex;
            
            public vulkan.VkComponentMapping samplerYcbcrConversionComponents;
            
            public vulkan.VkSamplerYcbcrModelConversion suggestedYcbcrModel;
            
            public vulkan.VkSamplerYcbcrRange suggestedYcbcrRange;
            
            public vulkan.VkChromaLocation suggestedXChromaOffset;
            
            public vulkan.VkChromaLocation suggestedYChromaOffset;
        }
        
        public partial struct VkImageFormatConstraintsInfoFUCHSIA
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkImageCreateInfo imageCreateInfo;
            
            public vulkan.VkFormatFeatureFlags requiredFormatFeatures;
            
            public vulkan.VkImageFormatConstraintsFlagsFUCHSIA flags;
            
            public ulong sysmemPixelFormat;
            
            public uint colorSpaceCount;
            
            public vulkan.VkSysmemColorSpaceFUCHSIA* pColorSpaces;
        }
        
        public readonly partial struct VkImageFormatConstraintsFlagsFUCHSIA : IEquatable<VkImageFormatConstraintsFlagsFUCHSIA>
        {
            public VkImageFormatConstraintsFlagsFUCHSIA(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageFormatConstraintsFlagsFUCHSIA other && Equals(other);
            
            public bool Equals(VkImageFormatConstraintsFlagsFUCHSIA other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkImageFormatConstraintsFlagsFUCHSIA from) => from.Value;
            
            public static implicit operator vulkan.VkImageFormatConstraintsFlagsFUCHSIA (vulkan.VkFlags from) => new vulkan.VkImageFormatConstraintsFlagsFUCHSIA(from);
            
            public static bool operator ==(VkImageFormatConstraintsFlagsFUCHSIA left, VkImageFormatConstraintsFlagsFUCHSIA right) => left.Equals(right);
            
            public static bool operator !=(VkImageFormatConstraintsFlagsFUCHSIA left, VkImageFormatConstraintsFlagsFUCHSIA right) => !left.Equals(right);
        }
        
        public partial struct VkImageConstraintsInfoFUCHSIA
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public uint formatConstraintsCount;
            
            public vulkan.VkImageFormatConstraintsInfoFUCHSIA* pFormatConstraints;
            
            public vulkan.VkBufferCollectionConstraintsInfoFUCHSIA bufferCollectionConstraints;
            
            public vulkan.VkImageConstraintsInfoFlagsFUCHSIA flags;
        }
        
        public readonly partial struct VkImageConstraintsInfoFlagsFUCHSIA : IEquatable<VkImageConstraintsInfoFlagsFUCHSIA>
        {
            public VkImageConstraintsInfoFlagsFUCHSIA(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkImageConstraintsInfoFlagsFUCHSIA other && Equals(other);
            
            public bool Equals(VkImageConstraintsInfoFlagsFUCHSIA other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkImageConstraintsInfoFlagsFUCHSIA from) => from.Value;
            
            public static implicit operator vulkan.VkImageConstraintsInfoFlagsFUCHSIA (vulkan.VkFlags from) => new vulkan.VkImageConstraintsInfoFlagsFUCHSIA(from);
            
            public static bool operator ==(VkImageConstraintsInfoFlagsFUCHSIA left, VkImageConstraintsInfoFlagsFUCHSIA right) => left.Equals(right);
            
            public static bool operator !=(VkImageConstraintsInfoFlagsFUCHSIA left, VkImageConstraintsInfoFlagsFUCHSIA right) => !left.Equals(right);
            
            public static implicit operator vulkan.VkImageConstraintsInfoFlagBitsFUCHSIA (vulkan.VkImageConstraintsInfoFlagsFUCHSIA from) => (vulkan.VkImageConstraintsInfoFlagBitsFUCHSIA)(uint)from.Value;
            
            public static implicit operator vulkan.VkImageConstraintsInfoFlagsFUCHSIA (vulkan.VkImageConstraintsInfoFlagBitsFUCHSIA from) => new vulkan.VkImageConstraintsInfoFlagsFUCHSIA((uint)from);
        }
        
        public readonly partial struct PFN_vkCreateImagePipeSurfaceFUCHSIA : IEquatable<PFN_vkCreateImagePipeSurfaceFUCHSIA>, IvkFunctionPointer
        {
            public PFN_vkCreateImagePipeSurfaceFUCHSIA(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkImagePipeSurfaceCreateInfoFUCHSIA*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkImagePipeSurfaceCreateInfoFUCHSIA*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateImagePipeSurfaceFUCHSIA other && Equals(other);
            
            public bool Equals(PFN_vkCreateImagePipeSurfaceFUCHSIA other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkImagePipeSurfaceCreateInfoFUCHSIA*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateImagePipeSurfaceFUCHSIA from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateImagePipeSurfaceFUCHSIA (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkImagePipeSurfaceCreateInfoFUCHSIA*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateImagePipeSurfaceFUCHSIA(from);
            
            public static bool operator ==(PFN_vkCreateImagePipeSurfaceFUCHSIA left, PFN_vkCreateImagePipeSurfaceFUCHSIA right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateImagePipeSurfaceFUCHSIA left, PFN_vkCreateImagePipeSurfaceFUCHSIA right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkInstance instance, in vulkan.VkImagePipeSurfaceCreateInfoFUCHSIA pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSurfaceKHR pSurface)
            {
                fixed (vulkan.VkImagePipeSurfaceCreateInfoFUCHSIA* __pCreateInfo = &pCreateInfo)
                fixed (vulkan.VkAllocationCallbacks* __pAllocator = &pAllocator)
                fixed (vulkan.VkSurfaceKHR* __pSurface = &pSurface)
                return Value(instance, __pCreateInfo, __pAllocator, __pSurface);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkGetMemoryZirconHandleFUCHSIA : IEquatable<PFN_vkGetMemoryZirconHandleFUCHSIA>, IvkFunctionPointer
        {
            public PFN_vkGetMemoryZirconHandleFUCHSIA(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetZirconHandleInfoFUCHSIA*, uint*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetZirconHandleInfoFUCHSIA*, uint*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetMemoryZirconHandleFUCHSIA other && Equals(other);
            
            public bool Equals(PFN_vkGetMemoryZirconHandleFUCHSIA other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetZirconHandleInfoFUCHSIA*, uint*, vulkan.VkResult> (vulkan.PFN_vkGetMemoryZirconHandleFUCHSIA from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetMemoryZirconHandleFUCHSIA (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetZirconHandleInfoFUCHSIA*, uint*, vulkan.VkResult> from) => new vulkan.PFN_vkGetMemoryZirconHandleFUCHSIA(from);
            
            public static bool operator ==(PFN_vkGetMemoryZirconHandleFUCHSIA left, PFN_vkGetMemoryZirconHandleFUCHSIA right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetMemoryZirconHandleFUCHSIA left, PFN_vkGetMemoryZirconHandleFUCHSIA right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkDevice device, in vulkan.VkMemoryGetZirconHandleInfoFUCHSIA pGetZirconHandleInfo, ref uint pZirconHandle)
            {
                fixed (vulkan.VkMemoryGetZirconHandleInfoFUCHSIA* __pGetZirconHandleInfo = &pGetZirconHandleInfo)
                fixed (uint* __pZirconHandle = &pZirconHandle)
                return Value(device, __pGetZirconHandleInfo, __pZirconHandle);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA : IEquatable<PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA>, IvkFunctionPointer
        {
            public PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkExternalMemoryHandleTypeFlagBits, uint, vulkan.VkMemoryZirconHandlePropertiesFUCHSIA*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkExternalMemoryHandleTypeFlagBits, uint, vulkan.VkMemoryZirconHandlePropertiesFUCHSIA*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA other && Equals(other);
            
            public bool Equals(PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkExternalMemoryHandleTypeFlagBits, uint, vulkan.VkMemoryZirconHandlePropertiesFUCHSIA*, vulkan.VkResult> (vulkan.PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkExternalMemoryHandleTypeFlagBits, uint, vulkan.VkMemoryZirconHandlePropertiesFUCHSIA*, vulkan.VkResult> from) => new vulkan.PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA(from);
            
            public static bool operator ==(PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA left, PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA left, PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkDevice device, vulkan.VkExternalMemoryHandleTypeFlagBits handleType, uint zirconHandle, ref vulkan.VkMemoryZirconHandlePropertiesFUCHSIA pMemoryZirconHandleProperties)
            {
                fixed (vulkan.VkMemoryZirconHandlePropertiesFUCHSIA* __pMemoryZirconHandleProperties = &pMemoryZirconHandleProperties)
                return Value(device, handleType, zirconHandle, __pMemoryZirconHandleProperties);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkImportSemaphoreZirconHandleFUCHSIA : IEquatable<PFN_vkImportSemaphoreZirconHandleFUCHSIA>, IvkFunctionPointer
        {
            public PFN_vkImportSemaphoreZirconHandleFUCHSIA(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportSemaphoreZirconHandleInfoFUCHSIA*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportSemaphoreZirconHandleInfoFUCHSIA*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkImportSemaphoreZirconHandleFUCHSIA other && Equals(other);
            
            public bool Equals(PFN_vkImportSemaphoreZirconHandleFUCHSIA other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportSemaphoreZirconHandleInfoFUCHSIA*, vulkan.VkResult> (vulkan.PFN_vkImportSemaphoreZirconHandleFUCHSIA from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkImportSemaphoreZirconHandleFUCHSIA (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkImportSemaphoreZirconHandleInfoFUCHSIA*, vulkan.VkResult> from) => new vulkan.PFN_vkImportSemaphoreZirconHandleFUCHSIA(from);
            
            public static bool operator ==(PFN_vkImportSemaphoreZirconHandleFUCHSIA left, PFN_vkImportSemaphoreZirconHandleFUCHSIA right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkImportSemaphoreZirconHandleFUCHSIA left, PFN_vkImportSemaphoreZirconHandleFUCHSIA right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkDevice device, in vulkan.VkImportSemaphoreZirconHandleInfoFUCHSIA pImportSemaphoreZirconHandleInfo)
            {
                fixed (vulkan.VkImportSemaphoreZirconHandleInfoFUCHSIA* __pImportSemaphoreZirconHandleInfo = &pImportSemaphoreZirconHandleInfo)
                return Value(device, __pImportSemaphoreZirconHandleInfo);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkGetSemaphoreZirconHandleFUCHSIA : IEquatable<PFN_vkGetSemaphoreZirconHandleFUCHSIA>, IvkFunctionPointer
        {
            public PFN_vkGetSemaphoreZirconHandleFUCHSIA(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreGetZirconHandleInfoFUCHSIA*, uint*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreGetZirconHandleInfoFUCHSIA*, uint*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetSemaphoreZirconHandleFUCHSIA other && Equals(other);
            
            public bool Equals(PFN_vkGetSemaphoreZirconHandleFUCHSIA other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreGetZirconHandleInfoFUCHSIA*, uint*, vulkan.VkResult> (vulkan.PFN_vkGetSemaphoreZirconHandleFUCHSIA from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetSemaphoreZirconHandleFUCHSIA (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkSemaphoreGetZirconHandleInfoFUCHSIA*, uint*, vulkan.VkResult> from) => new vulkan.PFN_vkGetSemaphoreZirconHandleFUCHSIA(from);
            
            public static bool operator ==(PFN_vkGetSemaphoreZirconHandleFUCHSIA left, PFN_vkGetSemaphoreZirconHandleFUCHSIA right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetSemaphoreZirconHandleFUCHSIA left, PFN_vkGetSemaphoreZirconHandleFUCHSIA right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkDevice device, in vulkan.VkSemaphoreGetZirconHandleInfoFUCHSIA pGetZirconHandleInfo, ref uint pZirconHandle)
            {
                fixed (vulkan.VkSemaphoreGetZirconHandleInfoFUCHSIA* __pGetZirconHandleInfo = &pGetZirconHandleInfo)
                fixed (uint* __pZirconHandle = &pZirconHandle)
                return Value(device, __pGetZirconHandleInfo, __pZirconHandle);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkCreateBufferCollectionFUCHSIA : IEquatable<PFN_vkCreateBufferCollectionFUCHSIA>, IvkFunctionPointer
        {
            public PFN_vkCreateBufferCollectionFUCHSIA(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionCreateInfoFUCHSIA*, vulkan.VkAllocationCallbacks*, vulkan.VkBufferCollectionFUCHSIA*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionCreateInfoFUCHSIA*, vulkan.VkAllocationCallbacks*, vulkan.VkBufferCollectionFUCHSIA*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateBufferCollectionFUCHSIA other && Equals(other);
            
            public bool Equals(PFN_vkCreateBufferCollectionFUCHSIA other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionCreateInfoFUCHSIA*, vulkan.VkAllocationCallbacks*, vulkan.VkBufferCollectionFUCHSIA*, vulkan.VkResult> (vulkan.PFN_vkCreateBufferCollectionFUCHSIA from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateBufferCollectionFUCHSIA (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionCreateInfoFUCHSIA*, vulkan.VkAllocationCallbacks*, vulkan.VkBufferCollectionFUCHSIA*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateBufferCollectionFUCHSIA(from);
            
            public static bool operator ==(PFN_vkCreateBufferCollectionFUCHSIA left, PFN_vkCreateBufferCollectionFUCHSIA right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateBufferCollectionFUCHSIA left, PFN_vkCreateBufferCollectionFUCHSIA right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkDevice device, in vulkan.VkBufferCollectionCreateInfoFUCHSIA pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkBufferCollectionFUCHSIA pCollection)
            {
                fixed (vulkan.VkBufferCollectionCreateInfoFUCHSIA* __pCreateInfo = &pCreateInfo)
                fixed (vulkan.VkAllocationCallbacks* __pAllocator = &pAllocator)
                fixed (vulkan.VkBufferCollectionFUCHSIA* __pCollection = &pCollection)
                return Value(device, __pCreateInfo, __pAllocator, __pCollection);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkSetBufferCollectionImageConstraintsFUCHSIA : IEquatable<PFN_vkSetBufferCollectionImageConstraintsFUCHSIA>, IvkFunctionPointer
        {
            public PFN_vkSetBufferCollectionImageConstraintsFUCHSIA(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionFUCHSIA, vulkan.VkImageConstraintsInfoFUCHSIA*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionFUCHSIA, vulkan.VkImageConstraintsInfoFUCHSIA*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkSetBufferCollectionImageConstraintsFUCHSIA other && Equals(other);
            
            public bool Equals(PFN_vkSetBufferCollectionImageConstraintsFUCHSIA other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionFUCHSIA, vulkan.VkImageConstraintsInfoFUCHSIA*, vulkan.VkResult> (vulkan.PFN_vkSetBufferCollectionImageConstraintsFUCHSIA from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkSetBufferCollectionImageConstraintsFUCHSIA (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionFUCHSIA, vulkan.VkImageConstraintsInfoFUCHSIA*, vulkan.VkResult> from) => new vulkan.PFN_vkSetBufferCollectionImageConstraintsFUCHSIA(from);
            
            public static bool operator ==(PFN_vkSetBufferCollectionImageConstraintsFUCHSIA left, PFN_vkSetBufferCollectionImageConstraintsFUCHSIA right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkSetBufferCollectionImageConstraintsFUCHSIA left, PFN_vkSetBufferCollectionImageConstraintsFUCHSIA right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkDevice device, vulkan.VkBufferCollectionFUCHSIA collection, in vulkan.VkImageConstraintsInfoFUCHSIA pImageConstraintsInfo)
            {
                fixed (vulkan.VkImageConstraintsInfoFUCHSIA* __pImageConstraintsInfo = &pImageConstraintsInfo)
                return Value(device, collection, __pImageConstraintsInfo);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA : IEquatable<PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA>, IvkFunctionPointer
        {
            public PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionFUCHSIA, vulkan.VkBufferConstraintsInfoFUCHSIA*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionFUCHSIA, vulkan.VkBufferConstraintsInfoFUCHSIA*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA other && Equals(other);
            
            public bool Equals(PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionFUCHSIA, vulkan.VkBufferConstraintsInfoFUCHSIA*, vulkan.VkResult> (vulkan.PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionFUCHSIA, vulkan.VkBufferConstraintsInfoFUCHSIA*, vulkan.VkResult> from) => new vulkan.PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA(from);
            
            public static bool operator ==(PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA left, PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA left, PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkDevice device, vulkan.VkBufferCollectionFUCHSIA collection, in vulkan.VkBufferConstraintsInfoFUCHSIA pBufferConstraintsInfo)
            {
                fixed (vulkan.VkBufferConstraintsInfoFUCHSIA* __pBufferConstraintsInfo = &pBufferConstraintsInfo)
                return Value(device, collection, __pBufferConstraintsInfo);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkDestroyBufferCollectionFUCHSIA : IEquatable<PFN_vkDestroyBufferCollectionFUCHSIA>, IvkFunctionPointer
        {
            public PFN_vkDestroyBufferCollectionFUCHSIA(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionFUCHSIA, vulkan.VkAllocationCallbacks*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionFUCHSIA, vulkan.VkAllocationCallbacks*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkDestroyBufferCollectionFUCHSIA other && Equals(other);
            
            public bool Equals(PFN_vkDestroyBufferCollectionFUCHSIA other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionFUCHSIA, vulkan.VkAllocationCallbacks*, void> (vulkan.PFN_vkDestroyBufferCollectionFUCHSIA from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkDestroyBufferCollectionFUCHSIA (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionFUCHSIA, vulkan.VkAllocationCallbacks*, void> from) => new vulkan.PFN_vkDestroyBufferCollectionFUCHSIA(from);
            
            public static bool operator ==(PFN_vkDestroyBufferCollectionFUCHSIA left, PFN_vkDestroyBufferCollectionFUCHSIA right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkDestroyBufferCollectionFUCHSIA left, PFN_vkDestroyBufferCollectionFUCHSIA right) => !left.Equals(right);
            
            public void Invoke(vulkan.VkDevice device, vulkan.VkBufferCollectionFUCHSIA collection, in vulkan.VkAllocationCallbacks pAllocator)
            {
                fixed (vulkan.VkAllocationCallbacks* __pAllocator = &pAllocator)
                Value(device, collection, __pAllocator);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkGetBufferCollectionPropertiesFUCHSIA : IEquatable<PFN_vkGetBufferCollectionPropertiesFUCHSIA>, IvkFunctionPointer
        {
            public PFN_vkGetBufferCollectionPropertiesFUCHSIA(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionFUCHSIA, vulkan.VkBufferCollectionPropertiesFUCHSIA*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionFUCHSIA, vulkan.VkBufferCollectionPropertiesFUCHSIA*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetBufferCollectionPropertiesFUCHSIA other && Equals(other);
            
            public bool Equals(PFN_vkGetBufferCollectionPropertiesFUCHSIA other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionFUCHSIA, vulkan.VkBufferCollectionPropertiesFUCHSIA*, vulkan.VkResult> (vulkan.PFN_vkGetBufferCollectionPropertiesFUCHSIA from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetBufferCollectionPropertiesFUCHSIA (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkBufferCollectionFUCHSIA, vulkan.VkBufferCollectionPropertiesFUCHSIA*, vulkan.VkResult> from) => new vulkan.PFN_vkGetBufferCollectionPropertiesFUCHSIA(from);
            
            public static bool operator ==(PFN_vkGetBufferCollectionPropertiesFUCHSIA left, PFN_vkGetBufferCollectionPropertiesFUCHSIA right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetBufferCollectionPropertiesFUCHSIA left, PFN_vkGetBufferCollectionPropertiesFUCHSIA right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkDevice device, vulkan.VkBufferCollectionFUCHSIA collection, ref vulkan.VkBufferCollectionPropertiesFUCHSIA pProperties)
            {
                fixed (vulkan.VkBufferCollectionPropertiesFUCHSIA* __pProperties = &pProperties)
                return Value(device, collection, __pProperties);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateImagePipeSurfaceFUCHSIA")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateImagePipeSurfaceFUCHSIA(vulkan.VkInstance instance, in vulkan.VkImagePipeSurfaceCreateInfoFUCHSIA pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSurfaceKHR pSurface);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkCreateImagePipeSurfaceFUCHSIA> vkCreateImagePipeSurfaceFUCHSIA_ => new("vkCreateImagePipeSurfaceFUCHSIA"u8);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetMemoryZirconHandleFUCHSIA")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetMemoryZirconHandleFUCHSIA(vulkan.VkDevice device, in vulkan.VkMemoryGetZirconHandleInfoFUCHSIA pGetZirconHandleInfo, ref uint pZirconHandle);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkGetMemoryZirconHandleFUCHSIA> vkGetMemoryZirconHandleFUCHSIA_ => new("vkGetMemoryZirconHandleFUCHSIA"u8);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetMemoryZirconHandlePropertiesFUCHSIA")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetMemoryZirconHandlePropertiesFUCHSIA(vulkan.VkDevice device, vulkan.VkExternalMemoryHandleTypeFlagBits handleType, uint zirconHandle, ref vulkan.VkMemoryZirconHandlePropertiesFUCHSIA pMemoryZirconHandleProperties);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA> vkGetMemoryZirconHandlePropertiesFUCHSIA_ => new("vkGetMemoryZirconHandlePropertiesFUCHSIA"u8);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkImportSemaphoreZirconHandleFUCHSIA")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkImportSemaphoreZirconHandleFUCHSIA(vulkan.VkDevice device, in vulkan.VkImportSemaphoreZirconHandleInfoFUCHSIA pImportSemaphoreZirconHandleInfo);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkImportSemaphoreZirconHandleFUCHSIA> vkImportSemaphoreZirconHandleFUCHSIA_ => new("vkImportSemaphoreZirconHandleFUCHSIA"u8);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetSemaphoreZirconHandleFUCHSIA")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetSemaphoreZirconHandleFUCHSIA(vulkan.VkDevice device, in vulkan.VkSemaphoreGetZirconHandleInfoFUCHSIA pGetZirconHandleInfo, ref uint pZirconHandle);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkGetSemaphoreZirconHandleFUCHSIA> vkGetSemaphoreZirconHandleFUCHSIA_ => new("vkGetSemaphoreZirconHandleFUCHSIA"u8);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateBufferCollectionFUCHSIA")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateBufferCollectionFUCHSIA(vulkan.VkDevice device, in vulkan.VkBufferCollectionCreateInfoFUCHSIA pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkBufferCollectionFUCHSIA pCollection);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkCreateBufferCollectionFUCHSIA> vkCreateBufferCollectionFUCHSIA_ => new("vkCreateBufferCollectionFUCHSIA"u8);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkSetBufferCollectionImageConstraintsFUCHSIA")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkSetBufferCollectionImageConstraintsFUCHSIA(vulkan.VkDevice device, vulkan.VkBufferCollectionFUCHSIA collection, in vulkan.VkImageConstraintsInfoFUCHSIA pImageConstraintsInfo);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkSetBufferCollectionImageConstraintsFUCHSIA> vkSetBufferCollectionImageConstraintsFUCHSIA_ => new("vkSetBufferCollectionImageConstraintsFUCHSIA"u8);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkSetBufferCollectionBufferConstraintsFUCHSIA")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkSetBufferCollectionBufferConstraintsFUCHSIA(vulkan.VkDevice device, vulkan.VkBufferCollectionFUCHSIA collection, in vulkan.VkBufferConstraintsInfoFUCHSIA pBufferConstraintsInfo);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA> vkSetBufferCollectionBufferConstraintsFUCHSIA_ => new("vkSetBufferCollectionBufferConstraintsFUCHSIA"u8);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkDestroyBufferCollectionFUCHSIA")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial void vkDestroyBufferCollectionFUCHSIA(vulkan.VkDevice device, vulkan.VkBufferCollectionFUCHSIA collection, in vulkan.VkAllocationCallbacks pAllocator);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkDestroyBufferCollectionFUCHSIA> vkDestroyBufferCollectionFUCHSIA_ => new("vkDestroyBufferCollectionFUCHSIA"u8);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetBufferCollectionPropertiesFUCHSIA")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetBufferCollectionPropertiesFUCHSIA(vulkan.VkDevice device, vulkan.VkBufferCollectionFUCHSIA collection, ref vulkan.VkBufferCollectionPropertiesFUCHSIA pProperties);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkGetBufferCollectionPropertiesFUCHSIA> vkGetBufferCollectionPropertiesFUCHSIA_ => new("vkGetBufferCollectionPropertiesFUCHSIA"u8);
    }
}
