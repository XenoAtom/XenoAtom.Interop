//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        /// <summary>
        /// Structure specifying parameters of a newly created Android surface object
        /// </summary>
        /// <remarks>
        /// <para>Extension: VK_KHR_android_surface</para>
        /// </remarks>
        public partial struct VkAndroidSurfaceCreateInfoKHR
        {
            /// <summary>
            /// A <see cref="T:VkStructureType"/> value identifying this structure.
            /// </summary>
            public vulkan.VkStructureType sType;
            
            /// <summary>
            /// `NULL` or a pointer to a structure extending this structure.
            /// </summary>
            public void* pNext;
            
            /// <summary>
            /// Reserved for future use.
            /// </summary>
            public vulkan.VkAndroidSurfaceCreateFlagsKHR flags;
            
            /// <summary>
            /// A pointer to the basetype:ANativeWindow to associate the surface with.
            /// </summary>
            public vulkan.ANativeWindow window;
        }
        
        /// <remarks>
        /// <para>Extension: VK_KHR_android_surface</para>
        /// </remarks>
        public readonly partial struct VkAndroidSurfaceCreateFlagsKHR : IEquatable<vulkan.VkAndroidSurfaceCreateFlagsKHR>
        {
            public VkAndroidSurfaceCreateFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkAndroidSurfaceCreateFlagsKHR other && Equals(other);
            
            public bool Equals(VkAndroidSurfaceCreateFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkAndroidSurfaceCreateFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkAndroidSurfaceCreateFlagsKHR (vulkan.VkFlags from) => new vulkan.VkAndroidSurfaceCreateFlagsKHR(from);
            
            public static bool operator ==(VkAndroidSurfaceCreateFlagsKHR left, VkAndroidSurfaceCreateFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkAndroidSurfaceCreateFlagsKHR left, VkAndroidSurfaceCreateFlagsKHR right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Struct containing Android hardware buffer usage flags
        /// </summary>
        /// <remarks>
        /// <para>Extension: VK_ANDROID_external_memory_android_hardware_buffer</para>
        /// </remarks>
        public partial struct VkAndroidHardwareBufferUsageANDROID
        {
            /// <summary>
            /// A <see cref="T:VkStructureType"/> value identifying this structure.
            /// </summary>
            public vulkan.VkStructureType sType;
            
            /// <summary>
            /// `NULL` or a pointer to a structure extending this structure.
            /// </summary>
            public void* pNext;
            
            /// <summary>
            /// Returns the Android hardware buffer usage flags.
            /// </summary>
            public ulong androidHardwareBufferUsage;
        }
        
        /// <summary>
        /// Properties of External Memory Android Hardware Buffers
        /// </summary>
        /// <remarks>
        /// <para>Extension: VK_ANDROID_external_memory_android_hardware_buffer</para>
        /// </remarks>
        public partial struct VkAndroidHardwareBufferPropertiesANDROID
        {
            /// <summary>
            /// A <see cref="T:VkStructureType"/> value identifying this structure.
            /// </summary>
            public vulkan.VkStructureType sType;
            
            /// <summary>
            /// `NULL` or a pointer to a structure extending this structure.
            /// </summary>
            public void* pNext;
            
            /// <summary>
            /// The size of the external memory
            /// </summary>
            public vulkan.VkDeviceSize allocationSize;
            
            /// <summary>
            /// A bitmask containing one bit set for every memory type which the specified Android hardware buffer can: be imported as.
            /// </summary>
            public uint memoryTypeBits;
        }
        
        /// <summary>
        /// Structure describing the image format properties of an Android hardware buffer
        /// </summary>
        /// <remarks>
        /// <para>Extension: VK_ANDROID_external_memory_android_hardware_buffer</para>
        /// </remarks>
        public partial struct VkAndroidHardwareBufferFormatPropertiesANDROID
        {
            /// <summary>
            /// A <see cref="T:VkStructureType"/> value identifying this structure.
            /// </summary>
            public vulkan.VkStructureType sType;
            
            /// <summary>
            /// `NULL` or a pointer to a structure extending this structure.
            /// </summary>
            public void* pNext;
            
            /// <summary>
            /// The Vulkan format corresponding to the Android hardware buffer's format, or <see cref="T:VK_FORMAT_UNDEFINED"/> if there is not an equivalent Vulkan format.
            /// </summary>
            public vulkan.VkFormat format;
            
            /// <summary>
            /// An implementation-defined external format identifier for use with <see cref="T:VkExternalFormatANDROID"/>. It must: not be zero.
            /// </summary>
            public ulong externalFormat;
            
            /// <summary>
            /// Describes the capabilities of this external format when used with an image bound to memory imported from <see cref="M:buffer"/>.
            /// </summary>
            public vulkan.VkFormatFeatureFlags formatFeatures;
            
            /// <summary>
            /// The component swizzle that should: be used in <see cref="T:VkSamplerYcbcrConversionCreateInfo"/>.
            /// </summary>
            public vulkan.VkComponentMapping samplerYcbcrConversionComponents;
            
            /// <summary>
            /// A suggested color model to use in the <see cref="T:VkSamplerYcbcrConversionCreateInfo"/>.
            /// </summary>
            public vulkan.VkSamplerYcbcrModelConversion suggestedYcbcrModel;
            
            /// <summary>
            /// A suggested numerical value range to use in <see cref="T:VkSamplerYcbcrConversionCreateInfo"/>.
            /// </summary>
            public vulkan.VkSamplerYcbcrRange suggestedYcbcrRange;
            
            /// <summary>
            /// A suggested X chroma offset to use in <see cref="T:VkSamplerYcbcrConversionCreateInfo"/>.
            /// </summary>
            public vulkan.VkChromaLocation suggestedXChromaOffset;
            
            /// <summary>
            /// A suggested Y chroma offset to use in <see cref="T:VkSamplerYcbcrConversionCreateInfo"/>.
            /// </summary>
            public vulkan.VkChromaLocation suggestedYChromaOffset;
        }
        
        /// <summary>
        /// Import memory from an Android hardware buffer
        /// </summary>
        /// <remarks>
        /// <para>Extension: VK_ANDROID_external_memory_android_hardware_buffer</para>
        /// </remarks>
        public partial struct VkImportAndroidHardwareBufferInfoANDROID
        {
            /// <summary>
            /// A <see cref="T:VkStructureType"/> value identifying this structure.
            /// </summary>
            public vulkan.VkStructureType sType;
            
            /// <summary>
            /// `NULL` or a pointer to a structure extending this structure.
            /// </summary>
            public void* pNext;
            
            /// <summary>
            /// The Android hardware buffer to import.
            /// </summary>
            public vulkan.AHardwareBuffer buffer;
        }
        
        /// <summary>
        /// Structure describing an Android hardware buffer memory export operation
        /// </summary>
        /// <remarks>
        /// <para>Extension: VK_ANDROID_external_memory_android_hardware_buffer</para>
        /// </remarks>
        public partial struct VkMemoryGetAndroidHardwareBufferInfoANDROID
        {
            /// <summary>
            /// A <see cref="T:VkStructureType"/> value identifying this structure.
            /// </summary>
            public vulkan.VkStructureType sType;
            
            /// <summary>
            /// `NULL` or a pointer to a structure extending this structure.
            /// </summary>
            public void* pNext;
            
            /// <summary>
            /// The memory object from which the Android hardware buffer will be exported.
            /// </summary>
            public vulkan.VkDeviceMemory memory;
        }
        
        /// <summary>
        /// Structure containing an Android hardware buffer external format
        /// </summary>
        /// <remarks>
        /// <para>Extension: VK_ANDROID_external_memory_android_hardware_buffer</para>
        /// </remarks>
        public partial struct VkExternalFormatANDROID
        {
            /// <summary>
            /// A <see cref="T:VkStructureType"/> value identifying this structure.
            /// </summary>
            public vulkan.VkStructureType sType;
            
            /// <summary>
            /// `NULL` or a pointer to a structure extending this structure.
            /// </summary>
            public void* pNext;
            
            /// <summary>
            /// An implementation-defined identifier for the external format
            /// </summary>
            public ulong externalFormat;
        }
        
        /// <summary>
        /// Structure describing the image format properties of an Android hardware buffer
        /// </summary>
        /// <remarks>
        /// <para>Extension: VK_ANDROID_external_memory_android_hardware_buffer</para>
        /// </remarks>
        public partial struct VkAndroidHardwareBufferFormatProperties2ANDROID
        {
            /// <summary>
            /// A <see cref="T:VkStructureType"/> value identifying this structure.
            /// </summary>
            public vulkan.VkStructureType sType;
            
            /// <summary>
            /// `NULL` or a pointer to a structure extending this structure.
            /// </summary>
            public void* pNext;
            
            /// <summary>
            /// The Vulkan format corresponding to the Android hardware buffer's format, or <see cref="T:VK_FORMAT_UNDEFINED"/> if there is not an equivalent Vulkan format.
            /// </summary>
            public vulkan.VkFormat format;
            
            /// <summary>
            /// An implementation-defined external format identifier for use with <see cref="T:VkExternalFormatANDROID"/>. It must: not be zero.
            /// </summary>
            public ulong externalFormat;
            
            /// <summary>
            /// Describes the capabilities of this external format when used with an image bound to memory imported from <see cref="M:buffer"/>.
            /// </summary>
            public vulkan.VkFormatFeatureFlags2 formatFeatures;
            
            /// <summary>
            /// The component swizzle that should: be used in <see cref="T:VkSamplerYcbcrConversionCreateInfo"/>.
            /// </summary>
            public vulkan.VkComponentMapping samplerYcbcrConversionComponents;
            
            /// <summary>
            /// A suggested color model to use in the <see cref="T:VkSamplerYcbcrConversionCreateInfo"/>.
            /// </summary>
            public vulkan.VkSamplerYcbcrModelConversion suggestedYcbcrModel;
            
            /// <summary>
            /// A suggested numerical value range to use in <see cref="T:VkSamplerYcbcrConversionCreateInfo"/>.
            /// </summary>
            public vulkan.VkSamplerYcbcrRange suggestedYcbcrRange;
            
            /// <summary>
            /// A suggested X chroma offset to use in <see cref="T:VkSamplerYcbcrConversionCreateInfo"/>.
            /// </summary>
            public vulkan.VkChromaLocation suggestedXChromaOffset;
            
            /// <summary>
            /// A suggested Y chroma offset to use in <see cref="T:VkSamplerYcbcrConversionCreateInfo"/>.
            /// </summary>
            public vulkan.VkChromaLocation suggestedYChromaOffset;
        }
        
        public readonly partial struct PFN_vkCreateAndroidSurfaceKHR : IEquatable<vulkan.PFN_vkCreateAndroidSurfaceKHR>, IvkFunctionPointer
        {
            public PFN_vkCreateAndroidSurfaceKHR(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkAndroidSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkAndroidSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateAndroidSurfaceKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateAndroidSurfaceKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkAndroidSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateAndroidSurfaceKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateAndroidSurfaceKHR (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkAndroidSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateAndroidSurfaceKHR(from);
            
            public static bool operator ==(PFN_vkCreateAndroidSurfaceKHR left, PFN_vkCreateAndroidSurfaceKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateAndroidSurfaceKHR left, PFN_vkCreateAndroidSurfaceKHR right) => !left.Equals(right);
            
            /// <summary>
            /// Create a <see cref="T:VkSurfaceKHR"/> object for an Android native window
            /// </summary>
            /// <param name="instance">The instance to associate the surface with.</param>
            /// <param name="pCreateInfo">A pointer to a <see cref="T:VkAndroidSurfaceCreateInfoKHR"/> structure containing parameters affecting the creation of the surface object.</param>
            /// <param name="pAllocator">The allocator used for host memory allocated for the surface object when there is no more specific allocator available (see Memory Allocation). This parameter is optional.</param>
            /// <param name="pSurface">A pointer to a <see cref="T:VkSurfaceKHR"/> handle in which the created surface object is returned.</param>
            /// <remarks>
            /// <list type="bullet">
            /// <listheader><description>On success, this command returns: </description></listheader><item><description><c>VK_SUCCESS</c></description></item>
            /// </list>
            /// <list type="bullet">
            /// <listheader><description>On failure, this command returns: </description></listheader><item><description><c>VK_ERROR_OUT_OF_HOST_MEMORY</c></description></item><item><description><c>VK_ERROR_OUT_OF_DEVICE_MEMORY</c></description></item><item><description><c>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</c></description></item>
            /// </list>
            /// <para>Extension: VK_KHR_android_surface</para>
            /// </remarks>
            public vulkan.VkResult Invoke(vulkan.VkInstance instance, vulkan.VkAndroidSurfaceCreateInfoKHR* pCreateInfo, vulkan.VkAllocationCallbacks* pAllocator, vulkan.VkSurfaceKHR* pSurface)
            {
                return Value(instance, pCreateInfo, pAllocator, pSurface);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
            
            /// <summary>
            /// Create a <see cref="T:VkSurfaceKHR"/> object for an Android native window
            /// </summary>
            /// <param name="instance">The instance to associate the surface with.</param>
            /// <param name="pCreateInfo">A pointer to a <see cref="T:VkAndroidSurfaceCreateInfoKHR"/> structure containing parameters affecting the creation of the surface object.</param>
            /// <param name="pAllocator">The allocator used for host memory allocated for the surface object when there is no more specific allocator available (see Memory Allocation). This parameter is optional.</param>
            /// <param name="pSurface">A pointer to a <see cref="T:VkSurfaceKHR"/> handle in which the created surface object is returned.</param>
            /// <remarks>
            /// <list type="bullet">
            /// <listheader><description>On success, this command returns: </description></listheader><item><description><c>VK_SUCCESS</c></description></item>
            /// </list>
            /// <list type="bullet">
            /// <listheader><description>On failure, this command returns: </description></listheader><item><description><c>VK_ERROR_OUT_OF_HOST_MEMORY</c></description></item><item><description><c>VK_ERROR_OUT_OF_DEVICE_MEMORY</c></description></item><item><description><c>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</c></description></item>
            /// </list>
            /// <para>Extension: VK_KHR_android_surface</para>
            /// </remarks>
            public vulkan.VkResult Invoke(vulkan.VkInstance instance, in vulkan.VkAndroidSurfaceCreateInfoKHR pCreateInfo, vulkan.VkAllocationCallbacks* pAllocator, out vulkan.VkSurfaceKHR pSurface)
            {
                fixed (vulkan.VkAndroidSurfaceCreateInfoKHR* __pCreateInfo_local = &pCreateInfo)
                fixed (vulkan.VkSurfaceKHR* __pSurface_local = &pSurface)
                return this.Invoke(instance, __pCreateInfo_local, pAllocator, __pSurface_local);
            }
        }
        
        public readonly partial struct PFN_vkGetAndroidHardwareBufferPropertiesANDROID : IEquatable<vulkan.PFN_vkGetAndroidHardwareBufferPropertiesANDROID>, IvkFunctionPointer
        {
            public PFN_vkGetAndroidHardwareBufferPropertiesANDROID(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.AHardwareBuffer, vulkan.VkAndroidHardwareBufferPropertiesANDROID*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.AHardwareBuffer, vulkan.VkAndroidHardwareBufferPropertiesANDROID*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetAndroidHardwareBufferPropertiesANDROID other && Equals(other);
            
            public bool Equals(PFN_vkGetAndroidHardwareBufferPropertiesANDROID other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.AHardwareBuffer, vulkan.VkAndroidHardwareBufferPropertiesANDROID*, vulkan.VkResult> (vulkan.PFN_vkGetAndroidHardwareBufferPropertiesANDROID from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetAndroidHardwareBufferPropertiesANDROID (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.AHardwareBuffer, vulkan.VkAndroidHardwareBufferPropertiesANDROID*, vulkan.VkResult> from) => new vulkan.PFN_vkGetAndroidHardwareBufferPropertiesANDROID(from);
            
            public static bool operator ==(PFN_vkGetAndroidHardwareBufferPropertiesANDROID left, PFN_vkGetAndroidHardwareBufferPropertiesANDROID right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetAndroidHardwareBufferPropertiesANDROID left, PFN_vkGetAndroidHardwareBufferPropertiesANDROID right) => !left.Equals(right);
            
            /// <summary>
            /// Get Properties of External Memory Android Hardware Buffers
            /// </summary>
            /// <param name="device">The logical device that will be importing <paramref name="buffer"/>.</param>
            /// <param name="buffer">The Android hardware buffer which will be imported.</param>
            /// <param name="pProperties">A pointer to a <see cref="T:VkAndroidHardwareBufferPropertiesANDROID"/> structure in which the properties of <paramref name="buffer"/> are returned.</param>
            /// <remarks>
            /// <list type="bullet">
            /// <listheader><description>On success, this command returns: </description></listheader><item><description><c>VK_SUCCESS</c></description></item>
            /// </list>
            /// <list type="bullet">
            /// <listheader><description>On failure, this command returns: </description></listheader><item><description><c>VK_ERROR_OUT_OF_HOST_MEMORY</c></description></item><item><description><c>VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR</c></description></item>
            /// </list>
            /// <para>Extension: VK_ANDROID_external_memory_android_hardware_buffer</para>
            /// </remarks>
            public vulkan.VkResult Invoke(vulkan.VkDevice device, vulkan.AHardwareBuffer buffer, vulkan.VkAndroidHardwareBufferPropertiesANDROID* pProperties)
            {
                return Value(device, buffer, pProperties);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkGetMemoryAndroidHardwareBufferANDROID : IEquatable<vulkan.PFN_vkGetMemoryAndroidHardwareBufferANDROID>, IvkFunctionPointer
        {
            public PFN_vkGetMemoryAndroidHardwareBufferANDROID(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetAndroidHardwareBufferInfoANDROID*, vulkan.AHardwareBuffer*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetAndroidHardwareBufferInfoANDROID*, vulkan.AHardwareBuffer*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetMemoryAndroidHardwareBufferANDROID other && Equals(other);
            
            public bool Equals(PFN_vkGetMemoryAndroidHardwareBufferANDROID other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetAndroidHardwareBufferInfoANDROID*, vulkan.AHardwareBuffer*, vulkan.VkResult> (vulkan.PFN_vkGetMemoryAndroidHardwareBufferANDROID from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetMemoryAndroidHardwareBufferANDROID (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetAndroidHardwareBufferInfoANDROID*, vulkan.AHardwareBuffer*, vulkan.VkResult> from) => new vulkan.PFN_vkGetMemoryAndroidHardwareBufferANDROID(from);
            
            public static bool operator ==(PFN_vkGetMemoryAndroidHardwareBufferANDROID left, PFN_vkGetMemoryAndroidHardwareBufferANDROID right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetMemoryAndroidHardwareBufferANDROID left, PFN_vkGetMemoryAndroidHardwareBufferANDROID right) => !left.Equals(right);
            
            /// <summary>
            /// Get an Android hardware buffer for a memory object
            /// </summary>
            /// <param name="device">The logical device that created the device memory being exported.</param>
            /// <param name="pInfo">A pointer to a <see cref="T:VkMemoryGetAndroidHardwareBufferInfoANDROID"/> structure containing parameters of the export operation.</param>
            /// <param name="pBuffer">Will return an Android hardware buffer referencing the payload of the device memory object.</param>
            /// <remarks>
            /// <list type="bullet">
            /// <listheader><description>On success, this command returns: </description></listheader><item><description><c>VK_SUCCESS</c></description></item>
            /// </list>
            /// <list type="bullet">
            /// <listheader><description>On failure, this command returns: </description></listheader><item><description><c>VK_ERROR_TOO_MANY_OBJECTS</c></description></item><item><description><c>VK_ERROR_OUT_OF_HOST_MEMORY</c></description></item>
            /// </list>
            /// <para>Extension: VK_ANDROID_external_memory_android_hardware_buffer</para>
            /// </remarks>
            public vulkan.VkResult Invoke(vulkan.VkDevice device, vulkan.VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo, vulkan.AHardwareBuffer* pBuffer)
            {
                return Value(device, pInfo, pBuffer);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public const int VK_KHR_android_surface = 1;
        
        public const int VK_KHR_ANDROID_SURFACE_SPEC_VERSION = 6;
        
        public static ReadOnlySpanUtf8 VK_KHR_ANDROID_SURFACE_EXTENSION_NAME => "VK_KHR_android_surface"u8;
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkCreateAndroidSurfaceKHR> vkCreateAndroidSurfaceKHR_ => new("vkCreateAndroidSurfaceKHR"u8);
        
        /// <summary>
        /// Get Properties of External Memory Android Hardware Buffers
        /// </summary>
        /// <param name="device">The logical device that will be importing <paramref name="buffer"/>.</param>
        /// <param name="buffer">The Android hardware buffer which will be imported.</param>
        /// <param name="pProperties">A pointer to a <see cref="T:VkAndroidHardwareBufferPropertiesANDROID"/> structure in which the properties of <paramref name="buffer"/> are returned.</param>
        /// <remarks>
        /// <list type="bullet">
        /// <listheader><description>On success, this command returns: </description></listheader><item><description><c>VK_SUCCESS</c></description></item>
        /// </list>
        /// <list type="bullet">
        /// <listheader><description>On failure, this command returns: </description></listheader><item><description><c>VK_ERROR_OUT_OF_HOST_MEMORY</c></description></item><item><description><c>VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR</c></description></item>
        /// </list>
        /// <para>Extension: VK_ANDROID_external_memory_android_hardware_buffer</para>
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetAndroidHardwareBufferPropertiesANDROID")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetAndroidHardwareBufferPropertiesANDROID(vulkan.VkDevice device, vulkan.AHardwareBuffer buffer, vulkan.VkAndroidHardwareBufferPropertiesANDROID* pProperties);
        
        /// <summary>
        /// Get Properties of External Memory Android Hardware Buffers
        /// </summary>
        /// <param name="device">The logical device that will be importing <paramref name="buffer"/>.</param>
        /// <param name="buffer">The Android hardware buffer which will be imported.</param>
        /// <param name="pProperties">A pointer to a <see cref="T:VkAndroidHardwareBufferPropertiesANDROID"/> structure in which the properties of <paramref name="buffer"/> are returned.</param>
        /// <remarks>
        /// <list type="bullet">
        /// <listheader><description>On success, this command returns: </description></listheader><item><description><c>VK_SUCCESS</c></description></item>
        /// </list>
        /// <list type="bullet">
        /// <listheader><description>On failure, this command returns: </description></listheader><item><description><c>VK_ERROR_OUT_OF_HOST_MEMORY</c></description></item><item><description><c>VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR</c></description></item>
        /// </list>
        /// <para>Extension: VK_ANDROID_external_memory_android_hardware_buffer</para>
        /// </remarks>
        public static vulkan.VkResult vkGetAndroidHardwareBufferPropertiesANDROID(vulkan.VkDevice device, vulkan.AHardwareBuffer buffer, out vulkan.VkAndroidHardwareBufferPropertiesANDROID pProperties)
        {
            fixed (vulkan.VkAndroidHardwareBufferPropertiesANDROID* __pProperties_local = &pProperties)
            return vkGetAndroidHardwareBufferPropertiesANDROID(device, buffer, __pProperties_local);
        }
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkGetAndroidHardwareBufferPropertiesANDROID> vkGetAndroidHardwareBufferPropertiesANDROID_ => new("vkGetAndroidHardwareBufferPropertiesANDROID"u8);
        
        /// <summary>
        /// Get an Android hardware buffer for a memory object
        /// </summary>
        /// <param name="device">The logical device that created the device memory being exported.</param>
        /// <param name="pInfo">A pointer to a <see cref="T:VkMemoryGetAndroidHardwareBufferInfoANDROID"/> structure containing parameters of the export operation.</param>
        /// <param name="pBuffer">Will return an Android hardware buffer referencing the payload of the device memory object.</param>
        /// <remarks>
        /// <list type="bullet">
        /// <listheader><description>On success, this command returns: </description></listheader><item><description><c>VK_SUCCESS</c></description></item>
        /// </list>
        /// <list type="bullet">
        /// <listheader><description>On failure, this command returns: </description></listheader><item><description><c>VK_ERROR_TOO_MANY_OBJECTS</c></description></item><item><description><c>VK_ERROR_OUT_OF_HOST_MEMORY</c></description></item>
        /// </list>
        /// <para>Extension: VK_ANDROID_external_memory_android_hardware_buffer</para>
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetMemoryAndroidHardwareBufferANDROID")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetMemoryAndroidHardwareBufferANDROID(vulkan.VkDevice device, vulkan.VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo, vulkan.AHardwareBuffer* pBuffer);
        
        /// <summary>
        /// Get an Android hardware buffer for a memory object
        /// </summary>
        /// <param name="device">The logical device that created the device memory being exported.</param>
        /// <param name="pInfo">A pointer to a <see cref="T:VkMemoryGetAndroidHardwareBufferInfoANDROID"/> structure containing parameters of the export operation.</param>
        /// <param name="pBuffer">Will return an Android hardware buffer referencing the payload of the device memory object.</param>
        /// <remarks>
        /// <list type="bullet">
        /// <listheader><description>On success, this command returns: </description></listheader><item><description><c>VK_SUCCESS</c></description></item>
        /// </list>
        /// <list type="bullet">
        /// <listheader><description>On failure, this command returns: </description></listheader><item><description><c>VK_ERROR_TOO_MANY_OBJECTS</c></description></item><item><description><c>VK_ERROR_OUT_OF_HOST_MEMORY</c></description></item>
        /// </list>
        /// <para>Extension: VK_ANDROID_external_memory_android_hardware_buffer</para>
        /// </remarks>
        public static vulkan.VkResult vkGetMemoryAndroidHardwareBufferANDROID(vulkan.VkDevice device, in vulkan.VkMemoryGetAndroidHardwareBufferInfoANDROID pInfo, out vulkan.AHardwareBuffer pBuffer)
        {
            fixed (vulkan.VkMemoryGetAndroidHardwareBufferInfoANDROID* __pInfo_local = &pInfo)
            fixed (vulkan.AHardwareBuffer* __pBuffer_local = &pBuffer)
            return vkGetMemoryAndroidHardwareBufferANDROID(device, __pInfo_local, __pBuffer_local);
        }
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkGetMemoryAndroidHardwareBufferANDROID> vkGetMemoryAndroidHardwareBufferANDROID_ => new("vkGetMemoryAndroidHardwareBufferANDROID"u8);
    }
}
