//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        public partial struct VkAndroidSurfaceCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkAndroidSurfaceCreateFlagsKHR flags;
            
            public vulkan.ANativeWindow window;
        }
        
        public readonly partial struct VkAndroidSurfaceCreateFlagsKHR : IEquatable<VkAndroidSurfaceCreateFlagsKHR>
        {
            public VkAndroidSurfaceCreateFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkAndroidSurfaceCreateFlagsKHR other && Equals(other);
            
            public bool Equals(VkAndroidSurfaceCreateFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkAndroidSurfaceCreateFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkAndroidSurfaceCreateFlagsKHR (vulkan.VkFlags from) => new vulkan.VkAndroidSurfaceCreateFlagsKHR(from);
            
            public static bool operator ==(VkAndroidSurfaceCreateFlagsKHR left, VkAndroidSurfaceCreateFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkAndroidSurfaceCreateFlagsKHR left, VkAndroidSurfaceCreateFlagsKHR right) => !left.Equals(right);
        }
        
        public partial struct VkAndroidHardwareBufferUsageANDROID
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public ulong androidHardwareBufferUsage;
        }
        
        public partial struct VkAndroidHardwareBufferPropertiesANDROID
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceSize allocationSize;
            
            public uint memoryTypeBits;
        }
        
        public partial struct VkAndroidHardwareBufferFormatPropertiesANDROID
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFormat format;
            
            public ulong externalFormat;
            
            public vulkan.VkFormatFeatureFlags formatFeatures;
            
            public vulkan.VkComponentMapping samplerYcbcrConversionComponents;
            
            public vulkan.VkSamplerYcbcrModelConversion suggestedYcbcrModel;
            
            public vulkan.VkSamplerYcbcrRange suggestedYcbcrRange;
            
            public vulkan.VkChromaLocation suggestedXChromaOffset;
            
            public vulkan.VkChromaLocation suggestedYChromaOffset;
        }
        
        public partial struct VkImportAndroidHardwareBufferInfoANDROID
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.AHardwareBuffer buffer;
        }
        
        public partial struct VkMemoryGetAndroidHardwareBufferInfoANDROID
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkDeviceMemory memory;
        }
        
        public partial struct VkExternalFormatANDROID
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public ulong externalFormat;
        }
        
        public partial struct VkAndroidHardwareBufferFormatProperties2ANDROID
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkFormat format;
            
            public ulong externalFormat;
            
            public vulkan.VkFormatFeatureFlags2 formatFeatures;
            
            public vulkan.VkComponentMapping samplerYcbcrConversionComponents;
            
            public vulkan.VkSamplerYcbcrModelConversion suggestedYcbcrModel;
            
            public vulkan.VkSamplerYcbcrRange suggestedYcbcrRange;
            
            public vulkan.VkChromaLocation suggestedXChromaOffset;
            
            public vulkan.VkChromaLocation suggestedYChromaOffset;
        }
        
        public readonly partial struct PFN_vkCreateAndroidSurfaceKHR : IEquatable<PFN_vkCreateAndroidSurfaceKHR>, IvkFunctionPointer
        {
            public PFN_vkCreateAndroidSurfaceKHR(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkAndroidSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkAndroidSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateAndroidSurfaceKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateAndroidSurfaceKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkAndroidSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateAndroidSurfaceKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateAndroidSurfaceKHR (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkAndroidSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateAndroidSurfaceKHR(from);
            
            public static bool operator ==(PFN_vkCreateAndroidSurfaceKHR left, PFN_vkCreateAndroidSurfaceKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateAndroidSurfaceKHR left, PFN_vkCreateAndroidSurfaceKHR right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkInstance instance, in vulkan.VkAndroidSurfaceCreateInfoKHR pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSurfaceKHR pSurface)
            {
                fixed (vulkan.VkAndroidSurfaceCreateInfoKHR* __pCreateInfo = &pCreateInfo)
                fixed (vulkan.VkAllocationCallbacks* __pAllocator = &pAllocator)
                fixed (vulkan.VkSurfaceKHR* __pSurface = &pSurface)
                return Value(instance, __pCreateInfo, __pAllocator, __pSurface);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkGetAndroidHardwareBufferPropertiesANDROID : IEquatable<PFN_vkGetAndroidHardwareBufferPropertiesANDROID>, IvkFunctionPointer
        {
            public PFN_vkGetAndroidHardwareBufferPropertiesANDROID(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.AHardwareBuffer, vulkan.VkAndroidHardwareBufferPropertiesANDROID*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.AHardwareBuffer, vulkan.VkAndroidHardwareBufferPropertiesANDROID*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetAndroidHardwareBufferPropertiesANDROID other && Equals(other);
            
            public bool Equals(PFN_vkGetAndroidHardwareBufferPropertiesANDROID other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.AHardwareBuffer, vulkan.VkAndroidHardwareBufferPropertiesANDROID*, vulkan.VkResult> (vulkan.PFN_vkGetAndroidHardwareBufferPropertiesANDROID from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetAndroidHardwareBufferPropertiesANDROID (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.AHardwareBuffer, vulkan.VkAndroidHardwareBufferPropertiesANDROID*, vulkan.VkResult> from) => new vulkan.PFN_vkGetAndroidHardwareBufferPropertiesANDROID(from);
            
            public static bool operator ==(PFN_vkGetAndroidHardwareBufferPropertiesANDROID left, PFN_vkGetAndroidHardwareBufferPropertiesANDROID right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetAndroidHardwareBufferPropertiesANDROID left, PFN_vkGetAndroidHardwareBufferPropertiesANDROID right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkDevice device, vulkan.AHardwareBuffer buffer, ref vulkan.VkAndroidHardwareBufferPropertiesANDROID pProperties)
            {
                fixed (vulkan.VkAndroidHardwareBufferPropertiesANDROID* __pProperties = &pProperties)
                return Value(device, buffer, __pProperties);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public readonly partial struct PFN_vkGetMemoryAndroidHardwareBufferANDROID : IEquatable<PFN_vkGetMemoryAndroidHardwareBufferANDROID>, IvkFunctionPointer
        {
            public PFN_vkGetMemoryAndroidHardwareBufferANDROID(delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetAndroidHardwareBufferInfoANDROID*, vulkan.AHardwareBuffer*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetAndroidHardwareBufferInfoANDROID*, vulkan.AHardwareBuffer*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetMemoryAndroidHardwareBufferANDROID other && Equals(other);
            
            public bool Equals(PFN_vkGetMemoryAndroidHardwareBufferANDROID other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetAndroidHardwareBufferInfoANDROID*, vulkan.AHardwareBuffer*, vulkan.VkResult> (vulkan.PFN_vkGetMemoryAndroidHardwareBufferANDROID from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetMemoryAndroidHardwareBufferANDROID (delegate*unmanaged[Stdcall]<vulkan.VkDevice, vulkan.VkMemoryGetAndroidHardwareBufferInfoANDROID*, vulkan.AHardwareBuffer*, vulkan.VkResult> from) => new vulkan.PFN_vkGetMemoryAndroidHardwareBufferANDROID(from);
            
            public static bool operator ==(PFN_vkGetMemoryAndroidHardwareBufferANDROID left, PFN_vkGetMemoryAndroidHardwareBufferANDROID right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetMemoryAndroidHardwareBufferANDROID left, PFN_vkGetMemoryAndroidHardwareBufferANDROID right) => !left.Equals(right);
            
            public vulkan.VkResult Invoke(vulkan.VkDevice device, in vulkan.VkMemoryGetAndroidHardwareBufferInfoANDROID pInfo, ref vulkan.AHardwareBuffer pBuffer)
            {
                fixed (vulkan.VkMemoryGetAndroidHardwareBufferInfoANDROID* __pInfo = &pInfo)
                fixed (vulkan.AHardwareBuffer* __pBuffer = &pBuffer)
                return Value(device, __pInfo, __pBuffer);
            }
            
            public nint Pointer => (nint)Value;
            
            public bool IsNull => (nint)Value == 0;
        }
        
        public const int VK_KHR_android_surface = 1;
        
        public const int VK_KHR_ANDROID_SURFACE_SPEC_VERSION = 6;
        
        public static ReadOnlySpanUtf8 VK_KHR_ANDROID_SURFACE_EXTENSION_NAME => "VK_KHR_android_surface"u8;
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkCreateAndroidSurfaceKHR> vkCreateAndroidSurfaceKHR_ => new("vkCreateAndroidSurfaceKHR"u8);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetAndroidHardwareBufferPropertiesANDROID")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetAndroidHardwareBufferPropertiesANDROID(vulkan.VkDevice device, vulkan.AHardwareBuffer buffer, ref vulkan.VkAndroidHardwareBufferPropertiesANDROID pProperties);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkGetAndroidHardwareBufferPropertiesANDROID> vkGetAndroidHardwareBufferPropertiesANDROID_ => new("vkGetAndroidHardwareBufferPropertiesANDROID"u8);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetMemoryAndroidHardwareBufferANDROID")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkGetMemoryAndroidHardwareBufferANDROID(vulkan.VkDevice device, in vulkan.VkMemoryGetAndroidHardwareBufferInfoANDROID pInfo, ref vulkan.AHardwareBuffer pBuffer);
        
        public static vkFunctionPointerPrototype<vulkan.PFN_vkGetMemoryAndroidHardwareBufferANDROID> vkGetMemoryAndroidHardwareBufferANDROID_ => new("vkGetMemoryAndroidHardwareBufferANDROID"u8);
    }
}
