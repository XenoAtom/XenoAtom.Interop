//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class vulkan
    {
        public partial struct VkXcbSurfaceCreateInfoKHR
        {
            public vulkan.VkStructureType sType;
            
            public void* pNext;
            
            public vulkan.VkXcbSurfaceCreateFlagsKHR flags;
            
            public void* connection;
            
            public uint window;
        }
        
        public readonly partial struct VkXcbSurfaceCreateFlagsKHR : IEquatable<VkXcbSurfaceCreateFlagsKHR>
        {
            public VkXcbSurfaceCreateFlagsKHR(vulkan.VkFlags value) => this.Value = value;
            
            public vulkan.VkFlags Value { get; }
            
            public override bool Equals(object obj) => obj is VkXcbSurfaceCreateFlagsKHR other && Equals(other);
            
            public bool Equals(VkXcbSurfaceCreateFlagsKHR other) => Value.Equals(other.Value);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator vulkan.VkFlags (vulkan.VkXcbSurfaceCreateFlagsKHR from) => from.Value;
            
            public static implicit operator vulkan.VkXcbSurfaceCreateFlagsKHR (vulkan.VkFlags from) => new vulkan.VkXcbSurfaceCreateFlagsKHR(from);
            
            public static bool operator ==(VkXcbSurfaceCreateFlagsKHR left, VkXcbSurfaceCreateFlagsKHR right) => left.Equals(right);
            
            public static bool operator !=(VkXcbSurfaceCreateFlagsKHR left, VkXcbSurfaceCreateFlagsKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkCreateXcbSurfaceKHR : IEquatable<PFN_vkCreateXcbSurfaceKHR>
        {
            public PFN_vkCreateXcbSurfaceKHR(delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkXcbSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkXcbSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkCreateXcbSurfaceKHR other && Equals(other);
            
            public bool Equals(PFN_vkCreateXcbSurfaceKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkXcbSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> (vulkan.PFN_vkCreateXcbSurfaceKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkCreateXcbSurfaceKHR (delegate*unmanaged[Stdcall]<vulkan.VkInstance, vulkan.VkXcbSurfaceCreateInfoKHR*, vulkan.VkAllocationCallbacks*, vulkan.VkSurfaceKHR*, vulkan.VkResult> from) => new vulkan.PFN_vkCreateXcbSurfaceKHR(from);
            
            public static bool operator ==(PFN_vkCreateXcbSurfaceKHR left, PFN_vkCreateXcbSurfaceKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkCreateXcbSurfaceKHR left, PFN_vkCreateXcbSurfaceKHR right) => !left.Equals(right);
        }
        
        public readonly partial struct PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR : IEquatable<PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR>
        {
            public PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR(delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, void*, uint, vulkan.VkBool32> value) => this.Value = value;
            
            public delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, void*, uint, vulkan.VkBool32> Value { get; }
            
            public override bool Equals(object obj) => obj is PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR other && Equals(other);
            
            public bool Equals(PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, void*, uint, vulkan.VkBool32> (vulkan.PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR from) => from.Value;
            
            public static implicit operator vulkan.PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR (delegate*unmanaged[Stdcall]<vulkan.VkPhysicalDevice, uint, void*, uint, vulkan.VkBool32> from) => new vulkan.PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR(from);
            
            public static bool operator ==(PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR left, PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR right) => left.Equals(right);
            
            public static bool operator !=(PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR left, PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR right) => !left.Equals(right);
        }
        
        public const int VK_KHR_xcb_surface = 1;
        
        public const int VK_KHR_XCB_SURFACE_SPEC_VERSION = 6;
        
        public const string VK_KHR_XCB_SURFACE_EXTENSION_NAME = "VK_KHR_xcb_surface";
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkCreateXcbSurfaceKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkResult vkCreateXcbSurfaceKHR(vulkan.VkInstance instance, in vulkan.VkXcbSurfaceCreateInfoKHR pCreateInfo, in vulkan.VkAllocationCallbacks pAllocator, ref vulkan.VkSurfaceKHR pSurface);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "vkGetPhysicalDeviceXcbPresentationSupportKHR")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvStdcall) })]
        public static partial vulkan.VkBool32 vkGetPhysicalDeviceXcbPresentationSupportKHR(vulkan.VkPhysicalDevice physicalDevice, uint queueFamilyIndex, void* connection, uint visual_id);
    }
}
