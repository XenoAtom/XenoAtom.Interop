//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    public static unsafe partial class libkmod
    {
        /// <summary>
        /// kmod_ctx
        /// </summary>
        /// <remarks>
        /// library user context - reads the config and system
        /// environment, user variables, allows custom logging
        /// </remarks>
        public readonly partial struct kmod_ctx : IEquatable<libkmod.kmod_ctx>
        {
            public kmod_ctx(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(kmod_ctx other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is kmod_ctx other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(kmod_ctx left, kmod_ctx right) => left.Equals(right);
            
            public static bool operator !=(kmod_ctx left, kmod_ctx right) => !left.Equals(right);
        }
        
        /// <summary>
        /// kmod_list
        /// </summary>
        /// <remarks>
        /// access to kmod generated lists
        /// </remarks>
        public readonly partial struct kmod_list : IEquatable<libkmod.kmod_list>
        {
            public kmod_list(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(kmod_list other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is kmod_list other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(kmod_list left, kmod_list right) => left.Equals(right);
            
            public static bool operator !=(kmod_list left, kmod_list right) => !left.Equals(right);
        }
        
        /// <summary>
        /// kmod_config_iter
        /// </summary>
        /// <remarks>
        /// access to configuration lists - it allows to get each configuration's
        /// key/value stored by kmod
        /// </remarks>
        public readonly partial struct kmod_config_iter : IEquatable<libkmod.kmod_config_iter>
        {
            public kmod_config_iter(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(kmod_config_iter other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is kmod_config_iter other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(kmod_config_iter left, kmod_config_iter right) => left.Equals(right);
            
            public static bool operator !=(kmod_config_iter left, kmod_config_iter right) => !left.Equals(right);
        }
        
        /// <summary>
        /// kmod_module
        /// </summary>
        /// <remarks>
        /// Operate on kernel modules
        /// </remarks>
        public readonly partial struct kmod_module : IEquatable<libkmod.kmod_module>
        {
            public kmod_module(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(kmod_module other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is kmod_module other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(kmod_module left, kmod_module right) => left.Equals(right);
            
            public static bool operator !=(kmod_module left, kmod_module right) => !left.Equals(right);
        }
    }
}
