//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class libkmod
    {
        public enum kmod_resources : uint
        {
            KMOD_RESOURCES_OK = unchecked((uint)0),
            
            KMOD_RESOURCES_MUST_RELOAD = unchecked((uint)1),
            
            KMOD_RESOURCES_MUST_RECREATE = unchecked((uint)2),
        }
        
        public const libkmod.kmod_resources KMOD_RESOURCES_OK = kmod_resources.KMOD_RESOURCES_OK;
        
        public const libkmod.kmod_resources KMOD_RESOURCES_MUST_RELOAD = kmod_resources.KMOD_RESOURCES_MUST_RELOAD;
        
        public const libkmod.kmod_resources KMOD_RESOURCES_MUST_RECREATE = kmod_resources.KMOD_RESOURCES_MUST_RECREATE;
        
        [Flags]
        public enum kmod_index : uint
        {
            KMOD_INDEX_MODULES_DEP = unchecked((uint)0),
            
            KMOD_INDEX_MODULES_ALIAS = unchecked((uint)1),
            
            KMOD_INDEX_MODULES_SYMBOL = unchecked((uint)2),
            
            KMOD_INDEX_MODULES_BUILTIN_ALIAS = unchecked((uint)3),
            
            KMOD_INDEX_MODULES_BUILTIN = unchecked((uint)4),
            
            /// <summary>
            /// Padding to make sure enum is not mapped to char
            /// </summary>
            _KMOD_INDEX_PAD = unchecked((uint)-2147483648),
        }
        
        public const libkmod.kmod_index KMOD_INDEX_MODULES_DEP = kmod_index.KMOD_INDEX_MODULES_DEP;
        
        public const libkmod.kmod_index KMOD_INDEX_MODULES_ALIAS = kmod_index.KMOD_INDEX_MODULES_ALIAS;
        
        public const libkmod.kmod_index KMOD_INDEX_MODULES_SYMBOL = kmod_index.KMOD_INDEX_MODULES_SYMBOL;
        
        public const libkmod.kmod_index KMOD_INDEX_MODULES_BUILTIN_ALIAS = kmod_index.KMOD_INDEX_MODULES_BUILTIN_ALIAS;
        
        public const libkmod.kmod_index KMOD_INDEX_MODULES_BUILTIN = kmod_index.KMOD_INDEX_MODULES_BUILTIN;
        
        /// <summary>
        /// Padding to make sure enum is not mapped to char
        /// </summary>
        public const libkmod.kmod_index _KMOD_INDEX_PAD = kmod_index._KMOD_INDEX_PAD;
        
        /// <summary>
        /// Removal flags
        /// </summary>
        [Flags]
        public enum kmod_remove : uint
        {
            KMOD_REMOVE_FORCE = unchecked((uint)512),
            
            /// <summary>
            /// always set
            /// </summary>
            KMOD_REMOVE_NOWAIT = unchecked((uint)2048),
            
            /// <summary>
            /// libkmod-only defines, not passed to kernel
            /// </summary>
            KMOD_REMOVE_NOLOG = unchecked((uint)1),
        }
        
        public const libkmod.kmod_remove KMOD_REMOVE_FORCE = kmod_remove.KMOD_REMOVE_FORCE;
        
        /// <summary>
        /// always set
        /// </summary>
        public const libkmod.kmod_remove KMOD_REMOVE_NOWAIT = kmod_remove.KMOD_REMOVE_NOWAIT;
        
        /// <summary>
        /// libkmod-only defines, not passed to kernel
        /// </summary>
        public const libkmod.kmod_remove KMOD_REMOVE_NOLOG = kmod_remove.KMOD_REMOVE_NOLOG;
        
        /// <summary>
        /// Insertion flags
        /// </summary>
        [Flags]
        public enum kmod_insert : uint
        {
            KMOD_INSERT_FORCE_VERMAGIC = unchecked((uint)1),
            
            KMOD_INSERT_FORCE_MODVERSION = unchecked((uint)2),
        }
        
        public const libkmod.kmod_insert KMOD_INSERT_FORCE_VERMAGIC = kmod_insert.KMOD_INSERT_FORCE_VERMAGIC;
        
        public const libkmod.kmod_insert KMOD_INSERT_FORCE_MODVERSION = kmod_insert.KMOD_INSERT_FORCE_MODVERSION;
        
        /// <summary>
        /// Flags to kmod_module_probe_insert_module()
        /// </summary>
        [Flags]
        public enum kmod_probe : uint
        {
            KMOD_PROBE_FORCE_VERMAGIC = unchecked((uint)1),
            
            KMOD_PROBE_FORCE_MODVERSION = unchecked((uint)2),
            
            KMOD_PROBE_IGNORE_COMMAND = unchecked((uint)4),
            
            KMOD_PROBE_IGNORE_LOADED = unchecked((uint)8),
            
            KMOD_PROBE_DRY_RUN = unchecked((uint)16),
            
            KMOD_PROBE_FAIL_ON_LOADED = unchecked((uint)32),
            
            /// <summary>
            /// codes below can be used in return value, too
            /// </summary>
            KMOD_PROBE_APPLY_BLACKLIST_ALL = unchecked((uint)65536),
            
            /// <summary>
            /// codes below can be used in return value, too
            /// </summary>
            KMOD_PROBE_APPLY_BLACKLIST = unchecked((uint)131072),
            
            /// <summary>
            /// codes below can be used in return value, too
            /// </summary>
            KMOD_PROBE_APPLY_BLACKLIST_ALIAS_ONLY = unchecked((uint)262144),
        }
        
        public const libkmod.kmod_probe KMOD_PROBE_FORCE_VERMAGIC = kmod_probe.KMOD_PROBE_FORCE_VERMAGIC;
        
        public const libkmod.kmod_probe KMOD_PROBE_FORCE_MODVERSION = kmod_probe.KMOD_PROBE_FORCE_MODVERSION;
        
        public const libkmod.kmod_probe KMOD_PROBE_IGNORE_COMMAND = kmod_probe.KMOD_PROBE_IGNORE_COMMAND;
        
        public const libkmod.kmod_probe KMOD_PROBE_IGNORE_LOADED = kmod_probe.KMOD_PROBE_IGNORE_LOADED;
        
        public const libkmod.kmod_probe KMOD_PROBE_DRY_RUN = kmod_probe.KMOD_PROBE_DRY_RUN;
        
        public const libkmod.kmod_probe KMOD_PROBE_FAIL_ON_LOADED = kmod_probe.KMOD_PROBE_FAIL_ON_LOADED;
        
        /// <summary>
        /// codes below can be used in return value, too
        /// </summary>
        public const libkmod.kmod_probe KMOD_PROBE_APPLY_BLACKLIST_ALL = kmod_probe.KMOD_PROBE_APPLY_BLACKLIST_ALL;
        
        /// <summary>
        /// codes below can be used in return value, too
        /// </summary>
        public const libkmod.kmod_probe KMOD_PROBE_APPLY_BLACKLIST = kmod_probe.KMOD_PROBE_APPLY_BLACKLIST;
        
        /// <summary>
        /// codes below can be used in return value, too
        /// </summary>
        public const libkmod.kmod_probe KMOD_PROBE_APPLY_BLACKLIST_ALIAS_ONLY = kmod_probe.KMOD_PROBE_APPLY_BLACKLIST_ALIAS_ONLY;
        
        /// <summary>
        /// Flags to kmod_module_apply_filter()
        /// </summary>
        [Flags]
        public enum kmod_filter : uint
        {
            KMOD_FILTER_BLACKLIST = unchecked((uint)1),
            
            KMOD_FILTER_BUILTIN = unchecked((uint)2),
        }
        
        public const libkmod.kmod_filter KMOD_FILTER_BLACKLIST = kmod_filter.KMOD_FILTER_BLACKLIST;
        
        public const libkmod.kmod_filter KMOD_FILTER_BUILTIN = kmod_filter.KMOD_FILTER_BUILTIN;
        
        /// <summary>
        /// Information regarding "live information" from module's state, as returned
        /// by kernel
        /// </summary>
        public enum kmod_module_initstate : uint
        {
            KMOD_MODULE_BUILTIN = unchecked((uint)0),
            
            KMOD_MODULE_LIVE = unchecked((uint)1),
            
            KMOD_MODULE_COMING = unchecked((uint)2),
            
            KMOD_MODULE_GOING = unchecked((uint)3),
        }
        
        public const libkmod.kmod_module_initstate KMOD_MODULE_BUILTIN = kmod_module_initstate.KMOD_MODULE_BUILTIN;
        
        public const libkmod.kmod_module_initstate KMOD_MODULE_LIVE = kmod_module_initstate.KMOD_MODULE_LIVE;
        
        public const libkmod.kmod_module_initstate KMOD_MODULE_COMING = kmod_module_initstate.KMOD_MODULE_COMING;
        
        public const libkmod.kmod_module_initstate KMOD_MODULE_GOING = kmod_module_initstate.KMOD_MODULE_GOING;
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_new")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_ctx kmod_new(byte* dirname, byte** config_paths);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_new")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_ctx kmod_new([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> dirname, byte** config_paths);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_ref")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_ctx kmod_ref(libkmod.kmod_ctx ctx);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_unref")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_ctx kmod_unref(libkmod.kmod_ctx ctx);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_get_log_priority")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_get_log_priority(libkmod.kmod_ctx ctx);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_set_log_priority")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void kmod_set_log_priority(libkmod.kmod_ctx ctx, int priority);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_get_userdata")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void* kmod_get_userdata(libkmod.kmod_ctx ctx);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_set_userdata")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void kmod_set_userdata(libkmod.kmod_ctx ctx, void* userdata);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_get_dirname")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* kmod_get_dirname_(libkmod.kmod_ctx ctx);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_get_dirname")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string kmod_get_dirname(libkmod.kmod_ctx ctx);
        
        /// <summary>
        /// Management of libkmod's resources
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_load_resources")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_load_resources(libkmod.kmod_ctx ctx);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_unload_resources")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void kmod_unload_resources(libkmod.kmod_ctx ctx);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_validate_resources")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_resources kmod_validate_resources(libkmod.kmod_ctx ctx);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_dump_index")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_dump_index(libkmod.kmod_ctx ctx, libkmod.kmod_index type, int fd);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_list_next")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_list kmod_list_next(libkmod.kmod_list list, libkmod.kmod_list curr);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_list_prev")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_list kmod_list_prev(libkmod.kmod_list list, libkmod.kmod_list curr);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_list_last")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_list kmod_list_last(libkmod.kmod_list list);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_config_get_blacklists")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_config_iter kmod_config_get_blacklists(libkmod.kmod_ctx ctx);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_config_get_install_commands")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_config_iter kmod_config_get_install_commands(libkmod.kmod_ctx ctx);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_config_get_remove_commands")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_config_iter kmod_config_get_remove_commands(libkmod.kmod_ctx ctx);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_config_get_aliases")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_config_iter kmod_config_get_aliases(libkmod.kmod_ctx ctx);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_config_get_options")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_config_iter kmod_config_get_options(libkmod.kmod_ctx ctx);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_config_get_softdeps")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_config_iter kmod_config_get_softdeps(libkmod.kmod_ctx ctx);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_config_iter_get_key")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* kmod_config_iter_get_key_(libkmod.kmod_config_iter iter);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_config_iter_get_key")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string kmod_config_iter_get_key(libkmod.kmod_config_iter iter);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_config_iter_get_value")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* kmod_config_iter_get_value_(libkmod.kmod_config_iter iter);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_config_iter_get_value")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string kmod_config_iter_get_value(libkmod.kmod_config_iter iter);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_config_iter_next")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.MarshalAs(UnmanagedType.U1)]
        public static partial bool kmod_config_iter_next(libkmod.kmod_config_iter iter);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_config_iter_free_iter")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void kmod_config_iter_free_iter(libkmod.kmod_config_iter iter);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_new_from_name")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_new_from_name(libkmod.kmod_ctx ctx, byte* name, out libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_new_from_name")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_new_from_name(libkmod.kmod_ctx ctx, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, out libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_new_from_path")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_new_from_path(libkmod.kmod_ctx ctx, byte* path, out libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_new_from_path")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_new_from_path(libkmod.kmod_ctx ctx, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path, out libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_new_from_lookup")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_new_from_lookup(libkmod.kmod_ctx ctx, byte* given_alias, out libkmod.kmod_list list);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_new_from_lookup")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_new_from_lookup(libkmod.kmod_ctx ctx, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> given_alias, out libkmod.kmod_list list);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_new_from_name_lookup")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_new_from_name_lookup(libkmod.kmod_ctx ctx, byte* modname, out libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_new_from_name_lookup")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_new_from_name_lookup(libkmod.kmod_ctx ctx, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> modname, out libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_new_from_loaded")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_new_from_loaded(libkmod.kmod_ctx ctx, out libkmod.kmod_list list);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_ref")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_module kmod_module_ref(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_unref")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_module kmod_module_unref(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_unref_list")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_unref_list(libkmod.kmod_list list);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_module")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_module kmod_module_get_module(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_remove_module")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_remove_module(libkmod.kmod_module mod, libkmod.kmod_remove flags);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_insert_module")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_insert_module(libkmod.kmod_module mod, libkmod.kmod_insert flags, byte* options);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_insert_module")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_insert_module(libkmod.kmod_module mod, libkmod.kmod_insert flags, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> options);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_probe_insert_module")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_probe_insert_module(libkmod.kmod_module mod, libkmod.kmod_probe flags, byte* extra_options, delegate*unmanaged[Cdecl]<libkmod.kmod_module, byte*, void*, int> run_install, void* data, delegate*unmanaged[Cdecl]<libkmod.kmod_module, bool, byte*, void> print_action);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_probe_insert_module")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_probe_insert_module(libkmod.kmod_module mod, libkmod.kmod_probe flags, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> extra_options, delegate*unmanaged[Cdecl]<libkmod.kmod_module, byte*, void*, int> run_install, void* data, delegate*unmanaged[Cdecl]<libkmod.kmod_module, bool, byte*, void> print_action);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_name")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* kmod_module_get_name_(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_name")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string kmod_module_get_name(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_path")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* kmod_module_get_path_(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_path")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string kmod_module_get_path(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_options")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* kmod_module_get_options_(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_options")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string kmod_module_get_options(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_install_commands")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* kmod_module_get_install_commands_(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_install_commands")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string kmod_module_get_install_commands(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_remove_commands")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* kmod_module_get_remove_commands_(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_remove_commands")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string kmod_module_get_remove_commands(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_dependencies")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_list kmod_module_get_dependencies(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_softdeps")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_get_softdeps(libkmod.kmod_module mod, out libkmod.kmod_list pre, out libkmod.kmod_list post);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_filtered_blacklist")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_get_filtered_blacklist(libkmod.kmod_ctx ctx, libkmod.kmod_list input, out libkmod.kmod_list output);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_apply_filter")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_apply_filter(libkmod.kmod_ctx ctx, libkmod.kmod_filter filter_type, libkmod.kmod_list input, out libkmod.kmod_list output);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_initstate_str")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* kmod_module_initstate_str_(libkmod.kmod_module_initstate state);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_initstate_str")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string kmod_module_initstate_str(libkmod.kmod_module_initstate state);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_initstate")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_get_initstate(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_refcnt")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_get_refcnt(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_holders")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_list kmod_module_get_holders(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_sections")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libkmod.kmod_list kmod_module_get_sections(libkmod.kmod_module mod);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_section_get_name")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* kmod_module_section_get_name_(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_section_get_name")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string kmod_module_section_get_name(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_section_get_address")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nuint kmod_module_section_get_address(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_section_free_list")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void kmod_module_section_free_list(libkmod.kmod_list list);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_size")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial nint kmod_module_get_size(libkmod.kmod_module mod);
        
        /// <summary>
        /// Information retrieved from ELF headers and sections
        /// </summary>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_info")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_get_info(libkmod.kmod_module mod, out libkmod.kmod_list list);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_info_get_key")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* kmod_module_info_get_key_(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_info_get_key")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string kmod_module_info_get_key(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_info_get_value")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* kmod_module_info_get_value_(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_info_get_value")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string kmod_module_info_get_value(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_info_free_list")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void kmod_module_info_free_list(libkmod.kmod_list list);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_versions")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_get_versions(libkmod.kmod_module mod, out libkmod.kmod_list list);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_version_get_symbol")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* kmod_module_version_get_symbol_(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_version_get_symbol")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string kmod_module_version_get_symbol(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_version_get_crc")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial ulong kmod_module_version_get_crc(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_versions_free_list")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void kmod_module_versions_free_list(libkmod.kmod_list list);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_symbols")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_get_symbols(libkmod.kmod_module mod, out libkmod.kmod_list list);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_symbol_get_symbol")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* kmod_module_symbol_get_symbol_(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_symbol_get_symbol")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string kmod_module_symbol_get_symbol(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_symbol_get_crc")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial ulong kmod_module_symbol_get_crc(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_symbols_free_list")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void kmod_module_symbols_free_list(libkmod.kmod_list list);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_get_dependency_symbols")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_get_dependency_symbols(libkmod.kmod_module mod, out libkmod.kmod_list list);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_dependency_symbol_get_symbol")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* kmod_module_dependency_symbol_get_symbol_(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_dependency_symbol_get_symbol")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string kmod_module_dependency_symbol_get_symbol(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_dependency_symbol_get_bind")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int kmod_module_dependency_symbol_get_bind(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_dependency_symbol_get_crc")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial ulong kmod_module_dependency_symbol_get_crc(libkmod.kmod_list entry);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "kmod_module_dependency_symbols_free_list")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void kmod_module_dependency_symbols_free_list(libkmod.kmod_list list);
    }
}
