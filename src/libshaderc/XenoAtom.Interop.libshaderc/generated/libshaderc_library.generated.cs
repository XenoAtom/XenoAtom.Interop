//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    public static unsafe partial class libshaderc
    {
        public readonly partial struct shaderc_compiler : IEquatable<libshaderc.shaderc_compiler>
        {
            public shaderc_compiler(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(shaderc_compiler other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is shaderc_compiler other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(shaderc_compiler left, shaderc_compiler right) => left.Equals(right);
            
            public static bool operator !=(shaderc_compiler left, shaderc_compiler right) => !left.Equals(right);
        }
        
        public readonly partial struct shaderc_compile_options : IEquatable<libshaderc.shaderc_compile_options>
        {
            public shaderc_compile_options(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(shaderc_compile_options other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is shaderc_compile_options other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(shaderc_compile_options left, shaderc_compile_options right) => left.Equals(right);
            
            public static bool operator !=(shaderc_compile_options left, shaderc_compile_options right) => !left.Equals(right);
        }
        
        public readonly partial struct shaderc_compilation_result : IEquatable<libshaderc.shaderc_compilation_result>
        {
            public shaderc_compilation_result(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(shaderc_compilation_result other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is shaderc_compilation_result other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(shaderc_compilation_result left, shaderc_compilation_result right) => left.Equals(right);
            
            public static bool operator !=(shaderc_compilation_result left, shaderc_compilation_result right) => !left.Equals(right);
        }
    }
}
