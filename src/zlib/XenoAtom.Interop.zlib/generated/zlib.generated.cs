//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class zlib
    {
        public partial struct z_stream
        {
            /// <summary>
            /// next input byte
            /// </summary>
            public byte* next_in;
            
            /// <summary>
            /// number of bytes available at next_in
            /// </summary>
            public uint avail_in;
            
            /// <summary>
            /// total number of input bytes read so far
            /// </summary>
            public global::System.Runtime.InteropServices.CULong total_in;
            
            /// <summary>
            /// next output byte will go here
            /// </summary>
            public byte* next_out;
            
            /// <summary>
            /// remaining free space at next_out
            /// </summary>
            public uint avail_out;
            
            /// <summary>
            /// total number of bytes output so far
            /// </summary>
            public global::System.Runtime.InteropServices.CULong total_out;
            
            /// <summary>
            /// last error message, NULL if no error
            /// </summary>
            public byte* msg;
            
            /// <summary>
            /// not visible by applications
            /// </summary>
            public zlib.internal_state state;
            
            /// <summary>
            /// used to allocate the internal state
            /// </summary>
            public delegate*unmanaged[Cdecl]<void*, uint, uint, void*> zalloc;
            
            /// <summary>
            /// used to free the internal state
            /// </summary>
            public delegate*unmanaged[Cdecl]<void*, void*, void> zfree;
            
            /// <summary>
            /// private data object passed to zalloc and zfree
            /// </summary>
            public void* opaque;
            
            /// <summary>
            /// best guess about the data type: binary or text
            /// for deflate, or the decoding state for inflate
            /// </summary>
            public zlib.z_datatype_t data_type;
            
            /// <summary>
            /// Adler-32 or CRC-32 value of the uncompressed data
            /// </summary>
            public global::System.Runtime.InteropServices.CULong adler;
            
            /// <summary>
            /// reserved for future use
            /// </summary>
            public global::System.Runtime.InteropServices.CULong reserved;
        }
        
        /// <summary>
        /// gzip header information passed to and from zlib routines.  See RFC 1952
        /// for more details on the meanings of these fields.
        /// </summary>
        public partial struct gz_header
        {
            /// <summary>
            /// true if compressed data believed to be text
            /// </summary>
            public int text;
            
            /// <summary>
            /// modification time
            /// </summary>
            public global::System.Runtime.InteropServices.CULong time;
            
            /// <summary>
            /// extra flags (not used when writing a gzip file)
            /// </summary>
            public int xflags;
            
            /// <summary>
            /// operating system
            /// </summary>
            public int os;
            
            /// <summary>
            /// pointer to extra field or Z_NULL if none
            /// </summary>
            public byte* extra;
            
            /// <summary>
            /// extra field length (valid if extra != Z_NULL)
            /// </summary>
            public uint extra_len;
            
            /// <summary>
            /// space at extra (only when reading header)
            /// </summary>
            public uint extra_max;
            
            /// <summary>
            /// pointer to zero-terminated file name or Z_NULL
            /// </summary>
            public byte* name;
            
            /// <summary>
            /// space at name (only when reading header)
            /// </summary>
            public uint name_max;
            
            /// <summary>
            /// pointer to zero-terminated comment or Z_NULL
            /// </summary>
            public byte* comment;
            
            /// <summary>
            /// space at comment (only when reading header)
            /// </summary>
            public uint comm_max;
            
            /// <summary>
            /// true if there was or will be a header crc
            /// </summary>
            public int hcrc;
            
            /// <summary>
            /// true when done reading gzip header (not used
            /// when writing a gzip file)
            /// </summary>
            public int done;
        }
        
        public const string ZLIB_VERSION = "1.3.1";
        
        public const int ZLIB_VERNUM = 4880;
        
        public const int ZLIB_VER_MAJOR = 1;
        
        public const int ZLIB_VER_MINOR = 3;
        
        public const int ZLIB_VER_REVISION = 1;
        
        public const int ZLIB_VER_SUBREVISION = 0;
        
        public const int Z_NO_COMPRESSION = 0;
        
        public const int Z_BEST_SPEED = 1;
        
        public const int Z_BEST_COMPRESSION = 9;
        
        public const int Z_DEFAULT_COMPRESSION = -1;
        
        /// <summary>
        /// for initializing zalloc, zfree, opaque
        /// </summary>
        public const nint Z_NULL = 0;
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "zlibVersion")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* zlibVersion();
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "zlibVersion")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string zlibVersion_string();
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "deflate")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t deflate(ref zlib.z_stream strm, zlib.z_flush_t flush);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "deflateEnd")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t deflateEnd(ref zlib.z_stream strm);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflate")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflate(ref zlib.z_stream strm, zlib.z_flush_t flush);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateEnd")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflateEnd(ref zlib.z_stream strm);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "deflateSetDictionary")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t deflateSetDictionary(ref zlib.z_stream strm, byte* dictionary, uint dictLength);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "deflateGetDictionary")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t deflateGetDictionary(ref zlib.z_stream strm, byte* dictionary, ref uint dictLength);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "deflateCopy")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t deflateCopy(ref zlib.z_stream dest, ref zlib.z_stream source);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "deflateReset")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t deflateReset(ref zlib.z_stream strm);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "deflateParams")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t deflateParams(ref zlib.z_stream strm, int level, int strategy);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "deflateTune")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t deflateTune(ref zlib.z_stream strm, int good_length, int max_lazy, int nice_length, int max_chain);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "deflateBound")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial global::System.Runtime.InteropServices.CULong deflateBound(ref zlib.z_stream strm, global::System.Runtime.InteropServices.CULong sourceLen);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "deflatePending")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t deflatePending(ref zlib.z_stream strm, ref uint pending, ref int bits);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "deflatePrime")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t deflatePrime(ref zlib.z_stream strm, int bits, int value);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "deflateSetHeader")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t deflateSetHeader(ref zlib.z_stream strm, ref zlib.gz_header head);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateSetDictionary")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflateSetDictionary(ref zlib.z_stream strm, byte* dictionary, uint dictLength);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateGetDictionary")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflateGetDictionary(ref zlib.z_stream strm, byte* dictionary, ref uint dictLength);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateSync")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflateSync(ref zlib.z_stream strm);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateCopy")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflateCopy(ref zlib.z_stream dest, ref zlib.z_stream source);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateReset")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflateReset(ref zlib.z_stream strm);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateReset2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflateReset2(ref zlib.z_stream strm, int windowBits);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflatePrime")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflatePrime(ref zlib.z_stream strm, int bits, int value);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateMark")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial global::System.Runtime.InteropServices.CLong inflateMark(ref zlib.z_stream strm);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateGetHeader")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflateGetHeader(ref zlib.z_stream strm, ref zlib.gz_header head);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateBack")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflateBack(ref zlib.z_stream strm, delegate*unmanaged[Cdecl]<void*, byte**, uint> @in, void* in_desc, delegate*unmanaged[Cdecl]<void*, byte*, uint, int> @out, void* out_desc);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateBackEnd")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflateBackEnd(ref zlib.z_stream strm);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "zlibCompileFlags")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint zlibCompileFlags();
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "compress")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t compress(byte* dest, global::System.Runtime.InteropServices.CULong* destLen, byte* source, global::System.Runtime.InteropServices.CULong sourceLen);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "compress2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t compress2(byte* dest, global::System.Runtime.InteropServices.CULong* destLen, byte* source, global::System.Runtime.InteropServices.CULong sourceLen, int level);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "compressBound")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint compressBound(uint sourceLen);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "uncompress")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t uncompress(byte* dest, global::System.Runtime.InteropServices.CULong* destLen, byte* source, global::System.Runtime.InteropServices.CULong sourceLen);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "uncompress2")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t uncompress2(byte* dest, global::System.Runtime.InteropServices.CULong* destLen, byte* source, global::System.Runtime.InteropServices.CULong* sourceLen);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "adler32")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint adler32(uint adler, byte* buf, uint len);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "adler32_z")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint adler32_z(uint adler, byte* buf, nuint len);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "crc32")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint crc32(uint crc, byte* buf, uint len);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "crc32_z")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint crc32_z(uint crc, byte* buf, nuint len);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "crc32_combine_op")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint crc32_combine_op(uint crc1, uint crc2, uint op);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "deflateInit_")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t deflateInit_(ref zlib.z_stream strm, int level, byte* version, int stream_size);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "deflateInit_")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t deflateInit_(ref zlib.z_stream strm, int level, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> version, int stream_size);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateInit_")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflateInit_(ref zlib.z_stream strm, byte* version, int stream_size);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateInit_")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflateInit_(ref zlib.z_stream strm, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> version, int stream_size);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "deflateInit2_")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t deflateInit2_(ref zlib.z_stream strm, int level, int method, int windowBits, int memLevel, int strategy, byte* version, int stream_size);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "deflateInit2_")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t deflateInit2_(ref zlib.z_stream strm, int level, int method, int windowBits, int memLevel, int strategy, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> version, int stream_size);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateInit2_")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflateInit2_(ref zlib.z_stream strm, int windowBits, byte* version, int stream_size);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateInit2_")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflateInit2_(ref zlib.z_stream strm, int windowBits, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> version, int stream_size);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateBackInit_")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflateBackInit_(ref zlib.z_stream strm, int windowBits, byte* window, byte* version, int stream_size);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "inflateBackInit_")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial zlib.z_result_t inflateBackInit_(ref zlib.z_stream strm, int windowBits, byte* window, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> version, int stream_size);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "adler32_combine")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint adler32_combine(uint arg0, uint arg1, int arg2);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "crc32_combine")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint crc32_combine(uint arg0, uint arg1, int arg2);
        
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "crc32_combine_gen")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial uint crc32_combine_gen(int arg0);
    }
}
