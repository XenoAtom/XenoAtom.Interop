//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class libgit2
    {
        /// <summary>
        /// Create a new reference database with no backends.
        /// </summary>
        /// <param name="out">location to store the database pointer, if opened.
        /// Set to NULL if the open failed.</param>
        /// <param name="repo">the repository</param>
        /// <returns>@return 0 or an error code</returns>
        /// <remarks>
        /// Before the Ref DB can be used for read/writing, a custom database
        /// backend must be manually set using `git_refdb_set_backend()`
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refdb_new")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_refdb_new(out libgit2.git_refdb @out, libgit2.git_repository repo);
        
        /// <summary>
        /// Create a new reference database and automatically add
        /// the default backends:
        /// </summary>
        /// <param name="out">location to store the database pointer, if opened.
        /// Set to NULL if the open failed.</param>
        /// <param name="repo">the repository</param>
        /// <returns>@return 0 or an error code</returns>
        /// <remarks>
        /// - git_refdb_dir: read and write loose and packed refs
        /// from disk, assuming the repository dir as the folder
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refdb_open")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_refdb_open(out libgit2.git_refdb @out, libgit2.git_repository repo);
        
        /// <summary>
        /// Suggests that the given refdb compress or optimize its references.
        /// This mechanism is implementation specific.  For on-disk reference
        /// databases, for example, this may pack all loose references.
        /// </summary>
        /// <param name="refdb">The reference database to optimize.</param>
        /// <returns>@return 0 or an error code.</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refdb_compress")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_refdb_compress(libgit2.git_refdb refdb);
        
        /// <summary>
        /// Close an open reference database.
        /// </summary>
        /// <param name="refdb">reference database pointer or NULL</param>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refdb_free")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void git_refdb_free(libgit2.git_refdb refdb);
    }
}
