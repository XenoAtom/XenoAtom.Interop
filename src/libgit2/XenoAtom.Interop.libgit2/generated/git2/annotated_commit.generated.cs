//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class libgit2
    {
        /// <summary>
        /// Creates a `git_annotated_commit` from the given reference.
        /// The resulting git_annotated_commit must be freed with
        /// `git_annotated_commit_free`.
        /// </summary>
        /// <param name="out">pointer to store the git_annotated_commit result in</param>
        /// <param name="repo">repository that contains the given reference</param>
        /// <param name="ref">reference to use to lookup the git_annotated_commit</param>
        /// <returns>0 on success or error code</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_annotated_commit_from_ref")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_annotated_commit_from_ref(out libgit2.git_annotated_commit @out, libgit2.git_repository repo, libgit2.git_reference @ref);
        
        /// <summary>
        /// Creates a `git_annotated_commit` from the given fetch head data.
        /// The resulting git_annotated_commit must be freed with
        /// `git_annotated_commit_free`.
        /// </summary>
        /// <param name="out">pointer to store the git_annotated_commit result in</param>
        /// <param name="repo">repository that contains the given commit</param>
        /// <param name="branch_name">name of the (remote) branch</param>
        /// <param name="remote_url">url of the remote</param>
        /// <param name="id">the commit object id of the remote branch</param>
        /// <returns>0 on success or error code</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_annotated_commit_from_fetchhead")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_annotated_commit_from_fetchhead(out libgit2.git_annotated_commit @out, libgit2.git_repository repo, byte* branch_name, byte* remote_url, in libgit2.git_oid id);
        
        /// <summary>
        /// Creates a `git_annotated_commit` from the given fetch head data.
        /// The resulting git_annotated_commit must be freed with
        /// `git_annotated_commit_free`.
        /// </summary>
        /// <param name="out">pointer to store the git_annotated_commit result in</param>
        /// <param name="repo">repository that contains the given commit</param>
        /// <param name="branch_name">name of the (remote) branch</param>
        /// <param name="remote_url">url of the remote</param>
        /// <param name="id">the commit object id of the remote branch</param>
        /// <returns>0 on success or error code</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_annotated_commit_from_fetchhead")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_annotated_commit_from_fetchhead(out libgit2.git_annotated_commit @out, libgit2.git_repository repo, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> branch_name, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> remote_url, in libgit2.git_oid id);
        
        /// <summary>
        /// Creates a `git_annotated_commit` from the given commit id.
        /// The resulting git_annotated_commit must be freed with
        /// `git_annotated_commit_free`.
        /// </summary>
        /// <param name="out">pointer to store the git_annotated_commit result in</param>
        /// <param name="repo">repository that contains the given commit</param>
        /// <param name="id">the commit object id to lookup</param>
        /// <returns>0 on success or error code</returns>
        /// <remarks>
        /// An annotated commit contains information about how it was
        /// looked up, which may be useful for functions like merge or
        /// rebase to provide context to the operation.  For example,
        /// conflict files will include the name of the source or target
        /// branches being merged.  It is therefore preferable to use the
        /// most specific function (eg `git_annotated_commit_from_ref`)
        /// instead of this one when that data is known.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_annotated_commit_lookup")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_annotated_commit_lookup(out libgit2.git_annotated_commit @out, libgit2.git_repository repo, in libgit2.git_oid id);
        
        /// <summary>
        /// Creates a `git_annotated_commit` from a revision string.
        /// </summary>
        /// <param name="out">pointer to store the git_annotated_commit result in</param>
        /// <param name="repo">repository that contains the given commit</param>
        /// <param name="revspec">the extended sha syntax string to use to lookup the commit</param>
        /// <returns>0 on success or error code</returns>
        /// <remarks>
        /// See `man gitrevisions`, or
        /// http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for
        /// information on the syntax accepted.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_annotated_commit_from_revspec")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_annotated_commit_from_revspec(out libgit2.git_annotated_commit @out, libgit2.git_repository repo, byte* revspec);
        
        /// <summary>
        /// Creates a `git_annotated_commit` from a revision string.
        /// </summary>
        /// <param name="out">pointer to store the git_annotated_commit result in</param>
        /// <param name="repo">repository that contains the given commit</param>
        /// <param name="revspec">the extended sha syntax string to use to lookup the commit</param>
        /// <returns>0 on success or error code</returns>
        /// <remarks>
        /// See `man gitrevisions`, or
        /// http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for
        /// information on the syntax accepted.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_annotated_commit_from_revspec")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_annotated_commit_from_revspec(out libgit2.git_annotated_commit @out, libgit2.git_repository repo, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> revspec);
        
        /// <summary>
        /// Gets the commit ID that the given `git_annotated_commit` refers to.
        /// </summary>
        /// <param name="commit">the given annotated commit</param>
        /// <returns>commit id</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_annotated_commit_id")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_oid* git_annotated_commit_id(libgit2.git_annotated_commit commit);
        
        /// <summary>
        /// Get the refname that the given `git_annotated_commit` refers to.
        /// </summary>
        /// <param name="commit">the given annotated commit</param>
        /// <returns>ref name.</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_annotated_commit_ref")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* git_annotated_commit_ref_(libgit2.git_annotated_commit commit);
        
        /// <summary>
        /// Get the refname that the given `git_annotated_commit` refers to.
        /// </summary>
        /// <param name="commit">the given annotated commit</param>
        /// <returns>ref name.</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_annotated_commit_ref")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string git_annotated_commit_ref(libgit2.git_annotated_commit commit);
        
        /// <summary>
        /// Frees a `git_annotated_commit`.
        /// </summary>
        /// <param name="commit">annotated commit to free</param>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_annotated_commit_free")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void git_annotated_commit_free(libgit2.git_annotated_commit commit);
    }
}
