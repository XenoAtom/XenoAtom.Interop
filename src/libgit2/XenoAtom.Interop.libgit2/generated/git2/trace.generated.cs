//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class libgit2
    {
        /// <summary>
        /// Available tracing levels.  When tracing is set to a particular level,
        /// callers will be provided tracing at the given level and all lower levels.
        /// </summary>
        public enum git_trace_level_t : uint
        {
            /// <summary>
            /// No tracing will be performed.
            /// </summary>
            GIT_TRACE_NONE = unchecked((uint)0),
            
            /// <summary>
            /// Severe errors that may impact the program's execution
            /// </summary>
            GIT_TRACE_FATAL = unchecked((uint)1),
            
            /// <summary>
            /// Errors that do not impact the program's execution
            /// </summary>
            GIT_TRACE_ERROR = unchecked((uint)2),
            
            /// <summary>
            /// Warnings that suggest abnormal data
            /// </summary>
            GIT_TRACE_WARN = unchecked((uint)3),
            
            /// <summary>
            /// Informational messages about program execution
            /// </summary>
            GIT_TRACE_INFO = unchecked((uint)4),
            
            /// <summary>
            /// Detailed data that allows for debugging
            /// </summary>
            GIT_TRACE_DEBUG = unchecked((uint)5),
            
            /// <summary>
            /// Exceptionally detailed debugging data
            /// </summary>
            GIT_TRACE_TRACE = unchecked((uint)6),
        }
        
        /// <summary>
        /// No tracing will be performed.
        /// </summary>
        public const libgit2.git_trace_level_t GIT_TRACE_NONE = git_trace_level_t.GIT_TRACE_NONE;
        
        /// <summary>
        /// Severe errors that may impact the program's execution
        /// </summary>
        public const libgit2.git_trace_level_t GIT_TRACE_FATAL = git_trace_level_t.GIT_TRACE_FATAL;
        
        /// <summary>
        /// Errors that do not impact the program's execution
        /// </summary>
        public const libgit2.git_trace_level_t GIT_TRACE_ERROR = git_trace_level_t.GIT_TRACE_ERROR;
        
        /// <summary>
        /// Warnings that suggest abnormal data
        /// </summary>
        public const libgit2.git_trace_level_t GIT_TRACE_WARN = git_trace_level_t.GIT_TRACE_WARN;
        
        /// <summary>
        /// Informational messages about program execution
        /// </summary>
        public const libgit2.git_trace_level_t GIT_TRACE_INFO = git_trace_level_t.GIT_TRACE_INFO;
        
        /// <summary>
        /// Detailed data that allows for debugging
        /// </summary>
        public const libgit2.git_trace_level_t GIT_TRACE_DEBUG = git_trace_level_t.GIT_TRACE_DEBUG;
        
        /// <summary>
        /// Exceptionally detailed debugging data
        /// </summary>
        public const libgit2.git_trace_level_t GIT_TRACE_TRACE = git_trace_level_t.GIT_TRACE_TRACE;
        
        /// <summary>
        /// An instance for a tracing function
        /// </summary>
        public readonly partial struct git_trace_cb : IEquatable<libgit2.git_trace_cb>
        {
            public git_trace_cb(delegate*unmanaged[Cdecl]<libgit2.git_trace_level_t, byte*, void> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<libgit2.git_trace_level_t, byte*, void> Value { get; }
            
            public override bool Equals(object obj) => obj is git_trace_cb other && Equals(other);
            
            public bool Equals(git_trace_cb other) => Value == other.Value;
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<libgit2.git_trace_level_t, byte*, void> (libgit2.git_trace_cb from) => from.Value;
            
            public static implicit operator libgit2.git_trace_cb (delegate*unmanaged[Cdecl]<libgit2.git_trace_level_t, byte*, void> from) => new libgit2.git_trace_cb(from);
            
            public static bool operator ==(git_trace_cb left, git_trace_cb right) => left.Equals(right);
            
            public static bool operator !=(git_trace_cb left, git_trace_cb right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Sets the system tracing configuration to the specified level with the
        /// specified callback.  When system events occur at a level equal to, or
        /// lower than, the given level they will be reported to the given callback.
        /// </summary>
        /// <param name="level">Level to set tracing to</param>
        /// <param name="cb">Function to call with trace data</param>
        /// <returns>0 or an error code</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_trace_set")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_trace_set(libgit2.git_trace_level_t level, libgit2.git_trace_cb cb);
    }
}
