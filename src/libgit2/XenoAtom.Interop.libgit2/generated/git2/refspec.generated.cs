//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class libgit2
    {
        /// <summary>
        /// Parse a given refspec string
        /// </summary>
        /// <param name="refspec">a pointer to hold the refspec handle</param>
        /// <param name="input">the refspec string</param>
        /// <param name="is_fetch">is this a refspec for a fetch</param>
        /// <returns>@return 0 if the refspec string could be parsed, -1 otherwise</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_parse")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int git_refspec_parse(ref libgit2.git_refspec refspec, byte* input, int is_fetch);
        
        /// <summary>
        /// Parse a given refspec string
        /// </summary>
        /// <param name="refspec">a pointer to hold the refspec handle</param>
        /// <param name="input">the refspec string</param>
        /// <param name="is_fetch">is this a refspec for a fetch</param>
        /// <returns>@return 0 if the refspec string could be parsed, -1 otherwise</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_parse")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int git_refspec_parse(ref libgit2.git_refspec refspec, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> input, int is_fetch);
        
        /// <summary>
        /// Free a refspec object which has been created by git_refspec_parse
        /// </summary>
        /// <param name="refspec">the refspec object</param>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_free")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void git_refspec_free(libgit2.git_refspec refspec);
        
        /// <summary>
        /// Get the source specifier
        /// </summary>
        /// <param name="refspec">the refspec</param>
        /// <returns>@return the refspec's source specifier</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_src")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* git_refspec_src_(libgit2.git_refspec refspec);
        
        /// <summary>
        /// Get the source specifier
        /// </summary>
        /// <param name="refspec">the refspec</param>
        /// <returns>@return the refspec's source specifier</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_src")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string git_refspec_src(libgit2.git_refspec refspec);
        
        /// <summary>
        /// Get the destination specifier
        /// </summary>
        /// <param name="refspec">the refspec</param>
        /// <returns>@return the refspec's destination specifier</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_dst")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* git_refspec_dst_(libgit2.git_refspec refspec);
        
        /// <summary>
        /// Get the destination specifier
        /// </summary>
        /// <param name="refspec">the refspec</param>
        /// <returns>@return the refspec's destination specifier</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_dst")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string git_refspec_dst(libgit2.git_refspec refspec);
        
        /// <summary>
        /// Get the refspec's string
        /// </summary>
        /// <param name="refspec">the refspec</param>
        /// <returns>@returns the refspec's original string</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_string")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* git_refspec_string_(libgit2.git_refspec refspec);
        
        /// <summary>
        /// Get the refspec's string
        /// </summary>
        /// <param name="refspec">the refspec</param>
        /// <returns>@returns the refspec's original string</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_string")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string git_refspec_string(libgit2.git_refspec refspec);
        
        /// <summary>
        /// Get the force update setting
        /// </summary>
        /// <param name="refspec">the refspec</param>
        /// <returns>@return 1 if force update has been set, 0 otherwise</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_force")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int git_refspec_force(libgit2.git_refspec refspec);
        
        /// <summary>
        /// Get the refspec's direction.
        /// </summary>
        /// <param name="spec">refspec</param>
        /// <returns>@return GIT_DIRECTION_FETCH or GIT_DIRECTION_PUSH</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_direction")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_direction git_refspec_direction(libgit2.git_refspec spec);
        
        /// <summary>
        /// Check if a refspec's source descriptor matches a reference
        /// </summary>
        /// <param name="refspec">the refspec</param>
        /// <param name="refname">the name of the reference to check</param>
        /// <returns>@return 1 if the refspec matches, 0 otherwise</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_src_matches")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int git_refspec_src_matches(libgit2.git_refspec refspec, byte* refname);
        
        /// <summary>
        /// Check if a refspec's source descriptor matches a reference
        /// </summary>
        /// <param name="refspec">the refspec</param>
        /// <param name="refname">the name of the reference to check</param>
        /// <returns>@return 1 if the refspec matches, 0 otherwise</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_src_matches")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int git_refspec_src_matches(libgit2.git_refspec refspec, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> refname);
        
        /// <summary>
        /// Check if a refspec's destination descriptor matches a reference
        /// </summary>
        /// <param name="refspec">the refspec</param>
        /// <param name="refname">the name of the reference to check</param>
        /// <returns>@return 1 if the refspec matches, 0 otherwise</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_dst_matches")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int git_refspec_dst_matches(libgit2.git_refspec refspec, byte* refname);
        
        /// <summary>
        /// Check if a refspec's destination descriptor matches a reference
        /// </summary>
        /// <param name="refspec">the refspec</param>
        /// <param name="refname">the name of the reference to check</param>
        /// <returns>@return 1 if the refspec matches, 0 otherwise</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_dst_matches")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int git_refspec_dst_matches(libgit2.git_refspec refspec, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> refname);
        
        /// <summary>
        /// Transform a reference to its target following the refspec's rules
        /// </summary>
        /// <param name="out">where to store the target name</param>
        /// <param name="spec">the refspec</param>
        /// <param name="name">the name of the reference to transform</param>
        /// <returns>@return 0, GIT_EBUFS or another error</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_transform")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_refspec_transform(out libgit2.git_buf @out, libgit2.git_refspec spec, byte* name);
        
        /// <summary>
        /// Transform a reference to its target following the refspec's rules
        /// </summary>
        /// <param name="out">where to store the target name</param>
        /// <param name="spec">the refspec</param>
        /// <param name="name">the name of the reference to transform</param>
        /// <returns>@return 0, GIT_EBUFS or another error</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_transform")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_refspec_transform(out libgit2.git_buf @out, libgit2.git_refspec spec, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);
        
        /// <summary>
        /// Transform a target reference to its source reference following the refspec's rules
        /// </summary>
        /// <param name="out">where to store the source reference name</param>
        /// <param name="spec">the refspec</param>
        /// <param name="name">the name of the reference to transform</param>
        /// <returns>@return 0, GIT_EBUFS or another error</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_rtransform")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_refspec_rtransform(out libgit2.git_buf @out, libgit2.git_refspec spec, byte* name);
        
        /// <summary>
        /// Transform a target reference to its source reference following the refspec's rules
        /// </summary>
        /// <param name="out">where to store the source reference name</param>
        /// <param name="spec">the refspec</param>
        /// <param name="name">the name of the reference to transform</param>
        /// <returns>@return 0, GIT_EBUFS or another error</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_refspec_rtransform")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_refspec_rtransform(out libgit2.git_buf @out, libgit2.git_refspec spec, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);
    }
}
