//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class libgit2
    {
        /// <summary>
        /// Create a new transaction object
        /// </summary>
        /// <param name="out">the resulting transaction</param>
        /// <param name="repo">the repository in which to lock</param>
        /// <returns>0 or an error code</returns>
        /// <remarks>
        /// This does not lock anything, but sets up the transaction object to
        /// know from which repository to lock.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_transaction_new")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_transaction_new(out libgit2.git_transaction @out, libgit2.git_repository repo);
        
        /// <summary>
        /// Lock a reference
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <param name="refname">the reference to lock</param>
        /// <returns>0 or an error message</returns>
        /// <remarks>
        /// Lock the specified reference. This is the first step to updating a
        /// reference.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_transaction_lock_ref")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_transaction_lock_ref(libgit2.git_transaction tx, byte* refname);
        
        /// <summary>
        /// Lock a reference
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <param name="refname">the reference to lock</param>
        /// <returns>0 or an error message</returns>
        /// <remarks>
        /// Lock the specified reference. This is the first step to updating a
        /// reference.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_transaction_lock_ref")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_transaction_lock_ref(libgit2.git_transaction tx, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> refname);
        
        /// <summary>
        /// Set the target of a reference
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <param name="refname">reference to update</param>
        /// <param name="target">target to set the reference to</param>
        /// <param name="sig">signature to use in the reflog; pass NULL to read the identity from the config</param>
        /// <param name="msg">message to use in the reflog</param>
        /// <returns>0, GIT_ENOTFOUND if the reference is not among the locked ones, or an error code</returns>
        /// <remarks>
        /// Set the target of the specified reference. This reference must be
        /// locked.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_transaction_set_target")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_transaction_set_target(libgit2.git_transaction tx, byte* refname, in libgit2.git_oid target, in libgit2.git_signature sig, byte* msg);
        
        /// <summary>
        /// Set the target of a reference
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <param name="refname">reference to update</param>
        /// <param name="target">target to set the reference to</param>
        /// <param name="sig">signature to use in the reflog; pass NULL to read the identity from the config</param>
        /// <param name="msg">message to use in the reflog</param>
        /// <returns>0, GIT_ENOTFOUND if the reference is not among the locked ones, or an error code</returns>
        /// <remarks>
        /// Set the target of the specified reference. This reference must be
        /// locked.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_transaction_set_target")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_transaction_set_target(libgit2.git_transaction tx, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> refname, in libgit2.git_oid target, in libgit2.git_signature sig, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> msg);
        
        /// <summary>
        /// Set the target of a reference
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <param name="refname">reference to update</param>
        /// <param name="target">target to set the reference to</param>
        /// <param name="sig">signature to use in the reflog; pass NULL to read the identity from the config</param>
        /// <param name="msg">message to use in the reflog</param>
        /// <returns>0, GIT_ENOTFOUND if the reference is not among the locked ones, or an error code</returns>
        /// <remarks>
        /// Set the target of the specified reference. This reference must be
        /// locked.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_transaction_set_symbolic_target")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_transaction_set_symbolic_target(libgit2.git_transaction tx, byte* refname, byte* target, in libgit2.git_signature sig, byte* msg);
        
        /// <summary>
        /// Set the target of a reference
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <param name="refname">reference to update</param>
        /// <param name="target">target to set the reference to</param>
        /// <param name="sig">signature to use in the reflog; pass NULL to read the identity from the config</param>
        /// <param name="msg">message to use in the reflog</param>
        /// <returns>0, GIT_ENOTFOUND if the reference is not among the locked ones, or an error code</returns>
        /// <remarks>
        /// Set the target of the specified reference. This reference must be
        /// locked.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_transaction_set_symbolic_target")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_transaction_set_symbolic_target(libgit2.git_transaction tx, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> refname, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> target, in libgit2.git_signature sig, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> msg);
        
        /// <summary>
        /// Set the reflog of a reference
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <param name="refname">the reference whose reflog to set</param>
        /// <param name="reflog">the reflog as it should be written out</param>
        /// <returns>0, GIT_ENOTFOUND if the reference is not among the locked ones, or an error code</returns>
        /// <remarks>
        /// Set the specified reference's reflog. If this is combined with
        /// setting the target, that update won't be written to the reflog.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_transaction_set_reflog")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_transaction_set_reflog(libgit2.git_transaction tx, byte* refname, libgit2.git_reflog reflog);
        
        /// <summary>
        /// Set the reflog of a reference
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <param name="refname">the reference whose reflog to set</param>
        /// <param name="reflog">the reflog as it should be written out</param>
        /// <returns>0, GIT_ENOTFOUND if the reference is not among the locked ones, or an error code</returns>
        /// <remarks>
        /// Set the specified reference's reflog. If this is combined with
        /// setting the target, that update won't be written to the reflog.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_transaction_set_reflog")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_transaction_set_reflog(libgit2.git_transaction tx, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> refname, libgit2.git_reflog reflog);
        
        /// <summary>
        /// Remove a reference
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <param name="refname">the reference to remove</param>
        /// <returns>0, GIT_ENOTFOUND if the reference is not among the locked ones, or an error code</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_transaction_remove")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_transaction_remove(libgit2.git_transaction tx, byte* refname);
        
        /// <summary>
        /// Remove a reference
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <param name="refname">the reference to remove</param>
        /// <returns>0, GIT_ENOTFOUND if the reference is not among the locked ones, or an error code</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_transaction_remove")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_transaction_remove(libgit2.git_transaction tx, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> refname);
        
        /// <summary>
        /// Commit the changes from the transaction
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <returns>0 or an error code</returns>
        /// <remarks>
        /// Perform the changes that have been queued. The updates will be made
        /// one by one, and the first failure will stop the processing.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_transaction_commit")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_transaction_commit(libgit2.git_transaction tx);
        
        /// <summary>
        /// Free the resources allocated by this transaction
        /// </summary>
        /// <param name="tx">the transaction</param>
        /// <remarks>
        /// If any references remain locked, they will be unlocked without any
        /// changes made to them.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_transaction_free")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void git_transaction_free(libgit2.git_transaction tx);
    }
}
