//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class libgit2
    {
        /// <summary>
        /// Options for revert
        /// </summary>
        public partial struct git_revert_options
        {
            public uint version;
            
            /// <summary>
            /// For merge commits, the "mainline" is treated as the parent.
            /// </summary>
            public uint mainline;
            
            /// <summary>
            /// Options for the merging
            /// </summary>
            public libgit2.git_merge_options merge_opts;
            
            /// <summary>
            /// Options for the checkout
            /// </summary>
            public libgit2.git_checkout_options checkout_opts;
        }
        
        public const uint GIT_REVERT_OPTIONS_VERSION = 1;
        
        /// <summary>
        /// Initialize git_revert_options structure
        /// </summary>
        /// <param name="opts">The `git_revert_options` struct to initialize.</param>
        /// <param name="version">The struct version; pass `GIT_REVERT_OPTIONS_VERSION`.</param>
        /// <returns>Zero on success; -1 on failure.</returns>
        /// <remarks>
        /// Initializes a `git_revert_options` with default values. Equivalent to
        /// creating an instance with `GIT_REVERT_OPTIONS_INIT`.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_revert_options_init")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_revert_options_init(out libgit2.git_revert_options opts, uint version);
        
        /// <summary>
        /// Reverts the given commit against the given "our" commit, producing an
        /// index that reflects the result of the revert.
        /// </summary>
        /// <param name="out">pointer to store the index result in</param>
        /// <param name="repo">the repository that contains the given commits</param>
        /// <param name="revert_commit">the commit to revert</param>
        /// <param name="our_commit">the commit to revert against (eg, HEAD)</param>
        /// <param name="mainline">the parent of the revert commit, if it is a merge</param>
        /// <param name="merge_options">the merge options (or null for defaults)</param>
        /// <returns>zero on success, -1 on failure.</returns>
        /// <remarks>
        /// The returned index must be freed explicitly with `git_index_free`.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_revert_commit")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_revert_commit(out libgit2.git_index @out, libgit2.git_repository repo, libgit2.git_commit revert_commit, libgit2.git_commit our_commit, uint mainline, in libgit2.git_merge_options merge_options);
        
        /// <summary>
        /// Reverts the given commit, producing changes in the index and working directory.
        /// </summary>
        /// <param name="repo">the repository to revert</param>
        /// <param name="commit">the commit to revert</param>
        /// <param name="given_opts">the revert options (or null for defaults)</param>
        /// <returns>zero on success, -1 on failure.</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_revert")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_revert(libgit2.git_repository repo, libgit2.git_commit commit, in libgit2.git_revert_options given_opts);
    }
}
