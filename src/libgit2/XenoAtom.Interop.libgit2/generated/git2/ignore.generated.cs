//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class libgit2
    {
        /// <summary>
        /// Add ignore rules for a repository.
        /// </summary>
        /// <param name="repo">The repository to add ignore rules to.</param>
        /// <param name="rules">Text of rules, the contents to add on a .gitignore file.
        /// It is okay to have multiple rules in the text; if so,
        /// each rule should be terminated with a newline.</param>
        /// <returns>@return 0 on success</returns>
        /// <remarks>
        /// Excludesfile rules (i.e. .gitignore rules) are generally read from
        /// .gitignore files in the repository tree or from a shared system file
        /// only if a "core.excludesfile" config value is set.  The library also
        /// keeps a set of per-repository internal ignores that can be configured
        /// in-memory and will not persist.  This function allows you to add to
        /// that internal rules list.Example usage:error = git_ignore_add_rule(myrepo, "*.c\ndir/\nFile with space\n");This would add three rules to the ignores.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_ignore_add_rule")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_ignore_add_rule(libgit2.git_repository repo, byte* rules);
        
        /// <summary>
        /// Add ignore rules for a repository.
        /// </summary>
        /// <param name="repo">The repository to add ignore rules to.</param>
        /// <param name="rules">Text of rules, the contents to add on a .gitignore file.
        /// It is okay to have multiple rules in the text; if so,
        /// each rule should be terminated with a newline.</param>
        /// <returns>@return 0 on success</returns>
        /// <remarks>
        /// Excludesfile rules (i.e. .gitignore rules) are generally read from
        /// .gitignore files in the repository tree or from a shared system file
        /// only if a "core.excludesfile" config value is set.  The library also
        /// keeps a set of per-repository internal ignores that can be configured
        /// in-memory and will not persist.  This function allows you to add to
        /// that internal rules list.Example usage:error = git_ignore_add_rule(myrepo, "*.c\ndir/\nFile with space\n");This would add three rules to the ignores.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_ignore_add_rule")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_ignore_add_rule(libgit2.git_repository repo, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> rules);
        
        /// <summary>
        /// Clear ignore rules that were explicitly added.
        /// </summary>
        /// <param name="repo">The repository to remove ignore rules from.</param>
        /// <returns>@return 0 on success</returns>
        /// <remarks>
        /// Resets to the default internal ignore rules.  This will not turn off
        /// rules in .gitignore files that actually exist in the filesystem.The default internal ignores ignore ".", ".." and ".git" entries.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_ignore_clear_internal_rules")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_ignore_clear_internal_rules(libgit2.git_repository repo);
        
        /// <summary>
        /// Test if the ignore rules apply to a given path.
        /// </summary>
        /// <param name="ignored">boolean returning 0 if the file is not ignored, 1 if it is</param>
        /// <param name="repo">a repository object</param>
        /// <param name="path">the file to check ignores for, relative to the repo's workdir.</param>
        /// <returns>@return 0 if ignore rules could be processed for the file (regardless
        /// of whether it exists or not), or an error 
        /// &lt;
        /// 0 if they could not.</returns>
        /// <remarks>
        /// This function checks the ignore rules to see if they would apply to the
        /// given file.  This indicates if the file would be ignored regardless of
        /// whether the file is already in the index or committed to the repository.One way to think of this is if you were to do "git check-ignore --no-index"
        /// on the given file, would it be shown or not?
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_ignore_path_is_ignored")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_ignore_path_is_ignored(out int ignored, libgit2.git_repository repo, byte* path);
        
        /// <summary>
        /// Test if the ignore rules apply to a given path.
        /// </summary>
        /// <param name="ignored">boolean returning 0 if the file is not ignored, 1 if it is</param>
        /// <param name="repo">a repository object</param>
        /// <param name="path">the file to check ignores for, relative to the repo's workdir.</param>
        /// <returns>@return 0 if ignore rules could be processed for the file (regardless
        /// of whether it exists or not), or an error 
        /// &lt;
        /// 0 if they could not.</returns>
        /// <remarks>
        /// This function checks the ignore rules to see if they would apply to the
        /// given file.  This indicates if the file would be ignored regardless of
        /// whether the file is already in the index or committed to the repository.One way to think of this is if you were to do "git check-ignore --no-index"
        /// on the given file, would it be shown or not?
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_ignore_path_is_ignored")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_ignore_path_is_ignored(out int ignored, libgit2.git_repository repo, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path);
    }
}
