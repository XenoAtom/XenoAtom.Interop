//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class libgit2
    {
        /// <summary>
        /// Represents a single git message trailer.
        /// </summary>
        public partial struct git_message_trailer
        {
            public byte* key;
            
            public byte* value;
        }
        
        /// <summary>
        /// Represents an array of git message trailers.
        /// </summary>
        /// <remarks>
        /// Struct members under the private comment are private, subject to change
        /// and should not be used by callers.
        /// </remarks>
        public partial struct git_message_trailer_array
        {
            public libgit2.git_message_trailer* trailers;
            
            public nuint count;
            
            /// <summary>
            /// private
            /// </summary>
            public byte* _trailer_block;
        }
        
        /// <summary>
        /// Clean up excess whitespace and make sure there is a trailing newline in the message.
        /// </summary>
        /// <param name="out">The user-allocated git_buf which will be filled with the
        /// cleaned up message.</param>
        /// <param name="message">The message to be prettified.</param>
        /// <param name="strip_comments">Non-zero to remove comment lines, 0 to leave them in.</param>
        /// <param name="comment_char">Comment character. Lines starting with this character
        /// are considered to be comments and removed if `strip_comments` is non-zero.</param>
        /// <returns>0 or an error code.</returns>
        /// <remarks>
        /// Optionally, it can remove lines which start with the comment character.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_message_prettify")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_message_prettify(out libgit2.git_buf @out, byte* message, int strip_comments, byte comment_char);
        
        /// <summary>
        /// Clean up excess whitespace and make sure there is a trailing newline in the message.
        /// </summary>
        /// <param name="out">The user-allocated git_buf which will be filled with the
        /// cleaned up message.</param>
        /// <param name="message">The message to be prettified.</param>
        /// <param name="strip_comments">Non-zero to remove comment lines, 0 to leave them in.</param>
        /// <param name="comment_char">Comment character. Lines starting with this character
        /// are considered to be comments and removed if `strip_comments` is non-zero.</param>
        /// <returns>0 or an error code.</returns>
        /// <remarks>
        /// Optionally, it can remove lines which start with the comment character.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_message_prettify")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_message_prettify(out libgit2.git_buf @out, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> message, int strip_comments, byte comment_char);
        
        /// <summary>
        /// Parse trailers out of a message, filling the array pointed to by +arr+.
        /// </summary>
        /// <param name="arr">A pre-allocated git_message_trailer_array struct to be filled in
        /// with any trailers found during parsing.</param>
        /// <param name="message">The message to be parsed</param>
        /// <returns>0 on success, or non-zero on error.</returns>
        /// <remarks>
        /// Trailers are key/value pairs in the last paragraph of a message, not
        /// including any patches or conflicts that may be present.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_message_trailers")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_message_trailers(out libgit2.git_message_trailer_array arr, byte* message);
        
        /// <summary>
        /// Parse trailers out of a message, filling the array pointed to by +arr+.
        /// </summary>
        /// <param name="arr">A pre-allocated git_message_trailer_array struct to be filled in
        /// with any trailers found during parsing.</param>
        /// <param name="message">The message to be parsed</param>
        /// <returns>0 on success, or non-zero on error.</returns>
        /// <remarks>
        /// Trailers are key/value pairs in the last paragraph of a message, not
        /// including any patches or conflicts that may be present.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_message_trailers")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_message_trailers(out libgit2.git_message_trailer_array arr, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> message);
        
        /// <summary>
        /// Clean's up any allocated memory in the git_message_trailer_array filled by
        /// a call to git_message_trailers.
        /// </summary>
        /// <param name="arr">The trailer to free.</param>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_message_trailer_array_free")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial void git_message_trailer_array_free(ref libgit2.git_message_trailer_array arr);
    }
}
