//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    public static unsafe partial class libgit2
    {
        /// <summary>
        /// Callback for messages received by the transport.
        /// </summary>
        /// <param name="str">The message from the transport</param>
        /// <param name="len">The length of the message</param>
        /// <param name="payload">Payload provided by the caller</param>
        /// <remarks>
        /// Return a negative value to cancel the network operation.
        /// </remarks>
        public readonly partial struct git_transport_message_cb : IEquatable<git_transport_message_cb>
        {
            public git_transport_message_cb(delegate*unmanaged[Cdecl]<byte*, int, void*, int> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<byte*, int, void*, int> Value { get; }
            
            public bool Equals(git_transport_message_cb other) =>  Value == other.Value;
            
            public override bool Equals(object obj) => obj is git_transport_message_cb other && Equals(other);
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<byte*, int, void*, int>(git_transport_message_cb from) => from.Value;
            
            public static implicit operator git_transport_message_cb(delegate*unmanaged[Cdecl]<byte*, int, void*, int> from) => new git_transport_message_cb(from);
            
            public static bool operator ==(git_transport_message_cb left, git_transport_message_cb right) => left.Equals(right);
            
            public static bool operator !=(git_transport_message_cb left, git_transport_message_cb right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Signature of a function which creates a transport
        /// </summary>
        public readonly partial struct git_transport_cb : IEquatable<git_transport_cb>
        {
            public git_transport_cb(delegate*unmanaged[Cdecl]<libgit2.git_transport*, libgit2.git_remote, void*, int> value) => this.Value = value;
            
            public delegate*unmanaged[Cdecl]<libgit2.git_transport*, libgit2.git_remote, void*, int> Value { get; }
            
            public bool Equals(git_transport_cb other) =>  Value == other.Value;
            
            public override bool Equals(object obj) => obj is git_transport_cb other && Equals(other);
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<libgit2.git_transport*, libgit2.git_remote, void*, int>(git_transport_cb from) => from.Value;
            
            public static implicit operator git_transport_cb(delegate*unmanaged[Cdecl]<libgit2.git_transport*, libgit2.git_remote, void*, int> from) => new git_transport_cb(from);
            
            public static bool operator ==(git_transport_cb left, git_transport_cb right) => left.Equals(right);
            
            public static bool operator !=(git_transport_cb left, git_transport_cb right) => !left.Equals(right);
        }
    }
}
