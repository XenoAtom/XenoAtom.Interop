//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class libgit2
    {
        /// <summary>
        /// Kinds of reset operation
        /// </summary>
        public enum git_reset_t : uint
        {
            /// <summary>
            /// Move the head to the given commit
            /// </summary>
            GIT_RESET_SOFT = unchecked((uint)1),
            
            /// <summary>
            /// SOFT plus reset index to the commit
            /// </summary>
            GIT_RESET_MIXED = unchecked((uint)2),
            
            /// <summary>
            /// MIXED plus changes in working tree discarded
            /// </summary>
            GIT_RESET_HARD = unchecked((uint)3),
        }
        
        /// <summary>
        /// Move the head to the given commit
        /// </summary>
        public const libgit2.git_reset_t GIT_RESET_SOFT = git_reset_t.GIT_RESET_SOFT;
        
        /// <summary>
        /// SOFT plus reset index to the commit
        /// </summary>
        public const libgit2.git_reset_t GIT_RESET_MIXED = git_reset_t.GIT_RESET_MIXED;
        
        /// <summary>
        /// MIXED plus changes in working tree discarded
        /// </summary>
        public const libgit2.git_reset_t GIT_RESET_HARD = git_reset_t.GIT_RESET_HARD;
        
        /// <summary>
        /// Sets the current head to the specified commit oid and optionally
        /// resets the index and working tree to match.
        /// </summary>
        /// <param name="repo">Repository where to perform the reset operation.</param>
        /// <param name="target">Committish to which the Head should be moved to. This object
        /// must belong to the given `repo` and can either be a git_commit or a
        /// git_tag. When a git_tag is being passed, it should be dereferenceable
        /// to a git_commit which oid will be used as the target of the branch.</param>
        /// <param name="reset_type">Kind of reset operation to perform.</param>
        /// <param name="checkout_opts">Optional checkout options to be used for a HARD reset.
        /// The checkout_strategy field will be overridden (based on reset_type).
        /// This parameter can be used to propagate notify and progress callbacks.</param>
        /// <returns>@return 0 on success or an error code</returns>
        /// <remarks>
        /// SOFT reset means the Head will be moved to the commit.MIXED reset will trigger a SOFT reset, plus the index will be replaced
        /// with the content of the commit tree.HARD reset will trigger a MIXED reset and the working directory will be
        /// replaced with the content of the index.  (Untracked and ignored files
        /// will be left alone, however.)TODO: Implement remaining kinds of resets.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_reset")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_reset(libgit2.git_repository repo, libgit2.git_object target, libgit2.git_reset_t reset_type, in libgit2.git_checkout_options checkout_opts);
        
        /// <summary>
        /// Sets the current head to the specified commit oid and optionally
        /// resets the index and working tree to match.
        /// </summary>
        /// <remarks>
        /// This behaves like `git_reset()` but takes an annotated commit,
        /// which lets you specify which extended sha syntax string was
        /// specified by a user, allowing for more exact reflog messages.See the documentation for `git_reset()`.
        /// </remarks>
        /// <seealso cref="git_reset"/>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_reset_from_annotated")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial int git_reset_from_annotated(libgit2.git_repository repo, libgit2.git_annotated_commit commit, libgit2.git_reset_t reset_type, in libgit2.git_checkout_options checkout_opts);
        
        /// <summary>
        /// Updates some entries in the index from the target commit tree.
        /// </summary>
        /// <param name="repo">Repository where to perform the reset operation.</param>
        /// <param name="target">The committish which content will be used to reset the content
        /// of the index.</param>
        /// <param name="pathspecs">List of pathspecs to operate on.</param>
        /// <returns>@return 0 on success or an error code 
        /// &lt;
        /// 0</returns>
        /// <remarks>
        /// The scope of the updated entries is determined by the paths
        /// being passed in the `pathspec` parameters.Passing a NULL `target` will result in removing
        /// entries in the index matching the provided pathspecs.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_reset_default")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_reset_default(libgit2.git_repository repo, libgit2.git_object target, in libgit2.git_strarray pathspecs);
    }
}
