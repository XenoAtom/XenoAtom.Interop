//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    public static unsafe partial class libgit2
    {
        public readonly partial struct _LIBSSH2_SESSION : IEquatable<_LIBSSH2_SESSION>
        {
            public _LIBSSH2_SESSION(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(_LIBSSH2_SESSION other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is _LIBSSH2_SESSION other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(_LIBSSH2_SESSION left, _LIBSSH2_SESSION right) => left.Equals(right);
            
            public static bool operator !=(_LIBSSH2_SESSION left, _LIBSSH2_SESSION right) => !left.Equals(right);
        }
        
        public readonly partial struct _LIBSSH2_USERAUTH_KBDINT_PROMPT : IEquatable<_LIBSSH2_USERAUTH_KBDINT_PROMPT>
        {
            public _LIBSSH2_USERAUTH_KBDINT_PROMPT(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(_LIBSSH2_USERAUTH_KBDINT_PROMPT other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is _LIBSSH2_USERAUTH_KBDINT_PROMPT other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(_LIBSSH2_USERAUTH_KBDINT_PROMPT left, _LIBSSH2_USERAUTH_KBDINT_PROMPT right) => left.Equals(right);
            
            public static bool operator !=(_LIBSSH2_USERAUTH_KBDINT_PROMPT left, _LIBSSH2_USERAUTH_KBDINT_PROMPT right) => !left.Equals(right);
        }
        
        public readonly partial struct _LIBSSH2_USERAUTH_KBDINT_RESPONSE : IEquatable<_LIBSSH2_USERAUTH_KBDINT_RESPONSE>
        {
            public _LIBSSH2_USERAUTH_KBDINT_RESPONSE(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(_LIBSSH2_USERAUTH_KBDINT_RESPONSE other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is _LIBSSH2_USERAUTH_KBDINT_RESPONSE other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(_LIBSSH2_USERAUTH_KBDINT_RESPONSE left, _LIBSSH2_USERAUTH_KBDINT_RESPONSE right) => left.Equals(right);
            
            public static bool operator !=(_LIBSSH2_USERAUTH_KBDINT_RESPONSE left, _LIBSSH2_USERAUTH_KBDINT_RESPONSE right) => !left.Equals(right);
        }
        
        public readonly partial struct git_iterator : IEquatable<git_iterator>
        {
            public git_iterator(nint handle) => Handle = handle;
            
            public nint Handle { get; }
            
            public bool Equals(git_iterator other) => Handle.Equals(other.Handle);
            
            public override bool Equals(object obj) => obj is git_iterator other && Equals(other);
            
            public override int GetHashCode() => Handle.GetHashCode();
            
            public override string ToString() => "0x" + (nint.Size == 8 ? Handle.ToString("X16") : Handle.ToString("X8"));
            
            public static bool operator ==(git_iterator left, git_iterator right) => left.Equals(right);
            
            public static bool operator !=(git_iterator left, git_iterator right) => !left.Equals(right);
        }
    }
}
