//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class libgit2
    {
        /// <summary>
        /// Revparse flags.  These indicate the intended behavior of the spec passed to
        /// git_revparse.
        /// </summary>
        [Flags]
        public enum git_revspec_t : uint
        {
            /// <summary>
            /// The spec targeted a single object.
            /// </summary>
            GIT_REVSPEC_SINGLE = unchecked((uint)1<<0),
            
            /// <summary>
            /// The spec targeted a range of commits.
            /// </summary>
            GIT_REVSPEC_RANGE = unchecked((uint)1<<1),
            
            /// <summary>
            /// The spec used the '...' operator, which invokes special semantics.
            /// </summary>
            GIT_REVSPEC_MERGE_BASE = unchecked((uint)1<<2),
        }
        
        /// <summary>
        /// The spec targeted a single object.
        /// </summary>
        public const libgit2.git_revspec_t GIT_REVSPEC_SINGLE = git_revspec_t.GIT_REVSPEC_SINGLE;
        
        /// <summary>
        /// The spec targeted a range of commits.
        /// </summary>
        public const libgit2.git_revspec_t GIT_REVSPEC_RANGE = git_revspec_t.GIT_REVSPEC_RANGE;
        
        /// <summary>
        /// The spec used the '...' operator, which invokes special semantics.
        /// </summary>
        public const libgit2.git_revspec_t GIT_REVSPEC_MERGE_BASE = git_revspec_t.GIT_REVSPEC_MERGE_BASE;
        
        /// <summary>
        /// Git Revision Spec: output of a `git_revparse` operation
        /// </summary>
        public partial struct git_revspec
        {
            /// <summary>
            /// The left element of the revspec; must be freed by the user
            /// </summary>
            public libgit2.git_object from;
            
            /// <summary>
            /// The right element of the revspec; must be freed by the user
            /// </summary>
            public libgit2.git_object to;
            
            /// <summary>
            /// The intent of the revspec (i.e. `git_revspec_mode_t` flags)
            /// </summary>
            public libgit2.git_revspec_t flags;
        }
        
        /// <summary>
        /// Find a single object, as specified by a revision string.
        /// </summary>
        /// <param name="out">pointer to output object</param>
        /// <param name="repo">the repository to search in</param>
        /// <param name="spec">the textual specification for an object</param>
        /// <returns>@return 0 on success, GIT_ENOTFOUND, GIT_EAMBIGUOUS, GIT_EINVALIDSPEC or an error code</returns>
        /// <remarks>
        /// See `man gitrevisions`, or
        /// http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for
        /// information on the syntax accepted.The returned object should be released with `git_object_free` when no
        /// longer needed.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_revparse_single")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_revparse_single(out libgit2.git_object @out, libgit2.git_repository repo, byte* spec);
        
        /// <summary>
        /// Find a single object, as specified by a revision string.
        /// </summary>
        /// <param name="out">pointer to output object</param>
        /// <param name="repo">the repository to search in</param>
        /// <param name="spec">the textual specification for an object</param>
        /// <returns>@return 0 on success, GIT_ENOTFOUND, GIT_EAMBIGUOUS, GIT_EINVALIDSPEC or an error code</returns>
        /// <remarks>
        /// See `man gitrevisions`, or
        /// http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for
        /// information on the syntax accepted.The returned object should be released with `git_object_free` when no
        /// longer needed.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_revparse_single")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_revparse_single(out libgit2.git_object @out, libgit2.git_repository repo, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> spec);
        
        /// <summary>
        /// Find a single object and intermediate reference by a revision string.
        /// </summary>
        /// <param name="object_out">pointer to output object</param>
        /// <param name="reference_out">pointer to output reference or NULL</param>
        /// <param name="repo">the repository to search in</param>
        /// <param name="spec">the textual specification for an object</param>
        /// <returns>@return 0 on success, GIT_ENOTFOUND, GIT_EAMBIGUOUS, GIT_EINVALIDSPEC
        /// or an error code</returns>
        /// <remarks>
        /// See `man gitrevisions`, or
        /// http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for
        /// information on the syntax accepted.In some cases (`
        /// @
        /// {
        /// &lt;
        /// -n&gt;}` or `
        /// &lt;branchname
        /// &gt;
        /// @
        /// {upstream}`), the expression may
        /// point to an intermediate reference. When such expressions are being passed
        /// in, `reference_out` will be valued as well.The returned object should be released with `git_object_free` and the
        /// returned reference with `git_reference_free` when no longer needed.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_revparse_ext")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_revparse_ext(out libgit2.git_object object_out, out libgit2.git_reference reference_out, libgit2.git_repository repo, byte* spec);
        
        /// <summary>
        /// Find a single object and intermediate reference by a revision string.
        /// </summary>
        /// <param name="object_out">pointer to output object</param>
        /// <param name="reference_out">pointer to output reference or NULL</param>
        /// <param name="repo">the repository to search in</param>
        /// <param name="spec">the textual specification for an object</param>
        /// <returns>@return 0 on success, GIT_ENOTFOUND, GIT_EAMBIGUOUS, GIT_EINVALIDSPEC
        /// or an error code</returns>
        /// <remarks>
        /// See `man gitrevisions`, or
        /// http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for
        /// information on the syntax accepted.In some cases (`
        /// @
        /// {
        /// &lt;
        /// -n&gt;}` or `
        /// &lt;branchname
        /// &gt;
        /// @
        /// {upstream}`), the expression may
        /// point to an intermediate reference. When such expressions are being passed
        /// in, `reference_out` will be valued as well.The returned object should be released with `git_object_free` and the
        /// returned reference with `git_reference_free` when no longer needed.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_revparse_ext")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_revparse_ext(out libgit2.git_object object_out, out libgit2.git_reference reference_out, libgit2.git_repository repo, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> spec);
        
        /// <summary>
        /// Parse a revision string for `from`, `to`, and intent.
        /// </summary>
        /// <param name="revspec">Pointer to an user-allocated git_revspec struct where
        /// the result of the rev-parse will be stored</param>
        /// <param name="repo">the repository to search in</param>
        /// <param name="spec">the rev-parse spec to parse</param>
        /// <returns>@return 0 on success, GIT_INVALIDSPEC, GIT_ENOTFOUND, GIT_EAMBIGUOUS or an error code</returns>
        /// <remarks>
        /// See `man gitrevisions` or
        /// http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for
        /// information on the syntax accepted.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_revparse")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_revparse(out libgit2.git_revspec revspec, libgit2.git_repository repo, byte* spec);
        
        /// <summary>
        /// Parse a revision string for `from`, `to`, and intent.
        /// </summary>
        /// <param name="revspec">Pointer to an user-allocated git_revspec struct where
        /// the result of the rev-parse will be stored</param>
        /// <param name="repo">the repository to search in</param>
        /// <param name="spec">the rev-parse spec to parse</param>
        /// <returns>@return 0 on success, GIT_INVALIDSPEC, GIT_ENOTFOUND, GIT_EAMBIGUOUS or an error code</returns>
        /// <remarks>
        /// See `man gitrevisions` or
        /// http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for
        /// information on the syntax accepted.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_revparse")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_revparse(out libgit2.git_revspec revspec, libgit2.git_repository repo, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> spec);
    }
}
