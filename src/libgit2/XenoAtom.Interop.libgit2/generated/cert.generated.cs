//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    public static unsafe partial class libgit2
    {
        /// <summary>
        /// Type of host certificate structure that is passed to the check callback
        /// </summary>
        public enum git_cert_t : int
        {
            /// <summary>
            /// No information about the certificate is available. This may
            /// happen when using curl.
            /// </summary>
            GIT_CERT_NONE,
            
            /// <summary>
            /// The `data` argument to the callback will be a pointer to
            /// the DER-encoded data.
            /// </summary>
            GIT_CERT_X509,
            
            /// <summary>
            /// The `data` argument to the callback will be a pointer to a
            /// `git_cert_hostkey` structure.
            /// </summary>
            GIT_CERT_HOSTKEY_LIBSSH2,
            
            /// <summary>
            /// The `data` argument to the callback will be a pointer to a
            /// `git_strarray` with `name:content` strings containing
            /// information about the certificate. This is used when using
            /// curl.
            /// </summary>
            GIT_CERT_STRARRAY,
        }
        
        /// <summary>
        /// No information about the certificate is available. This may
        /// happen when using curl.
        /// </summary>
        public const libgit2.git_cert_t GIT_CERT_NONE = git_cert_t.GIT_CERT_NONE;
        
        /// <summary>
        /// The `data` argument to the callback will be a pointer to
        /// the DER-encoded data.
        /// </summary>
        public const libgit2.git_cert_t GIT_CERT_X509 = git_cert_t.GIT_CERT_X509;
        
        /// <summary>
        /// The `data` argument to the callback will be a pointer to a
        /// `git_cert_hostkey` structure.
        /// </summary>
        public const libgit2.git_cert_t GIT_CERT_HOSTKEY_LIBSSH2 = git_cert_t.GIT_CERT_HOSTKEY_LIBSSH2;
        
        /// <summary>
        /// The `data` argument to the callback will be a pointer to a
        /// `git_strarray` with `name:content` strings containing
        /// information about the certificate. This is used when using
        /// curl.
        /// </summary>
        public const libgit2.git_cert_t GIT_CERT_STRARRAY = git_cert_t.GIT_CERT_STRARRAY;
        
        /// <summary>
        /// Type of SSH host fingerprint
        /// </summary>
        [Flags]
        public enum git_cert_ssh_t : int
        {
            /// <summary>
            /// MD5 is available
            /// </summary>
            GIT_CERT_SSH_MD5 = unchecked((int)(1  << (int) 0)),
            
            /// <summary>
            /// SHA-1 is available
            /// </summary>
            GIT_CERT_SSH_SHA1 = unchecked((int)(1  << (int) 1)),
            
            /// <summary>
            /// SHA-256 is available
            /// </summary>
            GIT_CERT_SSH_SHA256 = unchecked((int)(1  << (int) 2)),
            
            /// <summary>
            /// Raw hostkey is available
            /// </summary>
            GIT_CERT_SSH_RAW = unchecked((int)(1  << (int) 3)),
        }
        
        /// <summary>
        /// MD5 is available
        /// </summary>
        public const libgit2.git_cert_ssh_t GIT_CERT_SSH_MD5 = git_cert_ssh_t.GIT_CERT_SSH_MD5;
        
        /// <summary>
        /// SHA-1 is available
        /// </summary>
        public const libgit2.git_cert_ssh_t GIT_CERT_SSH_SHA1 = git_cert_ssh_t.GIT_CERT_SSH_SHA1;
        
        /// <summary>
        /// SHA-256 is available
        /// </summary>
        public const libgit2.git_cert_ssh_t GIT_CERT_SSH_SHA256 = git_cert_ssh_t.GIT_CERT_SSH_SHA256;
        
        /// <summary>
        /// Raw hostkey is available
        /// </summary>
        public const libgit2.git_cert_ssh_t GIT_CERT_SSH_RAW = git_cert_ssh_t.GIT_CERT_SSH_RAW;
        
        public enum git_cert_ssh_raw_type_t : int
        {
            /// <summary>
            /// The raw key is of an unknown type.
            /// </summary>
            GIT_CERT_SSH_RAW_TYPE_UNKNOWN = unchecked((int)0),
            
            /// <summary>
            /// The raw key is an RSA key.
            /// </summary>
            GIT_CERT_SSH_RAW_TYPE_RSA = unchecked((int)1),
            
            /// <summary>
            /// The raw key is a DSS key.
            /// </summary>
            GIT_CERT_SSH_RAW_TYPE_DSS = unchecked((int)2),
            
            /// <summary>
            /// The raw key is a ECDSA 256 key.
            /// </summary>
            GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_256 = unchecked((int)3),
            
            /// <summary>
            /// The raw key is a ECDSA 384 key.
            /// </summary>
            GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_384 = unchecked((int)4),
            
            /// <summary>
            /// The raw key is a ECDSA 521 key.
            /// </summary>
            GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_521 = unchecked((int)5),
            
            /// <summary>
            /// The raw key is a ED25519 key.
            /// </summary>
            GIT_CERT_SSH_RAW_TYPE_KEY_ED25519 = unchecked((int)6),
        }
        
        /// <summary>
        /// The raw key is of an unknown type.
        /// </summary>
        public const libgit2.git_cert_ssh_raw_type_t GIT_CERT_SSH_RAW_TYPE_UNKNOWN = git_cert_ssh_raw_type_t.GIT_CERT_SSH_RAW_TYPE_UNKNOWN;
        
        /// <summary>
        /// The raw key is an RSA key.
        /// </summary>
        public const libgit2.git_cert_ssh_raw_type_t GIT_CERT_SSH_RAW_TYPE_RSA = git_cert_ssh_raw_type_t.GIT_CERT_SSH_RAW_TYPE_RSA;
        
        /// <summary>
        /// The raw key is a DSS key.
        /// </summary>
        public const libgit2.git_cert_ssh_raw_type_t GIT_CERT_SSH_RAW_TYPE_DSS = git_cert_ssh_raw_type_t.GIT_CERT_SSH_RAW_TYPE_DSS;
        
        /// <summary>
        /// The raw key is a ECDSA 256 key.
        /// </summary>
        public const libgit2.git_cert_ssh_raw_type_t GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_256 = git_cert_ssh_raw_type_t.GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_256;
        
        /// <summary>
        /// The raw key is a ECDSA 384 key.
        /// </summary>
        public const libgit2.git_cert_ssh_raw_type_t GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_384 = git_cert_ssh_raw_type_t.GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_384;
        
        /// <summary>
        /// The raw key is a ECDSA 521 key.
        /// </summary>
        public const libgit2.git_cert_ssh_raw_type_t GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_521 = git_cert_ssh_raw_type_t.GIT_CERT_SSH_RAW_TYPE_KEY_ECDSA_521;
        
        /// <summary>
        /// The raw key is a ED25519 key.
        /// </summary>
        public const libgit2.git_cert_ssh_raw_type_t GIT_CERT_SSH_RAW_TYPE_KEY_ED25519 = git_cert_ssh_raw_type_t.GIT_CERT_SSH_RAW_TYPE_KEY_ED25519;
        
        /// <summary>
        /// Hostkey information taken from libssh2
        /// </summary>
        public unsafe partial struct git_cert_hostkey
        {
            /// <summary>
            /// The parent cert
            /// </summary>
            public libgit2.git_cert parent;
            
            /// <summary>
            /// A bitmask containing the available fields.
            /// </summary>
            public libgit2.git_cert_ssh_t type;
            
            /// <summary>
            /// Hostkey hash. If `type` has `GIT_CERT_SSH_MD5` set, this will
            /// have the MD5 hash of the hostkey.
            /// </summary>
            public fixed byte hash_md5[16];
            
            /// <summary>
            /// Hostkey hash. If `type` has `GIT_CERT_SSH_SHA1` set, this will
            /// have the SHA-1 hash of the hostkey.
            /// </summary>
            public fixed byte hash_sha1[20];
            
            /// <summary>
            /// Hostkey hash. If `type` has `GIT_CERT_SSH_SHA256` set, this will
            /// have the SHA-256 hash of the hostkey.
            /// </summary>
            public fixed byte hash_sha256[32];
            
            /// <summary>
            /// Raw hostkey type. If `type` has `GIT_CERT_SSH_RAW` set, this will
            /// have the type of the raw hostkey.
            /// </summary>
            public libgit2.git_cert_ssh_raw_type_t raw_type;
            
            /// <summary>
            /// Pointer to the raw hostkey. If `type` has `GIT_CERT_SSH_RAW` set,
            /// this will have the raw contents of the hostkey.
            /// </summary>
            public readonly byte* hostkey;
            
            /// <summary>
            /// Raw hostkey length. If `type` has `GIT_CERT_SSH_RAW` set, this will
            /// have the length of the raw contents of the hostkey.
            /// </summary>
            public libgit2.size_t hostkey_len;
        }
        
        /// <summary>
        /// X.509 certificate information
        /// </summary>
        public partial struct git_cert_x509
        {
            /// <summary>
            /// The parent cert
            /// </summary>
            public libgit2.git_cert parent;
            
            /// <summary>
            /// Pointer to the X.509 certificate data
            /// </summary>
            public void* data;
            
            /// <summary>
            /// Length of the memory block pointed to by `data`.
            /// </summary>
            public libgit2.size_t len;
        }
        
        /// <summary>
        /// Callback for the user's custom certificate checks.
        /// </summary>
        /// <param name="cert">The host certificate</param>
        /// <param name="valid">Whether the libgit2 checks (OpenSSL or WinHTTP) think
        /// this certificate is valid</param>
        /// <param name="host">Hostname of the host libgit2 connected to</param>
        /// <param name="payload">Payload provided by the caller</param>
        /// <returns>@return 0 to proceed with the connection, 
        /// &lt;
        /// 0 to fail the connection
        /// or &gt; 0 to indicate that the callback refused to act and that
        /// the existing validity determination should be honored</returns>
        public readonly partial struct git_transport_certificate_check_cb : IEquatable<git_transport_certificate_check_cb>
        {
            public git_transport_certificate_check_cb(delegate*unmanaged[Cdecl]<libgit2.git_cert*, int, byte*, void*, int>* value) => this.Value = value;
            
            public readonly delegate*unmanaged[Cdecl]<libgit2.git_cert*, int, byte*, void*, int>* Value;
            
            public bool Equals(git_transport_certificate_check_cb other) =>  Value == other.Value;
            
            public override bool Equals(object obj) => obj is git_transport_certificate_check_cb other && Equals(other);
            
            public override int GetHashCode() => ((nint)(void*)Value).GetHashCode();
            
            public override string ToString() => ((nint)(void*)Value).ToString();
            
            public static implicit operator delegate*unmanaged[Cdecl]<libgit2.git_cert*, int, byte*, void*, int>*(git_transport_certificate_check_cb from) => from.Value;
            
            public static implicit operator git_transport_certificate_check_cb(delegate*unmanaged[Cdecl]<libgit2.git_cert*, int, byte*, void*, int>* from) => new git_transport_certificate_check_cb(from);
            
            public static bool operator ==(git_transport_certificate_check_cb left, git_transport_certificate_check_cb right) => left.Equals(right);
            
            public static bool operator !=(git_transport_certificate_check_cb left, git_transport_certificate_check_cb right) => !left.Equals(right);
        }
    }
}
