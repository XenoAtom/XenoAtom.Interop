//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class libgit2
    {
        /// <summary>
        /// Combinations of these values describe the features with which libgit2
        /// was compiled
        /// </summary>
        [Flags]
        public enum git_feature_t : int
        {
            /// <summary>
            /// If set, libgit2 was built thread-aware and can be safely used from multiple
            /// threads.
            /// </summary>
            GIT_FEATURE_THREADS = unchecked((int)(1  << (int) 0)),
            
            /// <summary>
            /// If set, libgit2 was built with and linked against a TLS implementation.
            /// Custom TLS streams may still be added by the user to support HTTPS
            /// regardless of this.
            /// </summary>
            GIT_FEATURE_HTTPS = unchecked((int)(1  << (int) 1)),
            
            /// <summary>
            /// If set, libgit2 was built with and linked against libssh2. A custom
            /// transport may still be added by the user to support libssh2 regardless of
            /// this.
            /// </summary>
            GIT_FEATURE_SSH = unchecked((int)(1  << (int) 2)),
            
            /// <summary>
            /// If set, libgit2 was built with support for sub-second resolution in file
            /// modification times.
            /// </summary>
            GIT_FEATURE_NSEC = unchecked((int)(1  << (int) 3)),
        }
        
        /// <summary>
        /// If set, libgit2 was built thread-aware and can be safely used from multiple
        /// threads.
        /// </summary>
        public const libgit2.git_feature_t GIT_FEATURE_THREADS = git_feature_t.GIT_FEATURE_THREADS;
        
        /// <summary>
        /// If set, libgit2 was built with and linked against a TLS implementation.
        /// Custom TLS streams may still be added by the user to support HTTPS
        /// regardless of this.
        /// </summary>
        public const libgit2.git_feature_t GIT_FEATURE_HTTPS = git_feature_t.GIT_FEATURE_HTTPS;
        
        /// <summary>
        /// If set, libgit2 was built with and linked against libssh2. A custom
        /// transport may still be added by the user to support libssh2 regardless of
        /// this.
        /// </summary>
        public const libgit2.git_feature_t GIT_FEATURE_SSH = git_feature_t.GIT_FEATURE_SSH;
        
        /// <summary>
        /// If set, libgit2 was built with support for sub-second resolution in file
        /// modification times.
        /// </summary>
        public const libgit2.git_feature_t GIT_FEATURE_NSEC = git_feature_t.GIT_FEATURE_NSEC;
        
        /// <summary>
        /// Global library options
        /// </summary>
        /// <remarks>
        /// These are used to select which global option to set or get and are
        /// used in `git_libgit2_opts()`.
        /// </remarks>
        public enum git_libgit2_opt_t : int
        {
            GIT_OPT_GET_MWINDOW_SIZE,
            
            GIT_OPT_SET_MWINDOW_SIZE,
            
            GIT_OPT_GET_MWINDOW_MAPPED_LIMIT,
            
            GIT_OPT_SET_MWINDOW_MAPPED_LIMIT,
            
            GIT_OPT_GET_SEARCH_PATH,
            
            GIT_OPT_SET_SEARCH_PATH,
            
            GIT_OPT_SET_CACHE_OBJECT_LIMIT,
            
            GIT_OPT_SET_CACHE_MAX_SIZE,
            
            GIT_OPT_ENABLE_CACHING,
            
            GIT_OPT_GET_CACHED_MEMORY,
            
            GIT_OPT_GET_TEMPLATE_PATH,
            
            GIT_OPT_SET_TEMPLATE_PATH,
            
            GIT_OPT_SET_SSL_CERT_LOCATIONS,
            
            GIT_OPT_SET_USER_AGENT,
            
            GIT_OPT_ENABLE_STRICT_OBJECT_CREATION,
            
            GIT_OPT_ENABLE_STRICT_SYMBOLIC_REF_CREATION,
            
            GIT_OPT_SET_SSL_CIPHERS,
            
            GIT_OPT_GET_USER_AGENT,
            
            GIT_OPT_ENABLE_OFS_DELTA,
            
            GIT_OPT_ENABLE_FSYNC_GITDIR,
            
            GIT_OPT_GET_WINDOWS_SHAREMODE,
            
            GIT_OPT_SET_WINDOWS_SHAREMODE,
            
            GIT_OPT_ENABLE_STRICT_HASH_VERIFICATION,
            
            GIT_OPT_SET_ALLOCATOR,
            
            GIT_OPT_ENABLE_UNSAVED_INDEX_SAFETY,
            
            GIT_OPT_GET_PACK_MAX_OBJECTS,
            
            GIT_OPT_SET_PACK_MAX_OBJECTS,
            
            GIT_OPT_DISABLE_PACK_KEEP_FILE_CHECKS,
            
            GIT_OPT_ENABLE_HTTP_EXPECT_CONTINUE,
            
            GIT_OPT_GET_MWINDOW_FILE_LIMIT,
            
            GIT_OPT_SET_MWINDOW_FILE_LIMIT,
            
            GIT_OPT_SET_ODB_PACKED_PRIORITY,
            
            GIT_OPT_SET_ODB_LOOSE_PRIORITY,
            
            GIT_OPT_GET_EXTENSIONS,
            
            GIT_OPT_SET_EXTENSIONS,
            
            GIT_OPT_GET_OWNER_VALIDATION,
            
            GIT_OPT_SET_OWNER_VALIDATION,
            
            GIT_OPT_GET_HOMEDIR,
            
            GIT_OPT_SET_HOMEDIR,
            
            GIT_OPT_SET_SERVER_CONNECT_TIMEOUT,
            
            GIT_OPT_GET_SERVER_CONNECT_TIMEOUT,
            
            GIT_OPT_SET_SERVER_TIMEOUT,
            
            GIT_OPT_GET_SERVER_TIMEOUT,
        }
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_GET_MWINDOW_SIZE = git_libgit2_opt_t.GIT_OPT_GET_MWINDOW_SIZE;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_MWINDOW_SIZE = git_libgit2_opt_t.GIT_OPT_SET_MWINDOW_SIZE;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_GET_MWINDOW_MAPPED_LIMIT = git_libgit2_opt_t.GIT_OPT_GET_MWINDOW_MAPPED_LIMIT;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_MWINDOW_MAPPED_LIMIT = git_libgit2_opt_t.GIT_OPT_SET_MWINDOW_MAPPED_LIMIT;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_GET_SEARCH_PATH = git_libgit2_opt_t.GIT_OPT_GET_SEARCH_PATH;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_SEARCH_PATH = git_libgit2_opt_t.GIT_OPT_SET_SEARCH_PATH;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_CACHE_OBJECT_LIMIT = git_libgit2_opt_t.GIT_OPT_SET_CACHE_OBJECT_LIMIT;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_CACHE_MAX_SIZE = git_libgit2_opt_t.GIT_OPT_SET_CACHE_MAX_SIZE;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_ENABLE_CACHING = git_libgit2_opt_t.GIT_OPT_ENABLE_CACHING;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_GET_CACHED_MEMORY = git_libgit2_opt_t.GIT_OPT_GET_CACHED_MEMORY;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_GET_TEMPLATE_PATH = git_libgit2_opt_t.GIT_OPT_GET_TEMPLATE_PATH;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_TEMPLATE_PATH = git_libgit2_opt_t.GIT_OPT_SET_TEMPLATE_PATH;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_SSL_CERT_LOCATIONS = git_libgit2_opt_t.GIT_OPT_SET_SSL_CERT_LOCATIONS;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_USER_AGENT = git_libgit2_opt_t.GIT_OPT_SET_USER_AGENT;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_ENABLE_STRICT_OBJECT_CREATION = git_libgit2_opt_t.GIT_OPT_ENABLE_STRICT_OBJECT_CREATION;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_ENABLE_STRICT_SYMBOLIC_REF_CREATION = git_libgit2_opt_t.GIT_OPT_ENABLE_STRICT_SYMBOLIC_REF_CREATION;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_SSL_CIPHERS = git_libgit2_opt_t.GIT_OPT_SET_SSL_CIPHERS;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_GET_USER_AGENT = git_libgit2_opt_t.GIT_OPT_GET_USER_AGENT;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_ENABLE_OFS_DELTA = git_libgit2_opt_t.GIT_OPT_ENABLE_OFS_DELTA;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_ENABLE_FSYNC_GITDIR = git_libgit2_opt_t.GIT_OPT_ENABLE_FSYNC_GITDIR;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_GET_WINDOWS_SHAREMODE = git_libgit2_opt_t.GIT_OPT_GET_WINDOWS_SHAREMODE;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_WINDOWS_SHAREMODE = git_libgit2_opt_t.GIT_OPT_SET_WINDOWS_SHAREMODE;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_ENABLE_STRICT_HASH_VERIFICATION = git_libgit2_opt_t.GIT_OPT_ENABLE_STRICT_HASH_VERIFICATION;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_ALLOCATOR = git_libgit2_opt_t.GIT_OPT_SET_ALLOCATOR;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_ENABLE_UNSAVED_INDEX_SAFETY = git_libgit2_opt_t.GIT_OPT_ENABLE_UNSAVED_INDEX_SAFETY;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_GET_PACK_MAX_OBJECTS = git_libgit2_opt_t.GIT_OPT_GET_PACK_MAX_OBJECTS;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_PACK_MAX_OBJECTS = git_libgit2_opt_t.GIT_OPT_SET_PACK_MAX_OBJECTS;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_DISABLE_PACK_KEEP_FILE_CHECKS = git_libgit2_opt_t.GIT_OPT_DISABLE_PACK_KEEP_FILE_CHECKS;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_ENABLE_HTTP_EXPECT_CONTINUE = git_libgit2_opt_t.GIT_OPT_ENABLE_HTTP_EXPECT_CONTINUE;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_GET_MWINDOW_FILE_LIMIT = git_libgit2_opt_t.GIT_OPT_GET_MWINDOW_FILE_LIMIT;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_MWINDOW_FILE_LIMIT = git_libgit2_opt_t.GIT_OPT_SET_MWINDOW_FILE_LIMIT;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_ODB_PACKED_PRIORITY = git_libgit2_opt_t.GIT_OPT_SET_ODB_PACKED_PRIORITY;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_ODB_LOOSE_PRIORITY = git_libgit2_opt_t.GIT_OPT_SET_ODB_LOOSE_PRIORITY;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_GET_EXTENSIONS = git_libgit2_opt_t.GIT_OPT_GET_EXTENSIONS;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_EXTENSIONS = git_libgit2_opt_t.GIT_OPT_SET_EXTENSIONS;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_GET_OWNER_VALIDATION = git_libgit2_opt_t.GIT_OPT_GET_OWNER_VALIDATION;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_OWNER_VALIDATION = git_libgit2_opt_t.GIT_OPT_SET_OWNER_VALIDATION;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_GET_HOMEDIR = git_libgit2_opt_t.GIT_OPT_GET_HOMEDIR;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_HOMEDIR = git_libgit2_opt_t.GIT_OPT_SET_HOMEDIR;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_SERVER_CONNECT_TIMEOUT = git_libgit2_opt_t.GIT_OPT_SET_SERVER_CONNECT_TIMEOUT;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_GET_SERVER_CONNECT_TIMEOUT = git_libgit2_opt_t.GIT_OPT_GET_SERVER_CONNECT_TIMEOUT;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_SET_SERVER_TIMEOUT = git_libgit2_opt_t.GIT_OPT_SET_SERVER_TIMEOUT;
        
        public const libgit2.git_libgit2_opt_t GIT_OPT_GET_SERVER_TIMEOUT = git_libgit2_opt_t.GIT_OPT_GET_SERVER_TIMEOUT;
        
        /// <summary>
        /// Return the version of the libgit2 library
        /// being currently used.
        /// </summary>
        /// <param name="major">Store the major version number</param>
        /// <param name="minor">Store the minor version number</param>
        /// <param name="rev">Store the revision (patch) number</param>
        /// <returns>@return 0 on success or an error code on failure</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_libgit2_version")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_libgit2_version(out int major, out int minor, out int rev);
        
        /// <summary>
        /// Return the prerelease state of the libgit2 library currently being
        /// used.  For nightly builds during active development, this will be
        /// "alpha".  Releases may have a "beta" or release candidate ("rc1",
        /// "rc2", etc) prerelease.  For a final release, this function returns
        /// NULL.
        /// </summary>
        /// <returns>@return the name of the prerelease state or NULL</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_libgit2_prerelease")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial byte* git_libgit2_prerelease();
        
        /// <summary>
        /// Return the prerelease state of the libgit2 library currently being
        /// used.  For nightly builds during active development, this will be
        /// "alpha".  Releases may have a "beta" or release candidate ("rc1",
        /// "rc2", etc) prerelease.  For a final release, this function returns
        /// NULL.
        /// </summary>
        /// <returns>@return the name of the prerelease state or NULL</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_libgit2_prerelease")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        [return:global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))]
        public static partial string git_libgit2_prerelease_string();
        
        /// <summary>
        /// Query compile time options for libgit2.
        /// </summary>
        /// <returns>@return A combination of GIT_FEATURE_* values.</returns>
        /// <remarks>
        /// - GIT_FEATURE_THREADS
        /// Libgit2 was compiled with thread support. Note that thread support is
        /// still to be seen as a 'work in progress' - basic object lookups are
        /// believed to be threadsafe, but other operations may not be.- GIT_FEATURE_HTTPS
        /// Libgit2 supports the https:// protocol. This requires the openssl
        /// library to be found when compiling libgit2.- GIT_FEATURE_SSH
        /// Libgit2 supports the SSH protocol for network operations. This requires
        /// the libssh2 library to be found when compiling libgit2- GIT_FEATURE_NSEC
        /// Libgit2 supports the sub-second resolution in file modification times.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_libgit2_features")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_feature_t git_libgit2_features();
    }
}
