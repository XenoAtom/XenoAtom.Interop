//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class libgit2
    {
        /// <summary>
        /// Count the number of unique commits between two commit objects
        /// </summary>
        /// <param name="ahead">number of unique from commits in `upstream`</param>
        /// <param name="behind">number of unique from commits in `local`</param>
        /// <param name="repo">the repository where the commits exist</param>
        /// <param name="local">the commit for local</param>
        /// <param name="upstream">the commit for upstream</param>
        /// <returns>@return 0 or an error code.</returns>
        /// <remarks>
        /// There is no need for branches containing the commits to have any
        /// upstream relationship, but it helps to think of one as a branch and
        /// the other as its upstream, the `ahead` and `behind` values will be
        /// what git would report for the branches.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_graph_ahead_behind")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_graph_ahead_behind(out libgit2.size_t ahead, out libgit2.size_t behind, libgit2.git_repository repo, in libgit2.git_oid local, in libgit2.git_oid upstream);
        
        /// <summary>
        /// Determine if a commit is the descendant of another commit.
        /// </summary>
        /// <param name="repo">the repository where the commits exist</param>
        /// <param name="commit">a previously loaded commit</param>
        /// <param name="ancestor">a potential ancestor commit</param>
        /// <returns>@return 1 if the given commit is a descendant of the potential ancestor,
        /// 0 if not, error code otherwise.</returns>
        /// <remarks>
        /// Note that a commit is not considered a descendant of itself, in contrast
        /// to `git merge-base --is-ancestor`.
        /// </remarks>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_graph_descendant_of")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_graph_descendant_of(libgit2.git_repository repo, in libgit2.git_oid commit, in libgit2.git_oid ancestor);
        
        /// <summary>
        /// Determine if a commit is reachable from any of a list of commits by
        /// following parent edges.
        /// </summary>
        /// <param name="repo">the repository where the commits exist</param>
        /// <param name="commit">a previously loaded commit</param>
        /// <param name="length">the number of commits in the provided `descendant_array`</param>
        /// <param name="descendant_array">oids of the commits</param>
        /// <returns>@return 1 if the given commit is an ancestor of any of the given potential
        /// descendants, 0 if not, error code otherwise.</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_graph_reachable_from_any")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_graph_reachable_from_any(libgit2.git_repository repo, in libgit2.git_oid commit, libgit2.git_oid* descendant_array, libgit2.size_t length);
    }
}
