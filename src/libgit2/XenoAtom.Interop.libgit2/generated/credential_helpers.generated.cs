//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XenoAtom.Interop
{
    using System.Runtime.InteropServices;
    
    using System.Runtime.CompilerServices;
    
    public static unsafe partial class libgit2
    {
        /// <summary>
        /// Payload for git_credential_userpass_plaintext.
        /// </summary>
        public partial struct git_credential_userpass_payload
        {
            public byte* username;
            
            public byte* password;
        }
        
        /// <summary>
        /// Stock callback usable as a git_credential_acquire_cb.  This calls
        /// git_cred_userpass_plaintext_new unless the protocol has not specified
        /// `GIT_CREDENTIAL_USERPASS_PLAINTEXT` as an allowed type.
        /// </summary>
        /// <param name="out">The newly created credential object.</param>
        /// <param name="url">The resource for which we are demanding a credential.</param>
        /// <param name="user_from_url">The username that was embedded in a "user\@host"
        /// remote url, or NULL if not included.</param>
        /// <param name="allowed_types">A bitmask stating which credential types are OK to return.</param>
        /// <param name="payload">The payload provided when specifying this callback.  (This is
        /// interpreted as a `git_credential_userpass_payload*`.)</param>
        /// <returns>@return 0 or an error code.</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_credential_userpass")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_credential_userpass(out libgit2.git_credential @out, byte* url, byte* user_from_url, uint allowed_types, void* payload);
        
        /// <summary>
        /// Stock callback usable as a git_credential_acquire_cb.  This calls
        /// git_cred_userpass_plaintext_new unless the protocol has not specified
        /// `GIT_CREDENTIAL_USERPASS_PLAINTEXT` as an allowed type.
        /// </summary>
        /// <param name="out">The newly created credential object.</param>
        /// <param name="url">The resource for which we are demanding a credential.</param>
        /// <param name="user_from_url">The username that was embedded in a "user\@host"
        /// remote url, or NULL if not included.</param>
        /// <param name="allowed_types">A bitmask stating which credential types are OK to return.</param>
        /// <param name="payload">The payload provided when specifying this callback.  (This is
        /// interpreted as a `git_credential_userpass_payload*`.)</param>
        /// <returns>@return 0 or an error code.</returns>
        [global::System.Runtime.InteropServices.LibraryImport(LibraryName, EntryPoint = "git_credential_userpass")]
        [UnmanagedCallConv(CallConvs = new Type[] { typeof(CallConvCdecl) })]
        public static partial libgit2.git_result git_credential_userpass(out libgit2.git_credential @out, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> url, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> user_from_url, uint allowed_types, void* payload);
    }
}
